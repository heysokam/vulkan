pub const __builtin_bswap16 = @import("std").zig.c_builtins.__builtin_bswap16;
pub const __builtin_bswap32 = @import("std").zig.c_builtins.__builtin_bswap32;
pub const __builtin_bswap64 = @import("std").zig.c_builtins.__builtin_bswap64;
pub const __builtin_signbit = @import("std").zig.c_builtins.__builtin_signbit;
pub const __builtin_signbitf = @import("std").zig.c_builtins.__builtin_signbitf;
pub const __builtin_popcount = @import("std").zig.c_builtins.__builtin_popcount;
pub const __builtin_ctz = @import("std").zig.c_builtins.__builtin_ctz;
pub const __builtin_clz = @import("std").zig.c_builtins.__builtin_clz;
pub const __builtin_sqrt = @import("std").zig.c_builtins.__builtin_sqrt;
pub const __builtin_sqrtf = @import("std").zig.c_builtins.__builtin_sqrtf;
pub const __builtin_sin = @import("std").zig.c_builtins.__builtin_sin;
pub const __builtin_sinf = @import("std").zig.c_builtins.__builtin_sinf;
pub const __builtin_cos = @import("std").zig.c_builtins.__builtin_cos;
pub const __builtin_cosf = @import("std").zig.c_builtins.__builtin_cosf;
pub const __builtin_exp = @import("std").zig.c_builtins.__builtin_exp;
pub const __builtin_expf = @import("std").zig.c_builtins.__builtin_expf;
pub const __builtin_exp2 = @import("std").zig.c_builtins.__builtin_exp2;
pub const __builtin_exp2f = @import("std").zig.c_builtins.__builtin_exp2f;
pub const __builtin_log = @import("std").zig.c_builtins.__builtin_log;
pub const __builtin_logf = @import("std").zig.c_builtins.__builtin_logf;
pub const __builtin_log2 = @import("std").zig.c_builtins.__builtin_log2;
pub const __builtin_log2f = @import("std").zig.c_builtins.__builtin_log2f;
pub const __builtin_log10 = @import("std").zig.c_builtins.__builtin_log10;
pub const __builtin_log10f = @import("std").zig.c_builtins.__builtin_log10f;
pub const __builtin_abs = @import("std").zig.c_builtins.__builtin_abs;
pub const __builtin_labs = @import("std").zig.c_builtins.__builtin_labs;
pub const __builtin_llabs = @import("std").zig.c_builtins.__builtin_llabs;
pub const __builtin_fabs = @import("std").zig.c_builtins.__builtin_fabs;
pub const __builtin_fabsf = @import("std").zig.c_builtins.__builtin_fabsf;
pub const __builtin_floor = @import("std").zig.c_builtins.__builtin_floor;
pub const __builtin_floorf = @import("std").zig.c_builtins.__builtin_floorf;
pub const __builtin_ceil = @import("std").zig.c_builtins.__builtin_ceil;
pub const __builtin_ceilf = @import("std").zig.c_builtins.__builtin_ceilf;
pub const __builtin_trunc = @import("std").zig.c_builtins.__builtin_trunc;
pub const __builtin_truncf = @import("std").zig.c_builtins.__builtin_truncf;
pub const __builtin_round = @import("std").zig.c_builtins.__builtin_round;
pub const __builtin_roundf = @import("std").zig.c_builtins.__builtin_roundf;
pub const __builtin_strlen = @import("std").zig.c_builtins.__builtin_strlen;
pub const __builtin_strcmp = @import("std").zig.c_builtins.__builtin_strcmp;
pub const __builtin_object_size = @import("std").zig.c_builtins.__builtin_object_size;
pub const __builtin___memset_chk = @import("std").zig.c_builtins.__builtin___memset_chk;
pub const __builtin_memset = @import("std").zig.c_builtins.__builtin_memset;
pub const __builtin___memcpy_chk = @import("std").zig.c_builtins.__builtin___memcpy_chk;
pub const __builtin_memcpy = @import("std").zig.c_builtins.__builtin_memcpy;
pub const __builtin_expect = @import("std").zig.c_builtins.__builtin_expect;
pub const __builtin_nanf = @import("std").zig.c_builtins.__builtin_nanf;
pub const __builtin_huge_valf = @import("std").zig.c_builtins.__builtin_huge_valf;
pub const __builtin_inff = @import("std").zig.c_builtins.__builtin_inff;
pub const __builtin_isnan = @import("std").zig.c_builtins.__builtin_isnan;
pub const __builtin_isinf = @import("std").zig.c_builtins.__builtin_isinf;
pub const __builtin_isinf_sign = @import("std").zig.c_builtins.__builtin_isinf_sign;
pub const __has_builtin = @import("std").zig.c_builtins.__has_builtin;
pub const __builtin_assume = @import("std").zig.c_builtins.__builtin_assume;
pub const __builtin_unreachable = @import("std").zig.c_builtins.__builtin_unreachable;
pub const __builtin_constant_p = @import("std").zig.c_builtins.__builtin_constant_p;
pub const __builtin_mul_overflow = @import("std").zig.c_builtins.__builtin_mul_overflow;
pub const ptrdiff_t = c_long;
pub const wchar_t = c_int;
pub const max_align_t = extern struct {
    __clang_max_align_nonce1: c_longlong align(8) = @import("std").mem.zeroes(c_longlong),
    __clang_max_align_nonce2: c_longdouble align(16) = @import("std").mem.zeroes(c_longdouble),
};
pub const __u_char = u8;
pub const __u_short = c_ushort;
pub const __u_int = c_uint;
pub const __u_long = c_ulong;
pub const __int8_t = i8;
pub const __uint8_t = u8;
pub const __int16_t = c_short;
pub const __uint16_t = c_ushort;
pub const __int32_t = c_int;
pub const __uint32_t = c_uint;
pub const __int64_t = c_long;
pub const __uint64_t = c_ulong;
pub const __int_least8_t = __int8_t;
pub const __uint_least8_t = __uint8_t;
pub const __int_least16_t = __int16_t;
pub const __uint_least16_t = __uint16_t;
pub const __int_least32_t = __int32_t;
pub const __uint_least32_t = __uint32_t;
pub const __int_least64_t = __int64_t;
pub const __uint_least64_t = __uint64_t;
pub const __quad_t = c_long;
pub const __u_quad_t = c_ulong;
pub const __intmax_t = c_long;
pub const __uintmax_t = c_ulong;
pub const __dev_t = c_ulong;
pub const __uid_t = c_uint;
pub const __gid_t = c_uint;
pub const __ino_t = c_ulong;
pub const __ino64_t = c_ulong;
pub const __mode_t = c_uint;
pub const __nlink_t = c_ulong;
pub const __off_t = c_long;
pub const __off64_t = c_long;
pub const __pid_t = c_int;
pub const __fsid_t = extern struct {
    __val: [2]c_int = @import("std").mem.zeroes([2]c_int),
};
pub const __clock_t = c_long;
pub const __rlim_t = c_ulong;
pub const __rlim64_t = c_ulong;
pub const __id_t = c_uint;
pub const __time_t = c_long;
pub const __useconds_t = c_uint;
pub const __suseconds_t = c_long;
pub const __suseconds64_t = c_long;
pub const __daddr_t = c_int;
pub const __key_t = c_int;
pub const __clockid_t = c_int;
pub const __timer_t = ?*anyopaque;
pub const __blksize_t = c_long;
pub const __blkcnt_t = c_long;
pub const __blkcnt64_t = c_long;
pub const __fsblkcnt_t = c_ulong;
pub const __fsblkcnt64_t = c_ulong;
pub const __fsfilcnt_t = c_ulong;
pub const __fsfilcnt64_t = c_ulong;
pub const __fsword_t = c_long;
pub const __ssize_t = c_long;
pub const __syscall_slong_t = c_long;
pub const __syscall_ulong_t = c_ulong;
pub const __loff_t = __off64_t;
pub const __caddr_t = [*c]u8;
pub const __intptr_t = c_long;
pub const __socklen_t = c_uint;
pub const __sig_atomic_t = c_int;
pub const int_least8_t = __int_least8_t;
pub const int_least16_t = __int_least16_t;
pub const int_least32_t = __int_least32_t;
pub const int_least64_t = __int_least64_t;
pub const uint_least8_t = __uint_least8_t;
pub const uint_least16_t = __uint_least16_t;
pub const uint_least32_t = __uint_least32_t;
pub const uint_least64_t = __uint_least64_t;
pub const int_fast8_t = i8;
pub const int_fast16_t = c_long;
pub const int_fast32_t = c_long;
pub const int_fast64_t = c_long;
pub const uint_fast8_t = u8;
pub const uint_fast16_t = c_ulong;
pub const uint_fast32_t = c_ulong;
pub const uint_fast64_t = c_ulong;
pub const intmax_t = __intmax_t;
pub const uintmax_t = __uintmax_t;
pub const VkBool32 = u32;
pub const VkDeviceAddress = u64;
pub const VkDeviceSize = u64;
pub const VkFlags = u32;
pub const VkSampleMask = u32;
pub const struct_VkBuffer_T = opaque {};
pub const VkBuffer = ?*struct_VkBuffer_T;
pub const struct_VkImage_T = opaque {};
pub const VkImage = ?*struct_VkImage_T;
pub const struct_VkInstance_T = opaque {};
pub const VkInstance = ?*struct_VkInstance_T;
pub const struct_VkPhysicalDevice_T = opaque {};
pub const VkPhysicalDevice = ?*struct_VkPhysicalDevice_T;
pub const struct_VkDevice_T = opaque {};
pub const VkDevice = ?*struct_VkDevice_T;
pub const struct_VkQueue_T = opaque {};
pub const VkQueue = ?*struct_VkQueue_T;
pub const struct_VkSemaphore_T = opaque {};
pub const VkSemaphore = ?*struct_VkSemaphore_T;
pub const struct_VkCommandBuffer_T = opaque {};
pub const VkCommandBuffer = ?*struct_VkCommandBuffer_T;
pub const struct_VkFence_T = opaque {};
pub const VkFence = ?*struct_VkFence_T;
pub const struct_VkDeviceMemory_T = opaque {};
pub const VkDeviceMemory = ?*struct_VkDeviceMemory_T;
pub const struct_VkEvent_T = opaque {};
pub const VkEvent = ?*struct_VkEvent_T;
pub const struct_VkQueryPool_T = opaque {};
pub const VkQueryPool = ?*struct_VkQueryPool_T;
pub const struct_VkBufferView_T = opaque {};
pub const VkBufferView = ?*struct_VkBufferView_T;
pub const struct_VkImageView_T = opaque {};
pub const VkImageView = ?*struct_VkImageView_T;
pub const struct_VkShaderModule_T = opaque {};
pub const VkShaderModule = ?*struct_VkShaderModule_T;
pub const struct_VkPipelineCache_T = opaque {};
pub const VkPipelineCache = ?*struct_VkPipelineCache_T;
pub const struct_VkPipelineLayout_T = opaque {};
pub const VkPipelineLayout = ?*struct_VkPipelineLayout_T;
pub const struct_VkPipeline_T = opaque {};
pub const VkPipeline = ?*struct_VkPipeline_T;
pub const struct_VkRenderPass_T = opaque {};
pub const VkRenderPass = ?*struct_VkRenderPass_T;
pub const struct_VkDescriptorSetLayout_T = opaque {};
pub const VkDescriptorSetLayout = ?*struct_VkDescriptorSetLayout_T;
pub const struct_VkSampler_T = opaque {};
pub const VkSampler = ?*struct_VkSampler_T;
pub const struct_VkDescriptorSet_T = opaque {};
pub const VkDescriptorSet = ?*struct_VkDescriptorSet_T;
pub const struct_VkDescriptorPool_T = opaque {};
pub const VkDescriptorPool = ?*struct_VkDescriptorPool_T;
pub const struct_VkFramebuffer_T = opaque {};
pub const VkFramebuffer = ?*struct_VkFramebuffer_T;
pub const struct_VkCommandPool_T = opaque {};
pub const VkCommandPool = ?*struct_VkCommandPool_T;
pub const VK_SUCCESS: c_int = 0;
pub const VK_NOT_READY: c_int = 1;
pub const VK_TIMEOUT: c_int = 2;
pub const VK_EVENT_SET: c_int = 3;
pub const VK_EVENT_RESET: c_int = 4;
pub const VK_INCOMPLETE: c_int = 5;
pub const VK_ERROR_OUT_OF_HOST_MEMORY: c_int = -1;
pub const VK_ERROR_OUT_OF_DEVICE_MEMORY: c_int = -2;
pub const VK_ERROR_INITIALIZATION_FAILED: c_int = -3;
pub const VK_ERROR_DEVICE_LOST: c_int = -4;
pub const VK_ERROR_MEMORY_MAP_FAILED: c_int = -5;
pub const VK_ERROR_LAYER_NOT_PRESENT: c_int = -6;
pub const VK_ERROR_EXTENSION_NOT_PRESENT: c_int = -7;
pub const VK_ERROR_FEATURE_NOT_PRESENT: c_int = -8;
pub const VK_ERROR_INCOMPATIBLE_DRIVER: c_int = -9;
pub const VK_ERROR_TOO_MANY_OBJECTS: c_int = -10;
pub const VK_ERROR_FORMAT_NOT_SUPPORTED: c_int = -11;
pub const VK_ERROR_FRAGMENTED_POOL: c_int = -12;
pub const VK_ERROR_UNKNOWN: c_int = -13;
pub const VK_ERROR_OUT_OF_POOL_MEMORY: c_int = -1000069000;
pub const VK_ERROR_INVALID_EXTERNAL_HANDLE: c_int = -1000072003;
pub const VK_ERROR_FRAGMENTATION: c_int = -1000161000;
pub const VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS: c_int = -1000257000;
pub const VK_PIPELINE_COMPILE_REQUIRED: c_int = 1000297000;
pub const VK_ERROR_SURFACE_LOST_KHR: c_int = -1000000000;
pub const VK_ERROR_NATIVE_WINDOW_IN_USE_KHR: c_int = -1000000001;
pub const VK_SUBOPTIMAL_KHR: c_int = 1000001003;
pub const VK_ERROR_OUT_OF_DATE_KHR: c_int = -1000001004;
pub const VK_ERROR_INCOMPATIBLE_DISPLAY_KHR: c_int = -1000003001;
pub const VK_ERROR_VALIDATION_FAILED_EXT: c_int = -1000011001;
pub const VK_ERROR_INVALID_SHADER_NV: c_int = -1000012000;
pub const VK_ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR: c_int = -1000023000;
pub const VK_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR: c_int = -1000023001;
pub const VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR: c_int = -1000023002;
pub const VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR: c_int = -1000023003;
pub const VK_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR: c_int = -1000023004;
pub const VK_ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR: c_int = -1000023005;
pub const VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT: c_int = -1000158000;
pub const VK_ERROR_NOT_PERMITTED_KHR: c_int = -1000174001;
pub const VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT: c_int = -1000255000;
pub const VK_THREAD_IDLE_KHR: c_int = 1000268000;
pub const VK_THREAD_DONE_KHR: c_int = 1000268001;
pub const VK_OPERATION_DEFERRED_KHR: c_int = 1000268002;
pub const VK_OPERATION_NOT_DEFERRED_KHR: c_int = 1000268003;
pub const VK_ERROR_INVALID_VIDEO_STD_PARAMETERS_KHR: c_int = -1000299000;
pub const VK_ERROR_COMPRESSION_EXHAUSTED_EXT: c_int = -1000338000;
pub const VK_INCOMPATIBLE_SHADER_BINARY_EXT: c_int = 1000482000;
pub const VK_PIPELINE_BINARY_MISSING_KHR: c_int = 1000483000;
pub const VK_ERROR_NOT_ENOUGH_SPACE_KHR: c_int = -1000483000;
pub const VK_ERROR_OUT_OF_POOL_MEMORY_KHR: c_int = -1000069000;
pub const VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR: c_int = -1000072003;
pub const VK_ERROR_FRAGMENTATION_EXT: c_int = -1000161000;
pub const VK_ERROR_NOT_PERMITTED_EXT: c_int = -1000174001;
pub const VK_ERROR_INVALID_DEVICE_ADDRESS_EXT: c_int = -1000257000;
pub const VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR: c_int = -1000257000;
pub const VK_PIPELINE_COMPILE_REQUIRED_EXT: c_int = 1000297000;
pub const VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT: c_int = 1000297000;
pub const VK_ERROR_INCOMPATIBLE_SHADER_BINARY_EXT: c_int = 1000482000;
pub const VK_RESULT_MAX_ENUM: c_int = 2147483647;
pub const enum_VkResult = c_int;
pub const VkResult = enum_VkResult;
pub const VK_STRUCTURE_TYPE_APPLICATION_INFO: c_int = 0;
pub const VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO: c_int = 1;
pub const VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO: c_int = 2;
pub const VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO: c_int = 3;
pub const VK_STRUCTURE_TYPE_SUBMIT_INFO: c_int = 4;
pub const VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO: c_int = 5;
pub const VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE: c_int = 6;
pub const VK_STRUCTURE_TYPE_BIND_SPARSE_INFO: c_int = 7;
pub const VK_STRUCTURE_TYPE_FENCE_CREATE_INFO: c_int = 8;
pub const VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO: c_int = 9;
pub const VK_STRUCTURE_TYPE_EVENT_CREATE_INFO: c_int = 10;
pub const VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO: c_int = 11;
pub const VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO: c_int = 12;
pub const VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO: c_int = 13;
pub const VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO: c_int = 14;
pub const VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO: c_int = 15;
pub const VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO: c_int = 16;
pub const VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO: c_int = 17;
pub const VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO: c_int = 18;
pub const VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO: c_int = 19;
pub const VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO: c_int = 20;
pub const VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO: c_int = 21;
pub const VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO: c_int = 22;
pub const VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO: c_int = 23;
pub const VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO: c_int = 24;
pub const VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO: c_int = 25;
pub const VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO: c_int = 26;
pub const VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO: c_int = 27;
pub const VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO: c_int = 28;
pub const VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO: c_int = 29;
pub const VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO: c_int = 30;
pub const VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO: c_int = 31;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO: c_int = 32;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO: c_int = 33;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO: c_int = 34;
pub const VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET: c_int = 35;
pub const VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET: c_int = 36;
pub const VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO: c_int = 37;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO: c_int = 38;
pub const VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO: c_int = 39;
pub const VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO: c_int = 40;
pub const VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO: c_int = 41;
pub const VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO: c_int = 42;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO: c_int = 43;
pub const VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER: c_int = 44;
pub const VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER: c_int = 45;
pub const VK_STRUCTURE_TYPE_MEMORY_BARRIER: c_int = 46;
pub const VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO: c_int = 47;
pub const VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO: c_int = 48;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES: c_int = 1000094000;
pub const VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO: c_int = 1000157000;
pub const VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO: c_int = 1000157001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES: c_int = 1000083000;
pub const VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS: c_int = 1000127000;
pub const VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO: c_int = 1000127001;
pub const VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO: c_int = 1000060000;
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO: c_int = 1000060003;
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO: c_int = 1000060004;
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO: c_int = 1000060005;
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO: c_int = 1000060006;
pub const VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO: c_int = 1000060013;
pub const VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO: c_int = 1000060014;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES: c_int = 1000070000;
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO: c_int = 1000070001;
pub const VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2: c_int = 1000146000;
pub const VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2: c_int = 1000146001;
pub const VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2: c_int = 1000146002;
pub const VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2: c_int = 1000146003;
pub const VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2: c_int = 1000146004;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2: c_int = 1000059000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2: c_int = 1000059001;
pub const VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2: c_int = 1000059002;
pub const VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2: c_int = 1000059003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2: c_int = 1000059004;
pub const VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2: c_int = 1000059005;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2: c_int = 1000059006;
pub const VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2: c_int = 1000059007;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2: c_int = 1000059008;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES: c_int = 1000117000;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO: c_int = 1000117001;
pub const VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO: c_int = 1000117002;
pub const VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO: c_int = 1000117003;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO: c_int = 1000053000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES: c_int = 1000053001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES: c_int = 1000053002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES: c_int = 1000120000;
pub const VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO: c_int = 1000145000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES: c_int = 1000145001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES: c_int = 1000145002;
pub const VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2: c_int = 1000145003;
pub const VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO: c_int = 1000156000;
pub const VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO: c_int = 1000156001;
pub const VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO: c_int = 1000156002;
pub const VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO: c_int = 1000156003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES: c_int = 1000156004;
pub const VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES: c_int = 1000156005;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO: c_int = 1000085000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO: c_int = 1000071000;
pub const VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES: c_int = 1000071001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO: c_int = 1000071002;
pub const VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES: c_int = 1000071003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES: c_int = 1000071004;
pub const VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO: c_int = 1000072000;
pub const VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO: c_int = 1000072001;
pub const VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO: c_int = 1000072002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO: c_int = 1000112000;
pub const VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES: c_int = 1000112001;
pub const VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO: c_int = 1000113000;
pub const VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO: c_int = 1000077000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO: c_int = 1000076000;
pub const VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES: c_int = 1000076001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES: c_int = 1000168000;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT: c_int = 1000168001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES: c_int = 1000063000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES: c_int = 49;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES: c_int = 50;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES: c_int = 51;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES: c_int = 52;
pub const VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO: c_int = 1000147000;
pub const VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2: c_int = 1000109000;
pub const VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2: c_int = 1000109001;
pub const VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2: c_int = 1000109002;
pub const VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2: c_int = 1000109003;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2: c_int = 1000109004;
pub const VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO: c_int = 1000109005;
pub const VK_STRUCTURE_TYPE_SUBPASS_END_INFO: c_int = 1000109006;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES: c_int = 1000177000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES: c_int = 1000196000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES: c_int = 1000180000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES: c_int = 1000082000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES: c_int = 1000197000;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO: c_int = 1000161000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES: c_int = 1000161001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES: c_int = 1000161002;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO: c_int = 1000161003;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT: c_int = 1000161004;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES: c_int = 1000199000;
pub const VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE: c_int = 1000199001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES: c_int = 1000221000;
pub const VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO: c_int = 1000246000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES: c_int = 1000130000;
pub const VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO: c_int = 1000130001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES: c_int = 1000211000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES: c_int = 1000108000;
pub const VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO: c_int = 1000108001;
pub const VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO: c_int = 1000108002;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO: c_int = 1000108003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES: c_int = 1000253000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES: c_int = 1000175000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES: c_int = 1000241000;
pub const VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT: c_int = 1000241001;
pub const VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT: c_int = 1000241002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES: c_int = 1000261000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES: c_int = 1000207000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES: c_int = 1000207001;
pub const VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO: c_int = 1000207002;
pub const VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO: c_int = 1000207003;
pub const VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO: c_int = 1000207004;
pub const VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO: c_int = 1000207005;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES: c_int = 1000257000;
pub const VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO: c_int = 1000244001;
pub const VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO: c_int = 1000257002;
pub const VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO: c_int = 1000257003;
pub const VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO: c_int = 1000257004;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES: c_int = 53;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES: c_int = 54;
pub const VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO: c_int = 1000192000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES: c_int = 1000215000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES: c_int = 1000245000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES: c_int = 1000276000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES: c_int = 1000295000;
pub const VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO: c_int = 1000295001;
pub const VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO: c_int = 1000295002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES: c_int = 1000297000;
pub const VK_STRUCTURE_TYPE_MEMORY_BARRIER_2: c_int = 1000314000;
pub const VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2: c_int = 1000314001;
pub const VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2: c_int = 1000314002;
pub const VK_STRUCTURE_TYPE_DEPENDENCY_INFO: c_int = 1000314003;
pub const VK_STRUCTURE_TYPE_SUBMIT_INFO_2: c_int = 1000314004;
pub const VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO: c_int = 1000314005;
pub const VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO: c_int = 1000314006;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES: c_int = 1000314007;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES: c_int = 1000325000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES: c_int = 1000335000;
pub const VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2: c_int = 1000337000;
pub const VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2: c_int = 1000337001;
pub const VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2: c_int = 1000337002;
pub const VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2: c_int = 1000337003;
pub const VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2: c_int = 1000337004;
pub const VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2: c_int = 1000337005;
pub const VK_STRUCTURE_TYPE_BUFFER_COPY_2: c_int = 1000337006;
pub const VK_STRUCTURE_TYPE_IMAGE_COPY_2: c_int = 1000337007;
pub const VK_STRUCTURE_TYPE_IMAGE_BLIT_2: c_int = 1000337008;
pub const VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2: c_int = 1000337009;
pub const VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2: c_int = 1000337010;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES: c_int = 1000225000;
pub const VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO: c_int = 1000225001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES: c_int = 1000225002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES: c_int = 1000138000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES: c_int = 1000138001;
pub const VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK: c_int = 1000138002;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO: c_int = 1000138003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES: c_int = 1000066000;
pub const VK_STRUCTURE_TYPE_RENDERING_INFO: c_int = 1000044000;
pub const VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO: c_int = 1000044001;
pub const VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO: c_int = 1000044002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES: c_int = 1000044003;
pub const VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO: c_int = 1000044004;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES: c_int = 1000280000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES: c_int = 1000280001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES: c_int = 1000281001;
pub const VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3: c_int = 1000360000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES: c_int = 1000413000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES: c_int = 1000413001;
pub const VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS: c_int = 1000413002;
pub const VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS: c_int = 1000413003;
pub const VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR: c_int = 1000001000;
pub const VK_STRUCTURE_TYPE_PRESENT_INFO_KHR: c_int = 1000001001;
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR: c_int = 1000060007;
pub const VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR: c_int = 1000060008;
pub const VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR: c_int = 1000060009;
pub const VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR: c_int = 1000060010;
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR: c_int = 1000060011;
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR: c_int = 1000060012;
pub const VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR: c_int = 1000002000;
pub const VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR: c_int = 1000002001;
pub const VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR: c_int = 1000003000;
pub const VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR: c_int = 1000004000;
pub const VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR: c_int = 1000005000;
pub const VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR: c_int = 1000006000;
pub const VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR: c_int = 1000008000;
pub const VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR: c_int = 1000009000;
pub const VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT: c_int = 1000011000;
pub const VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD: c_int = 1000018000;
pub const VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT: c_int = 1000022000;
pub const VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT: c_int = 1000022001;
pub const VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT: c_int = 1000022002;
pub const VK_STRUCTURE_TYPE_VIDEO_PROFILE_INFO_KHR: c_int = 1000023000;
pub const VK_STRUCTURE_TYPE_VIDEO_CAPABILITIES_KHR: c_int = 1000023001;
pub const VK_STRUCTURE_TYPE_VIDEO_PICTURE_RESOURCE_INFO_KHR: c_int = 1000023002;
pub const VK_STRUCTURE_TYPE_VIDEO_SESSION_MEMORY_REQUIREMENTS_KHR: c_int = 1000023003;
pub const VK_STRUCTURE_TYPE_BIND_VIDEO_SESSION_MEMORY_INFO_KHR: c_int = 1000023004;
pub const VK_STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR: c_int = 1000023005;
pub const VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR: c_int = 1000023006;
pub const VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR: c_int = 1000023007;
pub const VK_STRUCTURE_TYPE_VIDEO_BEGIN_CODING_INFO_KHR: c_int = 1000023008;
pub const VK_STRUCTURE_TYPE_VIDEO_END_CODING_INFO_KHR: c_int = 1000023009;
pub const VK_STRUCTURE_TYPE_VIDEO_CODING_CONTROL_INFO_KHR: c_int = 1000023010;
pub const VK_STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_INFO_KHR: c_int = 1000023011;
pub const VK_STRUCTURE_TYPE_QUEUE_FAMILY_VIDEO_PROPERTIES_KHR: c_int = 1000023012;
pub const VK_STRUCTURE_TYPE_VIDEO_PROFILE_LIST_INFO_KHR: c_int = 1000023013;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR: c_int = 1000023014;
pub const VK_STRUCTURE_TYPE_VIDEO_FORMAT_PROPERTIES_KHR: c_int = 1000023015;
pub const VK_STRUCTURE_TYPE_QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_KHR: c_int = 1000023016;
pub const VK_STRUCTURE_TYPE_VIDEO_DECODE_INFO_KHR: c_int = 1000024000;
pub const VK_STRUCTURE_TYPE_VIDEO_DECODE_CAPABILITIES_KHR: c_int = 1000024001;
pub const VK_STRUCTURE_TYPE_VIDEO_DECODE_USAGE_INFO_KHR: c_int = 1000024002;
pub const VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV: c_int = 1000026000;
pub const VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV: c_int = 1000026001;
pub const VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV: c_int = 1000026002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT: c_int = 1000028000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT: c_int = 1000028001;
pub const VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT: c_int = 1000028002;
pub const VK_STRUCTURE_TYPE_CU_MODULE_CREATE_INFO_NVX: c_int = 1000029000;
pub const VK_STRUCTURE_TYPE_CU_FUNCTION_CREATE_INFO_NVX: c_int = 1000029001;
pub const VK_STRUCTURE_TYPE_CU_LAUNCH_INFO_NVX: c_int = 1000029002;
pub const VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX: c_int = 1000030000;
pub const VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX: c_int = 1000030001;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_CAPABILITIES_KHR: c_int = 1000038000;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR: c_int = 1000038001;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR: c_int = 1000038002;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PICTURE_INFO_KHR: c_int = 1000038003;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_DPB_SLOT_INFO_KHR: c_int = 1000038004;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_NALU_SLICE_INFO_KHR: c_int = 1000038005;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_GOP_REMAINING_FRAME_INFO_KHR: c_int = 1000038006;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PROFILE_INFO_KHR: c_int = 1000038007;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_INFO_KHR: c_int = 1000038008;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_LAYER_INFO_KHR: c_int = 1000038009;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_CREATE_INFO_KHR: c_int = 1000038010;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_QUALITY_LEVEL_PROPERTIES_KHR: c_int = 1000038011;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_GET_INFO_KHR: c_int = 1000038012;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_FEEDBACK_INFO_KHR: c_int = 1000038013;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_CAPABILITIES_KHR: c_int = 1000039000;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR: c_int = 1000039001;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR: c_int = 1000039002;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PICTURE_INFO_KHR: c_int = 1000039003;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_DPB_SLOT_INFO_KHR: c_int = 1000039004;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_NALU_SLICE_SEGMENT_INFO_KHR: c_int = 1000039005;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_GOP_REMAINING_FRAME_INFO_KHR: c_int = 1000039006;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PROFILE_INFO_KHR: c_int = 1000039007;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_INFO_KHR: c_int = 1000039009;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_LAYER_INFO_KHR: c_int = 1000039010;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_CREATE_INFO_KHR: c_int = 1000039011;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_QUALITY_LEVEL_PROPERTIES_KHR: c_int = 1000039012;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_GET_INFO_KHR: c_int = 1000039013;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_FEEDBACK_INFO_KHR: c_int = 1000039014;
pub const VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_CAPABILITIES_KHR: c_int = 1000040000;
pub const VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PICTURE_INFO_KHR: c_int = 1000040001;
pub const VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PROFILE_INFO_KHR: c_int = 1000040003;
pub const VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR: c_int = 1000040004;
pub const VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR: c_int = 1000040005;
pub const VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_DPB_SLOT_INFO_KHR: c_int = 1000040006;
pub const VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD: c_int = 1000041000;
pub const VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR: c_int = 1000044006;
pub const VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT: c_int = 1000044007;
pub const VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD: c_int = 1000044008;
pub const VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX: c_int = 1000044009;
pub const VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP: c_int = 1000049000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV: c_int = 1000050000;
pub const VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV: c_int = 1000056000;
pub const VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV: c_int = 1000056001;
pub const VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV: c_int = 1000057000;
pub const VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV: c_int = 1000057001;
pub const VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV: c_int = 1000058000;
pub const VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT: c_int = 1000061000;
pub const VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN: c_int = 1000062000;
pub const VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT: c_int = 1000067000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT: c_int = 1000067001;
pub const VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO_EXT: c_int = 1000068000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES_EXT: c_int = 1000068001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES_EXT: c_int = 1000068002;
pub const VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR: c_int = 1000073000;
pub const VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR: c_int = 1000073001;
pub const VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR: c_int = 1000073002;
pub const VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR: c_int = 1000073003;
pub const VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR: c_int = 1000074000;
pub const VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR: c_int = 1000074001;
pub const VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR: c_int = 1000074002;
pub const VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR: c_int = 1000075000;
pub const VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR: c_int = 1000078000;
pub const VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR: c_int = 1000078001;
pub const VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR: c_int = 1000078002;
pub const VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR: c_int = 1000078003;
pub const VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR: c_int = 1000079000;
pub const VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR: c_int = 1000079001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR: c_int = 1000080000;
pub const VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT: c_int = 1000081000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT: c_int = 1000081001;
pub const VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT: c_int = 1000081002;
pub const VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR: c_int = 1000084000;
pub const VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV: c_int = 1000087000;
pub const VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT: c_int = 1000090000;
pub const VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT: c_int = 1000091000;
pub const VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT: c_int = 1000091001;
pub const VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT: c_int = 1000091002;
pub const VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT: c_int = 1000091003;
pub const VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE: c_int = 1000092000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX: c_int = 1000097000;
pub const VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV: c_int = 1000098000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT: c_int = 1000099000;
pub const VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT: c_int = 1000099001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT: c_int = 1000101000;
pub const VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT: c_int = 1000101001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT: c_int = 1000102000;
pub const VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT: c_int = 1000102001;
pub const VK_STRUCTURE_TYPE_HDR_METADATA_EXT: c_int = 1000105000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RELAXED_LINE_RASTERIZATION_FEATURES_IMG: c_int = 1000110000;
pub const VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR: c_int = 1000111000;
pub const VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR: c_int = 1000114000;
pub const VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR: c_int = 1000114001;
pub const VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR: c_int = 1000114002;
pub const VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR: c_int = 1000115000;
pub const VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR: c_int = 1000115001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR: c_int = 1000116000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR: c_int = 1000116001;
pub const VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR: c_int = 1000116002;
pub const VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR: c_int = 1000116003;
pub const VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR: c_int = 1000116004;
pub const VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR: c_int = 1000116005;
pub const VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR: c_int = 1000116006;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR: c_int = 1000119000;
pub const VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR: c_int = 1000119001;
pub const VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR: c_int = 1000119002;
pub const VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR: c_int = 1000121000;
pub const VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR: c_int = 1000121001;
pub const VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR: c_int = 1000121002;
pub const VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR: c_int = 1000121003;
pub const VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR: c_int = 1000121004;
pub const VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK: c_int = 1000122000;
pub const VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK: c_int = 1000123000;
pub const VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT: c_int = 1000128000;
pub const VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT: c_int = 1000128001;
pub const VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT: c_int = 1000128002;
pub const VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT: c_int = 1000128003;
pub const VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT: c_int = 1000128004;
pub const VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID: c_int = 1000129000;
pub const VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID: c_int = 1000129001;
pub const VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID: c_int = 1000129002;
pub const VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID: c_int = 1000129003;
pub const VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID: c_int = 1000129004;
pub const VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID: c_int = 1000129005;
pub const VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_2_ANDROID: c_int = 1000129006;
pub const VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT: c_int = 1000143000;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT: c_int = 1000143001;
pub const VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT: c_int = 1000143002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT: c_int = 1000143003;
pub const VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT: c_int = 1000143004;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT: c_int = 1000148000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT: c_int = 1000148001;
pub const VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT: c_int = 1000148002;
pub const VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV: c_int = 1000149000;
pub const VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR: c_int = 1000150007;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR: c_int = 1000150000;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR: c_int = 1000150002;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR: c_int = 1000150003;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR: c_int = 1000150004;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR: c_int = 1000150005;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR: c_int = 1000150006;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR: c_int = 1000150009;
pub const VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR: c_int = 1000150010;
pub const VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR: c_int = 1000150011;
pub const VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR: c_int = 1000150012;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR: c_int = 1000150013;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR: c_int = 1000150014;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR: c_int = 1000150017;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR: c_int = 1000150020;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR: c_int = 1000347000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR: c_int = 1000347001;
pub const VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR: c_int = 1000150015;
pub const VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR: c_int = 1000150016;
pub const VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR: c_int = 1000150018;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR: c_int = 1000348013;
pub const VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV: c_int = 1000152000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV: c_int = 1000154000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV: c_int = 1000154001;
pub const VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT: c_int = 1000158000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT: c_int = 1000158002;
pub const VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT: c_int = 1000158003;
pub const VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT: c_int = 1000158004;
pub const VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT: c_int = 1000158005;
pub const VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT: c_int = 1000158006;
pub const VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT: c_int = 1000160000;
pub const VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT: c_int = 1000160001;
pub const VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV: c_int = 1000164000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV: c_int = 1000164001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV: c_int = 1000164002;
pub const VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV: c_int = 1000164005;
pub const VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV: c_int = 1000165000;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV: c_int = 1000165001;
pub const VK_STRUCTURE_TYPE_GEOMETRY_NV: c_int = 1000165003;
pub const VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV: c_int = 1000165004;
pub const VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV: c_int = 1000165005;
pub const VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV: c_int = 1000165006;
pub const VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV: c_int = 1000165007;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV: c_int = 1000165008;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV: c_int = 1000165009;
pub const VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV: c_int = 1000165011;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV: c_int = 1000165012;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV: c_int = 1000166000;
pub const VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV: c_int = 1000166001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT: c_int = 1000170000;
pub const VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT: c_int = 1000170001;
pub const VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT: c_int = 1000178000;
pub const VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT: c_int = 1000178001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT: c_int = 1000178002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR: c_int = 1000181000;
pub const VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD: c_int = 1000183000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD: c_int = 1000185000;
pub const VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_CAPABILITIES_KHR: c_int = 1000187000;
pub const VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR: c_int = 1000187001;
pub const VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR: c_int = 1000187002;
pub const VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PROFILE_INFO_KHR: c_int = 1000187003;
pub const VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PICTURE_INFO_KHR: c_int = 1000187004;
pub const VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_DPB_SLOT_INFO_KHR: c_int = 1000187005;
pub const VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR: c_int = 1000174000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR: c_int = 1000388000;
pub const VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR: c_int = 1000388001;
pub const VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD: c_int = 1000189000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT: c_int = 1000190000;
pub const VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP: c_int = 1000191000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV: c_int = 1000202000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV: c_int = 1000202001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV: c_int = 1000204000;
pub const VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV: c_int = 1000205000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV: c_int = 1000205002;
pub const VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV: c_int = 1000206000;
pub const VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV: c_int = 1000206001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL: c_int = 1000209000;
pub const VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL: c_int = 1000210000;
pub const VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL: c_int = 1000210001;
pub const VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL: c_int = 1000210002;
pub const VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL: c_int = 1000210003;
pub const VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL: c_int = 1000210004;
pub const VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL: c_int = 1000210005;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT: c_int = 1000212000;
pub const VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD: c_int = 1000213000;
pub const VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD: c_int = 1000213001;
pub const VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA: c_int = 1000214000;
pub const VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT: c_int = 1000217000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT: c_int = 1000218000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT: c_int = 1000218001;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT: c_int = 1000218002;
pub const VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR: c_int = 1000226000;
pub const VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR: c_int = 1000226001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR: c_int = 1000226002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR: c_int = 1000226003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR: c_int = 1000226004;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD: c_int = 1000227000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD: c_int = 1000229000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_LOCAL_READ_FEATURES_KHR: c_int = 1000232000;
pub const VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_LOCATION_INFO_KHR: c_int = 1000232001;
pub const VK_STRUCTURE_TYPE_RENDERING_INPUT_ATTACHMENT_INDEX_INFO_KHR: c_int = 1000232002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT: c_int = 1000234000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_QUAD_CONTROL_FEATURES_KHR: c_int = 1000235000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT: c_int = 1000237000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT: c_int = 1000238000;
pub const VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT: c_int = 1000238001;
pub const VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR: c_int = 1000239000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV: c_int = 1000240000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT: c_int = 1000244000;
pub const VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT: c_int = 1000244002;
pub const VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT: c_int = 1000247000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR: c_int = 1000248000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV: c_int = 1000249000;
pub const VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV: c_int = 1000249001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV: c_int = 1000249002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV: c_int = 1000250000;
pub const VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV: c_int = 1000250001;
pub const VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV: c_int = 1000250002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT: c_int = 1000251000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT: c_int = 1000252000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT: c_int = 1000254000;
pub const VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT: c_int = 1000254001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT: c_int = 1000254002;
pub const VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT: c_int = 1000255000;
pub const VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT: c_int = 1000255002;
pub const VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT: c_int = 1000255001;
pub const VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT: c_int = 1000256000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT: c_int = 1000260000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT: c_int = 1000267000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR: c_int = 1000269000;
pub const VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR: c_int = 1000269001;
pub const VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR: c_int = 1000269002;
pub const VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR: c_int = 1000269003;
pub const VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR: c_int = 1000269004;
pub const VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR: c_int = 1000269005;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_FEATURES_EXT: c_int = 1000270000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_PROPERTIES_EXT: c_int = 1000270001;
pub const VK_STRUCTURE_TYPE_MEMORY_TO_IMAGE_COPY_EXT: c_int = 1000270002;
pub const VK_STRUCTURE_TYPE_IMAGE_TO_MEMORY_COPY_EXT: c_int = 1000270003;
pub const VK_STRUCTURE_TYPE_COPY_IMAGE_TO_MEMORY_INFO_EXT: c_int = 1000270004;
pub const VK_STRUCTURE_TYPE_COPY_MEMORY_TO_IMAGE_INFO_EXT: c_int = 1000270005;
pub const VK_STRUCTURE_TYPE_HOST_IMAGE_LAYOUT_TRANSITION_INFO_EXT: c_int = 1000270006;
pub const VK_STRUCTURE_TYPE_COPY_IMAGE_TO_IMAGE_INFO_EXT: c_int = 1000270007;
pub const VK_STRUCTURE_TYPE_SUBRESOURCE_HOST_MEMCPY_SIZE_EXT: c_int = 1000270008;
pub const VK_STRUCTURE_TYPE_HOST_IMAGE_COPY_DEVICE_PERFORMANCE_QUERY_EXT: c_int = 1000270009;
pub const VK_STRUCTURE_TYPE_MEMORY_MAP_INFO_KHR: c_int = 1000271000;
pub const VK_STRUCTURE_TYPE_MEMORY_UNMAP_INFO_KHR: c_int = 1000271001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAP_MEMORY_PLACED_FEATURES_EXT: c_int = 1000272000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAP_MEMORY_PLACED_PROPERTIES_EXT: c_int = 1000272001;
pub const VK_STRUCTURE_TYPE_MEMORY_MAP_PLACED_INFO_EXT: c_int = 1000272002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT: c_int = 1000273000;
pub const VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_EXT: c_int = 1000274000;
pub const VK_STRUCTURE_TYPE_SURFACE_PRESENT_SCALING_CAPABILITIES_EXT: c_int = 1000274001;
pub const VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_COMPATIBILITY_EXT: c_int = 1000274002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SWAPCHAIN_MAINTENANCE_1_FEATURES_EXT: c_int = 1000275000;
pub const VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_FENCE_INFO_EXT: c_int = 1000275001;
pub const VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODES_CREATE_INFO_EXT: c_int = 1000275002;
pub const VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODE_INFO_EXT: c_int = 1000275003;
pub const VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_SCALING_CREATE_INFO_EXT: c_int = 1000275004;
pub const VK_STRUCTURE_TYPE_RELEASE_SWAPCHAIN_IMAGES_INFO_EXT: c_int = 1000275005;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV: c_int = 1000277000;
pub const VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV: c_int = 1000277001;
pub const VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV: c_int = 1000277002;
pub const VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV: c_int = 1000277003;
pub const VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV: c_int = 1000277004;
pub const VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV: c_int = 1000277005;
pub const VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV: c_int = 1000277006;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV: c_int = 1000277007;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV: c_int = 1000278000;
pub const VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV: c_int = 1000278001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT: c_int = 1000281000;
pub const VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM: c_int = 1000282000;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM: c_int = 1000282001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_BIAS_CONTROL_FEATURES_EXT: c_int = 1000283000;
pub const VK_STRUCTURE_TYPE_DEPTH_BIAS_INFO_EXT: c_int = 1000283001;
pub const VK_STRUCTURE_TYPE_DEPTH_BIAS_REPRESENTATION_INFO_EXT: c_int = 1000283002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT: c_int = 1000284000;
pub const VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT: c_int = 1000284001;
pub const VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT: c_int = 1000284002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT: c_int = 1000286000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT: c_int = 1000286001;
pub const VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT: c_int = 1000287000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT: c_int = 1000287001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT: c_int = 1000287002;
pub const VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR: c_int = 1000290000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_BARRIER_FEATURES_NV: c_int = 1000292000;
pub const VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_PRESENT_BARRIER_NV: c_int = 1000292001;
pub const VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_BARRIER_CREATE_INFO_NV: c_int = 1000292002;
pub const VK_STRUCTURE_TYPE_PRESENT_ID_KHR: c_int = 1000294000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR: c_int = 1000294001;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_INFO_KHR: c_int = 1000299000;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_INFO_KHR: c_int = 1000299001;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_LAYER_INFO_KHR: c_int = 1000299002;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_CAPABILITIES_KHR: c_int = 1000299003;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_USAGE_INFO_KHR: c_int = 1000299004;
pub const VK_STRUCTURE_TYPE_QUERY_POOL_VIDEO_ENCODE_FEEDBACK_CREATE_INFO_KHR: c_int = 1000299005;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR: c_int = 1000299006;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUALITY_LEVEL_PROPERTIES_KHR: c_int = 1000299007;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR: c_int = 1000299008;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_SESSION_PARAMETERS_GET_INFO_KHR: c_int = 1000299009;
pub const VK_STRUCTURE_TYPE_VIDEO_ENCODE_SESSION_PARAMETERS_FEEDBACK_INFO_KHR: c_int = 1000299010;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV: c_int = 1000300000;
pub const VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV: c_int = 1000300001;
pub const VK_STRUCTURE_TYPE_CUDA_MODULE_CREATE_INFO_NV: c_int = 1000307000;
pub const VK_STRUCTURE_TYPE_CUDA_FUNCTION_CREATE_INFO_NV: c_int = 1000307001;
pub const VK_STRUCTURE_TYPE_CUDA_LAUNCH_INFO_NV: c_int = 1000307002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUDA_KERNEL_LAUNCH_FEATURES_NV: c_int = 1000307003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUDA_KERNEL_LAUNCH_PROPERTIES_NV: c_int = 1000307004;
pub const VK_STRUCTURE_TYPE_QUERY_LOW_LATENCY_SUPPORT_NV: c_int = 1000310000;
pub const VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECT_CREATE_INFO_EXT: c_int = 1000311000;
pub const VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECTS_INFO_EXT: c_int = 1000311001;
pub const VK_STRUCTURE_TYPE_EXPORT_METAL_DEVICE_INFO_EXT: c_int = 1000311002;
pub const VK_STRUCTURE_TYPE_EXPORT_METAL_COMMAND_QUEUE_INFO_EXT: c_int = 1000311003;
pub const VK_STRUCTURE_TYPE_EXPORT_METAL_BUFFER_INFO_EXT: c_int = 1000311004;
pub const VK_STRUCTURE_TYPE_IMPORT_METAL_BUFFER_INFO_EXT: c_int = 1000311005;
pub const VK_STRUCTURE_TYPE_EXPORT_METAL_TEXTURE_INFO_EXT: c_int = 1000311006;
pub const VK_STRUCTURE_TYPE_IMPORT_METAL_TEXTURE_INFO_EXT: c_int = 1000311007;
pub const VK_STRUCTURE_TYPE_EXPORT_METAL_IO_SURFACE_INFO_EXT: c_int = 1000311008;
pub const VK_STRUCTURE_TYPE_IMPORT_METAL_IO_SURFACE_INFO_EXT: c_int = 1000311009;
pub const VK_STRUCTURE_TYPE_EXPORT_METAL_SHARED_EVENT_INFO_EXT: c_int = 1000311010;
pub const VK_STRUCTURE_TYPE_IMPORT_METAL_SHARED_EVENT_INFO_EXT: c_int = 1000311011;
pub const VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV: c_int = 1000314008;
pub const VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV: c_int = 1000314009;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_PROPERTIES_EXT: c_int = 1000316000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_DENSITY_MAP_PROPERTIES_EXT: c_int = 1000316001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_FEATURES_EXT: c_int = 1000316002;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_ADDRESS_INFO_EXT: c_int = 1000316003;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_GET_INFO_EXT: c_int = 1000316004;
pub const VK_STRUCTURE_TYPE_BUFFER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT: c_int = 1000316005;
pub const VK_STRUCTURE_TYPE_IMAGE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT: c_int = 1000316006;
pub const VK_STRUCTURE_TYPE_IMAGE_VIEW_CAPTURE_DESCRIPTOR_DATA_INFO_EXT: c_int = 1000316007;
pub const VK_STRUCTURE_TYPE_SAMPLER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT: c_int = 1000316008;
pub const VK_STRUCTURE_TYPE_OPAQUE_CAPTURE_DESCRIPTOR_DATA_CREATE_INFO_EXT: c_int = 1000316010;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_INFO_EXT: c_int = 1000316011;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_PUSH_DESCRIPTOR_BUFFER_HANDLE_EXT: c_int = 1000316012;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT: c_int = 1000316009;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT: c_int = 1000320000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_PROPERTIES_EXT: c_int = 1000320001;
pub const VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT: c_int = 1000320002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD: c_int = 1000321000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR: c_int = 1000203000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_PROPERTIES_KHR: c_int = 1000322000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR: c_int = 1000323000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV: c_int = 1000326000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV: c_int = 1000326001;
pub const VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV: c_int = 1000326002;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV: c_int = 1000327000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV: c_int = 1000327001;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MOTION_INFO_NV: c_int = 1000327002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT: c_int = 1000328000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT: c_int = 1000328001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT: c_int = 1000330000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT: c_int = 1000332000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT: c_int = 1000332001;
pub const VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM: c_int = 1000333000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR: c_int = 1000336000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT: c_int = 1000338000;
pub const VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_CONTROL_EXT: c_int = 1000338001;
pub const VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_PROPERTIES_EXT: c_int = 1000338004;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT: c_int = 1000339000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT: c_int = 1000340000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FAULT_FEATURES_EXT: c_int = 1000341000;
pub const VK_STRUCTURE_TYPE_DEVICE_FAULT_COUNTS_EXT: c_int = 1000341001;
pub const VK_STRUCTURE_TYPE_DEVICE_FAULT_INFO_EXT: c_int = 1000341002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT: c_int = 1000344000;
pub const VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT: c_int = 1000346000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT: c_int = 1000352000;
pub const VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT: c_int = 1000352001;
pub const VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT: c_int = 1000352002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT: c_int = 1000353000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ADDRESS_BINDING_REPORT_FEATURES_EXT: c_int = 1000354000;
pub const VK_STRUCTURE_TYPE_DEVICE_ADDRESS_BINDING_CALLBACK_DATA_EXT: c_int = 1000354001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT: c_int = 1000355000;
pub const VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT: c_int = 1000355001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT: c_int = 1000356000;
pub const VK_STRUCTURE_TYPE_IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA: c_int = 1000364000;
pub const VK_STRUCTURE_TYPE_MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA: c_int = 1000364001;
pub const VK_STRUCTURE_TYPE_MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA: c_int = 1000364002;
pub const VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA: c_int = 1000365000;
pub const VK_STRUCTURE_TYPE_SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA: c_int = 1000365001;
pub const VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CREATE_INFO_FUCHSIA: c_int = 1000366000;
pub const VK_STRUCTURE_TYPE_IMPORT_MEMORY_BUFFER_COLLECTION_FUCHSIA: c_int = 1000366001;
pub const VK_STRUCTURE_TYPE_BUFFER_COLLECTION_IMAGE_CREATE_INFO_FUCHSIA: c_int = 1000366002;
pub const VK_STRUCTURE_TYPE_BUFFER_COLLECTION_PROPERTIES_FUCHSIA: c_int = 1000366003;
pub const VK_STRUCTURE_TYPE_BUFFER_CONSTRAINTS_INFO_FUCHSIA: c_int = 1000366004;
pub const VK_STRUCTURE_TYPE_BUFFER_COLLECTION_BUFFER_CREATE_INFO_FUCHSIA: c_int = 1000366005;
pub const VK_STRUCTURE_TYPE_IMAGE_CONSTRAINTS_INFO_FUCHSIA: c_int = 1000366006;
pub const VK_STRUCTURE_TYPE_IMAGE_FORMAT_CONSTRAINTS_INFO_FUCHSIA: c_int = 1000366007;
pub const VK_STRUCTURE_TYPE_SYSMEM_COLOR_SPACE_FUCHSIA: c_int = 1000366008;
pub const VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CONSTRAINTS_INFO_FUCHSIA: c_int = 1000366009;
pub const VK_STRUCTURE_TYPE_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI: c_int = 1000369000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI: c_int = 1000369001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI: c_int = 1000369002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI: c_int = 1000370000;
pub const VK_STRUCTURE_TYPE_MEMORY_GET_REMOTE_ADDRESS_INFO_NV: c_int = 1000371000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV: c_int = 1000371001;
pub const VK_STRUCTURE_TYPE_PIPELINE_PROPERTIES_IDENTIFIER_EXT: c_int = 1000372000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT: c_int = 1000372001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAME_BOUNDARY_FEATURES_EXT: c_int = 1000375000;
pub const VK_STRUCTURE_TYPE_FRAME_BOUNDARY_EXT: c_int = 1000375001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT: c_int = 1000376000;
pub const VK_STRUCTURE_TYPE_SUBPASS_RESOLVE_PERFORMANCE_QUERY_EXT: c_int = 1000376001;
pub const VK_STRUCTURE_TYPE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_INFO_EXT: c_int = 1000376002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT: c_int = 1000377000;
pub const VK_STRUCTURE_TYPE_SCREEN_SURFACE_CREATE_INFO_QNX: c_int = 1000378000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT: c_int = 1000381000;
pub const VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT: c_int = 1000381001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT: c_int = 1000382000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR: c_int = 1000386000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT: c_int = 1000391000;
pub const VK_STRUCTURE_TYPE_IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT: c_int = 1000391001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT: c_int = 1000392000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT: c_int = 1000392001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT: c_int = 1000393000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_FEATURES_EXT: c_int = 1000395000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_PROPERTIES_EXT: c_int = 1000395001;
pub const VK_STRUCTURE_TYPE_MICROMAP_BUILD_INFO_EXT: c_int = 1000396000;
pub const VK_STRUCTURE_TYPE_MICROMAP_VERSION_INFO_EXT: c_int = 1000396001;
pub const VK_STRUCTURE_TYPE_COPY_MICROMAP_INFO_EXT: c_int = 1000396002;
pub const VK_STRUCTURE_TYPE_COPY_MICROMAP_TO_MEMORY_INFO_EXT: c_int = 1000396003;
pub const VK_STRUCTURE_TYPE_COPY_MEMORY_TO_MICROMAP_INFO_EXT: c_int = 1000396004;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_FEATURES_EXT: c_int = 1000396005;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_PROPERTIES_EXT: c_int = 1000396006;
pub const VK_STRUCTURE_TYPE_MICROMAP_CREATE_INFO_EXT: c_int = 1000396007;
pub const VK_STRUCTURE_TYPE_MICROMAP_BUILD_SIZES_INFO_EXT: c_int = 1000396008;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_OPACITY_MICROMAP_EXT: c_int = 1000396009;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_FEATURES_HUAWEI: c_int = 1000404000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_PROPERTIES_HUAWEI: c_int = 1000404001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_VRS_FEATURES_HUAWEI: c_int = 1000404002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT: c_int = 1000411000;
pub const VK_STRUCTURE_TYPE_SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT: c_int = 1000411001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT: c_int = 1000412000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_ARM: c_int = 1000415000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_ROTATE_FEATURES_KHR: c_int = 1000416000;
pub const VK_STRUCTURE_TYPE_DEVICE_QUEUE_SHADER_CORE_CONTROL_CREATE_INFO_ARM: c_int = 1000417000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_FEATURES_ARM: c_int = 1000417001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_PROPERTIES_ARM: c_int = 1000417002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_SLICED_VIEW_OF_3D_FEATURES_EXT: c_int = 1000418000;
pub const VK_STRUCTURE_TYPE_IMAGE_VIEW_SLICED_CREATE_INFO_EXT: c_int = 1000418001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE: c_int = 1000420000;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_BINDING_REFERENCE_VALVE: c_int = 1000420001;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE: c_int = 1000420002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_EXT: c_int = 1000421000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT: c_int = 1000422000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RENDER_PASS_STRIPED_FEATURES_ARM: c_int = 1000424000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RENDER_PASS_STRIPED_PROPERTIES_ARM: c_int = 1000424001;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_STRIPE_BEGIN_INFO_ARM: c_int = 1000424002;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_STRIPE_INFO_ARM: c_int = 1000424003;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_STRIPE_SUBMIT_INFO_ARM: c_int = 1000424004;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM: c_int = 1000425000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM: c_int = 1000425001;
pub const VK_STRUCTURE_TYPE_SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM: c_int = 1000425002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_FEATURES_NV: c_int = 1000426000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_PROPERTIES_NV: c_int = 1000426001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_FEATURES_NV: c_int = 1000427000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_PROPERTIES_NV: c_int = 1000427001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_COMPUTE_FEATURES_NV: c_int = 1000428000;
pub const VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_INDIRECT_BUFFER_INFO_NV: c_int = 1000428001;
pub const VK_STRUCTURE_TYPE_PIPELINE_INDIRECT_DEVICE_ADDRESS_INFO_NV: c_int = 1000428002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV: c_int = 1000430000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MAXIMAL_RECONVERGENCE_FEATURES_KHR: c_int = 1000434000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT: c_int = 1000437000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM: c_int = 1000440000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_PROPERTIES_QCOM: c_int = 1000440001;
pub const VK_STRUCTURE_TYPE_IMAGE_VIEW_SAMPLE_WEIGHT_CREATE_INFO_QCOM: c_int = 1000440002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NESTED_COMMAND_BUFFER_FEATURES_EXT: c_int = 1000451000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NESTED_COMMAND_BUFFER_PROPERTIES_EXT: c_int = 1000451001;
pub const VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_EXT: c_int = 1000453000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT: c_int = 1000455000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_PROPERTIES_EXT: c_int = 1000455001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT: c_int = 1000458000;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_CONTROL_EXT: c_int = 1000458001;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_FEEDBACK_CREATE_INFO_EXT: c_int = 1000458002;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_SUBPASS_FEEDBACK_CREATE_INFO_EXT: c_int = 1000458003;
pub const VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_INFO_LUNARG: c_int = 1000459000;
pub const VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_LIST_LUNARG: c_int = 1000459001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT: c_int = 1000462000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_PROPERTIES_EXT: c_int = 1000462001;
pub const VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_MODULE_IDENTIFIER_CREATE_INFO_EXT: c_int = 1000462002;
pub const VK_STRUCTURE_TYPE_SHADER_MODULE_IDENTIFIER_EXT: c_int = 1000462003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT: c_int = 1000342000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_FEATURES_NV: c_int = 1000464000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_PROPERTIES_NV: c_int = 1000464001;
pub const VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_INFO_NV: c_int = 1000464002;
pub const VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_PROPERTIES_NV: c_int = 1000464003;
pub const VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_INFO_NV: c_int = 1000464004;
pub const VK_STRUCTURE_TYPE_OPTICAL_FLOW_EXECUTE_INFO_NV: c_int = 1000464005;
pub const VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_PRIVATE_DATA_INFO_NV: c_int = 1000464010;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_DITHERING_FEATURES_EXT: c_int = 1000465000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES_EXT: c_int = 1000466000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FORMAT_RESOLVE_FEATURES_ANDROID: c_int = 1000468000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FORMAT_RESOLVE_PROPERTIES_ANDROID: c_int = 1000468001;
pub const VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_RESOLVE_PROPERTIES_ANDROID: c_int = 1000468002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_FEATURES_KHR: c_int = 1000470000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_PROPERTIES_KHR: c_int = 1000470001;
pub const VK_STRUCTURE_TYPE_RENDERING_AREA_INFO_KHR: c_int = 1000470003;
pub const VK_STRUCTURE_TYPE_DEVICE_IMAGE_SUBRESOURCE_INFO_KHR: c_int = 1000470004;
pub const VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_KHR: c_int = 1000338002;
pub const VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_KHR: c_int = 1000338003;
pub const VK_STRUCTURE_TYPE_PIPELINE_CREATE_FLAGS_2_CREATE_INFO_KHR: c_int = 1000470005;
pub const VK_STRUCTURE_TYPE_BUFFER_USAGE_FLAGS_2_CREATE_INFO_KHR: c_int = 1000470006;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ANTI_LAG_FEATURES_AMD: c_int = 1000476000;
pub const VK_STRUCTURE_TYPE_ANTI_LAG_DATA_AMD: c_int = 1000476001;
pub const VK_STRUCTURE_TYPE_ANTI_LAG_PRESENTATION_INFO_AMD: c_int = 1000476002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_POSITION_FETCH_FEATURES_KHR: c_int = 1000481000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_FEATURES_EXT: c_int = 1000482000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_PROPERTIES_EXT: c_int = 1000482001;
pub const VK_STRUCTURE_TYPE_SHADER_CREATE_INFO_EXT: c_int = 1000482002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_BINARY_FEATURES_KHR: c_int = 1000483000;
pub const VK_STRUCTURE_TYPE_PIPELINE_BINARY_CREATE_INFO_KHR: c_int = 1000483001;
pub const VK_STRUCTURE_TYPE_PIPELINE_BINARY_INFO_KHR: c_int = 1000483002;
pub const VK_STRUCTURE_TYPE_PIPELINE_BINARY_KEY_KHR: c_int = 1000483003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_BINARY_PROPERTIES_KHR: c_int = 1000483004;
pub const VK_STRUCTURE_TYPE_RELEASE_CAPTURED_PIPELINE_DATA_INFO_KHR: c_int = 1000483005;
pub const VK_STRUCTURE_TYPE_PIPELINE_BINARY_DATA_INFO_KHR: c_int = 1000483006;
pub const VK_STRUCTURE_TYPE_PIPELINE_CREATE_INFO_KHR: c_int = 1000483007;
pub const VK_STRUCTURE_TYPE_DEVICE_PIPELINE_BINARY_INTERNAL_CACHE_CONTROL_KHR: c_int = 1000483008;
pub const VK_STRUCTURE_TYPE_PIPELINE_BINARY_HANDLES_INFO_KHR: c_int = 1000483009;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM: c_int = 1000484000;
pub const VK_STRUCTURE_TYPE_TILE_PROPERTIES_QCOM: c_int = 1000484001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC: c_int = 1000485000;
pub const VK_STRUCTURE_TYPE_AMIGO_PROFILING_SUBMIT_INFO_SEC: c_int = 1000485001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_VIEWPORTS_FEATURES_QCOM: c_int = 1000488000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_FEATURES_NV: c_int = 1000490000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_PROPERTIES_NV: c_int = 1000490001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_SPARSE_ADDRESS_SPACE_FEATURES_NV: c_int = 1000492000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_SPARSE_ADDRESS_SPACE_PROPERTIES_NV: c_int = 1000492001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT: c_int = 1000351000;
pub const VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_EXT: c_int = 1000351002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_VERTEX_ATTRIBUTES_FEATURES_EXT: c_int = 1000495000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_VERTEX_ATTRIBUTES_PROPERTIES_EXT: c_int = 1000495001;
pub const VK_STRUCTURE_TYPE_LAYER_SETTINGS_CREATE_INFO_EXT: c_int = 1000496000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_FEATURES_ARM: c_int = 1000497000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_PROPERTIES_ARM: c_int = 1000497001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_LIBRARY_GROUP_HANDLES_FEATURES_EXT: c_int = 1000498000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_FEATURES_EXT: c_int = 1000499000;
pub const VK_STRUCTURE_TYPE_LATENCY_SLEEP_MODE_INFO_NV: c_int = 1000505000;
pub const VK_STRUCTURE_TYPE_LATENCY_SLEEP_INFO_NV: c_int = 1000505001;
pub const VK_STRUCTURE_TYPE_SET_LATENCY_MARKER_INFO_NV: c_int = 1000505002;
pub const VK_STRUCTURE_TYPE_GET_LATENCY_MARKER_INFO_NV: c_int = 1000505003;
pub const VK_STRUCTURE_TYPE_LATENCY_TIMINGS_FRAME_REPORT_NV: c_int = 1000505004;
pub const VK_STRUCTURE_TYPE_LATENCY_SUBMISSION_PRESENT_ID_NV: c_int = 1000505005;
pub const VK_STRUCTURE_TYPE_OUT_OF_BAND_QUEUE_TYPE_INFO_NV: c_int = 1000505006;
pub const VK_STRUCTURE_TYPE_SWAPCHAIN_LATENCY_CREATE_INFO_NV: c_int = 1000505007;
pub const VK_STRUCTURE_TYPE_LATENCY_SURFACE_CAPABILITIES_NV: c_int = 1000505008;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_KHR: c_int = 1000506000;
pub const VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_KHR: c_int = 1000506001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_KHR: c_int = 1000506002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_RENDER_AREAS_FEATURES_QCOM: c_int = 1000510000;
pub const VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_RENDER_AREAS_RENDER_PASS_BEGIN_INFO_QCOM: c_int = 1000510001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_KHR: c_int = 1000201000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_PROPERTIES_KHR: c_int = 1000511000;
pub const VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_CAPABILITIES_KHR: c_int = 1000512000;
pub const VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_PICTURE_INFO_KHR: c_int = 1000512001;
pub const VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_PROFILE_INFO_KHR: c_int = 1000512003;
pub const VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_SESSION_PARAMETERS_CREATE_INFO_KHR: c_int = 1000512004;
pub const VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_DPB_SLOT_INFO_KHR: c_int = 1000512005;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_MAINTENANCE_1_FEATURES_KHR: c_int = 1000515000;
pub const VK_STRUCTURE_TYPE_VIDEO_INLINE_QUERY_INFO_KHR: c_int = 1000515001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PER_STAGE_DESCRIPTOR_SET_FEATURES_NV: c_int = 1000516000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_FEATURES_QCOM: c_int = 1000518000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_PROPERTIES_QCOM: c_int = 1000518001;
pub const VK_STRUCTURE_TYPE_SAMPLER_BLOCK_MATCH_WINDOW_CREATE_INFO_QCOM: c_int = 1000518002;
pub const VK_STRUCTURE_TYPE_SAMPLER_CUBIC_WEIGHTS_CREATE_INFO_QCOM: c_int = 1000519000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUBIC_WEIGHTS_FEATURES_QCOM: c_int = 1000519001;
pub const VK_STRUCTURE_TYPE_BLIT_IMAGE_CUBIC_WEIGHTS_INFO_QCOM: c_int = 1000519002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_DEGAMMA_FEATURES_QCOM: c_int = 1000520000;
pub const VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_YCBCR_DEGAMMA_CREATE_INFO_QCOM: c_int = 1000520001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUBIC_CLAMP_FEATURES_QCOM: c_int = 1000521000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_FEATURES_EXT: c_int = 1000524000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_KHR: c_int = 1000525000;
pub const VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_KHR: c_int = 1000190001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_KHR: c_int = 1000190002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT_CONTROLS_2_FEATURES_KHR: c_int = 1000528000;
pub const VK_STRUCTURE_TYPE_SCREEN_BUFFER_PROPERTIES_QNX: c_int = 1000529000;
pub const VK_STRUCTURE_TYPE_SCREEN_BUFFER_FORMAT_PROPERTIES_QNX: c_int = 1000529001;
pub const VK_STRUCTURE_TYPE_IMPORT_SCREEN_BUFFER_INFO_QNX: c_int = 1000529002;
pub const VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_QNX: c_int = 1000529003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_SCREEN_BUFFER_FEATURES_QNX: c_int = 1000529004;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_DRIVER_PROPERTIES_MSFT: c_int = 1000530000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_KHR: c_int = 1000265000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_KHR: c_int = 1000259000;
pub const VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_KHR: c_int = 1000259001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_KHR: c_int = 1000259002;
pub const VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_KHR: c_int = 1000184000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EXPECT_ASSUME_FEATURES_KHR: c_int = 1000544000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_FEATURES_KHR: c_int = 1000545000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_PROPERTIES_KHR: c_int = 1000545001;
pub const VK_STRUCTURE_TYPE_BIND_MEMORY_STATUS_KHR: c_int = 1000545002;
pub const VK_STRUCTURE_TYPE_BIND_DESCRIPTOR_SETS_INFO_KHR: c_int = 1000545003;
pub const VK_STRUCTURE_TYPE_PUSH_CONSTANTS_INFO_KHR: c_int = 1000545004;
pub const VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_INFO_KHR: c_int = 1000545005;
pub const VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_WITH_TEMPLATE_INFO_KHR: c_int = 1000545006;
pub const VK_STRUCTURE_TYPE_SET_DESCRIPTOR_BUFFER_OFFSETS_INFO_EXT: c_int = 1000545007;
pub const VK_STRUCTURE_TYPE_BIND_DESCRIPTOR_BUFFER_EMBEDDED_SAMPLERS_INFO_EXT: c_int = 1000545008;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_POOL_OVERALLOCATION_FEATURES_NV: c_int = 1000546000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAW_ACCESS_CHAINS_FEATURES_NV: c_int = 1000555000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_RELAXED_EXTENDED_INSTRUCTION_FEATURES_KHR: c_int = 1000558000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMMAND_BUFFER_INHERITANCE_FEATURES_NV: c_int = 1000559000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_7_FEATURES_KHR: c_int = 1000562000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_7_PROPERTIES_KHR: c_int = 1000562001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_API_PROPERTIES_LIST_KHR: c_int = 1000562002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_API_PROPERTIES_KHR: c_int = 1000562003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_API_VULKAN_PROPERTIES_KHR: c_int = 1000562004;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT16_VECTOR_FEATURES_NV: c_int = 1000563000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_REPLICATED_COMPOSITES_FEATURES_EXT: c_int = 1000564000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_VALIDATION_FEATURES_NV: c_int = 1000568000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ALIGNMENT_CONTROL_FEATURES_MESA: c_int = 1000575000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ALIGNMENT_CONTROL_PROPERTIES_MESA: c_int = 1000575001;
pub const VK_STRUCTURE_TYPE_IMAGE_ALIGNMENT_CONTROL_CREATE_INFO_MESA: c_int = 1000575002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES: c_int = 1000120000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES: c_int = 1000063000;
pub const VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT: c_int = 1000011000;
pub const VK_STRUCTURE_TYPE_RENDERING_INFO_KHR: c_int = 1000044000;
pub const VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO_KHR: c_int = 1000044001;
pub const VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO_KHR: c_int = 1000044002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES_KHR: c_int = 1000044003;
pub const VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO_KHR: c_int = 1000044004;
pub const VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_NV: c_int = 1000044008;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR: c_int = 1000053000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR: c_int = 1000053001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR: c_int = 1000053002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR: c_int = 1000059000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR: c_int = 1000059001;
pub const VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR: c_int = 1000059002;
pub const VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR: c_int = 1000059003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR: c_int = 1000059004;
pub const VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR: c_int = 1000059005;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR: c_int = 1000059006;
pub const VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR: c_int = 1000059007;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR: c_int = 1000059008;
pub const VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR: c_int = 1000060000;
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR: c_int = 1000060003;
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR: c_int = 1000060004;
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR: c_int = 1000060005;
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR: c_int = 1000060006;
pub const VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR: c_int = 1000060013;
pub const VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR: c_int = 1000060014;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT: c_int = 1000066000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR: c_int = 1000070000;
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR: c_int = 1000070001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR: c_int = 1000071000;
pub const VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR: c_int = 1000071001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR: c_int = 1000071002;
pub const VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR: c_int = 1000071003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR: c_int = 1000071004;
pub const VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR: c_int = 1000072000;
pub const VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR: c_int = 1000072001;
pub const VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR: c_int = 1000072002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR: c_int = 1000076000;
pub const VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR: c_int = 1000076001;
pub const VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR: c_int = 1000077000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR: c_int = 1000082000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR: c_int = 1000082000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR: c_int = 1000083000;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR: c_int = 1000085000;
pub const VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT: c_int = 1000090000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR: c_int = 1000108000;
pub const VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR: c_int = 1000108001;
pub const VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR: c_int = 1000108002;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR: c_int = 1000108003;
pub const VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR: c_int = 1000109000;
pub const VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR: c_int = 1000109001;
pub const VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR: c_int = 1000109002;
pub const VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR: c_int = 1000109003;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR: c_int = 1000109004;
pub const VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR: c_int = 1000109005;
pub const VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR: c_int = 1000109006;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR: c_int = 1000112000;
pub const VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR: c_int = 1000112001;
pub const VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR: c_int = 1000113000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR: c_int = 1000117000;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR: c_int = 1000117001;
pub const VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR: c_int = 1000117002;
pub const VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR: c_int = 1000117003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR: c_int = 1000120000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR: c_int = 1000120000;
pub const VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR: c_int = 1000127000;
pub const VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR: c_int = 1000127001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT: c_int = 1000130000;
pub const VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT: c_int = 1000130001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT: c_int = 1000138000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT: c_int = 1000138001;
pub const VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT: c_int = 1000138002;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT: c_int = 1000138003;
pub const VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR: c_int = 1000146000;
pub const VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR: c_int = 1000146001;
pub const VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR: c_int = 1000146002;
pub const VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR: c_int = 1000146003;
pub const VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR: c_int = 1000146004;
pub const VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR: c_int = 1000147000;
pub const VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR: c_int = 1000156000;
pub const VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR: c_int = 1000156001;
pub const VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR: c_int = 1000156002;
pub const VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR: c_int = 1000156003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR: c_int = 1000156004;
pub const VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR: c_int = 1000156005;
pub const VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR: c_int = 1000157000;
pub const VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR: c_int = 1000157001;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT: c_int = 1000161000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT: c_int = 1000161001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT: c_int = 1000161002;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT: c_int = 1000161003;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT: c_int = 1000161004;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR: c_int = 1000168000;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR: c_int = 1000168001;
pub const VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT: c_int = 1000174000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR: c_int = 1000175000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR: c_int = 1000177000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR: c_int = 1000180000;
pub const VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT: c_int = 1000184000;
pub const VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT: c_int = 1000190001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT: c_int = 1000190002;
pub const VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT: c_int = 1000192000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR: c_int = 1000196000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR: c_int = 1000197000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR: c_int = 1000199000;
pub const VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR: c_int = 1000199001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV: c_int = 1000201000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV: c_int = 1000203000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR: c_int = 1000207000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR: c_int = 1000207001;
pub const VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR: c_int = 1000207002;
pub const VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR: c_int = 1000207003;
pub const VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR: c_int = 1000207004;
pub const VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR: c_int = 1000207005;
pub const VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL: c_int = 1000210000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR: c_int = 1000211000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR: c_int = 1000215000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT: c_int = 1000221000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT: c_int = 1000225000;
pub const VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT: c_int = 1000225001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT: c_int = 1000225002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR: c_int = 1000241000;
pub const VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR: c_int = 1000241001;
pub const VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR: c_int = 1000241002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT: c_int = 1000244000;
pub const VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT: c_int = 1000244001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT: c_int = 1000245000;
pub const VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT: c_int = 1000246000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR: c_int = 1000253000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR: c_int = 1000257000;
pub const VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR: c_int = 1000244001;
pub const VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR: c_int = 1000257002;
pub const VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR: c_int = 1000257003;
pub const VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR: c_int = 1000257004;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT: c_int = 1000259000;
pub const VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT: c_int = 1000259001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT: c_int = 1000259002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT: c_int = 1000261000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT: c_int = 1000265000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT: c_int = 1000276000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES_KHR: c_int = 1000280000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES_KHR: c_int = 1000280001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT: c_int = 1000281001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT: c_int = 1000295000;
pub const VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT: c_int = 1000295001;
pub const VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT: c_int = 1000295002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT: c_int = 1000297000;
pub const VK_STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR: c_int = 1000314000;
pub const VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR: c_int = 1000314001;
pub const VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR: c_int = 1000314002;
pub const VK_STRUCTURE_TYPE_DEPENDENCY_INFO_KHR: c_int = 1000314003;
pub const VK_STRUCTURE_TYPE_SUBMIT_INFO_2_KHR: c_int = 1000314004;
pub const VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR: c_int = 1000314005;
pub const VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR: c_int = 1000314006;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR: c_int = 1000314007;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR: c_int = 1000325000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT: c_int = 1000335000;
pub const VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR: c_int = 1000337000;
pub const VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR: c_int = 1000337001;
pub const VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR: c_int = 1000337002;
pub const VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR: c_int = 1000337003;
pub const VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR: c_int = 1000337004;
pub const VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR: c_int = 1000337005;
pub const VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR: c_int = 1000337006;
pub const VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR: c_int = 1000337007;
pub const VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR: c_int = 1000337008;
pub const VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR: c_int = 1000337009;
pub const VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR: c_int = 1000337010;
pub const VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_EXT: c_int = 1000338002;
pub const VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_EXT: c_int = 1000338003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_ARM: c_int = 1000342000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE: c_int = 1000351000;
pub const VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE: c_int = 1000351002;
pub const VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3_KHR: c_int = 1000360000;
pub const VK_STRUCTURE_TYPE_PIPELINE_INFO_EXT: c_int = 1000269001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_EXT: c_int = 1000388000;
pub const VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_EXT: c_int = 1000388001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES_KHR: c_int = 1000413000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES_KHR: c_int = 1000413001;
pub const VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS_KHR: c_int = 1000413002;
pub const VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS_KHR: c_int = 1000413003;
pub const VK_STRUCTURE_TYPE_SHADER_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT: c_int = 1000225001;
pub const VK_STRUCTURE_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkStructureType = c_uint;
pub const VkStructureType = enum_VkStructureType;
pub const VK_PIPELINE_CACHE_HEADER_VERSION_ONE: c_int = 1;
pub const VK_PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPipelineCacheHeaderVersion = c_uint;
pub const VkPipelineCacheHeaderVersion = enum_VkPipelineCacheHeaderVersion;
pub const VK_IMAGE_LAYOUT_UNDEFINED: c_int = 0;
pub const VK_IMAGE_LAYOUT_GENERAL: c_int = 1;
pub const VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL: c_int = 2;
pub const VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL: c_int = 3;
pub const VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL: c_int = 4;
pub const VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL: c_int = 5;
pub const VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL: c_int = 6;
pub const VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL: c_int = 7;
pub const VK_IMAGE_LAYOUT_PREINITIALIZED: c_int = 8;
pub const VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL: c_int = 1000117000;
pub const VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL: c_int = 1000117001;
pub const VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL: c_int = 1000241000;
pub const VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL: c_int = 1000241001;
pub const VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL: c_int = 1000241002;
pub const VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL: c_int = 1000241003;
pub const VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL: c_int = 1000314000;
pub const VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL: c_int = 1000314001;
pub const VK_IMAGE_LAYOUT_PRESENT_SRC_KHR: c_int = 1000001002;
pub const VK_IMAGE_LAYOUT_VIDEO_DECODE_DST_KHR: c_int = 1000024000;
pub const VK_IMAGE_LAYOUT_VIDEO_DECODE_SRC_KHR: c_int = 1000024001;
pub const VK_IMAGE_LAYOUT_VIDEO_DECODE_DPB_KHR: c_int = 1000024002;
pub const VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR: c_int = 1000111000;
pub const VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT: c_int = 1000218000;
pub const VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR: c_int = 1000164003;
pub const VK_IMAGE_LAYOUT_RENDERING_LOCAL_READ_KHR: c_int = 1000232000;
pub const VK_IMAGE_LAYOUT_VIDEO_ENCODE_DST_KHR: c_int = 1000299000;
pub const VK_IMAGE_LAYOUT_VIDEO_ENCODE_SRC_KHR: c_int = 1000299001;
pub const VK_IMAGE_LAYOUT_VIDEO_ENCODE_DPB_KHR: c_int = 1000299002;
pub const VK_IMAGE_LAYOUT_ATTACHMENT_FEEDBACK_LOOP_OPTIMAL_EXT: c_int = 1000339000;
pub const VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR: c_int = 1000117000;
pub const VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR: c_int = 1000117001;
pub const VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV: c_int = 1000164003;
pub const VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR: c_int = 1000241000;
pub const VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR: c_int = 1000241001;
pub const VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR: c_int = 1000241002;
pub const VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR: c_int = 1000241003;
pub const VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL_KHR: c_int = 1000314000;
pub const VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR: c_int = 1000314001;
pub const VK_IMAGE_LAYOUT_MAX_ENUM: c_int = 2147483647;
pub const enum_VkImageLayout = c_uint;
pub const VkImageLayout = enum_VkImageLayout;
pub const VK_OBJECT_TYPE_UNKNOWN: c_int = 0;
pub const VK_OBJECT_TYPE_INSTANCE: c_int = 1;
pub const VK_OBJECT_TYPE_PHYSICAL_DEVICE: c_int = 2;
pub const VK_OBJECT_TYPE_DEVICE: c_int = 3;
pub const VK_OBJECT_TYPE_QUEUE: c_int = 4;
pub const VK_OBJECT_TYPE_SEMAPHORE: c_int = 5;
pub const VK_OBJECT_TYPE_COMMAND_BUFFER: c_int = 6;
pub const VK_OBJECT_TYPE_FENCE: c_int = 7;
pub const VK_OBJECT_TYPE_DEVICE_MEMORY: c_int = 8;
pub const VK_OBJECT_TYPE_BUFFER: c_int = 9;
pub const VK_OBJECT_TYPE_IMAGE: c_int = 10;
pub const VK_OBJECT_TYPE_EVENT: c_int = 11;
pub const VK_OBJECT_TYPE_QUERY_POOL: c_int = 12;
pub const VK_OBJECT_TYPE_BUFFER_VIEW: c_int = 13;
pub const VK_OBJECT_TYPE_IMAGE_VIEW: c_int = 14;
pub const VK_OBJECT_TYPE_SHADER_MODULE: c_int = 15;
pub const VK_OBJECT_TYPE_PIPELINE_CACHE: c_int = 16;
pub const VK_OBJECT_TYPE_PIPELINE_LAYOUT: c_int = 17;
pub const VK_OBJECT_TYPE_RENDER_PASS: c_int = 18;
pub const VK_OBJECT_TYPE_PIPELINE: c_int = 19;
pub const VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT: c_int = 20;
pub const VK_OBJECT_TYPE_SAMPLER: c_int = 21;
pub const VK_OBJECT_TYPE_DESCRIPTOR_POOL: c_int = 22;
pub const VK_OBJECT_TYPE_DESCRIPTOR_SET: c_int = 23;
pub const VK_OBJECT_TYPE_FRAMEBUFFER: c_int = 24;
pub const VK_OBJECT_TYPE_COMMAND_POOL: c_int = 25;
pub const VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION: c_int = 1000156000;
pub const VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE: c_int = 1000085000;
pub const VK_OBJECT_TYPE_PRIVATE_DATA_SLOT: c_int = 1000295000;
pub const VK_OBJECT_TYPE_SURFACE_KHR: c_int = 1000000000;
pub const VK_OBJECT_TYPE_SWAPCHAIN_KHR: c_int = 1000001000;
pub const VK_OBJECT_TYPE_DISPLAY_KHR: c_int = 1000002000;
pub const VK_OBJECT_TYPE_DISPLAY_MODE_KHR: c_int = 1000002001;
pub const VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT: c_int = 1000011000;
pub const VK_OBJECT_TYPE_VIDEO_SESSION_KHR: c_int = 1000023000;
pub const VK_OBJECT_TYPE_VIDEO_SESSION_PARAMETERS_KHR: c_int = 1000023001;
pub const VK_OBJECT_TYPE_CU_MODULE_NVX: c_int = 1000029000;
pub const VK_OBJECT_TYPE_CU_FUNCTION_NVX: c_int = 1000029001;
pub const VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT: c_int = 1000128000;
pub const VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR: c_int = 1000150000;
pub const VK_OBJECT_TYPE_VALIDATION_CACHE_EXT: c_int = 1000160000;
pub const VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV: c_int = 1000165000;
pub const VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL: c_int = 1000210000;
pub const VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR: c_int = 1000268000;
pub const VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV: c_int = 1000277000;
pub const VK_OBJECT_TYPE_CUDA_MODULE_NV: c_int = 1000307000;
pub const VK_OBJECT_TYPE_CUDA_FUNCTION_NV: c_int = 1000307001;
pub const VK_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA: c_int = 1000366000;
pub const VK_OBJECT_TYPE_MICROMAP_EXT: c_int = 1000396000;
pub const VK_OBJECT_TYPE_OPTICAL_FLOW_SESSION_NV: c_int = 1000464000;
pub const VK_OBJECT_TYPE_SHADER_EXT: c_int = 1000482000;
pub const VK_OBJECT_TYPE_PIPELINE_BINARY_KHR: c_int = 1000483000;
pub const VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR: c_int = 1000085000;
pub const VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR: c_int = 1000156000;
pub const VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT: c_int = 1000295000;
pub const VK_OBJECT_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkObjectType = c_uint;
pub const VkObjectType = enum_VkObjectType;
pub const VK_VENDOR_ID_KHRONOS: c_int = 65536;
pub const VK_VENDOR_ID_VIV: c_int = 65537;
pub const VK_VENDOR_ID_VSI: c_int = 65538;
pub const VK_VENDOR_ID_KAZAN: c_int = 65539;
pub const VK_VENDOR_ID_CODEPLAY: c_int = 65540;
pub const VK_VENDOR_ID_MESA: c_int = 65541;
pub const VK_VENDOR_ID_POCL: c_int = 65542;
pub const VK_VENDOR_ID_MOBILEYE: c_int = 65543;
pub const VK_VENDOR_ID_MAX_ENUM: c_int = 2147483647;
pub const enum_VkVendorId = c_uint;
pub const VkVendorId = enum_VkVendorId;
pub const VK_SYSTEM_ALLOCATION_SCOPE_COMMAND: c_int = 0;
pub const VK_SYSTEM_ALLOCATION_SCOPE_OBJECT: c_int = 1;
pub const VK_SYSTEM_ALLOCATION_SCOPE_CACHE: c_int = 2;
pub const VK_SYSTEM_ALLOCATION_SCOPE_DEVICE: c_int = 3;
pub const VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE: c_int = 4;
pub const VK_SYSTEM_ALLOCATION_SCOPE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSystemAllocationScope = c_uint;
pub const VkSystemAllocationScope = enum_VkSystemAllocationScope;
pub const VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE: c_int = 0;
pub const VK_INTERNAL_ALLOCATION_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkInternalAllocationType = c_uint;
pub const VkInternalAllocationType = enum_VkInternalAllocationType;
pub const VK_FORMAT_UNDEFINED: c_int = 0;
pub const VK_FORMAT_R4G4_UNORM_PACK8: c_int = 1;
pub const VK_FORMAT_R4G4B4A4_UNORM_PACK16: c_int = 2;
pub const VK_FORMAT_B4G4R4A4_UNORM_PACK16: c_int = 3;
pub const VK_FORMAT_R5G6B5_UNORM_PACK16: c_int = 4;
pub const VK_FORMAT_B5G6R5_UNORM_PACK16: c_int = 5;
pub const VK_FORMAT_R5G5B5A1_UNORM_PACK16: c_int = 6;
pub const VK_FORMAT_B5G5R5A1_UNORM_PACK16: c_int = 7;
pub const VK_FORMAT_A1R5G5B5_UNORM_PACK16: c_int = 8;
pub const VK_FORMAT_R8_UNORM: c_int = 9;
pub const VK_FORMAT_R8_SNORM: c_int = 10;
pub const VK_FORMAT_R8_USCALED: c_int = 11;
pub const VK_FORMAT_R8_SSCALED: c_int = 12;
pub const VK_FORMAT_R8_UINT: c_int = 13;
pub const VK_FORMAT_R8_SINT: c_int = 14;
pub const VK_FORMAT_R8_SRGB: c_int = 15;
pub const VK_FORMAT_R8G8_UNORM: c_int = 16;
pub const VK_FORMAT_R8G8_SNORM: c_int = 17;
pub const VK_FORMAT_R8G8_USCALED: c_int = 18;
pub const VK_FORMAT_R8G8_SSCALED: c_int = 19;
pub const VK_FORMAT_R8G8_UINT: c_int = 20;
pub const VK_FORMAT_R8G8_SINT: c_int = 21;
pub const VK_FORMAT_R8G8_SRGB: c_int = 22;
pub const VK_FORMAT_R8G8B8_UNORM: c_int = 23;
pub const VK_FORMAT_R8G8B8_SNORM: c_int = 24;
pub const VK_FORMAT_R8G8B8_USCALED: c_int = 25;
pub const VK_FORMAT_R8G8B8_SSCALED: c_int = 26;
pub const VK_FORMAT_R8G8B8_UINT: c_int = 27;
pub const VK_FORMAT_R8G8B8_SINT: c_int = 28;
pub const VK_FORMAT_R8G8B8_SRGB: c_int = 29;
pub const VK_FORMAT_B8G8R8_UNORM: c_int = 30;
pub const VK_FORMAT_B8G8R8_SNORM: c_int = 31;
pub const VK_FORMAT_B8G8R8_USCALED: c_int = 32;
pub const VK_FORMAT_B8G8R8_SSCALED: c_int = 33;
pub const VK_FORMAT_B8G8R8_UINT: c_int = 34;
pub const VK_FORMAT_B8G8R8_SINT: c_int = 35;
pub const VK_FORMAT_B8G8R8_SRGB: c_int = 36;
pub const VK_FORMAT_R8G8B8A8_UNORM: c_int = 37;
pub const VK_FORMAT_R8G8B8A8_SNORM: c_int = 38;
pub const VK_FORMAT_R8G8B8A8_USCALED: c_int = 39;
pub const VK_FORMAT_R8G8B8A8_SSCALED: c_int = 40;
pub const VK_FORMAT_R8G8B8A8_UINT: c_int = 41;
pub const VK_FORMAT_R8G8B8A8_SINT: c_int = 42;
pub const VK_FORMAT_R8G8B8A8_SRGB: c_int = 43;
pub const VK_FORMAT_B8G8R8A8_UNORM: c_int = 44;
pub const VK_FORMAT_B8G8R8A8_SNORM: c_int = 45;
pub const VK_FORMAT_B8G8R8A8_USCALED: c_int = 46;
pub const VK_FORMAT_B8G8R8A8_SSCALED: c_int = 47;
pub const VK_FORMAT_B8G8R8A8_UINT: c_int = 48;
pub const VK_FORMAT_B8G8R8A8_SINT: c_int = 49;
pub const VK_FORMAT_B8G8R8A8_SRGB: c_int = 50;
pub const VK_FORMAT_A8B8G8R8_UNORM_PACK32: c_int = 51;
pub const VK_FORMAT_A8B8G8R8_SNORM_PACK32: c_int = 52;
pub const VK_FORMAT_A8B8G8R8_USCALED_PACK32: c_int = 53;
pub const VK_FORMAT_A8B8G8R8_SSCALED_PACK32: c_int = 54;
pub const VK_FORMAT_A8B8G8R8_UINT_PACK32: c_int = 55;
pub const VK_FORMAT_A8B8G8R8_SINT_PACK32: c_int = 56;
pub const VK_FORMAT_A8B8G8R8_SRGB_PACK32: c_int = 57;
pub const VK_FORMAT_A2R10G10B10_UNORM_PACK32: c_int = 58;
pub const VK_FORMAT_A2R10G10B10_SNORM_PACK32: c_int = 59;
pub const VK_FORMAT_A2R10G10B10_USCALED_PACK32: c_int = 60;
pub const VK_FORMAT_A2R10G10B10_SSCALED_PACK32: c_int = 61;
pub const VK_FORMAT_A2R10G10B10_UINT_PACK32: c_int = 62;
pub const VK_FORMAT_A2R10G10B10_SINT_PACK32: c_int = 63;
pub const VK_FORMAT_A2B10G10R10_UNORM_PACK32: c_int = 64;
pub const VK_FORMAT_A2B10G10R10_SNORM_PACK32: c_int = 65;
pub const VK_FORMAT_A2B10G10R10_USCALED_PACK32: c_int = 66;
pub const VK_FORMAT_A2B10G10R10_SSCALED_PACK32: c_int = 67;
pub const VK_FORMAT_A2B10G10R10_UINT_PACK32: c_int = 68;
pub const VK_FORMAT_A2B10G10R10_SINT_PACK32: c_int = 69;
pub const VK_FORMAT_R16_UNORM: c_int = 70;
pub const VK_FORMAT_R16_SNORM: c_int = 71;
pub const VK_FORMAT_R16_USCALED: c_int = 72;
pub const VK_FORMAT_R16_SSCALED: c_int = 73;
pub const VK_FORMAT_R16_UINT: c_int = 74;
pub const VK_FORMAT_R16_SINT: c_int = 75;
pub const VK_FORMAT_R16_SFLOAT: c_int = 76;
pub const VK_FORMAT_R16G16_UNORM: c_int = 77;
pub const VK_FORMAT_R16G16_SNORM: c_int = 78;
pub const VK_FORMAT_R16G16_USCALED: c_int = 79;
pub const VK_FORMAT_R16G16_SSCALED: c_int = 80;
pub const VK_FORMAT_R16G16_UINT: c_int = 81;
pub const VK_FORMAT_R16G16_SINT: c_int = 82;
pub const VK_FORMAT_R16G16_SFLOAT: c_int = 83;
pub const VK_FORMAT_R16G16B16_UNORM: c_int = 84;
pub const VK_FORMAT_R16G16B16_SNORM: c_int = 85;
pub const VK_FORMAT_R16G16B16_USCALED: c_int = 86;
pub const VK_FORMAT_R16G16B16_SSCALED: c_int = 87;
pub const VK_FORMAT_R16G16B16_UINT: c_int = 88;
pub const VK_FORMAT_R16G16B16_SINT: c_int = 89;
pub const VK_FORMAT_R16G16B16_SFLOAT: c_int = 90;
pub const VK_FORMAT_R16G16B16A16_UNORM: c_int = 91;
pub const VK_FORMAT_R16G16B16A16_SNORM: c_int = 92;
pub const VK_FORMAT_R16G16B16A16_USCALED: c_int = 93;
pub const VK_FORMAT_R16G16B16A16_SSCALED: c_int = 94;
pub const VK_FORMAT_R16G16B16A16_UINT: c_int = 95;
pub const VK_FORMAT_R16G16B16A16_SINT: c_int = 96;
pub const VK_FORMAT_R16G16B16A16_SFLOAT: c_int = 97;
pub const VK_FORMAT_R32_UINT: c_int = 98;
pub const VK_FORMAT_R32_SINT: c_int = 99;
pub const VK_FORMAT_R32_SFLOAT: c_int = 100;
pub const VK_FORMAT_R32G32_UINT: c_int = 101;
pub const VK_FORMAT_R32G32_SINT: c_int = 102;
pub const VK_FORMAT_R32G32_SFLOAT: c_int = 103;
pub const VK_FORMAT_R32G32B32_UINT: c_int = 104;
pub const VK_FORMAT_R32G32B32_SINT: c_int = 105;
pub const VK_FORMAT_R32G32B32_SFLOAT: c_int = 106;
pub const VK_FORMAT_R32G32B32A32_UINT: c_int = 107;
pub const VK_FORMAT_R32G32B32A32_SINT: c_int = 108;
pub const VK_FORMAT_R32G32B32A32_SFLOAT: c_int = 109;
pub const VK_FORMAT_R64_UINT: c_int = 110;
pub const VK_FORMAT_R64_SINT: c_int = 111;
pub const VK_FORMAT_R64_SFLOAT: c_int = 112;
pub const VK_FORMAT_R64G64_UINT: c_int = 113;
pub const VK_FORMAT_R64G64_SINT: c_int = 114;
pub const VK_FORMAT_R64G64_SFLOAT: c_int = 115;
pub const VK_FORMAT_R64G64B64_UINT: c_int = 116;
pub const VK_FORMAT_R64G64B64_SINT: c_int = 117;
pub const VK_FORMAT_R64G64B64_SFLOAT: c_int = 118;
pub const VK_FORMAT_R64G64B64A64_UINT: c_int = 119;
pub const VK_FORMAT_R64G64B64A64_SINT: c_int = 120;
pub const VK_FORMAT_R64G64B64A64_SFLOAT: c_int = 121;
pub const VK_FORMAT_B10G11R11_UFLOAT_PACK32: c_int = 122;
pub const VK_FORMAT_E5B9G9R9_UFLOAT_PACK32: c_int = 123;
pub const VK_FORMAT_D16_UNORM: c_int = 124;
pub const VK_FORMAT_X8_D24_UNORM_PACK32: c_int = 125;
pub const VK_FORMAT_D32_SFLOAT: c_int = 126;
pub const VK_FORMAT_S8_UINT: c_int = 127;
pub const VK_FORMAT_D16_UNORM_S8_UINT: c_int = 128;
pub const VK_FORMAT_D24_UNORM_S8_UINT: c_int = 129;
pub const VK_FORMAT_D32_SFLOAT_S8_UINT: c_int = 130;
pub const VK_FORMAT_BC1_RGB_UNORM_BLOCK: c_int = 131;
pub const VK_FORMAT_BC1_RGB_SRGB_BLOCK: c_int = 132;
pub const VK_FORMAT_BC1_RGBA_UNORM_BLOCK: c_int = 133;
pub const VK_FORMAT_BC1_RGBA_SRGB_BLOCK: c_int = 134;
pub const VK_FORMAT_BC2_UNORM_BLOCK: c_int = 135;
pub const VK_FORMAT_BC2_SRGB_BLOCK: c_int = 136;
pub const VK_FORMAT_BC3_UNORM_BLOCK: c_int = 137;
pub const VK_FORMAT_BC3_SRGB_BLOCK: c_int = 138;
pub const VK_FORMAT_BC4_UNORM_BLOCK: c_int = 139;
pub const VK_FORMAT_BC4_SNORM_BLOCK: c_int = 140;
pub const VK_FORMAT_BC5_UNORM_BLOCK: c_int = 141;
pub const VK_FORMAT_BC5_SNORM_BLOCK: c_int = 142;
pub const VK_FORMAT_BC6H_UFLOAT_BLOCK: c_int = 143;
pub const VK_FORMAT_BC6H_SFLOAT_BLOCK: c_int = 144;
pub const VK_FORMAT_BC7_UNORM_BLOCK: c_int = 145;
pub const VK_FORMAT_BC7_SRGB_BLOCK: c_int = 146;
pub const VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK: c_int = 147;
pub const VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK: c_int = 148;
pub const VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK: c_int = 149;
pub const VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK: c_int = 150;
pub const VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK: c_int = 151;
pub const VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK: c_int = 152;
pub const VK_FORMAT_EAC_R11_UNORM_BLOCK: c_int = 153;
pub const VK_FORMAT_EAC_R11_SNORM_BLOCK: c_int = 154;
pub const VK_FORMAT_EAC_R11G11_UNORM_BLOCK: c_int = 155;
pub const VK_FORMAT_EAC_R11G11_SNORM_BLOCK: c_int = 156;
pub const VK_FORMAT_ASTC_4x4_UNORM_BLOCK: c_int = 157;
pub const VK_FORMAT_ASTC_4x4_SRGB_BLOCK: c_int = 158;
pub const VK_FORMAT_ASTC_5x4_UNORM_BLOCK: c_int = 159;
pub const VK_FORMAT_ASTC_5x4_SRGB_BLOCK: c_int = 160;
pub const VK_FORMAT_ASTC_5x5_UNORM_BLOCK: c_int = 161;
pub const VK_FORMAT_ASTC_5x5_SRGB_BLOCK: c_int = 162;
pub const VK_FORMAT_ASTC_6x5_UNORM_BLOCK: c_int = 163;
pub const VK_FORMAT_ASTC_6x5_SRGB_BLOCK: c_int = 164;
pub const VK_FORMAT_ASTC_6x6_UNORM_BLOCK: c_int = 165;
pub const VK_FORMAT_ASTC_6x6_SRGB_BLOCK: c_int = 166;
pub const VK_FORMAT_ASTC_8x5_UNORM_BLOCK: c_int = 167;
pub const VK_FORMAT_ASTC_8x5_SRGB_BLOCK: c_int = 168;
pub const VK_FORMAT_ASTC_8x6_UNORM_BLOCK: c_int = 169;
pub const VK_FORMAT_ASTC_8x6_SRGB_BLOCK: c_int = 170;
pub const VK_FORMAT_ASTC_8x8_UNORM_BLOCK: c_int = 171;
pub const VK_FORMAT_ASTC_8x8_SRGB_BLOCK: c_int = 172;
pub const VK_FORMAT_ASTC_10x5_UNORM_BLOCK: c_int = 173;
pub const VK_FORMAT_ASTC_10x5_SRGB_BLOCK: c_int = 174;
pub const VK_FORMAT_ASTC_10x6_UNORM_BLOCK: c_int = 175;
pub const VK_FORMAT_ASTC_10x6_SRGB_BLOCK: c_int = 176;
pub const VK_FORMAT_ASTC_10x8_UNORM_BLOCK: c_int = 177;
pub const VK_FORMAT_ASTC_10x8_SRGB_BLOCK: c_int = 178;
pub const VK_FORMAT_ASTC_10x10_UNORM_BLOCK: c_int = 179;
pub const VK_FORMAT_ASTC_10x10_SRGB_BLOCK: c_int = 180;
pub const VK_FORMAT_ASTC_12x10_UNORM_BLOCK: c_int = 181;
pub const VK_FORMAT_ASTC_12x10_SRGB_BLOCK: c_int = 182;
pub const VK_FORMAT_ASTC_12x12_UNORM_BLOCK: c_int = 183;
pub const VK_FORMAT_ASTC_12x12_SRGB_BLOCK: c_int = 184;
pub const VK_FORMAT_G8B8G8R8_422_UNORM: c_int = 1000156000;
pub const VK_FORMAT_B8G8R8G8_422_UNORM: c_int = 1000156001;
pub const VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM: c_int = 1000156002;
pub const VK_FORMAT_G8_B8R8_2PLANE_420_UNORM: c_int = 1000156003;
pub const VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM: c_int = 1000156004;
pub const VK_FORMAT_G8_B8R8_2PLANE_422_UNORM: c_int = 1000156005;
pub const VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM: c_int = 1000156006;
pub const VK_FORMAT_R10X6_UNORM_PACK16: c_int = 1000156007;
pub const VK_FORMAT_R10X6G10X6_UNORM_2PACK16: c_int = 1000156008;
pub const VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16: c_int = 1000156009;
pub const VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16: c_int = 1000156010;
pub const VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16: c_int = 1000156011;
pub const VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16: c_int = 1000156012;
pub const VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16: c_int = 1000156013;
pub const VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16: c_int = 1000156014;
pub const VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16: c_int = 1000156015;
pub const VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16: c_int = 1000156016;
pub const VK_FORMAT_R12X4_UNORM_PACK16: c_int = 1000156017;
pub const VK_FORMAT_R12X4G12X4_UNORM_2PACK16: c_int = 1000156018;
pub const VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16: c_int = 1000156019;
pub const VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16: c_int = 1000156020;
pub const VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16: c_int = 1000156021;
pub const VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16: c_int = 1000156022;
pub const VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16: c_int = 1000156023;
pub const VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16: c_int = 1000156024;
pub const VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16: c_int = 1000156025;
pub const VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16: c_int = 1000156026;
pub const VK_FORMAT_G16B16G16R16_422_UNORM: c_int = 1000156027;
pub const VK_FORMAT_B16G16R16G16_422_UNORM: c_int = 1000156028;
pub const VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM: c_int = 1000156029;
pub const VK_FORMAT_G16_B16R16_2PLANE_420_UNORM: c_int = 1000156030;
pub const VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM: c_int = 1000156031;
pub const VK_FORMAT_G16_B16R16_2PLANE_422_UNORM: c_int = 1000156032;
pub const VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM: c_int = 1000156033;
pub const VK_FORMAT_G8_B8R8_2PLANE_444_UNORM: c_int = 1000330000;
pub const VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16: c_int = 1000330001;
pub const VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16: c_int = 1000330002;
pub const VK_FORMAT_G16_B16R16_2PLANE_444_UNORM: c_int = 1000330003;
pub const VK_FORMAT_A4R4G4B4_UNORM_PACK16: c_int = 1000340000;
pub const VK_FORMAT_A4B4G4R4_UNORM_PACK16: c_int = 1000340001;
pub const VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK: c_int = 1000066000;
pub const VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK: c_int = 1000066001;
pub const VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK: c_int = 1000066002;
pub const VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK: c_int = 1000066003;
pub const VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK: c_int = 1000066004;
pub const VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK: c_int = 1000066005;
pub const VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK: c_int = 1000066006;
pub const VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK: c_int = 1000066007;
pub const VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK: c_int = 1000066008;
pub const VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK: c_int = 1000066009;
pub const VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK: c_int = 1000066010;
pub const VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK: c_int = 1000066011;
pub const VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK: c_int = 1000066012;
pub const VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK: c_int = 1000066013;
pub const VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG: c_int = 1000054000;
pub const VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG: c_int = 1000054001;
pub const VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG: c_int = 1000054002;
pub const VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG: c_int = 1000054003;
pub const VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG: c_int = 1000054004;
pub const VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG: c_int = 1000054005;
pub const VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG: c_int = 1000054006;
pub const VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG: c_int = 1000054007;
pub const VK_FORMAT_R16G16_SFIXED5_NV: c_int = 1000464000;
pub const VK_FORMAT_A1B5G5R5_UNORM_PACK16_KHR: c_int = 1000470000;
pub const VK_FORMAT_A8_UNORM_KHR: c_int = 1000470001;
pub const VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT: c_int = 1000066000;
pub const VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT: c_int = 1000066001;
pub const VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT: c_int = 1000066002;
pub const VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT: c_int = 1000066003;
pub const VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT: c_int = 1000066004;
pub const VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT: c_int = 1000066005;
pub const VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT: c_int = 1000066006;
pub const VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT: c_int = 1000066007;
pub const VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT: c_int = 1000066008;
pub const VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT: c_int = 1000066009;
pub const VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT: c_int = 1000066010;
pub const VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT: c_int = 1000066011;
pub const VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT: c_int = 1000066012;
pub const VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT: c_int = 1000066013;
pub const VK_FORMAT_G8B8G8R8_422_UNORM_KHR: c_int = 1000156000;
pub const VK_FORMAT_B8G8R8G8_422_UNORM_KHR: c_int = 1000156001;
pub const VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR: c_int = 1000156002;
pub const VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR: c_int = 1000156003;
pub const VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR: c_int = 1000156004;
pub const VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR: c_int = 1000156005;
pub const VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR: c_int = 1000156006;
pub const VK_FORMAT_R10X6_UNORM_PACK16_KHR: c_int = 1000156007;
pub const VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR: c_int = 1000156008;
pub const VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR: c_int = 1000156009;
pub const VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR: c_int = 1000156010;
pub const VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR: c_int = 1000156011;
pub const VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR: c_int = 1000156012;
pub const VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR: c_int = 1000156013;
pub const VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR: c_int = 1000156014;
pub const VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR: c_int = 1000156015;
pub const VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR: c_int = 1000156016;
pub const VK_FORMAT_R12X4_UNORM_PACK16_KHR: c_int = 1000156017;
pub const VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR: c_int = 1000156018;
pub const VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR: c_int = 1000156019;
pub const VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR: c_int = 1000156020;
pub const VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR: c_int = 1000156021;
pub const VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR: c_int = 1000156022;
pub const VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR: c_int = 1000156023;
pub const VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR: c_int = 1000156024;
pub const VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR: c_int = 1000156025;
pub const VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR: c_int = 1000156026;
pub const VK_FORMAT_G16B16G16R16_422_UNORM_KHR: c_int = 1000156027;
pub const VK_FORMAT_B16G16R16G16_422_UNORM_KHR: c_int = 1000156028;
pub const VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR: c_int = 1000156029;
pub const VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR: c_int = 1000156030;
pub const VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR: c_int = 1000156031;
pub const VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR: c_int = 1000156032;
pub const VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR: c_int = 1000156033;
pub const VK_FORMAT_G8_B8R8_2PLANE_444_UNORM_EXT: c_int = 1000330000;
pub const VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT: c_int = 1000330001;
pub const VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT: c_int = 1000330002;
pub const VK_FORMAT_G16_B16R16_2PLANE_444_UNORM_EXT: c_int = 1000330003;
pub const VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT: c_int = 1000340000;
pub const VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT: c_int = 1000340001;
pub const VK_FORMAT_R16G16_S10_5_NV: c_int = 1000464000;
pub const VK_FORMAT_MAX_ENUM: c_int = 2147483647;
pub const enum_VkFormat = c_uint;
pub const VkFormat = enum_VkFormat;
pub const VK_IMAGE_TILING_OPTIMAL: c_int = 0;
pub const VK_IMAGE_TILING_LINEAR: c_int = 1;
pub const VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT: c_int = 1000158000;
pub const VK_IMAGE_TILING_MAX_ENUM: c_int = 2147483647;
pub const enum_VkImageTiling = c_uint;
pub const VkImageTiling = enum_VkImageTiling;
pub const VK_IMAGE_TYPE_1D: c_int = 0;
pub const VK_IMAGE_TYPE_2D: c_int = 1;
pub const VK_IMAGE_TYPE_3D: c_int = 2;
pub const VK_IMAGE_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkImageType = c_uint;
pub const VkImageType = enum_VkImageType;
pub const VK_PHYSICAL_DEVICE_TYPE_OTHER: c_int = 0;
pub const VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU: c_int = 1;
pub const VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU: c_int = 2;
pub const VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU: c_int = 3;
pub const VK_PHYSICAL_DEVICE_TYPE_CPU: c_int = 4;
pub const VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPhysicalDeviceType = c_uint;
pub const VkPhysicalDeviceType = enum_VkPhysicalDeviceType;
pub const VK_QUERY_TYPE_OCCLUSION: c_int = 0;
pub const VK_QUERY_TYPE_PIPELINE_STATISTICS: c_int = 1;
pub const VK_QUERY_TYPE_TIMESTAMP: c_int = 2;
pub const VK_QUERY_TYPE_RESULT_STATUS_ONLY_KHR: c_int = 1000023000;
pub const VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT: c_int = 1000028004;
pub const VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR: c_int = 1000116000;
pub const VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR: c_int = 1000150000;
pub const VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR: c_int = 1000150001;
pub const VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV: c_int = 1000165000;
pub const VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL: c_int = 1000210000;
pub const VK_QUERY_TYPE_VIDEO_ENCODE_FEEDBACK_KHR: c_int = 1000299000;
pub const VK_QUERY_TYPE_MESH_PRIMITIVES_GENERATED_EXT: c_int = 1000328000;
pub const VK_QUERY_TYPE_PRIMITIVES_GENERATED_EXT: c_int = 1000382000;
pub const VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_BOTTOM_LEVEL_POINTERS_KHR: c_int = 1000386000;
pub const VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SIZE_KHR: c_int = 1000386001;
pub const VK_QUERY_TYPE_MICROMAP_SERIALIZATION_SIZE_EXT: c_int = 1000396000;
pub const VK_QUERY_TYPE_MICROMAP_COMPACTED_SIZE_EXT: c_int = 1000396001;
pub const VK_QUERY_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkQueryType = c_uint;
pub const VkQueryType = enum_VkQueryType;
pub const VK_SHARING_MODE_EXCLUSIVE: c_int = 0;
pub const VK_SHARING_MODE_CONCURRENT: c_int = 1;
pub const VK_SHARING_MODE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSharingMode = c_uint;
pub const VkSharingMode = enum_VkSharingMode;
pub const VK_COMPONENT_SWIZZLE_IDENTITY: c_int = 0;
pub const VK_COMPONENT_SWIZZLE_ZERO: c_int = 1;
pub const VK_COMPONENT_SWIZZLE_ONE: c_int = 2;
pub const VK_COMPONENT_SWIZZLE_R: c_int = 3;
pub const VK_COMPONENT_SWIZZLE_G: c_int = 4;
pub const VK_COMPONENT_SWIZZLE_B: c_int = 5;
pub const VK_COMPONENT_SWIZZLE_A: c_int = 6;
pub const VK_COMPONENT_SWIZZLE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkComponentSwizzle = c_uint;
pub const VkComponentSwizzle = enum_VkComponentSwizzle;
pub const VK_IMAGE_VIEW_TYPE_1D: c_int = 0;
pub const VK_IMAGE_VIEW_TYPE_2D: c_int = 1;
pub const VK_IMAGE_VIEW_TYPE_3D: c_int = 2;
pub const VK_IMAGE_VIEW_TYPE_CUBE: c_int = 3;
pub const VK_IMAGE_VIEW_TYPE_1D_ARRAY: c_int = 4;
pub const VK_IMAGE_VIEW_TYPE_2D_ARRAY: c_int = 5;
pub const VK_IMAGE_VIEW_TYPE_CUBE_ARRAY: c_int = 6;
pub const VK_IMAGE_VIEW_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkImageViewType = c_uint;
pub const VkImageViewType = enum_VkImageViewType;
pub const VK_BLEND_FACTOR_ZERO: c_int = 0;
pub const VK_BLEND_FACTOR_ONE: c_int = 1;
pub const VK_BLEND_FACTOR_SRC_COLOR: c_int = 2;
pub const VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR: c_int = 3;
pub const VK_BLEND_FACTOR_DST_COLOR: c_int = 4;
pub const VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR: c_int = 5;
pub const VK_BLEND_FACTOR_SRC_ALPHA: c_int = 6;
pub const VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA: c_int = 7;
pub const VK_BLEND_FACTOR_DST_ALPHA: c_int = 8;
pub const VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA: c_int = 9;
pub const VK_BLEND_FACTOR_CONSTANT_COLOR: c_int = 10;
pub const VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR: c_int = 11;
pub const VK_BLEND_FACTOR_CONSTANT_ALPHA: c_int = 12;
pub const VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA: c_int = 13;
pub const VK_BLEND_FACTOR_SRC_ALPHA_SATURATE: c_int = 14;
pub const VK_BLEND_FACTOR_SRC1_COLOR: c_int = 15;
pub const VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR: c_int = 16;
pub const VK_BLEND_FACTOR_SRC1_ALPHA: c_int = 17;
pub const VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA: c_int = 18;
pub const VK_BLEND_FACTOR_MAX_ENUM: c_int = 2147483647;
pub const enum_VkBlendFactor = c_uint;
pub const VkBlendFactor = enum_VkBlendFactor;
pub const VK_BLEND_OP_ADD: c_int = 0;
pub const VK_BLEND_OP_SUBTRACT: c_int = 1;
pub const VK_BLEND_OP_REVERSE_SUBTRACT: c_int = 2;
pub const VK_BLEND_OP_MIN: c_int = 3;
pub const VK_BLEND_OP_MAX: c_int = 4;
pub const VK_BLEND_OP_ZERO_EXT: c_int = 1000148000;
pub const VK_BLEND_OP_SRC_EXT: c_int = 1000148001;
pub const VK_BLEND_OP_DST_EXT: c_int = 1000148002;
pub const VK_BLEND_OP_SRC_OVER_EXT: c_int = 1000148003;
pub const VK_BLEND_OP_DST_OVER_EXT: c_int = 1000148004;
pub const VK_BLEND_OP_SRC_IN_EXT: c_int = 1000148005;
pub const VK_BLEND_OP_DST_IN_EXT: c_int = 1000148006;
pub const VK_BLEND_OP_SRC_OUT_EXT: c_int = 1000148007;
pub const VK_BLEND_OP_DST_OUT_EXT: c_int = 1000148008;
pub const VK_BLEND_OP_SRC_ATOP_EXT: c_int = 1000148009;
pub const VK_BLEND_OP_DST_ATOP_EXT: c_int = 1000148010;
pub const VK_BLEND_OP_XOR_EXT: c_int = 1000148011;
pub const VK_BLEND_OP_MULTIPLY_EXT: c_int = 1000148012;
pub const VK_BLEND_OP_SCREEN_EXT: c_int = 1000148013;
pub const VK_BLEND_OP_OVERLAY_EXT: c_int = 1000148014;
pub const VK_BLEND_OP_DARKEN_EXT: c_int = 1000148015;
pub const VK_BLEND_OP_LIGHTEN_EXT: c_int = 1000148016;
pub const VK_BLEND_OP_COLORDODGE_EXT: c_int = 1000148017;
pub const VK_BLEND_OP_COLORBURN_EXT: c_int = 1000148018;
pub const VK_BLEND_OP_HARDLIGHT_EXT: c_int = 1000148019;
pub const VK_BLEND_OP_SOFTLIGHT_EXT: c_int = 1000148020;
pub const VK_BLEND_OP_DIFFERENCE_EXT: c_int = 1000148021;
pub const VK_BLEND_OP_EXCLUSION_EXT: c_int = 1000148022;
pub const VK_BLEND_OP_INVERT_EXT: c_int = 1000148023;
pub const VK_BLEND_OP_INVERT_RGB_EXT: c_int = 1000148024;
pub const VK_BLEND_OP_LINEARDODGE_EXT: c_int = 1000148025;
pub const VK_BLEND_OP_LINEARBURN_EXT: c_int = 1000148026;
pub const VK_BLEND_OP_VIVIDLIGHT_EXT: c_int = 1000148027;
pub const VK_BLEND_OP_LINEARLIGHT_EXT: c_int = 1000148028;
pub const VK_BLEND_OP_PINLIGHT_EXT: c_int = 1000148029;
pub const VK_BLEND_OP_HARDMIX_EXT: c_int = 1000148030;
pub const VK_BLEND_OP_HSL_HUE_EXT: c_int = 1000148031;
pub const VK_BLEND_OP_HSL_SATURATION_EXT: c_int = 1000148032;
pub const VK_BLEND_OP_HSL_COLOR_EXT: c_int = 1000148033;
pub const VK_BLEND_OP_HSL_LUMINOSITY_EXT: c_int = 1000148034;
pub const VK_BLEND_OP_PLUS_EXT: c_int = 1000148035;
pub const VK_BLEND_OP_PLUS_CLAMPED_EXT: c_int = 1000148036;
pub const VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT: c_int = 1000148037;
pub const VK_BLEND_OP_PLUS_DARKER_EXT: c_int = 1000148038;
pub const VK_BLEND_OP_MINUS_EXT: c_int = 1000148039;
pub const VK_BLEND_OP_MINUS_CLAMPED_EXT: c_int = 1000148040;
pub const VK_BLEND_OP_CONTRAST_EXT: c_int = 1000148041;
pub const VK_BLEND_OP_INVERT_OVG_EXT: c_int = 1000148042;
pub const VK_BLEND_OP_RED_EXT: c_int = 1000148043;
pub const VK_BLEND_OP_GREEN_EXT: c_int = 1000148044;
pub const VK_BLEND_OP_BLUE_EXT: c_int = 1000148045;
pub const VK_BLEND_OP_MAX_ENUM: c_int = 2147483647;
pub const enum_VkBlendOp = c_uint;
pub const VkBlendOp = enum_VkBlendOp;
pub const VK_COMPARE_OP_NEVER: c_int = 0;
pub const VK_COMPARE_OP_LESS: c_int = 1;
pub const VK_COMPARE_OP_EQUAL: c_int = 2;
pub const VK_COMPARE_OP_LESS_OR_EQUAL: c_int = 3;
pub const VK_COMPARE_OP_GREATER: c_int = 4;
pub const VK_COMPARE_OP_NOT_EQUAL: c_int = 5;
pub const VK_COMPARE_OP_GREATER_OR_EQUAL: c_int = 6;
pub const VK_COMPARE_OP_ALWAYS: c_int = 7;
pub const VK_COMPARE_OP_MAX_ENUM: c_int = 2147483647;
pub const enum_VkCompareOp = c_uint;
pub const VkCompareOp = enum_VkCompareOp;
pub const VK_DYNAMIC_STATE_VIEWPORT: c_int = 0;
pub const VK_DYNAMIC_STATE_SCISSOR: c_int = 1;
pub const VK_DYNAMIC_STATE_LINE_WIDTH: c_int = 2;
pub const VK_DYNAMIC_STATE_DEPTH_BIAS: c_int = 3;
pub const VK_DYNAMIC_STATE_BLEND_CONSTANTS: c_int = 4;
pub const VK_DYNAMIC_STATE_DEPTH_BOUNDS: c_int = 5;
pub const VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK: c_int = 6;
pub const VK_DYNAMIC_STATE_STENCIL_WRITE_MASK: c_int = 7;
pub const VK_DYNAMIC_STATE_STENCIL_REFERENCE: c_int = 8;
pub const VK_DYNAMIC_STATE_CULL_MODE: c_int = 1000267000;
pub const VK_DYNAMIC_STATE_FRONT_FACE: c_int = 1000267001;
pub const VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY: c_int = 1000267002;
pub const VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT: c_int = 1000267003;
pub const VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT: c_int = 1000267004;
pub const VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE: c_int = 1000267005;
pub const VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE: c_int = 1000267006;
pub const VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE: c_int = 1000267007;
pub const VK_DYNAMIC_STATE_DEPTH_COMPARE_OP: c_int = 1000267008;
pub const VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE: c_int = 1000267009;
pub const VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE: c_int = 1000267010;
pub const VK_DYNAMIC_STATE_STENCIL_OP: c_int = 1000267011;
pub const VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE: c_int = 1000377001;
pub const VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE: c_int = 1000377002;
pub const VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE: c_int = 1000377004;
pub const VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV: c_int = 1000087000;
pub const VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT: c_int = 1000099000;
pub const VK_DYNAMIC_STATE_DISCARD_RECTANGLE_ENABLE_EXT: c_int = 1000099001;
pub const VK_DYNAMIC_STATE_DISCARD_RECTANGLE_MODE_EXT: c_int = 1000099002;
pub const VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT: c_int = 1000143000;
pub const VK_DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR: c_int = 1000347000;
pub const VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV: c_int = 1000164004;
pub const VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV: c_int = 1000164006;
pub const VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_ENABLE_NV: c_int = 1000205000;
pub const VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV: c_int = 1000205001;
pub const VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR: c_int = 1000226000;
pub const VK_DYNAMIC_STATE_VERTEX_INPUT_EXT: c_int = 1000352000;
pub const VK_DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT: c_int = 1000377000;
pub const VK_DYNAMIC_STATE_LOGIC_OP_EXT: c_int = 1000377003;
pub const VK_DYNAMIC_STATE_COLOR_WRITE_ENABLE_EXT: c_int = 1000381000;
pub const VK_DYNAMIC_STATE_DEPTH_CLAMP_ENABLE_EXT: c_int = 1000455003;
pub const VK_DYNAMIC_STATE_POLYGON_MODE_EXT: c_int = 1000455004;
pub const VK_DYNAMIC_STATE_RASTERIZATION_SAMPLES_EXT: c_int = 1000455005;
pub const VK_DYNAMIC_STATE_SAMPLE_MASK_EXT: c_int = 1000455006;
pub const VK_DYNAMIC_STATE_ALPHA_TO_COVERAGE_ENABLE_EXT: c_int = 1000455007;
pub const VK_DYNAMIC_STATE_ALPHA_TO_ONE_ENABLE_EXT: c_int = 1000455008;
pub const VK_DYNAMIC_STATE_LOGIC_OP_ENABLE_EXT: c_int = 1000455009;
pub const VK_DYNAMIC_STATE_COLOR_BLEND_ENABLE_EXT: c_int = 1000455010;
pub const VK_DYNAMIC_STATE_COLOR_BLEND_EQUATION_EXT: c_int = 1000455011;
pub const VK_DYNAMIC_STATE_COLOR_WRITE_MASK_EXT: c_int = 1000455012;
pub const VK_DYNAMIC_STATE_TESSELLATION_DOMAIN_ORIGIN_EXT: c_int = 1000455002;
pub const VK_DYNAMIC_STATE_RASTERIZATION_STREAM_EXT: c_int = 1000455013;
pub const VK_DYNAMIC_STATE_CONSERVATIVE_RASTERIZATION_MODE_EXT: c_int = 1000455014;
pub const VK_DYNAMIC_STATE_EXTRA_PRIMITIVE_OVERESTIMATION_SIZE_EXT: c_int = 1000455015;
pub const VK_DYNAMIC_STATE_DEPTH_CLIP_ENABLE_EXT: c_int = 1000455016;
pub const VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_ENABLE_EXT: c_int = 1000455017;
pub const VK_DYNAMIC_STATE_COLOR_BLEND_ADVANCED_EXT: c_int = 1000455018;
pub const VK_DYNAMIC_STATE_PROVOKING_VERTEX_MODE_EXT: c_int = 1000455019;
pub const VK_DYNAMIC_STATE_LINE_RASTERIZATION_MODE_EXT: c_int = 1000455020;
pub const VK_DYNAMIC_STATE_LINE_STIPPLE_ENABLE_EXT: c_int = 1000455021;
pub const VK_DYNAMIC_STATE_DEPTH_CLIP_NEGATIVE_ONE_TO_ONE_EXT: c_int = 1000455022;
pub const VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_ENABLE_NV: c_int = 1000455023;
pub const VK_DYNAMIC_STATE_VIEWPORT_SWIZZLE_NV: c_int = 1000455024;
pub const VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_ENABLE_NV: c_int = 1000455025;
pub const VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_LOCATION_NV: c_int = 1000455026;
pub const VK_DYNAMIC_STATE_COVERAGE_MODULATION_MODE_NV: c_int = 1000455027;
pub const VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_ENABLE_NV: c_int = 1000455028;
pub const VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_NV: c_int = 1000455029;
pub const VK_DYNAMIC_STATE_SHADING_RATE_IMAGE_ENABLE_NV: c_int = 1000455030;
pub const VK_DYNAMIC_STATE_REPRESENTATIVE_FRAGMENT_TEST_ENABLE_NV: c_int = 1000455031;
pub const VK_DYNAMIC_STATE_COVERAGE_REDUCTION_MODE_NV: c_int = 1000455032;
pub const VK_DYNAMIC_STATE_ATTACHMENT_FEEDBACK_LOOP_ENABLE_EXT: c_int = 1000524000;
pub const VK_DYNAMIC_STATE_LINE_STIPPLE_KHR: c_int = 1000259000;
pub const VK_DYNAMIC_STATE_LINE_STIPPLE_EXT: c_int = 1000259000;
pub const VK_DYNAMIC_STATE_CULL_MODE_EXT: c_int = 1000267000;
pub const VK_DYNAMIC_STATE_FRONT_FACE_EXT: c_int = 1000267001;
pub const VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT: c_int = 1000267002;
pub const VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT: c_int = 1000267003;
pub const VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT: c_int = 1000267004;
pub const VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT: c_int = 1000267005;
pub const VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT: c_int = 1000267006;
pub const VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT: c_int = 1000267007;
pub const VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT: c_int = 1000267008;
pub const VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT: c_int = 1000267009;
pub const VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT: c_int = 1000267010;
pub const VK_DYNAMIC_STATE_STENCIL_OP_EXT: c_int = 1000267011;
pub const VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE_EXT: c_int = 1000377001;
pub const VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE_EXT: c_int = 1000377002;
pub const VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE_EXT: c_int = 1000377004;
pub const VK_DYNAMIC_STATE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkDynamicState = c_uint;
pub const VkDynamicState = enum_VkDynamicState;
pub const VK_FRONT_FACE_COUNTER_CLOCKWISE: c_int = 0;
pub const VK_FRONT_FACE_CLOCKWISE: c_int = 1;
pub const VK_FRONT_FACE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkFrontFace = c_uint;
pub const VkFrontFace = enum_VkFrontFace;
pub const VK_VERTEX_INPUT_RATE_VERTEX: c_int = 0;
pub const VK_VERTEX_INPUT_RATE_INSTANCE: c_int = 1;
pub const VK_VERTEX_INPUT_RATE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkVertexInputRate = c_uint;
pub const VkVertexInputRate = enum_VkVertexInputRate;
pub const VK_PRIMITIVE_TOPOLOGY_POINT_LIST: c_int = 0;
pub const VK_PRIMITIVE_TOPOLOGY_LINE_LIST: c_int = 1;
pub const VK_PRIMITIVE_TOPOLOGY_LINE_STRIP: c_int = 2;
pub const VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST: c_int = 3;
pub const VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP: c_int = 4;
pub const VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN: c_int = 5;
pub const VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY: c_int = 6;
pub const VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY: c_int = 7;
pub const VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY: c_int = 8;
pub const VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY: c_int = 9;
pub const VK_PRIMITIVE_TOPOLOGY_PATCH_LIST: c_int = 10;
pub const VK_PRIMITIVE_TOPOLOGY_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPrimitiveTopology = c_uint;
pub const VkPrimitiveTopology = enum_VkPrimitiveTopology;
pub const VK_POLYGON_MODE_FILL: c_int = 0;
pub const VK_POLYGON_MODE_LINE: c_int = 1;
pub const VK_POLYGON_MODE_POINT: c_int = 2;
pub const VK_POLYGON_MODE_FILL_RECTANGLE_NV: c_int = 1000153000;
pub const VK_POLYGON_MODE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPolygonMode = c_uint;
pub const VkPolygonMode = enum_VkPolygonMode;
pub const VK_STENCIL_OP_KEEP: c_int = 0;
pub const VK_STENCIL_OP_ZERO: c_int = 1;
pub const VK_STENCIL_OP_REPLACE: c_int = 2;
pub const VK_STENCIL_OP_INCREMENT_AND_CLAMP: c_int = 3;
pub const VK_STENCIL_OP_DECREMENT_AND_CLAMP: c_int = 4;
pub const VK_STENCIL_OP_INVERT: c_int = 5;
pub const VK_STENCIL_OP_INCREMENT_AND_WRAP: c_int = 6;
pub const VK_STENCIL_OP_DECREMENT_AND_WRAP: c_int = 7;
pub const VK_STENCIL_OP_MAX_ENUM: c_int = 2147483647;
pub const enum_VkStencilOp = c_uint;
pub const VkStencilOp = enum_VkStencilOp;
pub const VK_LOGIC_OP_CLEAR: c_int = 0;
pub const VK_LOGIC_OP_AND: c_int = 1;
pub const VK_LOGIC_OP_AND_REVERSE: c_int = 2;
pub const VK_LOGIC_OP_COPY: c_int = 3;
pub const VK_LOGIC_OP_AND_INVERTED: c_int = 4;
pub const VK_LOGIC_OP_NO_OP: c_int = 5;
pub const VK_LOGIC_OP_XOR: c_int = 6;
pub const VK_LOGIC_OP_OR: c_int = 7;
pub const VK_LOGIC_OP_NOR: c_int = 8;
pub const VK_LOGIC_OP_EQUIVALENT: c_int = 9;
pub const VK_LOGIC_OP_INVERT: c_int = 10;
pub const VK_LOGIC_OP_OR_REVERSE: c_int = 11;
pub const VK_LOGIC_OP_COPY_INVERTED: c_int = 12;
pub const VK_LOGIC_OP_OR_INVERTED: c_int = 13;
pub const VK_LOGIC_OP_NAND: c_int = 14;
pub const VK_LOGIC_OP_SET: c_int = 15;
pub const VK_LOGIC_OP_MAX_ENUM: c_int = 2147483647;
pub const enum_VkLogicOp = c_uint;
pub const VkLogicOp = enum_VkLogicOp;
pub const VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK: c_int = 0;
pub const VK_BORDER_COLOR_INT_TRANSPARENT_BLACK: c_int = 1;
pub const VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK: c_int = 2;
pub const VK_BORDER_COLOR_INT_OPAQUE_BLACK: c_int = 3;
pub const VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE: c_int = 4;
pub const VK_BORDER_COLOR_INT_OPAQUE_WHITE: c_int = 5;
pub const VK_BORDER_COLOR_FLOAT_CUSTOM_EXT: c_int = 1000287003;
pub const VK_BORDER_COLOR_INT_CUSTOM_EXT: c_int = 1000287004;
pub const VK_BORDER_COLOR_MAX_ENUM: c_int = 2147483647;
pub const enum_VkBorderColor = c_uint;
pub const VkBorderColor = enum_VkBorderColor;
pub const VK_FILTER_NEAREST: c_int = 0;
pub const VK_FILTER_LINEAR: c_int = 1;
pub const VK_FILTER_CUBIC_EXT: c_int = 1000015000;
pub const VK_FILTER_CUBIC_IMG: c_int = 1000015000;
pub const VK_FILTER_MAX_ENUM: c_int = 2147483647;
pub const enum_VkFilter = c_uint;
pub const VkFilter = enum_VkFilter;
pub const VK_SAMPLER_ADDRESS_MODE_REPEAT: c_int = 0;
pub const VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT: c_int = 1;
pub const VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE: c_int = 2;
pub const VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER: c_int = 3;
pub const VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE: c_int = 4;
pub const VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR: c_int = 4;
pub const VK_SAMPLER_ADDRESS_MODE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSamplerAddressMode = c_uint;
pub const VkSamplerAddressMode = enum_VkSamplerAddressMode;
pub const VK_SAMPLER_MIPMAP_MODE_NEAREST: c_int = 0;
pub const VK_SAMPLER_MIPMAP_MODE_LINEAR: c_int = 1;
pub const VK_SAMPLER_MIPMAP_MODE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSamplerMipmapMode = c_uint;
pub const VkSamplerMipmapMode = enum_VkSamplerMipmapMode;
pub const VK_DESCRIPTOR_TYPE_SAMPLER: c_int = 0;
pub const VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER: c_int = 1;
pub const VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE: c_int = 2;
pub const VK_DESCRIPTOR_TYPE_STORAGE_IMAGE: c_int = 3;
pub const VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER: c_int = 4;
pub const VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER: c_int = 5;
pub const VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER: c_int = 6;
pub const VK_DESCRIPTOR_TYPE_STORAGE_BUFFER: c_int = 7;
pub const VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC: c_int = 8;
pub const VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC: c_int = 9;
pub const VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT: c_int = 10;
pub const VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK: c_int = 1000138000;
pub const VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR: c_int = 1000150000;
pub const VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV: c_int = 1000165000;
pub const VK_DESCRIPTOR_TYPE_SAMPLE_WEIGHT_IMAGE_QCOM: c_int = 1000440000;
pub const VK_DESCRIPTOR_TYPE_BLOCK_MATCH_IMAGE_QCOM: c_int = 1000440001;
pub const VK_DESCRIPTOR_TYPE_MUTABLE_EXT: c_int = 1000351000;
pub const VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT: c_int = 1000138000;
pub const VK_DESCRIPTOR_TYPE_MUTABLE_VALVE: c_int = 1000351000;
pub const VK_DESCRIPTOR_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkDescriptorType = c_uint;
pub const VkDescriptorType = enum_VkDescriptorType;
pub const VK_ATTACHMENT_LOAD_OP_LOAD: c_int = 0;
pub const VK_ATTACHMENT_LOAD_OP_CLEAR: c_int = 1;
pub const VK_ATTACHMENT_LOAD_OP_DONT_CARE: c_int = 2;
pub const VK_ATTACHMENT_LOAD_OP_NONE_KHR: c_int = 1000400000;
pub const VK_ATTACHMENT_LOAD_OP_NONE_EXT: c_int = 1000400000;
pub const VK_ATTACHMENT_LOAD_OP_MAX_ENUM: c_int = 2147483647;
pub const enum_VkAttachmentLoadOp = c_uint;
pub const VkAttachmentLoadOp = enum_VkAttachmentLoadOp;
pub const VK_ATTACHMENT_STORE_OP_STORE: c_int = 0;
pub const VK_ATTACHMENT_STORE_OP_DONT_CARE: c_int = 1;
pub const VK_ATTACHMENT_STORE_OP_NONE: c_int = 1000301000;
pub const VK_ATTACHMENT_STORE_OP_NONE_KHR: c_int = 1000301000;
pub const VK_ATTACHMENT_STORE_OP_NONE_QCOM: c_int = 1000301000;
pub const VK_ATTACHMENT_STORE_OP_NONE_EXT: c_int = 1000301000;
pub const VK_ATTACHMENT_STORE_OP_MAX_ENUM: c_int = 2147483647;
pub const enum_VkAttachmentStoreOp = c_uint;
pub const VkAttachmentStoreOp = enum_VkAttachmentStoreOp;
pub const VK_PIPELINE_BIND_POINT_GRAPHICS: c_int = 0;
pub const VK_PIPELINE_BIND_POINT_COMPUTE: c_int = 1;
pub const VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR: c_int = 1000165000;
pub const VK_PIPELINE_BIND_POINT_SUBPASS_SHADING_HUAWEI: c_int = 1000369003;
pub const VK_PIPELINE_BIND_POINT_RAY_TRACING_NV: c_int = 1000165000;
pub const VK_PIPELINE_BIND_POINT_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPipelineBindPoint = c_uint;
pub const VkPipelineBindPoint = enum_VkPipelineBindPoint;
pub const VK_COMMAND_BUFFER_LEVEL_PRIMARY: c_int = 0;
pub const VK_COMMAND_BUFFER_LEVEL_SECONDARY: c_int = 1;
pub const VK_COMMAND_BUFFER_LEVEL_MAX_ENUM: c_int = 2147483647;
pub const enum_VkCommandBufferLevel = c_uint;
pub const VkCommandBufferLevel = enum_VkCommandBufferLevel;
pub const VK_INDEX_TYPE_UINT16: c_int = 0;
pub const VK_INDEX_TYPE_UINT32: c_int = 1;
pub const VK_INDEX_TYPE_NONE_KHR: c_int = 1000165000;
pub const VK_INDEX_TYPE_UINT8_KHR: c_int = 1000265000;
pub const VK_INDEX_TYPE_NONE_NV: c_int = 1000165000;
pub const VK_INDEX_TYPE_UINT8_EXT: c_int = 1000265000;
pub const VK_INDEX_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkIndexType = c_uint;
pub const VkIndexType = enum_VkIndexType;
pub const VK_SUBPASS_CONTENTS_INLINE: c_int = 0;
pub const VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS: c_int = 1;
pub const VK_SUBPASS_CONTENTS_INLINE_AND_SECONDARY_COMMAND_BUFFERS_KHR: c_int = 1000451000;
pub const VK_SUBPASS_CONTENTS_INLINE_AND_SECONDARY_COMMAND_BUFFERS_EXT: c_int = 1000451000;
pub const VK_SUBPASS_CONTENTS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSubpassContents = c_uint;
pub const VkSubpassContents = enum_VkSubpassContents;
pub const VK_ACCESS_INDIRECT_COMMAND_READ_BIT: c_int = 1;
pub const VK_ACCESS_INDEX_READ_BIT: c_int = 2;
pub const VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT: c_int = 4;
pub const VK_ACCESS_UNIFORM_READ_BIT: c_int = 8;
pub const VK_ACCESS_INPUT_ATTACHMENT_READ_BIT: c_int = 16;
pub const VK_ACCESS_SHADER_READ_BIT: c_int = 32;
pub const VK_ACCESS_SHADER_WRITE_BIT: c_int = 64;
pub const VK_ACCESS_COLOR_ATTACHMENT_READ_BIT: c_int = 128;
pub const VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT: c_int = 256;
pub const VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT: c_int = 512;
pub const VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT: c_int = 1024;
pub const VK_ACCESS_TRANSFER_READ_BIT: c_int = 2048;
pub const VK_ACCESS_TRANSFER_WRITE_BIT: c_int = 4096;
pub const VK_ACCESS_HOST_READ_BIT: c_int = 8192;
pub const VK_ACCESS_HOST_WRITE_BIT: c_int = 16384;
pub const VK_ACCESS_MEMORY_READ_BIT: c_int = 32768;
pub const VK_ACCESS_MEMORY_WRITE_BIT: c_int = 65536;
pub const VK_ACCESS_NONE: c_int = 0;
pub const VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT: c_int = 33554432;
pub const VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT: c_int = 67108864;
pub const VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT: c_int = 134217728;
pub const VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT: c_int = 1048576;
pub const VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT: c_int = 524288;
pub const VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR: c_int = 2097152;
pub const VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR: c_int = 4194304;
pub const VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT: c_int = 16777216;
pub const VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR: c_int = 8388608;
pub const VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV: c_int = 131072;
pub const VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV: c_int = 262144;
pub const VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV: c_int = 8388608;
pub const VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV: c_int = 2097152;
pub const VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV: c_int = 4194304;
pub const VK_ACCESS_NONE_KHR: c_int = 0;
pub const VK_ACCESS_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkAccessFlagBits = c_uint;
pub const VkAccessFlagBits = enum_VkAccessFlagBits;
pub const VkAccessFlags = VkFlags;
pub const VK_IMAGE_ASPECT_COLOR_BIT: c_int = 1;
pub const VK_IMAGE_ASPECT_DEPTH_BIT: c_int = 2;
pub const VK_IMAGE_ASPECT_STENCIL_BIT: c_int = 4;
pub const VK_IMAGE_ASPECT_METADATA_BIT: c_int = 8;
pub const VK_IMAGE_ASPECT_PLANE_0_BIT: c_int = 16;
pub const VK_IMAGE_ASPECT_PLANE_1_BIT: c_int = 32;
pub const VK_IMAGE_ASPECT_PLANE_2_BIT: c_int = 64;
pub const VK_IMAGE_ASPECT_NONE: c_int = 0;
pub const VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT: c_int = 128;
pub const VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT: c_int = 256;
pub const VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT: c_int = 512;
pub const VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT: c_int = 1024;
pub const VK_IMAGE_ASPECT_PLANE_0_BIT_KHR: c_int = 16;
pub const VK_IMAGE_ASPECT_PLANE_1_BIT_KHR: c_int = 32;
pub const VK_IMAGE_ASPECT_PLANE_2_BIT_KHR: c_int = 64;
pub const VK_IMAGE_ASPECT_NONE_KHR: c_int = 0;
pub const VK_IMAGE_ASPECT_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkImageAspectFlagBits = c_uint;
pub const VkImageAspectFlagBits = enum_VkImageAspectFlagBits;
pub const VkImageAspectFlags = VkFlags;
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT: c_int = 1;
pub const VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT: c_int = 2;
pub const VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT: c_int = 4;
pub const VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT: c_int = 8;
pub const VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT: c_int = 16;
pub const VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT: c_int = 32;
pub const VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT: c_int = 64;
pub const VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT: c_int = 128;
pub const VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT: c_int = 256;
pub const VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT: c_int = 512;
pub const VK_FORMAT_FEATURE_BLIT_SRC_BIT: c_int = 1024;
pub const VK_FORMAT_FEATURE_BLIT_DST_BIT: c_int = 2048;
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT: c_int = 4096;
pub const VK_FORMAT_FEATURE_TRANSFER_SRC_BIT: c_int = 16384;
pub const VK_FORMAT_FEATURE_TRANSFER_DST_BIT: c_int = 32768;
pub const VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT: c_int = 131072;
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT: c_int = 262144;
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT: c_int = 524288;
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT: c_int = 1048576;
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT: c_int = 2097152;
pub const VK_FORMAT_FEATURE_DISJOINT_BIT: c_int = 4194304;
pub const VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT: c_int = 8388608;
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT: c_int = 65536;
pub const VK_FORMAT_FEATURE_VIDEO_DECODE_OUTPUT_BIT_KHR: c_int = 33554432;
pub const VK_FORMAT_FEATURE_VIDEO_DECODE_DPB_BIT_KHR: c_int = 67108864;
pub const VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR: c_int = 536870912;
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT: c_int = 8192;
pub const VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT: c_int = 16777216;
pub const VK_FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR: c_int = 1073741824;
pub const VK_FORMAT_FEATURE_VIDEO_ENCODE_INPUT_BIT_KHR: c_int = 134217728;
pub const VK_FORMAT_FEATURE_VIDEO_ENCODE_DPB_BIT_KHR: c_int = 268435456;
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG: c_int = 8192;
pub const VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR: c_int = 16384;
pub const VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR: c_int = 32768;
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT: c_int = 65536;
pub const VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR: c_int = 131072;
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR: c_int = 262144;
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR: c_int = 524288;
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR: c_int = 1048576;
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR: c_int = 2097152;
pub const VK_FORMAT_FEATURE_DISJOINT_BIT_KHR: c_int = 4194304;
pub const VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR: c_int = 8388608;
pub const VK_FORMAT_FEATURE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkFormatFeatureFlagBits = c_uint;
pub const VkFormatFeatureFlagBits = enum_VkFormatFeatureFlagBits;
pub const VkFormatFeatureFlags = VkFlags;
pub const VK_IMAGE_CREATE_SPARSE_BINDING_BIT: c_int = 1;
pub const VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT: c_int = 2;
pub const VK_IMAGE_CREATE_SPARSE_ALIASED_BIT: c_int = 4;
pub const VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT: c_int = 8;
pub const VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT: c_int = 16;
pub const VK_IMAGE_CREATE_ALIAS_BIT: c_int = 1024;
pub const VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT: c_int = 64;
pub const VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT: c_int = 32;
pub const VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT: c_int = 128;
pub const VK_IMAGE_CREATE_EXTENDED_USAGE_BIT: c_int = 256;
pub const VK_IMAGE_CREATE_PROTECTED_BIT: c_int = 2048;
pub const VK_IMAGE_CREATE_DISJOINT_BIT: c_int = 512;
pub const VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV: c_int = 8192;
pub const VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT: c_int = 4096;
pub const VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT: c_int = 16384;
pub const VK_IMAGE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT: c_int = 65536;
pub const VK_IMAGE_CREATE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_BIT_EXT: c_int = 262144;
pub const VK_IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT: c_int = 131072;
pub const VK_IMAGE_CREATE_FRAGMENT_DENSITY_MAP_OFFSET_BIT_QCOM: c_int = 32768;
pub const VK_IMAGE_CREATE_VIDEO_PROFILE_INDEPENDENT_BIT_KHR: c_int = 1048576;
pub const VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR: c_int = 64;
pub const VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR: c_int = 32;
pub const VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR: c_int = 128;
pub const VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR: c_int = 256;
pub const VK_IMAGE_CREATE_DISJOINT_BIT_KHR: c_int = 512;
pub const VK_IMAGE_CREATE_ALIAS_BIT_KHR: c_int = 1024;
pub const VK_IMAGE_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkImageCreateFlagBits = c_uint;
pub const VkImageCreateFlagBits = enum_VkImageCreateFlagBits;
pub const VkImageCreateFlags = VkFlags;
pub const VK_SAMPLE_COUNT_1_BIT: c_int = 1;
pub const VK_SAMPLE_COUNT_2_BIT: c_int = 2;
pub const VK_SAMPLE_COUNT_4_BIT: c_int = 4;
pub const VK_SAMPLE_COUNT_8_BIT: c_int = 8;
pub const VK_SAMPLE_COUNT_16_BIT: c_int = 16;
pub const VK_SAMPLE_COUNT_32_BIT: c_int = 32;
pub const VK_SAMPLE_COUNT_64_BIT: c_int = 64;
pub const VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSampleCountFlagBits = c_uint;
pub const VkSampleCountFlagBits = enum_VkSampleCountFlagBits;
pub const VkSampleCountFlags = VkFlags;
pub const VK_IMAGE_USAGE_TRANSFER_SRC_BIT: c_int = 1;
pub const VK_IMAGE_USAGE_TRANSFER_DST_BIT: c_int = 2;
pub const VK_IMAGE_USAGE_SAMPLED_BIT: c_int = 4;
pub const VK_IMAGE_USAGE_STORAGE_BIT: c_int = 8;
pub const VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT: c_int = 16;
pub const VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT: c_int = 32;
pub const VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT: c_int = 64;
pub const VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT: c_int = 128;
pub const VK_IMAGE_USAGE_VIDEO_DECODE_DST_BIT_KHR: c_int = 1024;
pub const VK_IMAGE_USAGE_VIDEO_DECODE_SRC_BIT_KHR: c_int = 2048;
pub const VK_IMAGE_USAGE_VIDEO_DECODE_DPB_BIT_KHR: c_int = 4096;
pub const VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT: c_int = 512;
pub const VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR: c_int = 256;
pub const VK_IMAGE_USAGE_HOST_TRANSFER_BIT_EXT: c_int = 4194304;
pub const VK_IMAGE_USAGE_VIDEO_ENCODE_DST_BIT_KHR: c_int = 8192;
pub const VK_IMAGE_USAGE_VIDEO_ENCODE_SRC_BIT_KHR: c_int = 16384;
pub const VK_IMAGE_USAGE_VIDEO_ENCODE_DPB_BIT_KHR: c_int = 32768;
pub const VK_IMAGE_USAGE_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT: c_int = 524288;
pub const VK_IMAGE_USAGE_INVOCATION_MASK_BIT_HUAWEI: c_int = 262144;
pub const VK_IMAGE_USAGE_SAMPLE_WEIGHT_BIT_QCOM: c_int = 1048576;
pub const VK_IMAGE_USAGE_SAMPLE_BLOCK_MATCH_BIT_QCOM: c_int = 2097152;
pub const VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV: c_int = 256;
pub const VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkImageUsageFlagBits = c_uint;
pub const VkImageUsageFlagBits = enum_VkImageUsageFlagBits;
pub const VkImageUsageFlags = VkFlags;
pub const VK_INSTANCE_CREATE_ENUMERATE_PORTABILITY_BIT_KHR: c_int = 1;
pub const VK_INSTANCE_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkInstanceCreateFlagBits = c_uint;
pub const VkInstanceCreateFlagBits = enum_VkInstanceCreateFlagBits;
pub const VkInstanceCreateFlags = VkFlags;
pub const VK_MEMORY_HEAP_DEVICE_LOCAL_BIT: c_int = 1;
pub const VK_MEMORY_HEAP_MULTI_INSTANCE_BIT: c_int = 2;
pub const VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR: c_int = 2;
pub const VK_MEMORY_HEAP_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkMemoryHeapFlagBits = c_uint;
pub const VkMemoryHeapFlagBits = enum_VkMemoryHeapFlagBits;
pub const VkMemoryHeapFlags = VkFlags;
pub const VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT: c_int = 1;
pub const VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT: c_int = 2;
pub const VK_MEMORY_PROPERTY_HOST_COHERENT_BIT: c_int = 4;
pub const VK_MEMORY_PROPERTY_HOST_CACHED_BIT: c_int = 8;
pub const VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT: c_int = 16;
pub const VK_MEMORY_PROPERTY_PROTECTED_BIT: c_int = 32;
pub const VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD: c_int = 64;
pub const VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD: c_int = 128;
pub const VK_MEMORY_PROPERTY_RDMA_CAPABLE_BIT_NV: c_int = 256;
pub const VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkMemoryPropertyFlagBits = c_uint;
pub const VkMemoryPropertyFlagBits = enum_VkMemoryPropertyFlagBits;
pub const VkMemoryPropertyFlags = VkFlags;
pub const VK_QUEUE_GRAPHICS_BIT: c_int = 1;
pub const VK_QUEUE_COMPUTE_BIT: c_int = 2;
pub const VK_QUEUE_TRANSFER_BIT: c_int = 4;
pub const VK_QUEUE_SPARSE_BINDING_BIT: c_int = 8;
pub const VK_QUEUE_PROTECTED_BIT: c_int = 16;
pub const VK_QUEUE_VIDEO_DECODE_BIT_KHR: c_int = 32;
pub const VK_QUEUE_VIDEO_ENCODE_BIT_KHR: c_int = 64;
pub const VK_QUEUE_OPTICAL_FLOW_BIT_NV: c_int = 256;
pub const VK_QUEUE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkQueueFlagBits = c_uint;
pub const VkQueueFlagBits = enum_VkQueueFlagBits;
pub const VkQueueFlags = VkFlags;
pub const VkDeviceCreateFlags = VkFlags;
pub const VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT: c_int = 1;
pub const VK_DEVICE_QUEUE_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkDeviceQueueCreateFlagBits = c_uint;
pub const VkDeviceQueueCreateFlagBits = enum_VkDeviceQueueCreateFlagBits;
pub const VkDeviceQueueCreateFlags = VkFlags;
pub const VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT: c_int = 1;
pub const VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT: c_int = 2;
pub const VK_PIPELINE_STAGE_VERTEX_INPUT_BIT: c_int = 4;
pub const VK_PIPELINE_STAGE_VERTEX_SHADER_BIT: c_int = 8;
pub const VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT: c_int = 16;
pub const VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT: c_int = 32;
pub const VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT: c_int = 64;
pub const VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT: c_int = 128;
pub const VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT: c_int = 256;
pub const VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT: c_int = 512;
pub const VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT: c_int = 1024;
pub const VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT: c_int = 2048;
pub const VK_PIPELINE_STAGE_TRANSFER_BIT: c_int = 4096;
pub const VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT: c_int = 8192;
pub const VK_PIPELINE_STAGE_HOST_BIT: c_int = 16384;
pub const VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT: c_int = 32768;
pub const VK_PIPELINE_STAGE_ALL_COMMANDS_BIT: c_int = 65536;
pub const VK_PIPELINE_STAGE_NONE: c_int = 0;
pub const VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT: c_int = 16777216;
pub const VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT: c_int = 262144;
pub const VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR: c_int = 33554432;
pub const VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR: c_int = 2097152;
pub const VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT: c_int = 8388608;
pub const VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR: c_int = 4194304;
pub const VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV: c_int = 131072;
pub const VK_PIPELINE_STAGE_TASK_SHADER_BIT_EXT: c_int = 524288;
pub const VK_PIPELINE_STAGE_MESH_SHADER_BIT_EXT: c_int = 1048576;
pub const VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV: c_int = 4194304;
pub const VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV: c_int = 2097152;
pub const VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV: c_int = 33554432;
pub const VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV: c_int = 524288;
pub const VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV: c_int = 1048576;
pub const VK_PIPELINE_STAGE_NONE_KHR: c_int = 0;
pub const VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPipelineStageFlagBits = c_uint;
pub const VkPipelineStageFlagBits = enum_VkPipelineStageFlagBits;
pub const VkPipelineStageFlags = VkFlags;
pub const VK_MEMORY_MAP_PLACED_BIT_EXT: c_int = 1;
pub const VK_MEMORY_MAP_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkMemoryMapFlagBits = c_uint;
pub const VkMemoryMapFlagBits = enum_VkMemoryMapFlagBits;
pub const VkMemoryMapFlags = VkFlags;
pub const VK_SPARSE_MEMORY_BIND_METADATA_BIT: c_int = 1;
pub const VK_SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSparseMemoryBindFlagBits = c_uint;
pub const VkSparseMemoryBindFlagBits = enum_VkSparseMemoryBindFlagBits;
pub const VkSparseMemoryBindFlags = VkFlags;
pub const VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT: c_int = 1;
pub const VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT: c_int = 2;
pub const VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT: c_int = 4;
pub const VK_SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSparseImageFormatFlagBits = c_uint;
pub const VkSparseImageFormatFlagBits = enum_VkSparseImageFormatFlagBits;
pub const VkSparseImageFormatFlags = VkFlags;
pub const VK_FENCE_CREATE_SIGNALED_BIT: c_int = 1;
pub const VK_FENCE_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkFenceCreateFlagBits = c_uint;
pub const VkFenceCreateFlagBits = enum_VkFenceCreateFlagBits;
pub const VkFenceCreateFlags = VkFlags;
pub const VkSemaphoreCreateFlags = VkFlags;
pub const VK_EVENT_CREATE_DEVICE_ONLY_BIT: c_int = 1;
pub const VK_EVENT_CREATE_DEVICE_ONLY_BIT_KHR: c_int = 1;
pub const VK_EVENT_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkEventCreateFlagBits = c_uint;
pub const VkEventCreateFlagBits = enum_VkEventCreateFlagBits;
pub const VkEventCreateFlags = VkFlags;
pub const VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT: c_int = 1;
pub const VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT: c_int = 2;
pub const VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT: c_int = 4;
pub const VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT: c_int = 8;
pub const VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT: c_int = 16;
pub const VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT: c_int = 32;
pub const VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT: c_int = 64;
pub const VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT: c_int = 128;
pub const VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT: c_int = 256;
pub const VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT: c_int = 512;
pub const VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT: c_int = 1024;
pub const VK_QUERY_PIPELINE_STATISTIC_TASK_SHADER_INVOCATIONS_BIT_EXT: c_int = 2048;
pub const VK_QUERY_PIPELINE_STATISTIC_MESH_SHADER_INVOCATIONS_BIT_EXT: c_int = 4096;
pub const VK_QUERY_PIPELINE_STATISTIC_CLUSTER_CULLING_SHADER_INVOCATIONS_BIT_HUAWEI: c_int = 8192;
pub const VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkQueryPipelineStatisticFlagBits = c_uint;
pub const VkQueryPipelineStatisticFlagBits = enum_VkQueryPipelineStatisticFlagBits;
pub const VkQueryPipelineStatisticFlags = VkFlags;
pub const VkQueryPoolCreateFlags = VkFlags;
pub const VK_QUERY_RESULT_64_BIT: c_int = 1;
pub const VK_QUERY_RESULT_WAIT_BIT: c_int = 2;
pub const VK_QUERY_RESULT_WITH_AVAILABILITY_BIT: c_int = 4;
pub const VK_QUERY_RESULT_PARTIAL_BIT: c_int = 8;
pub const VK_QUERY_RESULT_WITH_STATUS_BIT_KHR: c_int = 16;
pub const VK_QUERY_RESULT_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkQueryResultFlagBits = c_uint;
pub const VkQueryResultFlagBits = enum_VkQueryResultFlagBits;
pub const VkQueryResultFlags = VkFlags;
pub const VK_BUFFER_CREATE_SPARSE_BINDING_BIT: c_int = 1;
pub const VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT: c_int = 2;
pub const VK_BUFFER_CREATE_SPARSE_ALIASED_BIT: c_int = 4;
pub const VK_BUFFER_CREATE_PROTECTED_BIT: c_int = 8;
pub const VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT: c_int = 16;
pub const VK_BUFFER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT: c_int = 32;
pub const VK_BUFFER_CREATE_VIDEO_PROFILE_INDEPENDENT_BIT_KHR: c_int = 64;
pub const VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT: c_int = 16;
pub const VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR: c_int = 16;
pub const VK_BUFFER_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkBufferCreateFlagBits = c_uint;
pub const VkBufferCreateFlagBits = enum_VkBufferCreateFlagBits;
pub const VkBufferCreateFlags = VkFlags;
pub const VK_BUFFER_USAGE_TRANSFER_SRC_BIT: c_int = 1;
pub const VK_BUFFER_USAGE_TRANSFER_DST_BIT: c_int = 2;
pub const VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT: c_int = 4;
pub const VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT: c_int = 8;
pub const VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT: c_int = 16;
pub const VK_BUFFER_USAGE_STORAGE_BUFFER_BIT: c_int = 32;
pub const VK_BUFFER_USAGE_INDEX_BUFFER_BIT: c_int = 64;
pub const VK_BUFFER_USAGE_VERTEX_BUFFER_BIT: c_int = 128;
pub const VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT: c_int = 256;
pub const VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT: c_int = 131072;
pub const VK_BUFFER_USAGE_VIDEO_DECODE_SRC_BIT_KHR: c_int = 8192;
pub const VK_BUFFER_USAGE_VIDEO_DECODE_DST_BIT_KHR: c_int = 16384;
pub const VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT: c_int = 2048;
pub const VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT: c_int = 4096;
pub const VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT: c_int = 512;
pub const VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR: c_int = 524288;
pub const VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR: c_int = 1048576;
pub const VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR: c_int = 1024;
pub const VK_BUFFER_USAGE_VIDEO_ENCODE_DST_BIT_KHR: c_int = 32768;
pub const VK_BUFFER_USAGE_VIDEO_ENCODE_SRC_BIT_KHR: c_int = 65536;
pub const VK_BUFFER_USAGE_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT: c_int = 2097152;
pub const VK_BUFFER_USAGE_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT: c_int = 4194304;
pub const VK_BUFFER_USAGE_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT: c_int = 67108864;
pub const VK_BUFFER_USAGE_MICROMAP_BUILD_INPUT_READ_ONLY_BIT_EXT: c_int = 8388608;
pub const VK_BUFFER_USAGE_MICROMAP_STORAGE_BIT_EXT: c_int = 16777216;
pub const VK_BUFFER_USAGE_RAY_TRACING_BIT_NV: c_int = 1024;
pub const VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT: c_int = 131072;
pub const VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR: c_int = 131072;
pub const VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkBufferUsageFlagBits = c_uint;
pub const VkBufferUsageFlagBits = enum_VkBufferUsageFlagBits;
pub const VkBufferUsageFlags = VkFlags;
pub const VkBufferViewCreateFlags = VkFlags;
pub const VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT: c_int = 1;
pub const VK_IMAGE_VIEW_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT: c_int = 4;
pub const VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT: c_int = 2;
pub const VK_IMAGE_VIEW_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkImageViewCreateFlagBits = c_uint;
pub const VkImageViewCreateFlagBits = enum_VkImageViewCreateFlagBits;
pub const VkImageViewCreateFlags = VkFlags;
pub const VkShaderModuleCreateFlags = VkFlags;
pub const VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT: c_int = 1;
pub const VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT: c_int = 1;
pub const VK_PIPELINE_CACHE_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPipelineCacheCreateFlagBits = c_uint;
pub const VkPipelineCacheCreateFlagBits = enum_VkPipelineCacheCreateFlagBits;
pub const VkPipelineCacheCreateFlags = VkFlags;
pub const VK_COLOR_COMPONENT_R_BIT: c_int = 1;
pub const VK_COLOR_COMPONENT_G_BIT: c_int = 2;
pub const VK_COLOR_COMPONENT_B_BIT: c_int = 4;
pub const VK_COLOR_COMPONENT_A_BIT: c_int = 8;
pub const VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkColorComponentFlagBits = c_uint;
pub const VkColorComponentFlagBits = enum_VkColorComponentFlagBits;
pub const VkColorComponentFlags = VkFlags;
pub const VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT: c_int = 1;
pub const VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT: c_int = 2;
pub const VK_PIPELINE_CREATE_DERIVATIVE_BIT: c_int = 4;
pub const VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT: c_int = 8;
pub const VK_PIPELINE_CREATE_DISPATCH_BASE_BIT: c_int = 16;
pub const VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT: c_int = 256;
pub const VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT: c_int = 512;
pub const VK_PIPELINE_CREATE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR: c_int = 2097152;
pub const VK_PIPELINE_CREATE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT: c_int = 4194304;
pub const VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR: c_int = 16384;
pub const VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR: c_int = 32768;
pub const VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR: c_int = 65536;
pub const VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR: c_int = 131072;
pub const VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR: c_int = 4096;
pub const VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR: c_int = 8192;
pub const VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR: c_int = 524288;
pub const VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV: c_int = 32;
pub const VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR: c_int = 64;
pub const VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR: c_int = 128;
pub const VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV: c_int = 262144;
pub const VK_PIPELINE_CREATE_LIBRARY_BIT_KHR: c_int = 2048;
pub const VK_PIPELINE_CREATE_DESCRIPTOR_BUFFER_BIT_EXT: c_int = 536870912;
pub const VK_PIPELINE_CREATE_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT: c_int = 8388608;
pub const VK_PIPELINE_CREATE_LINK_TIME_OPTIMIZATION_BIT_EXT: c_int = 1024;
pub const VK_PIPELINE_CREATE_RAY_TRACING_ALLOW_MOTION_BIT_NV: c_int = 1048576;
pub const VK_PIPELINE_CREATE_COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT: c_int = 33554432;
pub const VK_PIPELINE_CREATE_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT: c_int = 67108864;
pub const VK_PIPELINE_CREATE_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT: c_int = 16777216;
pub const VK_PIPELINE_CREATE_NO_PROTECTED_ACCESS_BIT_EXT: c_int = 134217728;
pub const VK_PIPELINE_CREATE_PROTECTED_ACCESS_ONLY_BIT_EXT: c_int = 1073741824;
pub const VK_PIPELINE_CREATE_DISPATCH_BASE: c_int = 16;
pub const VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR: c_int = 2097152;
pub const VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT: c_int = 4194304;
pub const VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR: c_int = 8;
pub const VK_PIPELINE_CREATE_DISPATCH_BASE_KHR: c_int = 16;
pub const VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT: c_int = 256;
pub const VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT: c_int = 512;
pub const VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPipelineCreateFlagBits = c_uint;
pub const VkPipelineCreateFlagBits = enum_VkPipelineCreateFlagBits;
pub const VkPipelineCreateFlags = VkFlags;
pub const VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT: c_int = 1;
pub const VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT: c_int = 2;
pub const VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT: c_int = 1;
pub const VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT: c_int = 2;
pub const VK_PIPELINE_SHADER_STAGE_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPipelineShaderStageCreateFlagBits = c_uint;
pub const VkPipelineShaderStageCreateFlagBits = enum_VkPipelineShaderStageCreateFlagBits;
pub const VkPipelineShaderStageCreateFlags = VkFlags;
pub const VK_SHADER_STAGE_VERTEX_BIT: c_int = 1;
pub const VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT: c_int = 2;
pub const VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT: c_int = 4;
pub const VK_SHADER_STAGE_GEOMETRY_BIT: c_int = 8;
pub const VK_SHADER_STAGE_FRAGMENT_BIT: c_int = 16;
pub const VK_SHADER_STAGE_COMPUTE_BIT: c_int = 32;
pub const VK_SHADER_STAGE_ALL_GRAPHICS: c_int = 31;
pub const VK_SHADER_STAGE_ALL: c_int = 2147483647;
pub const VK_SHADER_STAGE_RAYGEN_BIT_KHR: c_int = 256;
pub const VK_SHADER_STAGE_ANY_HIT_BIT_KHR: c_int = 512;
pub const VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR: c_int = 1024;
pub const VK_SHADER_STAGE_MISS_BIT_KHR: c_int = 2048;
pub const VK_SHADER_STAGE_INTERSECTION_BIT_KHR: c_int = 4096;
pub const VK_SHADER_STAGE_CALLABLE_BIT_KHR: c_int = 8192;
pub const VK_SHADER_STAGE_TASK_BIT_EXT: c_int = 64;
pub const VK_SHADER_STAGE_MESH_BIT_EXT: c_int = 128;
pub const VK_SHADER_STAGE_SUBPASS_SHADING_BIT_HUAWEI: c_int = 16384;
pub const VK_SHADER_STAGE_CLUSTER_CULLING_BIT_HUAWEI: c_int = 524288;
pub const VK_SHADER_STAGE_RAYGEN_BIT_NV: c_int = 256;
pub const VK_SHADER_STAGE_ANY_HIT_BIT_NV: c_int = 512;
pub const VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV: c_int = 1024;
pub const VK_SHADER_STAGE_MISS_BIT_NV: c_int = 2048;
pub const VK_SHADER_STAGE_INTERSECTION_BIT_NV: c_int = 4096;
pub const VK_SHADER_STAGE_CALLABLE_BIT_NV: c_int = 8192;
pub const VK_SHADER_STAGE_TASK_BIT_NV: c_int = 64;
pub const VK_SHADER_STAGE_MESH_BIT_NV: c_int = 128;
pub const VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkShaderStageFlagBits = c_uint;
pub const VkShaderStageFlagBits = enum_VkShaderStageFlagBits;
pub const VK_CULL_MODE_NONE: c_int = 0;
pub const VK_CULL_MODE_FRONT_BIT: c_int = 1;
pub const VK_CULL_MODE_BACK_BIT: c_int = 2;
pub const VK_CULL_MODE_FRONT_AND_BACK: c_int = 3;
pub const VK_CULL_MODE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkCullModeFlagBits = c_uint;
pub const VkCullModeFlagBits = enum_VkCullModeFlagBits;
pub const VkCullModeFlags = VkFlags;
pub const VkPipelineVertexInputStateCreateFlags = VkFlags;
pub const VkPipelineInputAssemblyStateCreateFlags = VkFlags;
pub const VkPipelineTessellationStateCreateFlags = VkFlags;
pub const VkPipelineViewportStateCreateFlags = VkFlags;
pub const VkPipelineRasterizationStateCreateFlags = VkFlags;
pub const VkPipelineMultisampleStateCreateFlags = VkFlags;
pub const VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT: c_int = 1;
pub const VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT: c_int = 2;
pub const VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM: c_int = 1;
pub const VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM: c_int = 2;
pub const VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPipelineDepthStencilStateCreateFlagBits = c_uint;
pub const VkPipelineDepthStencilStateCreateFlagBits = enum_VkPipelineDepthStencilStateCreateFlagBits;
pub const VkPipelineDepthStencilStateCreateFlags = VkFlags;
pub const VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_EXT: c_int = 1;
pub const VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_ARM: c_int = 1;
pub const VK_PIPELINE_COLOR_BLEND_STATE_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPipelineColorBlendStateCreateFlagBits = c_uint;
pub const VkPipelineColorBlendStateCreateFlagBits = enum_VkPipelineColorBlendStateCreateFlagBits;
pub const VkPipelineColorBlendStateCreateFlags = VkFlags;
pub const VkPipelineDynamicStateCreateFlags = VkFlags;
pub const VK_PIPELINE_LAYOUT_CREATE_INDEPENDENT_SETS_BIT_EXT: c_int = 2;
pub const VK_PIPELINE_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPipelineLayoutCreateFlagBits = c_uint;
pub const VkPipelineLayoutCreateFlagBits = enum_VkPipelineLayoutCreateFlagBits;
pub const VkPipelineLayoutCreateFlags = VkFlags;
pub const VkShaderStageFlags = VkFlags;
pub const VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT: c_int = 1;
pub const VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT: c_int = 2;
pub const VK_SAMPLER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT: c_int = 8;
pub const VK_SAMPLER_CREATE_NON_SEAMLESS_CUBE_MAP_BIT_EXT: c_int = 4;
pub const VK_SAMPLER_CREATE_IMAGE_PROCESSING_BIT_QCOM: c_int = 16;
pub const VK_SAMPLER_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSamplerCreateFlagBits = c_uint;
pub const VkSamplerCreateFlagBits = enum_VkSamplerCreateFlagBits;
pub const VkSamplerCreateFlags = VkFlags;
pub const VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT: c_int = 1;
pub const VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT: c_int = 2;
pub const VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_EXT: c_int = 4;
pub const VK_DESCRIPTOR_POOL_CREATE_ALLOW_OVERALLOCATION_SETS_BIT_NV: c_int = 8;
pub const VK_DESCRIPTOR_POOL_CREATE_ALLOW_OVERALLOCATION_POOLS_BIT_NV: c_int = 16;
pub const VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT: c_int = 2;
pub const VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_VALVE: c_int = 4;
pub const VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkDescriptorPoolCreateFlagBits = c_uint;
pub const VkDescriptorPoolCreateFlagBits = enum_VkDescriptorPoolCreateFlagBits;
pub const VkDescriptorPoolCreateFlags = VkFlags;
pub const VkDescriptorPoolResetFlags = VkFlags;
pub const VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT: c_int = 2;
pub const VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR: c_int = 1;
pub const VK_DESCRIPTOR_SET_LAYOUT_CREATE_DESCRIPTOR_BUFFER_BIT_EXT: c_int = 16;
pub const VK_DESCRIPTOR_SET_LAYOUT_CREATE_EMBEDDED_IMMUTABLE_SAMPLERS_BIT_EXT: c_int = 32;
pub const VK_DESCRIPTOR_SET_LAYOUT_CREATE_INDIRECT_BINDABLE_BIT_NV: c_int = 128;
pub const VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_EXT: c_int = 4;
pub const VK_DESCRIPTOR_SET_LAYOUT_CREATE_PER_STAGE_BIT_NV: c_int = 64;
pub const VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT: c_int = 2;
pub const VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE: c_int = 4;
pub const VK_DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkDescriptorSetLayoutCreateFlagBits = c_uint;
pub const VkDescriptorSetLayoutCreateFlagBits = enum_VkDescriptorSetLayoutCreateFlagBits;
pub const VkDescriptorSetLayoutCreateFlags = VkFlags;
pub const VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT: c_int = 1;
pub const VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkAttachmentDescriptionFlagBits = c_uint;
pub const VkAttachmentDescriptionFlagBits = enum_VkAttachmentDescriptionFlagBits;
pub const VkAttachmentDescriptionFlags = VkFlags;
pub const VK_DEPENDENCY_BY_REGION_BIT: c_int = 1;
pub const VK_DEPENDENCY_DEVICE_GROUP_BIT: c_int = 4;
pub const VK_DEPENDENCY_VIEW_LOCAL_BIT: c_int = 2;
pub const VK_DEPENDENCY_FEEDBACK_LOOP_BIT_EXT: c_int = 8;
pub const VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR: c_int = 2;
pub const VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR: c_int = 4;
pub const VK_DEPENDENCY_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkDependencyFlagBits = c_uint;
pub const VkDependencyFlagBits = enum_VkDependencyFlagBits;
pub const VkDependencyFlags = VkFlags;
pub const VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT: c_int = 1;
pub const VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR: c_int = 1;
pub const VK_FRAMEBUFFER_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkFramebufferCreateFlagBits = c_uint;
pub const VkFramebufferCreateFlagBits = enum_VkFramebufferCreateFlagBits;
pub const VkFramebufferCreateFlags = VkFlags;
pub const VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM: c_int = 2;
pub const VK_RENDER_PASS_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkRenderPassCreateFlagBits = c_uint;
pub const VkRenderPassCreateFlagBits = enum_VkRenderPassCreateFlagBits;
pub const VkRenderPassCreateFlags = VkFlags;
pub const VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX: c_int = 1;
pub const VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX: c_int = 2;
pub const VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM: c_int = 4;
pub const VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM: c_int = 8;
pub const VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_EXT: c_int = 16;
pub const VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT: c_int = 32;
pub const VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT: c_int = 64;
pub const VK_SUBPASS_DESCRIPTION_ENABLE_LEGACY_DITHERING_BIT_EXT: c_int = 128;
pub const VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_ARM: c_int = 16;
pub const VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM: c_int = 32;
pub const VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM: c_int = 64;
pub const VK_SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSubpassDescriptionFlagBits = c_uint;
pub const VkSubpassDescriptionFlagBits = enum_VkSubpassDescriptionFlagBits;
pub const VkSubpassDescriptionFlags = VkFlags;
pub const VK_COMMAND_POOL_CREATE_TRANSIENT_BIT: c_int = 1;
pub const VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT: c_int = 2;
pub const VK_COMMAND_POOL_CREATE_PROTECTED_BIT: c_int = 4;
pub const VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkCommandPoolCreateFlagBits = c_uint;
pub const VkCommandPoolCreateFlagBits = enum_VkCommandPoolCreateFlagBits;
pub const VkCommandPoolCreateFlags = VkFlags;
pub const VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT: c_int = 1;
pub const VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkCommandPoolResetFlagBits = c_uint;
pub const VkCommandPoolResetFlagBits = enum_VkCommandPoolResetFlagBits;
pub const VkCommandPoolResetFlags = VkFlags;
pub const VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT: c_int = 1;
pub const VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT: c_int = 2;
pub const VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT: c_int = 4;
pub const VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkCommandBufferUsageFlagBits = c_uint;
pub const VkCommandBufferUsageFlagBits = enum_VkCommandBufferUsageFlagBits;
pub const VkCommandBufferUsageFlags = VkFlags;
pub const VK_QUERY_CONTROL_PRECISE_BIT: c_int = 1;
pub const VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkQueryControlFlagBits = c_uint;
pub const VkQueryControlFlagBits = enum_VkQueryControlFlagBits;
pub const VkQueryControlFlags = VkFlags;
pub const VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT: c_int = 1;
pub const VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkCommandBufferResetFlagBits = c_uint;
pub const VkCommandBufferResetFlagBits = enum_VkCommandBufferResetFlagBits;
pub const VkCommandBufferResetFlags = VkFlags;
pub const VK_STENCIL_FACE_FRONT_BIT: c_int = 1;
pub const VK_STENCIL_FACE_BACK_BIT: c_int = 2;
pub const VK_STENCIL_FACE_FRONT_AND_BACK: c_int = 3;
pub const VK_STENCIL_FRONT_AND_BACK: c_int = 3;
pub const VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkStencilFaceFlagBits = c_uint;
pub const VkStencilFaceFlagBits = enum_VkStencilFaceFlagBits;
pub const VkStencilFaceFlags = VkFlags;
pub const struct_VkExtent2D = extern struct {
    width: u32 = @import("std").mem.zeroes(u32),
    height: u32 = @import("std").mem.zeroes(u32),
};
pub const VkExtent2D = struct_VkExtent2D;
pub const struct_VkExtent3D = extern struct {
    width: u32 = @import("std").mem.zeroes(u32),
    height: u32 = @import("std").mem.zeroes(u32),
    depth: u32 = @import("std").mem.zeroes(u32),
};
pub const VkExtent3D = struct_VkExtent3D;
pub const struct_VkOffset2D = extern struct {
    x: i32 = @import("std").mem.zeroes(i32),
    y: i32 = @import("std").mem.zeroes(i32),
};
pub const VkOffset2D = struct_VkOffset2D;
pub const struct_VkOffset3D = extern struct {
    x: i32 = @import("std").mem.zeroes(i32),
    y: i32 = @import("std").mem.zeroes(i32),
    z: i32 = @import("std").mem.zeroes(i32),
};
pub const VkOffset3D = struct_VkOffset3D;
pub const struct_VkRect2D = extern struct {
    offset: VkOffset2D = @import("std").mem.zeroes(VkOffset2D),
    extent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
};
pub const VkRect2D = struct_VkRect2D;
pub const struct_VkBaseInStructure = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: [*c]const struct_VkBaseInStructure = @import("std").mem.zeroes([*c]const struct_VkBaseInStructure),
};
pub const VkBaseInStructure = struct_VkBaseInStructure;
pub const struct_VkBaseOutStructure = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: [*c]struct_VkBaseOutStructure = @import("std").mem.zeroes([*c]struct_VkBaseOutStructure),
};
pub const VkBaseOutStructure = struct_VkBaseOutStructure;
pub const struct_VkBufferMemoryBarrier = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcAccessMask: VkAccessFlags = @import("std").mem.zeroes(VkAccessFlags),
    dstAccessMask: VkAccessFlags = @import("std").mem.zeroes(VkAccessFlags),
    srcQueueFamilyIndex: u32 = @import("std").mem.zeroes(u32),
    dstQueueFamilyIndex: u32 = @import("std").mem.zeroes(u32),
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    offset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkBufferMemoryBarrier = struct_VkBufferMemoryBarrier;
pub const struct_VkDispatchIndirectCommand = extern struct {
    x: u32 = @import("std").mem.zeroes(u32),
    y: u32 = @import("std").mem.zeroes(u32),
    z: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDispatchIndirectCommand = struct_VkDispatchIndirectCommand;
pub const struct_VkDrawIndexedIndirectCommand = extern struct {
    indexCount: u32 = @import("std").mem.zeroes(u32),
    instanceCount: u32 = @import("std").mem.zeroes(u32),
    firstIndex: u32 = @import("std").mem.zeroes(u32),
    vertexOffset: i32 = @import("std").mem.zeroes(i32),
    firstInstance: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDrawIndexedIndirectCommand = struct_VkDrawIndexedIndirectCommand;
pub const struct_VkDrawIndirectCommand = extern struct {
    vertexCount: u32 = @import("std").mem.zeroes(u32),
    instanceCount: u32 = @import("std").mem.zeroes(u32),
    firstVertex: u32 = @import("std").mem.zeroes(u32),
    firstInstance: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDrawIndirectCommand = struct_VkDrawIndirectCommand;
pub const struct_VkImageSubresourceRange = extern struct {
    aspectMask: VkImageAspectFlags = @import("std").mem.zeroes(VkImageAspectFlags),
    baseMipLevel: u32 = @import("std").mem.zeroes(u32),
    levelCount: u32 = @import("std").mem.zeroes(u32),
    baseArrayLayer: u32 = @import("std").mem.zeroes(u32),
    layerCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkImageSubresourceRange = struct_VkImageSubresourceRange;
pub const struct_VkImageMemoryBarrier = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcAccessMask: VkAccessFlags = @import("std").mem.zeroes(VkAccessFlags),
    dstAccessMask: VkAccessFlags = @import("std").mem.zeroes(VkAccessFlags),
    oldLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    newLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    srcQueueFamilyIndex: u32 = @import("std").mem.zeroes(u32),
    dstQueueFamilyIndex: u32 = @import("std").mem.zeroes(u32),
    image: VkImage = @import("std").mem.zeroes(VkImage),
    subresourceRange: VkImageSubresourceRange = @import("std").mem.zeroes(VkImageSubresourceRange),
};
pub const VkImageMemoryBarrier = struct_VkImageMemoryBarrier;
pub const struct_VkMemoryBarrier = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcAccessMask: VkAccessFlags = @import("std").mem.zeroes(VkAccessFlags),
    dstAccessMask: VkAccessFlags = @import("std").mem.zeroes(VkAccessFlags),
};
pub const VkMemoryBarrier = struct_VkMemoryBarrier;
pub const struct_VkPipelineCacheHeaderVersionOne = extern struct {
    headerSize: u32 = @import("std").mem.zeroes(u32),
    headerVersion: VkPipelineCacheHeaderVersion = @import("std").mem.zeroes(VkPipelineCacheHeaderVersion),
    vendorID: u32 = @import("std").mem.zeroes(u32),
    deviceID: u32 = @import("std").mem.zeroes(u32),
    pipelineCacheUUID: [16]u8 = @import("std").mem.zeroes([16]u8),
};
pub const VkPipelineCacheHeaderVersionOne = struct_VkPipelineCacheHeaderVersionOne;
pub const PFN_vkAllocationFunction = ?*const fn (?*anyopaque, usize, usize, VkSystemAllocationScope) callconv(.C) ?*anyopaque;
pub const PFN_vkFreeFunction = ?*const fn (?*anyopaque, ?*anyopaque) callconv(.C) void;
pub const PFN_vkInternalAllocationNotification = ?*const fn (?*anyopaque, usize, VkInternalAllocationType, VkSystemAllocationScope) callconv(.C) void;
pub const PFN_vkInternalFreeNotification = ?*const fn (?*anyopaque, usize, VkInternalAllocationType, VkSystemAllocationScope) callconv(.C) void;
pub const PFN_vkReallocationFunction = ?*const fn (?*anyopaque, ?*anyopaque, usize, usize, VkSystemAllocationScope) callconv(.C) ?*anyopaque;
pub const PFN_vkVoidFunction = ?*const fn () callconv(.C) void;
pub const struct_VkAllocationCallbacks = extern struct {
    pUserData: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pfnAllocation: PFN_vkAllocationFunction = @import("std").mem.zeroes(PFN_vkAllocationFunction),
    pfnReallocation: PFN_vkReallocationFunction = @import("std").mem.zeroes(PFN_vkReallocationFunction),
    pfnFree: PFN_vkFreeFunction = @import("std").mem.zeroes(PFN_vkFreeFunction),
    pfnInternalAllocation: PFN_vkInternalAllocationNotification = @import("std").mem.zeroes(PFN_vkInternalAllocationNotification),
    pfnInternalFree: PFN_vkInternalFreeNotification = @import("std").mem.zeroes(PFN_vkInternalFreeNotification),
};
pub const VkAllocationCallbacks = struct_VkAllocationCallbacks;
pub const struct_VkApplicationInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pApplicationName: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    applicationVersion: u32 = @import("std").mem.zeroes(u32),
    pEngineName: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    engineVersion: u32 = @import("std").mem.zeroes(u32),
    apiVersion: u32 = @import("std").mem.zeroes(u32),
};
pub const VkApplicationInfo = struct_VkApplicationInfo;
pub const struct_VkFormatProperties = extern struct {
    linearTilingFeatures: VkFormatFeatureFlags = @import("std").mem.zeroes(VkFormatFeatureFlags),
    optimalTilingFeatures: VkFormatFeatureFlags = @import("std").mem.zeroes(VkFormatFeatureFlags),
    bufferFeatures: VkFormatFeatureFlags = @import("std").mem.zeroes(VkFormatFeatureFlags),
};
pub const VkFormatProperties = struct_VkFormatProperties;
pub const struct_VkImageFormatProperties = extern struct {
    maxExtent: VkExtent3D = @import("std").mem.zeroes(VkExtent3D),
    maxMipLevels: u32 = @import("std").mem.zeroes(u32),
    maxArrayLayers: u32 = @import("std").mem.zeroes(u32),
    sampleCounts: VkSampleCountFlags = @import("std").mem.zeroes(VkSampleCountFlags),
    maxResourceSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkImageFormatProperties = struct_VkImageFormatProperties;
pub const struct_VkInstanceCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkInstanceCreateFlags = @import("std").mem.zeroes(VkInstanceCreateFlags),
    pApplicationInfo: [*c]const VkApplicationInfo = @import("std").mem.zeroes([*c]const VkApplicationInfo),
    enabledLayerCount: u32 = @import("std").mem.zeroes(u32),
    ppEnabledLayerNames: [*c]const [*c]const u8 = @import("std").mem.zeroes([*c]const [*c]const u8),
    enabledExtensionCount: u32 = @import("std").mem.zeroes(u32),
    ppEnabledExtensionNames: [*c]const [*c]const u8 = @import("std").mem.zeroes([*c]const [*c]const u8),
};
pub const VkInstanceCreateInfo = struct_VkInstanceCreateInfo;
pub const struct_VkMemoryHeap = extern struct {
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    flags: VkMemoryHeapFlags = @import("std").mem.zeroes(VkMemoryHeapFlags),
};
pub const VkMemoryHeap = struct_VkMemoryHeap;
pub const struct_VkMemoryType = extern struct {
    propertyFlags: VkMemoryPropertyFlags = @import("std").mem.zeroes(VkMemoryPropertyFlags),
    heapIndex: u32 = @import("std").mem.zeroes(u32),
};
pub const VkMemoryType = struct_VkMemoryType;
pub const struct_VkPhysicalDeviceFeatures = extern struct {
    robustBufferAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    fullDrawIndexUint32: VkBool32 = @import("std").mem.zeroes(VkBool32),
    imageCubeArray: VkBool32 = @import("std").mem.zeroes(VkBool32),
    independentBlend: VkBool32 = @import("std").mem.zeroes(VkBool32),
    geometryShader: VkBool32 = @import("std").mem.zeroes(VkBool32),
    tessellationShader: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sampleRateShading: VkBool32 = @import("std").mem.zeroes(VkBool32),
    dualSrcBlend: VkBool32 = @import("std").mem.zeroes(VkBool32),
    logicOp: VkBool32 = @import("std").mem.zeroes(VkBool32),
    multiDrawIndirect: VkBool32 = @import("std").mem.zeroes(VkBool32),
    drawIndirectFirstInstance: VkBool32 = @import("std").mem.zeroes(VkBool32),
    depthClamp: VkBool32 = @import("std").mem.zeroes(VkBool32),
    depthBiasClamp: VkBool32 = @import("std").mem.zeroes(VkBool32),
    fillModeNonSolid: VkBool32 = @import("std").mem.zeroes(VkBool32),
    depthBounds: VkBool32 = @import("std").mem.zeroes(VkBool32),
    wideLines: VkBool32 = @import("std").mem.zeroes(VkBool32),
    largePoints: VkBool32 = @import("std").mem.zeroes(VkBool32),
    alphaToOne: VkBool32 = @import("std").mem.zeroes(VkBool32),
    multiViewport: VkBool32 = @import("std").mem.zeroes(VkBool32),
    samplerAnisotropy: VkBool32 = @import("std").mem.zeroes(VkBool32),
    textureCompressionETC2: VkBool32 = @import("std").mem.zeroes(VkBool32),
    textureCompressionASTC_LDR: VkBool32 = @import("std").mem.zeroes(VkBool32),
    textureCompressionBC: VkBool32 = @import("std").mem.zeroes(VkBool32),
    occlusionQueryPrecise: VkBool32 = @import("std").mem.zeroes(VkBool32),
    pipelineStatisticsQuery: VkBool32 = @import("std").mem.zeroes(VkBool32),
    vertexPipelineStoresAndAtomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    fragmentStoresAndAtomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderTessellationAndGeometryPointSize: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderImageGatherExtended: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageImageExtendedFormats: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageImageMultisample: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageImageReadWithoutFormat: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageImageWriteWithoutFormat: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderUniformBufferArrayDynamicIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSampledImageArrayDynamicIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageBufferArrayDynamicIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageImageArrayDynamicIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderClipDistance: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderCullDistance: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderFloat64: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderInt64: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderInt16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderResourceResidency: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderResourceMinLod: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sparseBinding: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sparseResidencyBuffer: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sparseResidencyImage2D: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sparseResidencyImage3D: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sparseResidency2Samples: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sparseResidency4Samples: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sparseResidency8Samples: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sparseResidency16Samples: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sparseResidencyAliased: VkBool32 = @import("std").mem.zeroes(VkBool32),
    variableMultisampleRate: VkBool32 = @import("std").mem.zeroes(VkBool32),
    inheritedQueries: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceFeatures = struct_VkPhysicalDeviceFeatures;
pub const struct_VkPhysicalDeviceLimits = extern struct {
    maxImageDimension1D: u32 = @import("std").mem.zeroes(u32),
    maxImageDimension2D: u32 = @import("std").mem.zeroes(u32),
    maxImageDimension3D: u32 = @import("std").mem.zeroes(u32),
    maxImageDimensionCube: u32 = @import("std").mem.zeroes(u32),
    maxImageArrayLayers: u32 = @import("std").mem.zeroes(u32),
    maxTexelBufferElements: u32 = @import("std").mem.zeroes(u32),
    maxUniformBufferRange: u32 = @import("std").mem.zeroes(u32),
    maxStorageBufferRange: u32 = @import("std").mem.zeroes(u32),
    maxPushConstantsSize: u32 = @import("std").mem.zeroes(u32),
    maxMemoryAllocationCount: u32 = @import("std").mem.zeroes(u32),
    maxSamplerAllocationCount: u32 = @import("std").mem.zeroes(u32),
    bufferImageGranularity: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    sparseAddressSpaceSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    maxBoundDescriptorSets: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorSamplers: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorUniformBuffers: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorStorageBuffers: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorSampledImages: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorStorageImages: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorInputAttachments: u32 = @import("std").mem.zeroes(u32),
    maxPerStageResources: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetSamplers: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUniformBuffers: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUniformBuffersDynamic: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetStorageBuffers: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetStorageBuffersDynamic: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetSampledImages: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetStorageImages: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetInputAttachments: u32 = @import("std").mem.zeroes(u32),
    maxVertexInputAttributes: u32 = @import("std").mem.zeroes(u32),
    maxVertexInputBindings: u32 = @import("std").mem.zeroes(u32),
    maxVertexInputAttributeOffset: u32 = @import("std").mem.zeroes(u32),
    maxVertexInputBindingStride: u32 = @import("std").mem.zeroes(u32),
    maxVertexOutputComponents: u32 = @import("std").mem.zeroes(u32),
    maxTessellationGenerationLevel: u32 = @import("std").mem.zeroes(u32),
    maxTessellationPatchSize: u32 = @import("std").mem.zeroes(u32),
    maxTessellationControlPerVertexInputComponents: u32 = @import("std").mem.zeroes(u32),
    maxTessellationControlPerVertexOutputComponents: u32 = @import("std").mem.zeroes(u32),
    maxTessellationControlPerPatchOutputComponents: u32 = @import("std").mem.zeroes(u32),
    maxTessellationControlTotalOutputComponents: u32 = @import("std").mem.zeroes(u32),
    maxTessellationEvaluationInputComponents: u32 = @import("std").mem.zeroes(u32),
    maxTessellationEvaluationOutputComponents: u32 = @import("std").mem.zeroes(u32),
    maxGeometryShaderInvocations: u32 = @import("std").mem.zeroes(u32),
    maxGeometryInputComponents: u32 = @import("std").mem.zeroes(u32),
    maxGeometryOutputComponents: u32 = @import("std").mem.zeroes(u32),
    maxGeometryOutputVertices: u32 = @import("std").mem.zeroes(u32),
    maxGeometryTotalOutputComponents: u32 = @import("std").mem.zeroes(u32),
    maxFragmentInputComponents: u32 = @import("std").mem.zeroes(u32),
    maxFragmentOutputAttachments: u32 = @import("std").mem.zeroes(u32),
    maxFragmentDualSrcAttachments: u32 = @import("std").mem.zeroes(u32),
    maxFragmentCombinedOutputResources: u32 = @import("std").mem.zeroes(u32),
    maxComputeSharedMemorySize: u32 = @import("std").mem.zeroes(u32),
    maxComputeWorkGroupCount: [3]u32 = @import("std").mem.zeroes([3]u32),
    maxComputeWorkGroupInvocations: u32 = @import("std").mem.zeroes(u32),
    maxComputeWorkGroupSize: [3]u32 = @import("std").mem.zeroes([3]u32),
    subPixelPrecisionBits: u32 = @import("std").mem.zeroes(u32),
    subTexelPrecisionBits: u32 = @import("std").mem.zeroes(u32),
    mipmapPrecisionBits: u32 = @import("std").mem.zeroes(u32),
    maxDrawIndexedIndexValue: u32 = @import("std").mem.zeroes(u32),
    maxDrawIndirectCount: u32 = @import("std").mem.zeroes(u32),
    maxSamplerLodBias: f32 = @import("std").mem.zeroes(f32),
    maxSamplerAnisotropy: f32 = @import("std").mem.zeroes(f32),
    maxViewports: u32 = @import("std").mem.zeroes(u32),
    maxViewportDimensions: [2]u32 = @import("std").mem.zeroes([2]u32),
    viewportBoundsRange: [2]f32 = @import("std").mem.zeroes([2]f32),
    viewportSubPixelBits: u32 = @import("std").mem.zeroes(u32),
    minMemoryMapAlignment: usize = @import("std").mem.zeroes(usize),
    minTexelBufferOffsetAlignment: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    minUniformBufferOffsetAlignment: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    minStorageBufferOffsetAlignment: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    minTexelOffset: i32 = @import("std").mem.zeroes(i32),
    maxTexelOffset: u32 = @import("std").mem.zeroes(u32),
    minTexelGatherOffset: i32 = @import("std").mem.zeroes(i32),
    maxTexelGatherOffset: u32 = @import("std").mem.zeroes(u32),
    minInterpolationOffset: f32 = @import("std").mem.zeroes(f32),
    maxInterpolationOffset: f32 = @import("std").mem.zeroes(f32),
    subPixelInterpolationOffsetBits: u32 = @import("std").mem.zeroes(u32),
    maxFramebufferWidth: u32 = @import("std").mem.zeroes(u32),
    maxFramebufferHeight: u32 = @import("std").mem.zeroes(u32),
    maxFramebufferLayers: u32 = @import("std").mem.zeroes(u32),
    framebufferColorSampleCounts: VkSampleCountFlags = @import("std").mem.zeroes(VkSampleCountFlags),
    framebufferDepthSampleCounts: VkSampleCountFlags = @import("std").mem.zeroes(VkSampleCountFlags),
    framebufferStencilSampleCounts: VkSampleCountFlags = @import("std").mem.zeroes(VkSampleCountFlags),
    framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = @import("std").mem.zeroes(VkSampleCountFlags),
    maxColorAttachments: u32 = @import("std").mem.zeroes(u32),
    sampledImageColorSampleCounts: VkSampleCountFlags = @import("std").mem.zeroes(VkSampleCountFlags),
    sampledImageIntegerSampleCounts: VkSampleCountFlags = @import("std").mem.zeroes(VkSampleCountFlags),
    sampledImageDepthSampleCounts: VkSampleCountFlags = @import("std").mem.zeroes(VkSampleCountFlags),
    sampledImageStencilSampleCounts: VkSampleCountFlags = @import("std").mem.zeroes(VkSampleCountFlags),
    storageImageSampleCounts: VkSampleCountFlags = @import("std").mem.zeroes(VkSampleCountFlags),
    maxSampleMaskWords: u32 = @import("std").mem.zeroes(u32),
    timestampComputeAndGraphics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    timestampPeriod: f32 = @import("std").mem.zeroes(f32),
    maxClipDistances: u32 = @import("std").mem.zeroes(u32),
    maxCullDistances: u32 = @import("std").mem.zeroes(u32),
    maxCombinedClipAndCullDistances: u32 = @import("std").mem.zeroes(u32),
    discreteQueuePriorities: u32 = @import("std").mem.zeroes(u32),
    pointSizeRange: [2]f32 = @import("std").mem.zeroes([2]f32),
    lineWidthRange: [2]f32 = @import("std").mem.zeroes([2]f32),
    pointSizeGranularity: f32 = @import("std").mem.zeroes(f32),
    lineWidthGranularity: f32 = @import("std").mem.zeroes(f32),
    strictLines: VkBool32 = @import("std").mem.zeroes(VkBool32),
    standardSampleLocations: VkBool32 = @import("std").mem.zeroes(VkBool32),
    optimalBufferCopyOffsetAlignment: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    optimalBufferCopyRowPitchAlignment: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    nonCoherentAtomSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkPhysicalDeviceLimits = struct_VkPhysicalDeviceLimits;
pub const struct_VkPhysicalDeviceMemoryProperties = extern struct {
    memoryTypeCount: u32 = @import("std").mem.zeroes(u32),
    memoryTypes: [32]VkMemoryType = @import("std").mem.zeroes([32]VkMemoryType),
    memoryHeapCount: u32 = @import("std").mem.zeroes(u32),
    memoryHeaps: [16]VkMemoryHeap = @import("std").mem.zeroes([16]VkMemoryHeap),
};
pub const VkPhysicalDeviceMemoryProperties = struct_VkPhysicalDeviceMemoryProperties;
pub const struct_VkPhysicalDeviceSparseProperties = extern struct {
    residencyStandard2DBlockShape: VkBool32 = @import("std").mem.zeroes(VkBool32),
    residencyStandard2DMultisampleBlockShape: VkBool32 = @import("std").mem.zeroes(VkBool32),
    residencyStandard3DBlockShape: VkBool32 = @import("std").mem.zeroes(VkBool32),
    residencyAlignedMipSize: VkBool32 = @import("std").mem.zeroes(VkBool32),
    residencyNonResidentStrict: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceSparseProperties = struct_VkPhysicalDeviceSparseProperties;
pub const struct_VkPhysicalDeviceProperties = extern struct {
    apiVersion: u32 = @import("std").mem.zeroes(u32),
    driverVersion: u32 = @import("std").mem.zeroes(u32),
    vendorID: u32 = @import("std").mem.zeroes(u32),
    deviceID: u32 = @import("std").mem.zeroes(u32),
    deviceType: VkPhysicalDeviceType = @import("std").mem.zeroes(VkPhysicalDeviceType),
    deviceName: [256]u8 = @import("std").mem.zeroes([256]u8),
    pipelineCacheUUID: [16]u8 = @import("std").mem.zeroes([16]u8),
    limits: VkPhysicalDeviceLimits = @import("std").mem.zeroes(VkPhysicalDeviceLimits),
    sparseProperties: VkPhysicalDeviceSparseProperties = @import("std").mem.zeroes(VkPhysicalDeviceSparseProperties),
};
pub const VkPhysicalDeviceProperties = struct_VkPhysicalDeviceProperties;
pub const struct_VkQueueFamilyProperties = extern struct {
    queueFlags: VkQueueFlags = @import("std").mem.zeroes(VkQueueFlags),
    queueCount: u32 = @import("std").mem.zeroes(u32),
    timestampValidBits: u32 = @import("std").mem.zeroes(u32),
    minImageTransferGranularity: VkExtent3D = @import("std").mem.zeroes(VkExtent3D),
};
pub const VkQueueFamilyProperties = struct_VkQueueFamilyProperties;
pub const struct_VkDeviceQueueCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkDeviceQueueCreateFlags = @import("std").mem.zeroes(VkDeviceQueueCreateFlags),
    queueFamilyIndex: u32 = @import("std").mem.zeroes(u32),
    queueCount: u32 = @import("std").mem.zeroes(u32),
    pQueuePriorities: [*c]const f32 = @import("std").mem.zeroes([*c]const f32),
};
pub const VkDeviceQueueCreateInfo = struct_VkDeviceQueueCreateInfo;
pub const struct_VkDeviceCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkDeviceCreateFlags = @import("std").mem.zeroes(VkDeviceCreateFlags),
    queueCreateInfoCount: u32 = @import("std").mem.zeroes(u32),
    pQueueCreateInfos: [*c]const VkDeviceQueueCreateInfo = @import("std").mem.zeroes([*c]const VkDeviceQueueCreateInfo),
    enabledLayerCount: u32 = @import("std").mem.zeroes(u32),
    ppEnabledLayerNames: [*c]const [*c]const u8 = @import("std").mem.zeroes([*c]const [*c]const u8),
    enabledExtensionCount: u32 = @import("std").mem.zeroes(u32),
    ppEnabledExtensionNames: [*c]const [*c]const u8 = @import("std").mem.zeroes([*c]const [*c]const u8),
    pEnabledFeatures: [*c]const VkPhysicalDeviceFeatures = @import("std").mem.zeroes([*c]const VkPhysicalDeviceFeatures),
};
pub const VkDeviceCreateInfo = struct_VkDeviceCreateInfo;
pub const struct_VkExtensionProperties = extern struct {
    extensionName: [256]u8 = @import("std").mem.zeroes([256]u8),
    specVersion: u32 = @import("std").mem.zeroes(u32),
};
pub const VkExtensionProperties = struct_VkExtensionProperties;
pub const struct_VkLayerProperties = extern struct {
    layerName: [256]u8 = @import("std").mem.zeroes([256]u8),
    specVersion: u32 = @import("std").mem.zeroes(u32),
    implementationVersion: u32 = @import("std").mem.zeroes(u32),
    description: [256]u8 = @import("std").mem.zeroes([256]u8),
};
pub const VkLayerProperties = struct_VkLayerProperties;
pub const struct_VkSubmitInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    waitSemaphoreCount: u32 = @import("std").mem.zeroes(u32),
    pWaitSemaphores: [*c]const VkSemaphore = @import("std").mem.zeroes([*c]const VkSemaphore),
    pWaitDstStageMask: [*c]const VkPipelineStageFlags = @import("std").mem.zeroes([*c]const VkPipelineStageFlags),
    commandBufferCount: u32 = @import("std").mem.zeroes(u32),
    pCommandBuffers: [*c]const VkCommandBuffer = @import("std").mem.zeroes([*c]const VkCommandBuffer),
    signalSemaphoreCount: u32 = @import("std").mem.zeroes(u32),
    pSignalSemaphores: [*c]const VkSemaphore = @import("std").mem.zeroes([*c]const VkSemaphore),
};
pub const VkSubmitInfo = struct_VkSubmitInfo;
pub const struct_VkMappedMemoryRange = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    memory: VkDeviceMemory = @import("std").mem.zeroes(VkDeviceMemory),
    offset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkMappedMemoryRange = struct_VkMappedMemoryRange;
pub const struct_VkMemoryAllocateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    allocationSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    memoryTypeIndex: u32 = @import("std").mem.zeroes(u32),
};
pub const VkMemoryAllocateInfo = struct_VkMemoryAllocateInfo;
pub const struct_VkMemoryRequirements = extern struct {
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    alignment: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    memoryTypeBits: u32 = @import("std").mem.zeroes(u32),
};
pub const VkMemoryRequirements = struct_VkMemoryRequirements;
pub const struct_VkSparseMemoryBind = extern struct {
    resourceOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    memory: VkDeviceMemory = @import("std").mem.zeroes(VkDeviceMemory),
    memoryOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    flags: VkSparseMemoryBindFlags = @import("std").mem.zeroes(VkSparseMemoryBindFlags),
};
pub const VkSparseMemoryBind = struct_VkSparseMemoryBind;
pub const struct_VkSparseBufferMemoryBindInfo = extern struct {
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    bindCount: u32 = @import("std").mem.zeroes(u32),
    pBinds: [*c]const VkSparseMemoryBind = @import("std").mem.zeroes([*c]const VkSparseMemoryBind),
};
pub const VkSparseBufferMemoryBindInfo = struct_VkSparseBufferMemoryBindInfo;
pub const struct_VkSparseImageOpaqueMemoryBindInfo = extern struct {
    image: VkImage = @import("std").mem.zeroes(VkImage),
    bindCount: u32 = @import("std").mem.zeroes(u32),
    pBinds: [*c]const VkSparseMemoryBind = @import("std").mem.zeroes([*c]const VkSparseMemoryBind),
};
pub const VkSparseImageOpaqueMemoryBindInfo = struct_VkSparseImageOpaqueMemoryBindInfo;
pub const struct_VkImageSubresource = extern struct {
    aspectMask: VkImageAspectFlags = @import("std").mem.zeroes(VkImageAspectFlags),
    mipLevel: u32 = @import("std").mem.zeroes(u32),
    arrayLayer: u32 = @import("std").mem.zeroes(u32),
};
pub const VkImageSubresource = struct_VkImageSubresource;
pub const struct_VkSparseImageMemoryBind = extern struct {
    subresource: VkImageSubresource = @import("std").mem.zeroes(VkImageSubresource),
    offset: VkOffset3D = @import("std").mem.zeroes(VkOffset3D),
    extent: VkExtent3D = @import("std").mem.zeroes(VkExtent3D),
    memory: VkDeviceMemory = @import("std").mem.zeroes(VkDeviceMemory),
    memoryOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    flags: VkSparseMemoryBindFlags = @import("std").mem.zeroes(VkSparseMemoryBindFlags),
};
pub const VkSparseImageMemoryBind = struct_VkSparseImageMemoryBind;
pub const struct_VkSparseImageMemoryBindInfo = extern struct {
    image: VkImage = @import("std").mem.zeroes(VkImage),
    bindCount: u32 = @import("std").mem.zeroes(u32),
    pBinds: [*c]const VkSparseImageMemoryBind = @import("std").mem.zeroes([*c]const VkSparseImageMemoryBind),
};
pub const VkSparseImageMemoryBindInfo = struct_VkSparseImageMemoryBindInfo;
pub const struct_VkBindSparseInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    waitSemaphoreCount: u32 = @import("std").mem.zeroes(u32),
    pWaitSemaphores: [*c]const VkSemaphore = @import("std").mem.zeroes([*c]const VkSemaphore),
    bufferBindCount: u32 = @import("std").mem.zeroes(u32),
    pBufferBinds: [*c]const VkSparseBufferMemoryBindInfo = @import("std").mem.zeroes([*c]const VkSparseBufferMemoryBindInfo),
    imageOpaqueBindCount: u32 = @import("std").mem.zeroes(u32),
    pImageOpaqueBinds: [*c]const VkSparseImageOpaqueMemoryBindInfo = @import("std").mem.zeroes([*c]const VkSparseImageOpaqueMemoryBindInfo),
    imageBindCount: u32 = @import("std").mem.zeroes(u32),
    pImageBinds: [*c]const VkSparseImageMemoryBindInfo = @import("std").mem.zeroes([*c]const VkSparseImageMemoryBindInfo),
    signalSemaphoreCount: u32 = @import("std").mem.zeroes(u32),
    pSignalSemaphores: [*c]const VkSemaphore = @import("std").mem.zeroes([*c]const VkSemaphore),
};
pub const VkBindSparseInfo = struct_VkBindSparseInfo;
pub const struct_VkSparseImageFormatProperties = extern struct {
    aspectMask: VkImageAspectFlags = @import("std").mem.zeroes(VkImageAspectFlags),
    imageGranularity: VkExtent3D = @import("std").mem.zeroes(VkExtent3D),
    flags: VkSparseImageFormatFlags = @import("std").mem.zeroes(VkSparseImageFormatFlags),
};
pub const VkSparseImageFormatProperties = struct_VkSparseImageFormatProperties;
pub const struct_VkSparseImageMemoryRequirements = extern struct {
    formatProperties: VkSparseImageFormatProperties = @import("std").mem.zeroes(VkSparseImageFormatProperties),
    imageMipTailFirstLod: u32 = @import("std").mem.zeroes(u32),
    imageMipTailSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    imageMipTailOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    imageMipTailStride: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkSparseImageMemoryRequirements = struct_VkSparseImageMemoryRequirements;
pub const struct_VkFenceCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkFenceCreateFlags = @import("std").mem.zeroes(VkFenceCreateFlags),
};
pub const VkFenceCreateInfo = struct_VkFenceCreateInfo;
pub const struct_VkSemaphoreCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkSemaphoreCreateFlags = @import("std").mem.zeroes(VkSemaphoreCreateFlags),
};
pub const VkSemaphoreCreateInfo = struct_VkSemaphoreCreateInfo;
pub const struct_VkEventCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkEventCreateFlags = @import("std").mem.zeroes(VkEventCreateFlags),
};
pub const VkEventCreateInfo = struct_VkEventCreateInfo;
pub const struct_VkQueryPoolCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkQueryPoolCreateFlags = @import("std").mem.zeroes(VkQueryPoolCreateFlags),
    queryType: VkQueryType = @import("std").mem.zeroes(VkQueryType),
    queryCount: u32 = @import("std").mem.zeroes(u32),
    pipelineStatistics: VkQueryPipelineStatisticFlags = @import("std").mem.zeroes(VkQueryPipelineStatisticFlags),
};
pub const VkQueryPoolCreateInfo = struct_VkQueryPoolCreateInfo;
pub const struct_VkBufferCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkBufferCreateFlags = @import("std").mem.zeroes(VkBufferCreateFlags),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    usage: VkBufferUsageFlags = @import("std").mem.zeroes(VkBufferUsageFlags),
    sharingMode: VkSharingMode = @import("std").mem.zeroes(VkSharingMode),
    queueFamilyIndexCount: u32 = @import("std").mem.zeroes(u32),
    pQueueFamilyIndices: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkBufferCreateInfo = struct_VkBufferCreateInfo;
pub const struct_VkBufferViewCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkBufferViewCreateFlags = @import("std").mem.zeroes(VkBufferViewCreateFlags),
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
    offset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    range: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkBufferViewCreateInfo = struct_VkBufferViewCreateInfo;
pub const struct_VkImageCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkImageCreateFlags = @import("std").mem.zeroes(VkImageCreateFlags),
    imageType: VkImageType = @import("std").mem.zeroes(VkImageType),
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
    extent: VkExtent3D = @import("std").mem.zeroes(VkExtent3D),
    mipLevels: u32 = @import("std").mem.zeroes(u32),
    arrayLayers: u32 = @import("std").mem.zeroes(u32),
    samples: VkSampleCountFlagBits = @import("std").mem.zeroes(VkSampleCountFlagBits),
    tiling: VkImageTiling = @import("std").mem.zeroes(VkImageTiling),
    usage: VkImageUsageFlags = @import("std").mem.zeroes(VkImageUsageFlags),
    sharingMode: VkSharingMode = @import("std").mem.zeroes(VkSharingMode),
    queueFamilyIndexCount: u32 = @import("std").mem.zeroes(u32),
    pQueueFamilyIndices: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    initialLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
};
pub const VkImageCreateInfo = struct_VkImageCreateInfo;
pub const struct_VkSubresourceLayout = extern struct {
    offset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    rowPitch: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    arrayPitch: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    depthPitch: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkSubresourceLayout = struct_VkSubresourceLayout;
pub const struct_VkComponentMapping = extern struct {
    r: VkComponentSwizzle = @import("std").mem.zeroes(VkComponentSwizzle),
    g: VkComponentSwizzle = @import("std").mem.zeroes(VkComponentSwizzle),
    b: VkComponentSwizzle = @import("std").mem.zeroes(VkComponentSwizzle),
    a: VkComponentSwizzle = @import("std").mem.zeroes(VkComponentSwizzle),
};
pub const VkComponentMapping = struct_VkComponentMapping;
pub const struct_VkImageViewCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkImageViewCreateFlags = @import("std").mem.zeroes(VkImageViewCreateFlags),
    image: VkImage = @import("std").mem.zeroes(VkImage),
    viewType: VkImageViewType = @import("std").mem.zeroes(VkImageViewType),
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
    components: VkComponentMapping = @import("std").mem.zeroes(VkComponentMapping),
    subresourceRange: VkImageSubresourceRange = @import("std").mem.zeroes(VkImageSubresourceRange),
};
pub const VkImageViewCreateInfo = struct_VkImageViewCreateInfo;
pub const struct_VkShaderModuleCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkShaderModuleCreateFlags = @import("std").mem.zeroes(VkShaderModuleCreateFlags),
    codeSize: usize = @import("std").mem.zeroes(usize),
    pCode: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkShaderModuleCreateInfo = struct_VkShaderModuleCreateInfo;
pub const struct_VkPipelineCacheCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineCacheCreateFlags = @import("std").mem.zeroes(VkPipelineCacheCreateFlags),
    initialDataSize: usize = @import("std").mem.zeroes(usize),
    pInitialData: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const VkPipelineCacheCreateInfo = struct_VkPipelineCacheCreateInfo;
pub const struct_VkSpecializationMapEntry = extern struct {
    constantID: u32 = @import("std").mem.zeroes(u32),
    offset: u32 = @import("std").mem.zeroes(u32),
    size: usize = @import("std").mem.zeroes(usize),
};
pub const VkSpecializationMapEntry = struct_VkSpecializationMapEntry;
pub const struct_VkSpecializationInfo = extern struct {
    mapEntryCount: u32 = @import("std").mem.zeroes(u32),
    pMapEntries: [*c]const VkSpecializationMapEntry = @import("std").mem.zeroes([*c]const VkSpecializationMapEntry),
    dataSize: usize = @import("std").mem.zeroes(usize),
    pData: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const VkSpecializationInfo = struct_VkSpecializationInfo;
pub const struct_VkPipelineShaderStageCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineShaderStageCreateFlags = @import("std").mem.zeroes(VkPipelineShaderStageCreateFlags),
    stage: VkShaderStageFlagBits = @import("std").mem.zeroes(VkShaderStageFlagBits),
    module: VkShaderModule = @import("std").mem.zeroes(VkShaderModule),
    pName: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    pSpecializationInfo: [*c]const VkSpecializationInfo = @import("std").mem.zeroes([*c]const VkSpecializationInfo),
};
pub const VkPipelineShaderStageCreateInfo = struct_VkPipelineShaderStageCreateInfo;
pub const struct_VkComputePipelineCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineCreateFlags = @import("std").mem.zeroes(VkPipelineCreateFlags),
    stage: VkPipelineShaderStageCreateInfo = @import("std").mem.zeroes(VkPipelineShaderStageCreateInfo),
    layout: VkPipelineLayout = @import("std").mem.zeroes(VkPipelineLayout),
    basePipelineHandle: VkPipeline = @import("std").mem.zeroes(VkPipeline),
    basePipelineIndex: i32 = @import("std").mem.zeroes(i32),
};
pub const VkComputePipelineCreateInfo = struct_VkComputePipelineCreateInfo;
pub const struct_VkVertexInputBindingDescription = extern struct {
    binding: u32 = @import("std").mem.zeroes(u32),
    stride: u32 = @import("std").mem.zeroes(u32),
    inputRate: VkVertexInputRate = @import("std").mem.zeroes(VkVertexInputRate),
};
pub const VkVertexInputBindingDescription = struct_VkVertexInputBindingDescription;
pub const struct_VkVertexInputAttributeDescription = extern struct {
    location: u32 = @import("std").mem.zeroes(u32),
    binding: u32 = @import("std").mem.zeroes(u32),
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
    offset: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVertexInputAttributeDescription = struct_VkVertexInputAttributeDescription;
pub const struct_VkPipelineVertexInputStateCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineVertexInputStateCreateFlags = @import("std").mem.zeroes(VkPipelineVertexInputStateCreateFlags),
    vertexBindingDescriptionCount: u32 = @import("std").mem.zeroes(u32),
    pVertexBindingDescriptions: [*c]const VkVertexInputBindingDescription = @import("std").mem.zeroes([*c]const VkVertexInputBindingDescription),
    vertexAttributeDescriptionCount: u32 = @import("std").mem.zeroes(u32),
    pVertexAttributeDescriptions: [*c]const VkVertexInputAttributeDescription = @import("std").mem.zeroes([*c]const VkVertexInputAttributeDescription),
};
pub const VkPipelineVertexInputStateCreateInfo = struct_VkPipelineVertexInputStateCreateInfo;
pub const struct_VkPipelineInputAssemblyStateCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineInputAssemblyStateCreateFlags = @import("std").mem.zeroes(VkPipelineInputAssemblyStateCreateFlags),
    topology: VkPrimitiveTopology = @import("std").mem.zeroes(VkPrimitiveTopology),
    primitiveRestartEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPipelineInputAssemblyStateCreateInfo = struct_VkPipelineInputAssemblyStateCreateInfo;
pub const struct_VkPipelineTessellationStateCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineTessellationStateCreateFlags = @import("std").mem.zeroes(VkPipelineTessellationStateCreateFlags),
    patchControlPoints: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPipelineTessellationStateCreateInfo = struct_VkPipelineTessellationStateCreateInfo;
pub const struct_VkViewport = extern struct {
    x: f32 = @import("std").mem.zeroes(f32),
    y: f32 = @import("std").mem.zeroes(f32),
    width: f32 = @import("std").mem.zeroes(f32),
    height: f32 = @import("std").mem.zeroes(f32),
    minDepth: f32 = @import("std").mem.zeroes(f32),
    maxDepth: f32 = @import("std").mem.zeroes(f32),
};
pub const VkViewport = struct_VkViewport;
pub const struct_VkPipelineViewportStateCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineViewportStateCreateFlags = @import("std").mem.zeroes(VkPipelineViewportStateCreateFlags),
    viewportCount: u32 = @import("std").mem.zeroes(u32),
    pViewports: [*c]const VkViewport = @import("std").mem.zeroes([*c]const VkViewport),
    scissorCount: u32 = @import("std").mem.zeroes(u32),
    pScissors: [*c]const VkRect2D = @import("std").mem.zeroes([*c]const VkRect2D),
};
pub const VkPipelineViewportStateCreateInfo = struct_VkPipelineViewportStateCreateInfo;
pub const struct_VkPipelineRasterizationStateCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineRasterizationStateCreateFlags = @import("std").mem.zeroes(VkPipelineRasterizationStateCreateFlags),
    depthClampEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    rasterizerDiscardEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    polygonMode: VkPolygonMode = @import("std").mem.zeroes(VkPolygonMode),
    cullMode: VkCullModeFlags = @import("std").mem.zeroes(VkCullModeFlags),
    frontFace: VkFrontFace = @import("std").mem.zeroes(VkFrontFace),
    depthBiasEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    depthBiasConstantFactor: f32 = @import("std").mem.zeroes(f32),
    depthBiasClamp: f32 = @import("std").mem.zeroes(f32),
    depthBiasSlopeFactor: f32 = @import("std").mem.zeroes(f32),
    lineWidth: f32 = @import("std").mem.zeroes(f32),
};
pub const VkPipelineRasterizationStateCreateInfo = struct_VkPipelineRasterizationStateCreateInfo;
pub const struct_VkPipelineMultisampleStateCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineMultisampleStateCreateFlags = @import("std").mem.zeroes(VkPipelineMultisampleStateCreateFlags),
    rasterizationSamples: VkSampleCountFlagBits = @import("std").mem.zeroes(VkSampleCountFlagBits),
    sampleShadingEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    minSampleShading: f32 = @import("std").mem.zeroes(f32),
    pSampleMask: [*c]const VkSampleMask = @import("std").mem.zeroes([*c]const VkSampleMask),
    alphaToCoverageEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    alphaToOneEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPipelineMultisampleStateCreateInfo = struct_VkPipelineMultisampleStateCreateInfo;
pub const struct_VkStencilOpState = extern struct {
    failOp: VkStencilOp = @import("std").mem.zeroes(VkStencilOp),
    passOp: VkStencilOp = @import("std").mem.zeroes(VkStencilOp),
    depthFailOp: VkStencilOp = @import("std").mem.zeroes(VkStencilOp),
    compareOp: VkCompareOp = @import("std").mem.zeroes(VkCompareOp),
    compareMask: u32 = @import("std").mem.zeroes(u32),
    writeMask: u32 = @import("std").mem.zeroes(u32),
    reference: u32 = @import("std").mem.zeroes(u32),
};
pub const VkStencilOpState = struct_VkStencilOpState;
pub const struct_VkPipelineDepthStencilStateCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineDepthStencilStateCreateFlags = @import("std").mem.zeroes(VkPipelineDepthStencilStateCreateFlags),
    depthTestEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    depthWriteEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    depthCompareOp: VkCompareOp = @import("std").mem.zeroes(VkCompareOp),
    depthBoundsTestEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    stencilTestEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    front: VkStencilOpState = @import("std").mem.zeroes(VkStencilOpState),
    back: VkStencilOpState = @import("std").mem.zeroes(VkStencilOpState),
    minDepthBounds: f32 = @import("std").mem.zeroes(f32),
    maxDepthBounds: f32 = @import("std").mem.zeroes(f32),
};
pub const VkPipelineDepthStencilStateCreateInfo = struct_VkPipelineDepthStencilStateCreateInfo;
pub const struct_VkPipelineColorBlendAttachmentState = extern struct {
    blendEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    srcColorBlendFactor: VkBlendFactor = @import("std").mem.zeroes(VkBlendFactor),
    dstColorBlendFactor: VkBlendFactor = @import("std").mem.zeroes(VkBlendFactor),
    colorBlendOp: VkBlendOp = @import("std").mem.zeroes(VkBlendOp),
    srcAlphaBlendFactor: VkBlendFactor = @import("std").mem.zeroes(VkBlendFactor),
    dstAlphaBlendFactor: VkBlendFactor = @import("std").mem.zeroes(VkBlendFactor),
    alphaBlendOp: VkBlendOp = @import("std").mem.zeroes(VkBlendOp),
    colorWriteMask: VkColorComponentFlags = @import("std").mem.zeroes(VkColorComponentFlags),
};
pub const VkPipelineColorBlendAttachmentState = struct_VkPipelineColorBlendAttachmentState;
pub const struct_VkPipelineColorBlendStateCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineColorBlendStateCreateFlags = @import("std").mem.zeroes(VkPipelineColorBlendStateCreateFlags),
    logicOpEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    logicOp: VkLogicOp = @import("std").mem.zeroes(VkLogicOp),
    attachmentCount: u32 = @import("std").mem.zeroes(u32),
    pAttachments: [*c]const VkPipelineColorBlendAttachmentState = @import("std").mem.zeroes([*c]const VkPipelineColorBlendAttachmentState),
    blendConstants: [4]f32 = @import("std").mem.zeroes([4]f32),
};
pub const VkPipelineColorBlendStateCreateInfo = struct_VkPipelineColorBlendStateCreateInfo;
pub const struct_VkPipelineDynamicStateCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineDynamicStateCreateFlags = @import("std").mem.zeroes(VkPipelineDynamicStateCreateFlags),
    dynamicStateCount: u32 = @import("std").mem.zeroes(u32),
    pDynamicStates: [*c]const VkDynamicState = @import("std").mem.zeroes([*c]const VkDynamicState),
};
pub const VkPipelineDynamicStateCreateInfo = struct_VkPipelineDynamicStateCreateInfo;
pub const struct_VkGraphicsPipelineCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineCreateFlags = @import("std").mem.zeroes(VkPipelineCreateFlags),
    stageCount: u32 = @import("std").mem.zeroes(u32),
    pStages: [*c]const VkPipelineShaderStageCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineShaderStageCreateInfo),
    pVertexInputState: [*c]const VkPipelineVertexInputStateCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineVertexInputStateCreateInfo),
    pInputAssemblyState: [*c]const VkPipelineInputAssemblyStateCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineInputAssemblyStateCreateInfo),
    pTessellationState: [*c]const VkPipelineTessellationStateCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineTessellationStateCreateInfo),
    pViewportState: [*c]const VkPipelineViewportStateCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineViewportStateCreateInfo),
    pRasterizationState: [*c]const VkPipelineRasterizationStateCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineRasterizationStateCreateInfo),
    pMultisampleState: [*c]const VkPipelineMultisampleStateCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineMultisampleStateCreateInfo),
    pDepthStencilState: [*c]const VkPipelineDepthStencilStateCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineDepthStencilStateCreateInfo),
    pColorBlendState: [*c]const VkPipelineColorBlendStateCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineColorBlendStateCreateInfo),
    pDynamicState: [*c]const VkPipelineDynamicStateCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineDynamicStateCreateInfo),
    layout: VkPipelineLayout = @import("std").mem.zeroes(VkPipelineLayout),
    renderPass: VkRenderPass = @import("std").mem.zeroes(VkRenderPass),
    subpass: u32 = @import("std").mem.zeroes(u32),
    basePipelineHandle: VkPipeline = @import("std").mem.zeroes(VkPipeline),
    basePipelineIndex: i32 = @import("std").mem.zeroes(i32),
};
pub const VkGraphicsPipelineCreateInfo = struct_VkGraphicsPipelineCreateInfo;
pub const struct_VkPushConstantRange = extern struct {
    stageFlags: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    offset: u32 = @import("std").mem.zeroes(u32),
    size: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPushConstantRange = struct_VkPushConstantRange;
pub const struct_VkPipelineLayoutCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineLayoutCreateFlags = @import("std").mem.zeroes(VkPipelineLayoutCreateFlags),
    setLayoutCount: u32 = @import("std").mem.zeroes(u32),
    pSetLayouts: [*c]const VkDescriptorSetLayout = @import("std").mem.zeroes([*c]const VkDescriptorSetLayout),
    pushConstantRangeCount: u32 = @import("std").mem.zeroes(u32),
    pPushConstantRanges: [*c]const VkPushConstantRange = @import("std").mem.zeroes([*c]const VkPushConstantRange),
};
pub const VkPipelineLayoutCreateInfo = struct_VkPipelineLayoutCreateInfo;
pub const struct_VkSamplerCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkSamplerCreateFlags = @import("std").mem.zeroes(VkSamplerCreateFlags),
    magFilter: VkFilter = @import("std").mem.zeroes(VkFilter),
    minFilter: VkFilter = @import("std").mem.zeroes(VkFilter),
    mipmapMode: VkSamplerMipmapMode = @import("std").mem.zeroes(VkSamplerMipmapMode),
    addressModeU: VkSamplerAddressMode = @import("std").mem.zeroes(VkSamplerAddressMode),
    addressModeV: VkSamplerAddressMode = @import("std").mem.zeroes(VkSamplerAddressMode),
    addressModeW: VkSamplerAddressMode = @import("std").mem.zeroes(VkSamplerAddressMode),
    mipLodBias: f32 = @import("std").mem.zeroes(f32),
    anisotropyEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxAnisotropy: f32 = @import("std").mem.zeroes(f32),
    compareEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    compareOp: VkCompareOp = @import("std").mem.zeroes(VkCompareOp),
    minLod: f32 = @import("std").mem.zeroes(f32),
    maxLod: f32 = @import("std").mem.zeroes(f32),
    borderColor: VkBorderColor = @import("std").mem.zeroes(VkBorderColor),
    unnormalizedCoordinates: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkSamplerCreateInfo = struct_VkSamplerCreateInfo;
pub const struct_VkCopyDescriptorSet = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcSet: VkDescriptorSet = @import("std").mem.zeroes(VkDescriptorSet),
    srcBinding: u32 = @import("std").mem.zeroes(u32),
    srcArrayElement: u32 = @import("std").mem.zeroes(u32),
    dstSet: VkDescriptorSet = @import("std").mem.zeroes(VkDescriptorSet),
    dstBinding: u32 = @import("std").mem.zeroes(u32),
    dstArrayElement: u32 = @import("std").mem.zeroes(u32),
    descriptorCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkCopyDescriptorSet = struct_VkCopyDescriptorSet;
pub const struct_VkDescriptorBufferInfo = extern struct {
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    offset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    range: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkDescriptorBufferInfo = struct_VkDescriptorBufferInfo;
pub const struct_VkDescriptorImageInfo = extern struct {
    sampler: VkSampler = @import("std").mem.zeroes(VkSampler),
    imageView: VkImageView = @import("std").mem.zeroes(VkImageView),
    imageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
};
pub const VkDescriptorImageInfo = struct_VkDescriptorImageInfo;
pub const struct_VkDescriptorPoolSize = extern struct {
    type: VkDescriptorType = @import("std").mem.zeroes(VkDescriptorType),
    descriptorCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDescriptorPoolSize = struct_VkDescriptorPoolSize;
pub const struct_VkDescriptorPoolCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkDescriptorPoolCreateFlags = @import("std").mem.zeroes(VkDescriptorPoolCreateFlags),
    maxSets: u32 = @import("std").mem.zeroes(u32),
    poolSizeCount: u32 = @import("std").mem.zeroes(u32),
    pPoolSizes: [*c]const VkDescriptorPoolSize = @import("std").mem.zeroes([*c]const VkDescriptorPoolSize),
};
pub const VkDescriptorPoolCreateInfo = struct_VkDescriptorPoolCreateInfo;
pub const struct_VkDescriptorSetAllocateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    descriptorPool: VkDescriptorPool = @import("std").mem.zeroes(VkDescriptorPool),
    descriptorSetCount: u32 = @import("std").mem.zeroes(u32),
    pSetLayouts: [*c]const VkDescriptorSetLayout = @import("std").mem.zeroes([*c]const VkDescriptorSetLayout),
};
pub const VkDescriptorSetAllocateInfo = struct_VkDescriptorSetAllocateInfo;
pub const struct_VkDescriptorSetLayoutBinding = extern struct {
    binding: u32 = @import("std").mem.zeroes(u32),
    descriptorType: VkDescriptorType = @import("std").mem.zeroes(VkDescriptorType),
    descriptorCount: u32 = @import("std").mem.zeroes(u32),
    stageFlags: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    pImmutableSamplers: [*c]const VkSampler = @import("std").mem.zeroes([*c]const VkSampler),
};
pub const VkDescriptorSetLayoutBinding = struct_VkDescriptorSetLayoutBinding;
pub const struct_VkDescriptorSetLayoutCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkDescriptorSetLayoutCreateFlags = @import("std").mem.zeroes(VkDescriptorSetLayoutCreateFlags),
    bindingCount: u32 = @import("std").mem.zeroes(u32),
    pBindings: [*c]const VkDescriptorSetLayoutBinding = @import("std").mem.zeroes([*c]const VkDescriptorSetLayoutBinding),
};
pub const VkDescriptorSetLayoutCreateInfo = struct_VkDescriptorSetLayoutCreateInfo;
pub const struct_VkWriteDescriptorSet = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    dstSet: VkDescriptorSet = @import("std").mem.zeroes(VkDescriptorSet),
    dstBinding: u32 = @import("std").mem.zeroes(u32),
    dstArrayElement: u32 = @import("std").mem.zeroes(u32),
    descriptorCount: u32 = @import("std").mem.zeroes(u32),
    descriptorType: VkDescriptorType = @import("std").mem.zeroes(VkDescriptorType),
    pImageInfo: [*c]const VkDescriptorImageInfo = @import("std").mem.zeroes([*c]const VkDescriptorImageInfo),
    pBufferInfo: [*c]const VkDescriptorBufferInfo = @import("std").mem.zeroes([*c]const VkDescriptorBufferInfo),
    pTexelBufferView: [*c]const VkBufferView = @import("std").mem.zeroes([*c]const VkBufferView),
};
pub const VkWriteDescriptorSet = struct_VkWriteDescriptorSet;
pub const struct_VkAttachmentDescription = extern struct {
    flags: VkAttachmentDescriptionFlags = @import("std").mem.zeroes(VkAttachmentDescriptionFlags),
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
    samples: VkSampleCountFlagBits = @import("std").mem.zeroes(VkSampleCountFlagBits),
    loadOp: VkAttachmentLoadOp = @import("std").mem.zeroes(VkAttachmentLoadOp),
    storeOp: VkAttachmentStoreOp = @import("std").mem.zeroes(VkAttachmentStoreOp),
    stencilLoadOp: VkAttachmentLoadOp = @import("std").mem.zeroes(VkAttachmentLoadOp),
    stencilStoreOp: VkAttachmentStoreOp = @import("std").mem.zeroes(VkAttachmentStoreOp),
    initialLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    finalLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
};
pub const VkAttachmentDescription = struct_VkAttachmentDescription;
pub const struct_VkAttachmentReference = extern struct {
    attachment: u32 = @import("std").mem.zeroes(u32),
    layout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
};
pub const VkAttachmentReference = struct_VkAttachmentReference;
pub const struct_VkFramebufferCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkFramebufferCreateFlags = @import("std").mem.zeroes(VkFramebufferCreateFlags),
    renderPass: VkRenderPass = @import("std").mem.zeroes(VkRenderPass),
    attachmentCount: u32 = @import("std").mem.zeroes(u32),
    pAttachments: [*c]const VkImageView = @import("std").mem.zeroes([*c]const VkImageView),
    width: u32 = @import("std").mem.zeroes(u32),
    height: u32 = @import("std").mem.zeroes(u32),
    layers: u32 = @import("std").mem.zeroes(u32),
};
pub const VkFramebufferCreateInfo = struct_VkFramebufferCreateInfo;
pub const struct_VkSubpassDescription = extern struct {
    flags: VkSubpassDescriptionFlags = @import("std").mem.zeroes(VkSubpassDescriptionFlags),
    pipelineBindPoint: VkPipelineBindPoint = @import("std").mem.zeroes(VkPipelineBindPoint),
    inputAttachmentCount: u32 = @import("std").mem.zeroes(u32),
    pInputAttachments: [*c]const VkAttachmentReference = @import("std").mem.zeroes([*c]const VkAttachmentReference),
    colorAttachmentCount: u32 = @import("std").mem.zeroes(u32),
    pColorAttachments: [*c]const VkAttachmentReference = @import("std").mem.zeroes([*c]const VkAttachmentReference),
    pResolveAttachments: [*c]const VkAttachmentReference = @import("std").mem.zeroes([*c]const VkAttachmentReference),
    pDepthStencilAttachment: [*c]const VkAttachmentReference = @import("std").mem.zeroes([*c]const VkAttachmentReference),
    preserveAttachmentCount: u32 = @import("std").mem.zeroes(u32),
    pPreserveAttachments: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkSubpassDescription = struct_VkSubpassDescription;
pub const struct_VkSubpassDependency = extern struct {
    srcSubpass: u32 = @import("std").mem.zeroes(u32),
    dstSubpass: u32 = @import("std").mem.zeroes(u32),
    srcStageMask: VkPipelineStageFlags = @import("std").mem.zeroes(VkPipelineStageFlags),
    dstStageMask: VkPipelineStageFlags = @import("std").mem.zeroes(VkPipelineStageFlags),
    srcAccessMask: VkAccessFlags = @import("std").mem.zeroes(VkAccessFlags),
    dstAccessMask: VkAccessFlags = @import("std").mem.zeroes(VkAccessFlags),
    dependencyFlags: VkDependencyFlags = @import("std").mem.zeroes(VkDependencyFlags),
};
pub const VkSubpassDependency = struct_VkSubpassDependency;
pub const struct_VkRenderPassCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkRenderPassCreateFlags = @import("std").mem.zeroes(VkRenderPassCreateFlags),
    attachmentCount: u32 = @import("std").mem.zeroes(u32),
    pAttachments: [*c]const VkAttachmentDescription = @import("std").mem.zeroes([*c]const VkAttachmentDescription),
    subpassCount: u32 = @import("std").mem.zeroes(u32),
    pSubpasses: [*c]const VkSubpassDescription = @import("std").mem.zeroes([*c]const VkSubpassDescription),
    dependencyCount: u32 = @import("std").mem.zeroes(u32),
    pDependencies: [*c]const VkSubpassDependency = @import("std").mem.zeroes([*c]const VkSubpassDependency),
};
pub const VkRenderPassCreateInfo = struct_VkRenderPassCreateInfo;
pub const struct_VkCommandPoolCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkCommandPoolCreateFlags = @import("std").mem.zeroes(VkCommandPoolCreateFlags),
    queueFamilyIndex: u32 = @import("std").mem.zeroes(u32),
};
pub const VkCommandPoolCreateInfo = struct_VkCommandPoolCreateInfo;
pub const struct_VkCommandBufferAllocateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    commandPool: VkCommandPool = @import("std").mem.zeroes(VkCommandPool),
    level: VkCommandBufferLevel = @import("std").mem.zeroes(VkCommandBufferLevel),
    commandBufferCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkCommandBufferAllocateInfo = struct_VkCommandBufferAllocateInfo;
pub const struct_VkCommandBufferInheritanceInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    renderPass: VkRenderPass = @import("std").mem.zeroes(VkRenderPass),
    subpass: u32 = @import("std").mem.zeroes(u32),
    framebuffer: VkFramebuffer = @import("std").mem.zeroes(VkFramebuffer),
    occlusionQueryEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    queryFlags: VkQueryControlFlags = @import("std").mem.zeroes(VkQueryControlFlags),
    pipelineStatistics: VkQueryPipelineStatisticFlags = @import("std").mem.zeroes(VkQueryPipelineStatisticFlags),
};
pub const VkCommandBufferInheritanceInfo = struct_VkCommandBufferInheritanceInfo;
pub const struct_VkCommandBufferBeginInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkCommandBufferUsageFlags = @import("std").mem.zeroes(VkCommandBufferUsageFlags),
    pInheritanceInfo: [*c]const VkCommandBufferInheritanceInfo = @import("std").mem.zeroes([*c]const VkCommandBufferInheritanceInfo),
};
pub const VkCommandBufferBeginInfo = struct_VkCommandBufferBeginInfo;
pub const struct_VkBufferCopy = extern struct {
    srcOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    dstOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkBufferCopy = struct_VkBufferCopy;
pub const struct_VkImageSubresourceLayers = extern struct {
    aspectMask: VkImageAspectFlags = @import("std").mem.zeroes(VkImageAspectFlags),
    mipLevel: u32 = @import("std").mem.zeroes(u32),
    baseArrayLayer: u32 = @import("std").mem.zeroes(u32),
    layerCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkImageSubresourceLayers = struct_VkImageSubresourceLayers;
pub const struct_VkBufferImageCopy = extern struct {
    bufferOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    bufferRowLength: u32 = @import("std").mem.zeroes(u32),
    bufferImageHeight: u32 = @import("std").mem.zeroes(u32),
    imageSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    imageOffset: VkOffset3D = @import("std").mem.zeroes(VkOffset3D),
    imageExtent: VkExtent3D = @import("std").mem.zeroes(VkExtent3D),
};
pub const VkBufferImageCopy = struct_VkBufferImageCopy;
pub const union_VkClearColorValue = extern union {
    float32: [4]f32,
    int32: [4]i32,
    uint32: [4]u32,
};
pub const VkClearColorValue = union_VkClearColorValue;
pub const struct_VkClearDepthStencilValue = extern struct {
    depth: f32 = @import("std").mem.zeroes(f32),
    stencil: u32 = @import("std").mem.zeroes(u32),
};
pub const VkClearDepthStencilValue = struct_VkClearDepthStencilValue;
pub const union_VkClearValue = extern union {
    color: VkClearColorValue,
    depthStencil: VkClearDepthStencilValue,
};
pub const VkClearValue = union_VkClearValue;
pub const struct_VkClearAttachment = extern struct {
    aspectMask: VkImageAspectFlags = @import("std").mem.zeroes(VkImageAspectFlags),
    colorAttachment: u32 = @import("std").mem.zeroes(u32),
    clearValue: VkClearValue = @import("std").mem.zeroes(VkClearValue),
};
pub const VkClearAttachment = struct_VkClearAttachment;
pub const struct_VkClearRect = extern struct {
    rect: VkRect2D = @import("std").mem.zeroes(VkRect2D),
    baseArrayLayer: u32 = @import("std").mem.zeroes(u32),
    layerCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkClearRect = struct_VkClearRect;
pub const struct_VkImageBlit = extern struct {
    srcSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    srcOffsets: [2]VkOffset3D = @import("std").mem.zeroes([2]VkOffset3D),
    dstSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    dstOffsets: [2]VkOffset3D = @import("std").mem.zeroes([2]VkOffset3D),
};
pub const VkImageBlit = struct_VkImageBlit;
pub const struct_VkImageCopy = extern struct {
    srcSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    srcOffset: VkOffset3D = @import("std").mem.zeroes(VkOffset3D),
    dstSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    dstOffset: VkOffset3D = @import("std").mem.zeroes(VkOffset3D),
    extent: VkExtent3D = @import("std").mem.zeroes(VkExtent3D),
};
pub const VkImageCopy = struct_VkImageCopy;
pub const struct_VkImageResolve = extern struct {
    srcSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    srcOffset: VkOffset3D = @import("std").mem.zeroes(VkOffset3D),
    dstSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    dstOffset: VkOffset3D = @import("std").mem.zeroes(VkOffset3D),
    extent: VkExtent3D = @import("std").mem.zeroes(VkExtent3D),
};
pub const VkImageResolve = struct_VkImageResolve;
pub const struct_VkRenderPassBeginInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    renderPass: VkRenderPass = @import("std").mem.zeroes(VkRenderPass),
    framebuffer: VkFramebuffer = @import("std").mem.zeroes(VkFramebuffer),
    renderArea: VkRect2D = @import("std").mem.zeroes(VkRect2D),
    clearValueCount: u32 = @import("std").mem.zeroes(u32),
    pClearValues: [*c]const VkClearValue = @import("std").mem.zeroes([*c]const VkClearValue),
};
pub const VkRenderPassBeginInfo = struct_VkRenderPassBeginInfo;
pub const PFN_vkCreateInstance = ?*const fn ([*c]const VkInstanceCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkInstance) callconv(.C) VkResult;
pub const PFN_vkDestroyInstance = ?*const fn (VkInstance, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkEnumeratePhysicalDevices = ?*const fn (VkInstance, [*c]u32, [*c]VkPhysicalDevice) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDeviceFeatures = ?*const fn (VkPhysicalDevice, [*c]VkPhysicalDeviceFeatures) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceFormatProperties = ?*const fn (VkPhysicalDevice, VkFormat, [*c]VkFormatProperties) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceImageFormatProperties = ?*const fn (VkPhysicalDevice, VkFormat, VkImageType, VkImageTiling, VkImageUsageFlags, VkImageCreateFlags, [*c]VkImageFormatProperties) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDeviceProperties = ?*const fn (VkPhysicalDevice, [*c]VkPhysicalDeviceProperties) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceQueueFamilyProperties = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkQueueFamilyProperties) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceMemoryProperties = ?*const fn (VkPhysicalDevice, [*c]VkPhysicalDeviceMemoryProperties) callconv(.C) void;
pub const PFN_vkGetInstanceProcAddr = ?*const fn (VkInstance, [*c]const u8) callconv(.C) PFN_vkVoidFunction;
pub const PFN_vkGetDeviceProcAddr = ?*const fn (VkDevice, [*c]const u8) callconv(.C) PFN_vkVoidFunction;
pub const PFN_vkCreateDevice = ?*const fn (VkPhysicalDevice, [*c]const VkDeviceCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkDevice) callconv(.C) VkResult;
pub const PFN_vkDestroyDevice = ?*const fn (VkDevice, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkEnumerateInstanceExtensionProperties = ?*const fn ([*c]const u8, [*c]u32, [*c]VkExtensionProperties) callconv(.C) VkResult;
pub const PFN_vkEnumerateDeviceExtensionProperties = ?*const fn (VkPhysicalDevice, [*c]const u8, [*c]u32, [*c]VkExtensionProperties) callconv(.C) VkResult;
pub const PFN_vkEnumerateInstanceLayerProperties = ?*const fn ([*c]u32, [*c]VkLayerProperties) callconv(.C) VkResult;
pub const PFN_vkEnumerateDeviceLayerProperties = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkLayerProperties) callconv(.C) VkResult;
pub const PFN_vkGetDeviceQueue = ?*const fn (VkDevice, u32, u32, [*c]VkQueue) callconv(.C) void;
pub const PFN_vkQueueSubmit = ?*const fn (VkQueue, u32, [*c]const VkSubmitInfo, VkFence) callconv(.C) VkResult;
pub const PFN_vkQueueWaitIdle = ?*const fn (VkQueue) callconv(.C) VkResult;
pub const PFN_vkDeviceWaitIdle = ?*const fn (VkDevice) callconv(.C) VkResult;
pub const PFN_vkAllocateMemory = ?*const fn (VkDevice, [*c]const VkMemoryAllocateInfo, [*c]const VkAllocationCallbacks, [*c]VkDeviceMemory) callconv(.C) VkResult;
pub const PFN_vkFreeMemory = ?*const fn (VkDevice, VkDeviceMemory, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkMapMemory = ?*const fn (VkDevice, VkDeviceMemory, VkDeviceSize, VkDeviceSize, VkMemoryMapFlags, [*c]?*anyopaque) callconv(.C) VkResult;
pub const PFN_vkUnmapMemory = ?*const fn (VkDevice, VkDeviceMemory) callconv(.C) void;
pub const PFN_vkFlushMappedMemoryRanges = ?*const fn (VkDevice, u32, [*c]const VkMappedMemoryRange) callconv(.C) VkResult;
pub const PFN_vkInvalidateMappedMemoryRanges = ?*const fn (VkDevice, u32, [*c]const VkMappedMemoryRange) callconv(.C) VkResult;
pub const PFN_vkGetDeviceMemoryCommitment = ?*const fn (VkDevice, VkDeviceMemory, [*c]VkDeviceSize) callconv(.C) void;
pub const PFN_vkBindBufferMemory = ?*const fn (VkDevice, VkBuffer, VkDeviceMemory, VkDeviceSize) callconv(.C) VkResult;
pub const PFN_vkBindImageMemory = ?*const fn (VkDevice, VkImage, VkDeviceMemory, VkDeviceSize) callconv(.C) VkResult;
pub const PFN_vkGetBufferMemoryRequirements = ?*const fn (VkDevice, VkBuffer, [*c]VkMemoryRequirements) callconv(.C) void;
pub const PFN_vkGetImageMemoryRequirements = ?*const fn (VkDevice, VkImage, [*c]VkMemoryRequirements) callconv(.C) void;
pub const PFN_vkGetImageSparseMemoryRequirements = ?*const fn (VkDevice, VkImage, [*c]u32, [*c]VkSparseImageMemoryRequirements) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceSparseImageFormatProperties = ?*const fn (VkPhysicalDevice, VkFormat, VkImageType, VkSampleCountFlagBits, VkImageUsageFlags, VkImageTiling, [*c]u32, [*c]VkSparseImageFormatProperties) callconv(.C) void;
pub const PFN_vkQueueBindSparse = ?*const fn (VkQueue, u32, [*c]const VkBindSparseInfo, VkFence) callconv(.C) VkResult;
pub const PFN_vkCreateFence = ?*const fn (VkDevice, [*c]const VkFenceCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkFence) callconv(.C) VkResult;
pub const PFN_vkDestroyFence = ?*const fn (VkDevice, VkFence, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkResetFences = ?*const fn (VkDevice, u32, [*c]const VkFence) callconv(.C) VkResult;
pub const PFN_vkGetFenceStatus = ?*const fn (VkDevice, VkFence) callconv(.C) VkResult;
pub const PFN_vkWaitForFences = ?*const fn (VkDevice, u32, [*c]const VkFence, VkBool32, u64) callconv(.C) VkResult;
pub const PFN_vkCreateSemaphore = ?*const fn (VkDevice, [*c]const VkSemaphoreCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkSemaphore) callconv(.C) VkResult;
pub const PFN_vkDestroySemaphore = ?*const fn (VkDevice, VkSemaphore, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreateEvent = ?*const fn (VkDevice, [*c]const VkEventCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkEvent) callconv(.C) VkResult;
pub const PFN_vkDestroyEvent = ?*const fn (VkDevice, VkEvent, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkGetEventStatus = ?*const fn (VkDevice, VkEvent) callconv(.C) VkResult;
pub const PFN_vkSetEvent = ?*const fn (VkDevice, VkEvent) callconv(.C) VkResult;
pub const PFN_vkResetEvent = ?*const fn (VkDevice, VkEvent) callconv(.C) VkResult;
pub const PFN_vkCreateQueryPool = ?*const fn (VkDevice, [*c]const VkQueryPoolCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkQueryPool) callconv(.C) VkResult;
pub const PFN_vkDestroyQueryPool = ?*const fn (VkDevice, VkQueryPool, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkGetQueryPoolResults = ?*const fn (VkDevice, VkQueryPool, u32, u32, usize, ?*anyopaque, VkDeviceSize, VkQueryResultFlags) callconv(.C) VkResult;
pub const PFN_vkCreateBuffer = ?*const fn (VkDevice, [*c]const VkBufferCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkBuffer) callconv(.C) VkResult;
pub const PFN_vkDestroyBuffer = ?*const fn (VkDevice, VkBuffer, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreateBufferView = ?*const fn (VkDevice, [*c]const VkBufferViewCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkBufferView) callconv(.C) VkResult;
pub const PFN_vkDestroyBufferView = ?*const fn (VkDevice, VkBufferView, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreateImage = ?*const fn (VkDevice, [*c]const VkImageCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkImage) callconv(.C) VkResult;
pub const PFN_vkDestroyImage = ?*const fn (VkDevice, VkImage, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkGetImageSubresourceLayout = ?*const fn (VkDevice, VkImage, [*c]const VkImageSubresource, [*c]VkSubresourceLayout) callconv(.C) void;
pub const PFN_vkCreateImageView = ?*const fn (VkDevice, [*c]const VkImageViewCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkImageView) callconv(.C) VkResult;
pub const PFN_vkDestroyImageView = ?*const fn (VkDevice, VkImageView, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreateShaderModule = ?*const fn (VkDevice, [*c]const VkShaderModuleCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkShaderModule) callconv(.C) VkResult;
pub const PFN_vkDestroyShaderModule = ?*const fn (VkDevice, VkShaderModule, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreatePipelineCache = ?*const fn (VkDevice, [*c]const VkPipelineCacheCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkPipelineCache) callconv(.C) VkResult;
pub const PFN_vkDestroyPipelineCache = ?*const fn (VkDevice, VkPipelineCache, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkGetPipelineCacheData = ?*const fn (VkDevice, VkPipelineCache, [*c]usize, ?*anyopaque) callconv(.C) VkResult;
pub const PFN_vkMergePipelineCaches = ?*const fn (VkDevice, VkPipelineCache, u32, [*c]const VkPipelineCache) callconv(.C) VkResult;
pub const PFN_vkCreateGraphicsPipelines = ?*const fn (VkDevice, VkPipelineCache, u32, [*c]const VkGraphicsPipelineCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkPipeline) callconv(.C) VkResult;
pub const PFN_vkCreateComputePipelines = ?*const fn (VkDevice, VkPipelineCache, u32, [*c]const VkComputePipelineCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkPipeline) callconv(.C) VkResult;
pub const PFN_vkDestroyPipeline = ?*const fn (VkDevice, VkPipeline, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreatePipelineLayout = ?*const fn (VkDevice, [*c]const VkPipelineLayoutCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkPipelineLayout) callconv(.C) VkResult;
pub const PFN_vkDestroyPipelineLayout = ?*const fn (VkDevice, VkPipelineLayout, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreateSampler = ?*const fn (VkDevice, [*c]const VkSamplerCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkSampler) callconv(.C) VkResult;
pub const PFN_vkDestroySampler = ?*const fn (VkDevice, VkSampler, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreateDescriptorSetLayout = ?*const fn (VkDevice, [*c]const VkDescriptorSetLayoutCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkDescriptorSetLayout) callconv(.C) VkResult;
pub const PFN_vkDestroyDescriptorSetLayout = ?*const fn (VkDevice, VkDescriptorSetLayout, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreateDescriptorPool = ?*const fn (VkDevice, [*c]const VkDescriptorPoolCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkDescriptorPool) callconv(.C) VkResult;
pub const PFN_vkDestroyDescriptorPool = ?*const fn (VkDevice, VkDescriptorPool, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkResetDescriptorPool = ?*const fn (VkDevice, VkDescriptorPool, VkDescriptorPoolResetFlags) callconv(.C) VkResult;
pub const PFN_vkAllocateDescriptorSets = ?*const fn (VkDevice, [*c]const VkDescriptorSetAllocateInfo, [*c]VkDescriptorSet) callconv(.C) VkResult;
pub const PFN_vkFreeDescriptorSets = ?*const fn (VkDevice, VkDescriptorPool, u32, [*c]const VkDescriptorSet) callconv(.C) VkResult;
pub const PFN_vkUpdateDescriptorSets = ?*const fn (VkDevice, u32, [*c]const VkWriteDescriptorSet, u32, [*c]const VkCopyDescriptorSet) callconv(.C) void;
pub const PFN_vkCreateFramebuffer = ?*const fn (VkDevice, [*c]const VkFramebufferCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkFramebuffer) callconv(.C) VkResult;
pub const PFN_vkDestroyFramebuffer = ?*const fn (VkDevice, VkFramebuffer, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreateRenderPass = ?*const fn (VkDevice, [*c]const VkRenderPassCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkRenderPass) callconv(.C) VkResult;
pub const PFN_vkDestroyRenderPass = ?*const fn (VkDevice, VkRenderPass, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkGetRenderAreaGranularity = ?*const fn (VkDevice, VkRenderPass, [*c]VkExtent2D) callconv(.C) void;
pub const PFN_vkCreateCommandPool = ?*const fn (VkDevice, [*c]const VkCommandPoolCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkCommandPool) callconv(.C) VkResult;
pub const PFN_vkDestroyCommandPool = ?*const fn (VkDevice, VkCommandPool, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkResetCommandPool = ?*const fn (VkDevice, VkCommandPool, VkCommandPoolResetFlags) callconv(.C) VkResult;
pub const PFN_vkAllocateCommandBuffers = ?*const fn (VkDevice, [*c]const VkCommandBufferAllocateInfo, [*c]VkCommandBuffer) callconv(.C) VkResult;
pub const PFN_vkFreeCommandBuffers = ?*const fn (VkDevice, VkCommandPool, u32, [*c]const VkCommandBuffer) callconv(.C) void;
pub const PFN_vkBeginCommandBuffer = ?*const fn (VkCommandBuffer, [*c]const VkCommandBufferBeginInfo) callconv(.C) VkResult;
pub const PFN_vkEndCommandBuffer = ?*const fn (VkCommandBuffer) callconv(.C) VkResult;
pub const PFN_vkResetCommandBuffer = ?*const fn (VkCommandBuffer, VkCommandBufferResetFlags) callconv(.C) VkResult;
pub const PFN_vkCmdBindPipeline = ?*const fn (VkCommandBuffer, VkPipelineBindPoint, VkPipeline) callconv(.C) void;
pub const PFN_vkCmdSetViewport = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkViewport) callconv(.C) void;
pub const PFN_vkCmdSetScissor = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkRect2D) callconv(.C) void;
pub const PFN_vkCmdSetLineWidth = ?*const fn (VkCommandBuffer, f32) callconv(.C) void;
pub const PFN_vkCmdSetDepthBias = ?*const fn (VkCommandBuffer, f32, f32, f32) callconv(.C) void;
pub const PFN_vkCmdSetBlendConstants = ?*const fn (VkCommandBuffer, [*c]const f32) callconv(.C) void;
pub const PFN_vkCmdSetDepthBounds = ?*const fn (VkCommandBuffer, f32, f32) callconv(.C) void;
pub const PFN_vkCmdSetStencilCompareMask = ?*const fn (VkCommandBuffer, VkStencilFaceFlags, u32) callconv(.C) void;
pub const PFN_vkCmdSetStencilWriteMask = ?*const fn (VkCommandBuffer, VkStencilFaceFlags, u32) callconv(.C) void;
pub const PFN_vkCmdSetStencilReference = ?*const fn (VkCommandBuffer, VkStencilFaceFlags, u32) callconv(.C) void;
pub const PFN_vkCmdBindDescriptorSets = ?*const fn (VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, u32, u32, [*c]const VkDescriptorSet, u32, [*c]const u32) callconv(.C) void;
pub const PFN_vkCmdBindIndexBuffer = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, VkIndexType) callconv(.C) void;
pub const PFN_vkCmdBindVertexBuffers = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkBuffer, [*c]const VkDeviceSize) callconv(.C) void;
pub const PFN_vkCmdDraw = ?*const fn (VkCommandBuffer, u32, u32, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawIndexed = ?*const fn (VkCommandBuffer, u32, u32, u32, i32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawIndirect = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawIndexedIndirect = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDispatch = ?*const fn (VkCommandBuffer, u32, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDispatchIndirect = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize) callconv(.C) void;
pub const PFN_vkCmdCopyBuffer = ?*const fn (VkCommandBuffer, VkBuffer, VkBuffer, u32, [*c]const VkBufferCopy) callconv(.C) void;
pub const PFN_vkCmdCopyImage = ?*const fn (VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, u32, [*c]const VkImageCopy) callconv(.C) void;
pub const PFN_vkCmdBlitImage = ?*const fn (VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, u32, [*c]const VkImageBlit, VkFilter) callconv(.C) void;
pub const PFN_vkCmdCopyBufferToImage = ?*const fn (VkCommandBuffer, VkBuffer, VkImage, VkImageLayout, u32, [*c]const VkBufferImageCopy) callconv(.C) void;
pub const PFN_vkCmdCopyImageToBuffer = ?*const fn (VkCommandBuffer, VkImage, VkImageLayout, VkBuffer, u32, [*c]const VkBufferImageCopy) callconv(.C) void;
pub const PFN_vkCmdUpdateBuffer = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, VkDeviceSize, ?*const anyopaque) callconv(.C) void;
pub const PFN_vkCmdFillBuffer = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, VkDeviceSize, u32) callconv(.C) void;
pub const PFN_vkCmdClearColorImage = ?*const fn (VkCommandBuffer, VkImage, VkImageLayout, [*c]const VkClearColorValue, u32, [*c]const VkImageSubresourceRange) callconv(.C) void;
pub const PFN_vkCmdClearDepthStencilImage = ?*const fn (VkCommandBuffer, VkImage, VkImageLayout, [*c]const VkClearDepthStencilValue, u32, [*c]const VkImageSubresourceRange) callconv(.C) void;
pub const PFN_vkCmdClearAttachments = ?*const fn (VkCommandBuffer, u32, [*c]const VkClearAttachment, u32, [*c]const VkClearRect) callconv(.C) void;
pub const PFN_vkCmdResolveImage = ?*const fn (VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, u32, [*c]const VkImageResolve) callconv(.C) void;
pub const PFN_vkCmdSetEvent = ?*const fn (VkCommandBuffer, VkEvent, VkPipelineStageFlags) callconv(.C) void;
pub const PFN_vkCmdResetEvent = ?*const fn (VkCommandBuffer, VkEvent, VkPipelineStageFlags) callconv(.C) void;
pub const PFN_vkCmdWaitEvents = ?*const fn (VkCommandBuffer, u32, [*c]const VkEvent, VkPipelineStageFlags, VkPipelineStageFlags, u32, [*c]const VkMemoryBarrier, u32, [*c]const VkBufferMemoryBarrier, u32, [*c]const VkImageMemoryBarrier) callconv(.C) void;
pub const PFN_vkCmdPipelineBarrier = ?*const fn (VkCommandBuffer, VkPipelineStageFlags, VkPipelineStageFlags, VkDependencyFlags, u32, [*c]const VkMemoryBarrier, u32, [*c]const VkBufferMemoryBarrier, u32, [*c]const VkImageMemoryBarrier) callconv(.C) void;
pub const PFN_vkCmdBeginQuery = ?*const fn (VkCommandBuffer, VkQueryPool, u32, VkQueryControlFlags) callconv(.C) void;
pub const PFN_vkCmdEndQuery = ?*const fn (VkCommandBuffer, VkQueryPool, u32) callconv(.C) void;
pub const PFN_vkCmdResetQueryPool = ?*const fn (VkCommandBuffer, VkQueryPool, u32, u32) callconv(.C) void;
pub const PFN_vkCmdWriteTimestamp = ?*const fn (VkCommandBuffer, VkPipelineStageFlagBits, VkQueryPool, u32) callconv(.C) void;
pub const PFN_vkCmdCopyQueryPoolResults = ?*const fn (VkCommandBuffer, VkQueryPool, u32, u32, VkBuffer, VkDeviceSize, VkDeviceSize, VkQueryResultFlags) callconv(.C) void;
pub const PFN_vkCmdPushConstants = ?*const fn (VkCommandBuffer, VkPipelineLayout, VkShaderStageFlags, u32, u32, ?*const anyopaque) callconv(.C) void;
pub const PFN_vkCmdBeginRenderPass = ?*const fn (VkCommandBuffer, [*c]const VkRenderPassBeginInfo, VkSubpassContents) callconv(.C) void;
pub const PFN_vkCmdNextSubpass = ?*const fn (VkCommandBuffer, VkSubpassContents) callconv(.C) void;
pub const PFN_vkCmdEndRenderPass = ?*const fn (VkCommandBuffer) callconv(.C) void;
pub const PFN_vkCmdExecuteCommands = ?*const fn (VkCommandBuffer, u32, [*c]const VkCommandBuffer) callconv(.C) void;
pub extern fn vkCreateInstance(pCreateInfo: [*c]const VkInstanceCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pInstance: [*c]VkInstance) VkResult;
pub extern fn vkDestroyInstance(instance: VkInstance, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkEnumeratePhysicalDevices(instance: VkInstance, pPhysicalDeviceCount: [*c]u32, pPhysicalDevices: [*c]VkPhysicalDevice) VkResult;
pub extern fn vkGetPhysicalDeviceFeatures(physicalDevice: VkPhysicalDevice, pFeatures: [*c]VkPhysicalDeviceFeatures) void;
pub extern fn vkGetPhysicalDeviceFormatProperties(physicalDevice: VkPhysicalDevice, format: VkFormat, pFormatProperties: [*c]VkFormatProperties) void;
pub extern fn vkGetPhysicalDeviceImageFormatProperties(physicalDevice: VkPhysicalDevice, format: VkFormat, @"type": VkImageType, tiling: VkImageTiling, usage: VkImageUsageFlags, flags: VkImageCreateFlags, pImageFormatProperties: [*c]VkImageFormatProperties) VkResult;
pub extern fn vkGetPhysicalDeviceProperties(physicalDevice: VkPhysicalDevice, pProperties: [*c]VkPhysicalDeviceProperties) void;
pub extern fn vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice: VkPhysicalDevice, pQueueFamilyPropertyCount: [*c]u32, pQueueFamilyProperties: [*c]VkQueueFamilyProperties) void;
pub extern fn vkGetPhysicalDeviceMemoryProperties(physicalDevice: VkPhysicalDevice, pMemoryProperties: [*c]VkPhysicalDeviceMemoryProperties) void;
pub extern fn vkGetInstanceProcAddr(instance: VkInstance, pName: [*c]const u8) PFN_vkVoidFunction;
pub extern fn vkGetDeviceProcAddr(device: VkDevice, pName: [*c]const u8) PFN_vkVoidFunction;
pub extern fn vkCreateDevice(physicalDevice: VkPhysicalDevice, pCreateInfo: [*c]const VkDeviceCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pDevice: [*c]VkDevice) VkResult;
pub extern fn vkDestroyDevice(device: VkDevice, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkEnumerateInstanceExtensionProperties(pLayerName: [*c]const u8, pPropertyCount: [*c]u32, pProperties: [*c]VkExtensionProperties) VkResult;
pub extern fn vkEnumerateDeviceExtensionProperties(physicalDevice: VkPhysicalDevice, pLayerName: [*c]const u8, pPropertyCount: [*c]u32, pProperties: [*c]VkExtensionProperties) VkResult;
pub extern fn vkEnumerateInstanceLayerProperties(pPropertyCount: [*c]u32, pProperties: [*c]VkLayerProperties) VkResult;
pub extern fn vkEnumerateDeviceLayerProperties(physicalDevice: VkPhysicalDevice, pPropertyCount: [*c]u32, pProperties: [*c]VkLayerProperties) VkResult;
pub extern fn vkGetDeviceQueue(device: VkDevice, queueFamilyIndex: u32, queueIndex: u32, pQueue: [*c]VkQueue) void;
pub extern fn vkQueueSubmit(queue: VkQueue, submitCount: u32, pSubmits: [*c]const VkSubmitInfo, fence: VkFence) VkResult;
pub extern fn vkQueueWaitIdle(queue: VkQueue) VkResult;
pub extern fn vkDeviceWaitIdle(device: VkDevice) VkResult;
pub extern fn vkAllocateMemory(device: VkDevice, pAllocateInfo: [*c]const VkMemoryAllocateInfo, pAllocator: [*c]const VkAllocationCallbacks, pMemory: [*c]VkDeviceMemory) VkResult;
pub extern fn vkFreeMemory(device: VkDevice, memory: VkDeviceMemory, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkMapMemory(device: VkDevice, memory: VkDeviceMemory, offset: VkDeviceSize, size: VkDeviceSize, flags: VkMemoryMapFlags, ppData: [*c]?*anyopaque) VkResult;
pub extern fn vkUnmapMemory(device: VkDevice, memory: VkDeviceMemory) void;
pub extern fn vkFlushMappedMemoryRanges(device: VkDevice, memoryRangeCount: u32, pMemoryRanges: [*c]const VkMappedMemoryRange) VkResult;
pub extern fn vkInvalidateMappedMemoryRanges(device: VkDevice, memoryRangeCount: u32, pMemoryRanges: [*c]const VkMappedMemoryRange) VkResult;
pub extern fn vkGetDeviceMemoryCommitment(device: VkDevice, memory: VkDeviceMemory, pCommittedMemoryInBytes: [*c]VkDeviceSize) void;
pub extern fn vkBindBufferMemory(device: VkDevice, buffer: VkBuffer, memory: VkDeviceMemory, memoryOffset: VkDeviceSize) VkResult;
pub extern fn vkBindImageMemory(device: VkDevice, image: VkImage, memory: VkDeviceMemory, memoryOffset: VkDeviceSize) VkResult;
pub extern fn vkGetBufferMemoryRequirements(device: VkDevice, buffer: VkBuffer, pMemoryRequirements: [*c]VkMemoryRequirements) void;
pub extern fn vkGetImageMemoryRequirements(device: VkDevice, image: VkImage, pMemoryRequirements: [*c]VkMemoryRequirements) void;
pub extern fn vkGetImageSparseMemoryRequirements(device: VkDevice, image: VkImage, pSparseMemoryRequirementCount: [*c]u32, pSparseMemoryRequirements: [*c]VkSparseImageMemoryRequirements) void;
pub extern fn vkGetPhysicalDeviceSparseImageFormatProperties(physicalDevice: VkPhysicalDevice, format: VkFormat, @"type": VkImageType, samples: VkSampleCountFlagBits, usage: VkImageUsageFlags, tiling: VkImageTiling, pPropertyCount: [*c]u32, pProperties: [*c]VkSparseImageFormatProperties) void;
pub extern fn vkQueueBindSparse(queue: VkQueue, bindInfoCount: u32, pBindInfo: [*c]const VkBindSparseInfo, fence: VkFence) VkResult;
pub extern fn vkCreateFence(device: VkDevice, pCreateInfo: [*c]const VkFenceCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pFence: [*c]VkFence) VkResult;
pub extern fn vkDestroyFence(device: VkDevice, fence: VkFence, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkResetFences(device: VkDevice, fenceCount: u32, pFences: [*c]const VkFence) VkResult;
pub extern fn vkGetFenceStatus(device: VkDevice, fence: VkFence) VkResult;
pub extern fn vkWaitForFences(device: VkDevice, fenceCount: u32, pFences: [*c]const VkFence, waitAll: VkBool32, timeout: u64) VkResult;
pub extern fn vkCreateSemaphore(device: VkDevice, pCreateInfo: [*c]const VkSemaphoreCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pSemaphore: [*c]VkSemaphore) VkResult;
pub extern fn vkDestroySemaphore(device: VkDevice, semaphore: VkSemaphore, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkCreateEvent(device: VkDevice, pCreateInfo: [*c]const VkEventCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pEvent: [*c]VkEvent) VkResult;
pub extern fn vkDestroyEvent(device: VkDevice, event: VkEvent, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkGetEventStatus(device: VkDevice, event: VkEvent) VkResult;
pub extern fn vkSetEvent(device: VkDevice, event: VkEvent) VkResult;
pub extern fn vkResetEvent(device: VkDevice, event: VkEvent) VkResult;
pub extern fn vkCreateQueryPool(device: VkDevice, pCreateInfo: [*c]const VkQueryPoolCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pQueryPool: [*c]VkQueryPool) VkResult;
pub extern fn vkDestroyQueryPool(device: VkDevice, queryPool: VkQueryPool, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkGetQueryPoolResults(device: VkDevice, queryPool: VkQueryPool, firstQuery: u32, queryCount: u32, dataSize: usize, pData: ?*anyopaque, stride: VkDeviceSize, flags: VkQueryResultFlags) VkResult;
pub extern fn vkCreateBuffer(device: VkDevice, pCreateInfo: [*c]const VkBufferCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pBuffer: [*c]VkBuffer) VkResult;
pub extern fn vkDestroyBuffer(device: VkDevice, buffer: VkBuffer, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkCreateBufferView(device: VkDevice, pCreateInfo: [*c]const VkBufferViewCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pView: [*c]VkBufferView) VkResult;
pub extern fn vkDestroyBufferView(device: VkDevice, bufferView: VkBufferView, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkCreateImage(device: VkDevice, pCreateInfo: [*c]const VkImageCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pImage: [*c]VkImage) VkResult;
pub extern fn vkDestroyImage(device: VkDevice, image: VkImage, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkGetImageSubresourceLayout(device: VkDevice, image: VkImage, pSubresource: [*c]const VkImageSubresource, pLayout: [*c]VkSubresourceLayout) void;
pub extern fn vkCreateImageView(device: VkDevice, pCreateInfo: [*c]const VkImageViewCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pView: [*c]VkImageView) VkResult;
pub extern fn vkDestroyImageView(device: VkDevice, imageView: VkImageView, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkCreateShaderModule(device: VkDevice, pCreateInfo: [*c]const VkShaderModuleCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pShaderModule: [*c]VkShaderModule) VkResult;
pub extern fn vkDestroyShaderModule(device: VkDevice, shaderModule: VkShaderModule, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkCreatePipelineCache(device: VkDevice, pCreateInfo: [*c]const VkPipelineCacheCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pPipelineCache: [*c]VkPipelineCache) VkResult;
pub extern fn vkDestroyPipelineCache(device: VkDevice, pipelineCache: VkPipelineCache, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkGetPipelineCacheData(device: VkDevice, pipelineCache: VkPipelineCache, pDataSize: [*c]usize, pData: ?*anyopaque) VkResult;
pub extern fn vkMergePipelineCaches(device: VkDevice, dstCache: VkPipelineCache, srcCacheCount: u32, pSrcCaches: [*c]const VkPipelineCache) VkResult;
pub extern fn vkCreateGraphicsPipelines(device: VkDevice, pipelineCache: VkPipelineCache, createInfoCount: u32, pCreateInfos: [*c]const VkGraphicsPipelineCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pPipelines: [*c]VkPipeline) VkResult;
pub extern fn vkCreateComputePipelines(device: VkDevice, pipelineCache: VkPipelineCache, createInfoCount: u32, pCreateInfos: [*c]const VkComputePipelineCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pPipelines: [*c]VkPipeline) VkResult;
pub extern fn vkDestroyPipeline(device: VkDevice, pipeline: VkPipeline, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkCreatePipelineLayout(device: VkDevice, pCreateInfo: [*c]const VkPipelineLayoutCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pPipelineLayout: [*c]VkPipelineLayout) VkResult;
pub extern fn vkDestroyPipelineLayout(device: VkDevice, pipelineLayout: VkPipelineLayout, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkCreateSampler(device: VkDevice, pCreateInfo: [*c]const VkSamplerCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pSampler: [*c]VkSampler) VkResult;
pub extern fn vkDestroySampler(device: VkDevice, sampler: VkSampler, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkCreateDescriptorSetLayout(device: VkDevice, pCreateInfo: [*c]const VkDescriptorSetLayoutCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pSetLayout: [*c]VkDescriptorSetLayout) VkResult;
pub extern fn vkDestroyDescriptorSetLayout(device: VkDevice, descriptorSetLayout: VkDescriptorSetLayout, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkCreateDescriptorPool(device: VkDevice, pCreateInfo: [*c]const VkDescriptorPoolCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pDescriptorPool: [*c]VkDescriptorPool) VkResult;
pub extern fn vkDestroyDescriptorPool(device: VkDevice, descriptorPool: VkDescriptorPool, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkResetDescriptorPool(device: VkDevice, descriptorPool: VkDescriptorPool, flags: VkDescriptorPoolResetFlags) VkResult;
pub extern fn vkAllocateDescriptorSets(device: VkDevice, pAllocateInfo: [*c]const VkDescriptorSetAllocateInfo, pDescriptorSets: [*c]VkDescriptorSet) VkResult;
pub extern fn vkFreeDescriptorSets(device: VkDevice, descriptorPool: VkDescriptorPool, descriptorSetCount: u32, pDescriptorSets: [*c]const VkDescriptorSet) VkResult;
pub extern fn vkUpdateDescriptorSets(device: VkDevice, descriptorWriteCount: u32, pDescriptorWrites: [*c]const VkWriteDescriptorSet, descriptorCopyCount: u32, pDescriptorCopies: [*c]const VkCopyDescriptorSet) void;
pub extern fn vkCreateFramebuffer(device: VkDevice, pCreateInfo: [*c]const VkFramebufferCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pFramebuffer: [*c]VkFramebuffer) VkResult;
pub extern fn vkDestroyFramebuffer(device: VkDevice, framebuffer: VkFramebuffer, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkCreateRenderPass(device: VkDevice, pCreateInfo: [*c]const VkRenderPassCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pRenderPass: [*c]VkRenderPass) VkResult;
pub extern fn vkDestroyRenderPass(device: VkDevice, renderPass: VkRenderPass, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkGetRenderAreaGranularity(device: VkDevice, renderPass: VkRenderPass, pGranularity: [*c]VkExtent2D) void;
pub extern fn vkCreateCommandPool(device: VkDevice, pCreateInfo: [*c]const VkCommandPoolCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pCommandPool: [*c]VkCommandPool) VkResult;
pub extern fn vkDestroyCommandPool(device: VkDevice, commandPool: VkCommandPool, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkResetCommandPool(device: VkDevice, commandPool: VkCommandPool, flags: VkCommandPoolResetFlags) VkResult;
pub extern fn vkAllocateCommandBuffers(device: VkDevice, pAllocateInfo: [*c]const VkCommandBufferAllocateInfo, pCommandBuffers: [*c]VkCommandBuffer) VkResult;
pub extern fn vkFreeCommandBuffers(device: VkDevice, commandPool: VkCommandPool, commandBufferCount: u32, pCommandBuffers: [*c]const VkCommandBuffer) void;
pub extern fn vkBeginCommandBuffer(commandBuffer: VkCommandBuffer, pBeginInfo: [*c]const VkCommandBufferBeginInfo) VkResult;
pub extern fn vkEndCommandBuffer(commandBuffer: VkCommandBuffer) VkResult;
pub extern fn vkResetCommandBuffer(commandBuffer: VkCommandBuffer, flags: VkCommandBufferResetFlags) VkResult;
pub extern fn vkCmdBindPipeline(commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, pipeline: VkPipeline) void;
pub extern fn vkCmdSetViewport(commandBuffer: VkCommandBuffer, firstViewport: u32, viewportCount: u32, pViewports: [*c]const VkViewport) void;
pub extern fn vkCmdSetScissor(commandBuffer: VkCommandBuffer, firstScissor: u32, scissorCount: u32, pScissors: [*c]const VkRect2D) void;
pub extern fn vkCmdSetLineWidth(commandBuffer: VkCommandBuffer, lineWidth: f32) void;
pub extern fn vkCmdSetDepthBias(commandBuffer: VkCommandBuffer, depthBiasConstantFactor: f32, depthBiasClamp: f32, depthBiasSlopeFactor: f32) void;
pub extern fn vkCmdSetBlendConstants(commandBuffer: VkCommandBuffer, blendConstants: [*c]const f32) void;
pub extern fn vkCmdSetDepthBounds(commandBuffer: VkCommandBuffer, minDepthBounds: f32, maxDepthBounds: f32) void;
pub extern fn vkCmdSetStencilCompareMask(commandBuffer: VkCommandBuffer, faceMask: VkStencilFaceFlags, compareMask: u32) void;
pub extern fn vkCmdSetStencilWriteMask(commandBuffer: VkCommandBuffer, faceMask: VkStencilFaceFlags, writeMask: u32) void;
pub extern fn vkCmdSetStencilReference(commandBuffer: VkCommandBuffer, faceMask: VkStencilFaceFlags, reference: u32) void;
pub extern fn vkCmdBindDescriptorSets(commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, layout: VkPipelineLayout, firstSet: u32, descriptorSetCount: u32, pDescriptorSets: [*c]const VkDescriptorSet, dynamicOffsetCount: u32, pDynamicOffsets: [*c]const u32) void;
pub extern fn vkCmdBindIndexBuffer(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, indexType: VkIndexType) void;
pub extern fn vkCmdBindVertexBuffers(commandBuffer: VkCommandBuffer, firstBinding: u32, bindingCount: u32, pBuffers: [*c]const VkBuffer, pOffsets: [*c]const VkDeviceSize) void;
pub extern fn vkCmdDraw(commandBuffer: VkCommandBuffer, vertexCount: u32, instanceCount: u32, firstVertex: u32, firstInstance: u32) void;
pub extern fn vkCmdDrawIndexed(commandBuffer: VkCommandBuffer, indexCount: u32, instanceCount: u32, firstIndex: u32, vertexOffset: i32, firstInstance: u32) void;
pub extern fn vkCmdDrawIndirect(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, drawCount: u32, stride: u32) void;
pub extern fn vkCmdDrawIndexedIndirect(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, drawCount: u32, stride: u32) void;
pub extern fn vkCmdDispatch(commandBuffer: VkCommandBuffer, groupCountX: u32, groupCountY: u32, groupCountZ: u32) void;
pub extern fn vkCmdDispatchIndirect(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize) void;
pub extern fn vkCmdCopyBuffer(commandBuffer: VkCommandBuffer, srcBuffer: VkBuffer, dstBuffer: VkBuffer, regionCount: u32, pRegions: [*c]const VkBufferCopy) void;
pub extern fn vkCmdCopyImage(commandBuffer: VkCommandBuffer, srcImage: VkImage, srcImageLayout: VkImageLayout, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: u32, pRegions: [*c]const VkImageCopy) void;
pub extern fn vkCmdBlitImage(commandBuffer: VkCommandBuffer, srcImage: VkImage, srcImageLayout: VkImageLayout, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: u32, pRegions: [*c]const VkImageBlit, filter: VkFilter) void;
pub extern fn vkCmdCopyBufferToImage(commandBuffer: VkCommandBuffer, srcBuffer: VkBuffer, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: u32, pRegions: [*c]const VkBufferImageCopy) void;
pub extern fn vkCmdCopyImageToBuffer(commandBuffer: VkCommandBuffer, srcImage: VkImage, srcImageLayout: VkImageLayout, dstBuffer: VkBuffer, regionCount: u32, pRegions: [*c]const VkBufferImageCopy) void;
pub extern fn vkCmdUpdateBuffer(commandBuffer: VkCommandBuffer, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, dataSize: VkDeviceSize, pData: ?*const anyopaque) void;
pub extern fn vkCmdFillBuffer(commandBuffer: VkCommandBuffer, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, size: VkDeviceSize, data: u32) void;
pub extern fn vkCmdClearColorImage(commandBuffer: VkCommandBuffer, image: VkImage, imageLayout: VkImageLayout, pColor: [*c]const VkClearColorValue, rangeCount: u32, pRanges: [*c]const VkImageSubresourceRange) void;
pub extern fn vkCmdClearDepthStencilImage(commandBuffer: VkCommandBuffer, image: VkImage, imageLayout: VkImageLayout, pDepthStencil: [*c]const VkClearDepthStencilValue, rangeCount: u32, pRanges: [*c]const VkImageSubresourceRange) void;
pub extern fn vkCmdClearAttachments(commandBuffer: VkCommandBuffer, attachmentCount: u32, pAttachments: [*c]const VkClearAttachment, rectCount: u32, pRects: [*c]const VkClearRect) void;
pub extern fn vkCmdResolveImage(commandBuffer: VkCommandBuffer, srcImage: VkImage, srcImageLayout: VkImageLayout, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: u32, pRegions: [*c]const VkImageResolve) void;
pub extern fn vkCmdSetEvent(commandBuffer: VkCommandBuffer, event: VkEvent, stageMask: VkPipelineStageFlags) void;
pub extern fn vkCmdResetEvent(commandBuffer: VkCommandBuffer, event: VkEvent, stageMask: VkPipelineStageFlags) void;
pub extern fn vkCmdWaitEvents(commandBuffer: VkCommandBuffer, eventCount: u32, pEvents: [*c]const VkEvent, srcStageMask: VkPipelineStageFlags, dstStageMask: VkPipelineStageFlags, memoryBarrierCount: u32, pMemoryBarriers: [*c]const VkMemoryBarrier, bufferMemoryBarrierCount: u32, pBufferMemoryBarriers: [*c]const VkBufferMemoryBarrier, imageMemoryBarrierCount: u32, pImageMemoryBarriers: [*c]const VkImageMemoryBarrier) void;
pub extern fn vkCmdPipelineBarrier(commandBuffer: VkCommandBuffer, srcStageMask: VkPipelineStageFlags, dstStageMask: VkPipelineStageFlags, dependencyFlags: VkDependencyFlags, memoryBarrierCount: u32, pMemoryBarriers: [*c]const VkMemoryBarrier, bufferMemoryBarrierCount: u32, pBufferMemoryBarriers: [*c]const VkBufferMemoryBarrier, imageMemoryBarrierCount: u32, pImageMemoryBarriers: [*c]const VkImageMemoryBarrier) void;
pub extern fn vkCmdBeginQuery(commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: u32, flags: VkQueryControlFlags) void;
pub extern fn vkCmdEndQuery(commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: u32) void;
pub extern fn vkCmdResetQueryPool(commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, firstQuery: u32, queryCount: u32) void;
pub extern fn vkCmdWriteTimestamp(commandBuffer: VkCommandBuffer, pipelineStage: VkPipelineStageFlagBits, queryPool: VkQueryPool, query: u32) void;
pub extern fn vkCmdCopyQueryPoolResults(commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, firstQuery: u32, queryCount: u32, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, stride: VkDeviceSize, flags: VkQueryResultFlags) void;
pub extern fn vkCmdPushConstants(commandBuffer: VkCommandBuffer, layout: VkPipelineLayout, stageFlags: VkShaderStageFlags, offset: u32, size: u32, pValues: ?*const anyopaque) void;
pub extern fn vkCmdBeginRenderPass(commandBuffer: VkCommandBuffer, pRenderPassBegin: [*c]const VkRenderPassBeginInfo, contents: VkSubpassContents) void;
pub extern fn vkCmdNextSubpass(commandBuffer: VkCommandBuffer, contents: VkSubpassContents) void;
pub extern fn vkCmdEndRenderPass(commandBuffer: VkCommandBuffer) void;
pub extern fn vkCmdExecuteCommands(commandBuffer: VkCommandBuffer, commandBufferCount: u32, pCommandBuffers: [*c]const VkCommandBuffer) void;
pub const struct_VkSamplerYcbcrConversion_T = opaque {};
pub const VkSamplerYcbcrConversion = ?*struct_VkSamplerYcbcrConversion_T;
pub const struct_VkDescriptorUpdateTemplate_T = opaque {};
pub const VkDescriptorUpdateTemplate = ?*struct_VkDescriptorUpdateTemplate_T;
pub const VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES: c_int = 0;
pub const VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY: c_int = 1;
pub const VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR: c_int = 0;
pub const VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR: c_int = 1;
pub const VK_POINT_CLIPPING_BEHAVIOR_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPointClippingBehavior = c_uint;
pub const VkPointClippingBehavior = enum_VkPointClippingBehavior;
pub const VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT: c_int = 0;
pub const VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT: c_int = 1;
pub const VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR: c_int = 0;
pub const VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR: c_int = 1;
pub const VK_TESSELLATION_DOMAIN_ORIGIN_MAX_ENUM: c_int = 2147483647;
pub const enum_VkTessellationDomainOrigin = c_uint;
pub const VkTessellationDomainOrigin = enum_VkTessellationDomainOrigin;
pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY: c_int = 0;
pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY: c_int = 1;
pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709: c_int = 2;
pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601: c_int = 3;
pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020: c_int = 4;
pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR: c_int = 0;
pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR: c_int = 1;
pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR: c_int = 2;
pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR: c_int = 3;
pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR: c_int = 4;
pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSamplerYcbcrModelConversion = c_uint;
pub const VkSamplerYcbcrModelConversion = enum_VkSamplerYcbcrModelConversion;
pub const VK_SAMPLER_YCBCR_RANGE_ITU_FULL: c_int = 0;
pub const VK_SAMPLER_YCBCR_RANGE_ITU_NARROW: c_int = 1;
pub const VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR: c_int = 0;
pub const VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR: c_int = 1;
pub const VK_SAMPLER_YCBCR_RANGE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSamplerYcbcrRange = c_uint;
pub const VkSamplerYcbcrRange = enum_VkSamplerYcbcrRange;
pub const VK_CHROMA_LOCATION_COSITED_EVEN: c_int = 0;
pub const VK_CHROMA_LOCATION_MIDPOINT: c_int = 1;
pub const VK_CHROMA_LOCATION_COSITED_EVEN_KHR: c_int = 0;
pub const VK_CHROMA_LOCATION_MIDPOINT_KHR: c_int = 1;
pub const VK_CHROMA_LOCATION_MAX_ENUM: c_int = 2147483647;
pub const enum_VkChromaLocation = c_uint;
pub const VkChromaLocation = enum_VkChromaLocation;
pub const VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET: c_int = 0;
pub const VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR: c_int = 1;
pub const VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR: c_int = 0;
pub const VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkDescriptorUpdateTemplateType = c_uint;
pub const VkDescriptorUpdateTemplateType = enum_VkDescriptorUpdateTemplateType;
pub const VK_SUBGROUP_FEATURE_BASIC_BIT: c_int = 1;
pub const VK_SUBGROUP_FEATURE_VOTE_BIT: c_int = 2;
pub const VK_SUBGROUP_FEATURE_ARITHMETIC_BIT: c_int = 4;
pub const VK_SUBGROUP_FEATURE_BALLOT_BIT: c_int = 8;
pub const VK_SUBGROUP_FEATURE_SHUFFLE_BIT: c_int = 16;
pub const VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT: c_int = 32;
pub const VK_SUBGROUP_FEATURE_CLUSTERED_BIT: c_int = 64;
pub const VK_SUBGROUP_FEATURE_QUAD_BIT: c_int = 128;
pub const VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV: c_int = 256;
pub const VK_SUBGROUP_FEATURE_ROTATE_BIT_KHR: c_int = 512;
pub const VK_SUBGROUP_FEATURE_ROTATE_CLUSTERED_BIT_KHR: c_int = 1024;
pub const VK_SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSubgroupFeatureFlagBits = c_uint;
pub const VkSubgroupFeatureFlagBits = enum_VkSubgroupFeatureFlagBits;
pub const VkSubgroupFeatureFlags = VkFlags;
pub const VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT: c_int = 1;
pub const VK_PEER_MEMORY_FEATURE_COPY_DST_BIT: c_int = 2;
pub const VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT: c_int = 4;
pub const VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT: c_int = 8;
pub const VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR: c_int = 1;
pub const VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR: c_int = 2;
pub const VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR: c_int = 4;
pub const VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR: c_int = 8;
pub const VK_PEER_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPeerMemoryFeatureFlagBits = c_uint;
pub const VkPeerMemoryFeatureFlagBits = enum_VkPeerMemoryFeatureFlagBits;
pub const VkPeerMemoryFeatureFlags = VkFlags;
pub const VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT: c_int = 1;
pub const VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT: c_int = 2;
pub const VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT: c_int = 4;
pub const VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR: c_int = 1;
pub const VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR: c_int = 2;
pub const VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR: c_int = 4;
pub const VK_MEMORY_ALLOCATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkMemoryAllocateFlagBits = c_uint;
pub const VkMemoryAllocateFlagBits = enum_VkMemoryAllocateFlagBits;
pub const VkMemoryAllocateFlags = VkFlags;
pub const VkCommandPoolTrimFlags = VkFlags;
pub const VkDescriptorUpdateTemplateCreateFlags = VkFlags;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT: c_int = 1;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT: c_int = 2;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT: c_int = 4;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT: c_int = 8;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT: c_int = 16;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT: c_int = 32;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT: c_int = 64;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT: c_int = 512;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID: c_int = 1024;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT: c_int = 128;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT: c_int = 256;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_ZIRCON_VMO_BIT_FUCHSIA: c_int = 2048;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_RDMA_ADDRESS_BIT_NV: c_int = 4096;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_SCREEN_BUFFER_BIT_QNX: c_int = 16384;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR: c_int = 1;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR: c_int = 2;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR: c_int = 4;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR: c_int = 8;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR: c_int = 16;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR: c_int = 32;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR: c_int = 64;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkExternalMemoryHandleTypeFlagBits = c_uint;
pub const VkExternalMemoryHandleTypeFlagBits = enum_VkExternalMemoryHandleTypeFlagBits;
pub const VkExternalMemoryHandleTypeFlags = VkFlags;
pub const VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT: c_int = 1;
pub const VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT: c_int = 2;
pub const VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT: c_int = 4;
pub const VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR: c_int = 1;
pub const VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR: c_int = 2;
pub const VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR: c_int = 4;
pub const VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkExternalMemoryFeatureFlagBits = c_uint;
pub const VkExternalMemoryFeatureFlagBits = enum_VkExternalMemoryFeatureFlagBits;
pub const VkExternalMemoryFeatureFlags = VkFlags;
pub const VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT: c_int = 1;
pub const VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT: c_int = 2;
pub const VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT: c_int = 4;
pub const VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT: c_int = 8;
pub const VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR: c_int = 1;
pub const VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR: c_int = 2;
pub const VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR: c_int = 4;
pub const VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR: c_int = 8;
pub const VK_EXTERNAL_FENCE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkExternalFenceHandleTypeFlagBits = c_uint;
pub const VkExternalFenceHandleTypeFlagBits = enum_VkExternalFenceHandleTypeFlagBits;
pub const VkExternalFenceHandleTypeFlags = VkFlags;
pub const VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT: c_int = 1;
pub const VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT: c_int = 2;
pub const VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR: c_int = 1;
pub const VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR: c_int = 2;
pub const VK_EXTERNAL_FENCE_FEATURE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkExternalFenceFeatureFlagBits = c_uint;
pub const VkExternalFenceFeatureFlagBits = enum_VkExternalFenceFeatureFlagBits;
pub const VkExternalFenceFeatureFlags = VkFlags;
pub const VK_FENCE_IMPORT_TEMPORARY_BIT: c_int = 1;
pub const VK_FENCE_IMPORT_TEMPORARY_BIT_KHR: c_int = 1;
pub const VK_FENCE_IMPORT_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkFenceImportFlagBits = c_uint;
pub const VkFenceImportFlagBits = enum_VkFenceImportFlagBits;
pub const VkFenceImportFlags = VkFlags;
pub const VK_SEMAPHORE_IMPORT_TEMPORARY_BIT: c_int = 1;
pub const VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR: c_int = 1;
pub const VK_SEMAPHORE_IMPORT_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSemaphoreImportFlagBits = c_uint;
pub const VkSemaphoreImportFlagBits = enum_VkSemaphoreImportFlagBits;
pub const VkSemaphoreImportFlags = VkFlags;
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT: c_int = 1;
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT: c_int = 2;
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT: c_int = 4;
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT: c_int = 8;
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT: c_int = 16;
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_ZIRCON_EVENT_BIT_FUCHSIA: c_int = 128;
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT: c_int = 8;
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR: c_int = 1;
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR: c_int = 2;
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR: c_int = 4;
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR: c_int = 8;
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR: c_int = 16;
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkExternalSemaphoreHandleTypeFlagBits = c_uint;
pub const VkExternalSemaphoreHandleTypeFlagBits = enum_VkExternalSemaphoreHandleTypeFlagBits;
pub const VkExternalSemaphoreHandleTypeFlags = VkFlags;
pub const VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT: c_int = 1;
pub const VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT: c_int = 2;
pub const VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR: c_int = 1;
pub const VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR: c_int = 2;
pub const VK_EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkExternalSemaphoreFeatureFlagBits = c_uint;
pub const VkExternalSemaphoreFeatureFlagBits = enum_VkExternalSemaphoreFeatureFlagBits;
pub const VkExternalSemaphoreFeatureFlags = VkFlags;
pub const struct_VkPhysicalDeviceSubgroupProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    subgroupSize: u32 = @import("std").mem.zeroes(u32),
    supportedStages: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    supportedOperations: VkSubgroupFeatureFlags = @import("std").mem.zeroes(VkSubgroupFeatureFlags),
    quadOperationsInAllStages: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceSubgroupProperties = struct_VkPhysicalDeviceSubgroupProperties;
pub const struct_VkBindBufferMemoryInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    memory: VkDeviceMemory = @import("std").mem.zeroes(VkDeviceMemory),
    memoryOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkBindBufferMemoryInfo = struct_VkBindBufferMemoryInfo;
pub const struct_VkBindImageMemoryInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    image: VkImage = @import("std").mem.zeroes(VkImage),
    memory: VkDeviceMemory = @import("std").mem.zeroes(VkDeviceMemory),
    memoryOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkBindImageMemoryInfo = struct_VkBindImageMemoryInfo;
pub const struct_VkPhysicalDevice16BitStorageFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    storageBuffer16BitAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    uniformAndStorageBuffer16BitAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    storagePushConstant16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    storageInputOutput16: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevice16BitStorageFeatures = struct_VkPhysicalDevice16BitStorageFeatures;
pub const struct_VkMemoryDedicatedRequirements = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    prefersDedicatedAllocation: VkBool32 = @import("std").mem.zeroes(VkBool32),
    requiresDedicatedAllocation: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkMemoryDedicatedRequirements = struct_VkMemoryDedicatedRequirements;
pub const struct_VkMemoryDedicatedAllocateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    image: VkImage = @import("std").mem.zeroes(VkImage),
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
};
pub const VkMemoryDedicatedAllocateInfo = struct_VkMemoryDedicatedAllocateInfo;
pub const struct_VkMemoryAllocateFlagsInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkMemoryAllocateFlags = @import("std").mem.zeroes(VkMemoryAllocateFlags),
    deviceMask: u32 = @import("std").mem.zeroes(u32),
};
pub const VkMemoryAllocateFlagsInfo = struct_VkMemoryAllocateFlagsInfo;
pub const struct_VkDeviceGroupRenderPassBeginInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    deviceMask: u32 = @import("std").mem.zeroes(u32),
    deviceRenderAreaCount: u32 = @import("std").mem.zeroes(u32),
    pDeviceRenderAreas: [*c]const VkRect2D = @import("std").mem.zeroes([*c]const VkRect2D),
};
pub const VkDeviceGroupRenderPassBeginInfo = struct_VkDeviceGroupRenderPassBeginInfo;
pub const struct_VkDeviceGroupCommandBufferBeginInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    deviceMask: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDeviceGroupCommandBufferBeginInfo = struct_VkDeviceGroupCommandBufferBeginInfo;
pub const struct_VkDeviceGroupSubmitInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    waitSemaphoreCount: u32 = @import("std").mem.zeroes(u32),
    pWaitSemaphoreDeviceIndices: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    commandBufferCount: u32 = @import("std").mem.zeroes(u32),
    pCommandBufferDeviceMasks: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    signalSemaphoreCount: u32 = @import("std").mem.zeroes(u32),
    pSignalSemaphoreDeviceIndices: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkDeviceGroupSubmitInfo = struct_VkDeviceGroupSubmitInfo;
pub const struct_VkDeviceGroupBindSparseInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    resourceDeviceIndex: u32 = @import("std").mem.zeroes(u32),
    memoryDeviceIndex: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDeviceGroupBindSparseInfo = struct_VkDeviceGroupBindSparseInfo;
pub const struct_VkBindBufferMemoryDeviceGroupInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    deviceIndexCount: u32 = @import("std").mem.zeroes(u32),
    pDeviceIndices: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkBindBufferMemoryDeviceGroupInfo = struct_VkBindBufferMemoryDeviceGroupInfo;
pub const struct_VkBindImageMemoryDeviceGroupInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    deviceIndexCount: u32 = @import("std").mem.zeroes(u32),
    pDeviceIndices: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    splitInstanceBindRegionCount: u32 = @import("std").mem.zeroes(u32),
    pSplitInstanceBindRegions: [*c]const VkRect2D = @import("std").mem.zeroes([*c]const VkRect2D),
};
pub const VkBindImageMemoryDeviceGroupInfo = struct_VkBindImageMemoryDeviceGroupInfo;
pub const struct_VkPhysicalDeviceGroupProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    physicalDeviceCount: u32 = @import("std").mem.zeroes(u32),
    physicalDevices: [32]VkPhysicalDevice = @import("std").mem.zeroes([32]VkPhysicalDevice),
    subsetAllocation: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceGroupProperties = struct_VkPhysicalDeviceGroupProperties;
pub const struct_VkDeviceGroupDeviceCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    physicalDeviceCount: u32 = @import("std").mem.zeroes(u32),
    pPhysicalDevices: [*c]const VkPhysicalDevice = @import("std").mem.zeroes([*c]const VkPhysicalDevice),
};
pub const VkDeviceGroupDeviceCreateInfo = struct_VkDeviceGroupDeviceCreateInfo;
pub const struct_VkBufferMemoryRequirementsInfo2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
};
pub const VkBufferMemoryRequirementsInfo2 = struct_VkBufferMemoryRequirementsInfo2;
pub const struct_VkImageMemoryRequirementsInfo2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    image: VkImage = @import("std").mem.zeroes(VkImage),
};
pub const VkImageMemoryRequirementsInfo2 = struct_VkImageMemoryRequirementsInfo2;
pub const struct_VkImageSparseMemoryRequirementsInfo2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    image: VkImage = @import("std").mem.zeroes(VkImage),
};
pub const VkImageSparseMemoryRequirementsInfo2 = struct_VkImageSparseMemoryRequirementsInfo2;
pub const struct_VkMemoryRequirements2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    memoryRequirements: VkMemoryRequirements = @import("std").mem.zeroes(VkMemoryRequirements),
};
pub const VkMemoryRequirements2 = struct_VkMemoryRequirements2;
pub const struct_VkSparseImageMemoryRequirements2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    memoryRequirements: VkSparseImageMemoryRequirements = @import("std").mem.zeroes(VkSparseImageMemoryRequirements),
};
pub const VkSparseImageMemoryRequirements2 = struct_VkSparseImageMemoryRequirements2;
pub const struct_VkPhysicalDeviceFeatures2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    features: VkPhysicalDeviceFeatures = @import("std").mem.zeroes(VkPhysicalDeviceFeatures),
};
pub const VkPhysicalDeviceFeatures2 = struct_VkPhysicalDeviceFeatures2;
pub const struct_VkPhysicalDeviceProperties2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    properties: VkPhysicalDeviceProperties = @import("std").mem.zeroes(VkPhysicalDeviceProperties),
};
pub const VkPhysicalDeviceProperties2 = struct_VkPhysicalDeviceProperties2;
pub const struct_VkFormatProperties2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    formatProperties: VkFormatProperties = @import("std").mem.zeroes(VkFormatProperties),
};
pub const VkFormatProperties2 = struct_VkFormatProperties2;
pub const struct_VkImageFormatProperties2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    imageFormatProperties: VkImageFormatProperties = @import("std").mem.zeroes(VkImageFormatProperties),
};
pub const VkImageFormatProperties2 = struct_VkImageFormatProperties2;
pub const struct_VkPhysicalDeviceImageFormatInfo2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
    type: VkImageType = @import("std").mem.zeroes(VkImageType),
    tiling: VkImageTiling = @import("std").mem.zeroes(VkImageTiling),
    usage: VkImageUsageFlags = @import("std").mem.zeroes(VkImageUsageFlags),
    flags: VkImageCreateFlags = @import("std").mem.zeroes(VkImageCreateFlags),
};
pub const VkPhysicalDeviceImageFormatInfo2 = struct_VkPhysicalDeviceImageFormatInfo2;
pub const struct_VkQueueFamilyProperties2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    queueFamilyProperties: VkQueueFamilyProperties = @import("std").mem.zeroes(VkQueueFamilyProperties),
};
pub const VkQueueFamilyProperties2 = struct_VkQueueFamilyProperties2;
pub const struct_VkPhysicalDeviceMemoryProperties2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    memoryProperties: VkPhysicalDeviceMemoryProperties = @import("std").mem.zeroes(VkPhysicalDeviceMemoryProperties),
};
pub const VkPhysicalDeviceMemoryProperties2 = struct_VkPhysicalDeviceMemoryProperties2;
pub const struct_VkSparseImageFormatProperties2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    properties: VkSparseImageFormatProperties = @import("std").mem.zeroes(VkSparseImageFormatProperties),
};
pub const VkSparseImageFormatProperties2 = struct_VkSparseImageFormatProperties2;
pub const struct_VkPhysicalDeviceSparseImageFormatInfo2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
    type: VkImageType = @import("std").mem.zeroes(VkImageType),
    samples: VkSampleCountFlagBits = @import("std").mem.zeroes(VkSampleCountFlagBits),
    usage: VkImageUsageFlags = @import("std").mem.zeroes(VkImageUsageFlags),
    tiling: VkImageTiling = @import("std").mem.zeroes(VkImageTiling),
};
pub const VkPhysicalDeviceSparseImageFormatInfo2 = struct_VkPhysicalDeviceSparseImageFormatInfo2;
pub const struct_VkPhysicalDevicePointClippingProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pointClippingBehavior: VkPointClippingBehavior = @import("std").mem.zeroes(VkPointClippingBehavior),
};
pub const VkPhysicalDevicePointClippingProperties = struct_VkPhysicalDevicePointClippingProperties;
pub const struct_VkInputAttachmentAspectReference = extern struct {
    subpass: u32 = @import("std").mem.zeroes(u32),
    inputAttachmentIndex: u32 = @import("std").mem.zeroes(u32),
    aspectMask: VkImageAspectFlags = @import("std").mem.zeroes(VkImageAspectFlags),
};
pub const VkInputAttachmentAspectReference = struct_VkInputAttachmentAspectReference;
pub const struct_VkRenderPassInputAttachmentAspectCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    aspectReferenceCount: u32 = @import("std").mem.zeroes(u32),
    pAspectReferences: [*c]const VkInputAttachmentAspectReference = @import("std").mem.zeroes([*c]const VkInputAttachmentAspectReference),
};
pub const VkRenderPassInputAttachmentAspectCreateInfo = struct_VkRenderPassInputAttachmentAspectCreateInfo;
pub const struct_VkImageViewUsageCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    usage: VkImageUsageFlags = @import("std").mem.zeroes(VkImageUsageFlags),
};
pub const VkImageViewUsageCreateInfo = struct_VkImageViewUsageCreateInfo;
pub const struct_VkPipelineTessellationDomainOriginStateCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    domainOrigin: VkTessellationDomainOrigin = @import("std").mem.zeroes(VkTessellationDomainOrigin),
};
pub const VkPipelineTessellationDomainOriginStateCreateInfo = struct_VkPipelineTessellationDomainOriginStateCreateInfo;
pub const struct_VkRenderPassMultiviewCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    subpassCount: u32 = @import("std").mem.zeroes(u32),
    pViewMasks: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    dependencyCount: u32 = @import("std").mem.zeroes(u32),
    pViewOffsets: [*c]const i32 = @import("std").mem.zeroes([*c]const i32),
    correlationMaskCount: u32 = @import("std").mem.zeroes(u32),
    pCorrelationMasks: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkRenderPassMultiviewCreateInfo = struct_VkRenderPassMultiviewCreateInfo;
pub const struct_VkPhysicalDeviceMultiviewFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    multiview: VkBool32 = @import("std").mem.zeroes(VkBool32),
    multiviewGeometryShader: VkBool32 = @import("std").mem.zeroes(VkBool32),
    multiviewTessellationShader: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceMultiviewFeatures = struct_VkPhysicalDeviceMultiviewFeatures;
pub const struct_VkPhysicalDeviceMultiviewProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxMultiviewViewCount: u32 = @import("std").mem.zeroes(u32),
    maxMultiviewInstanceIndex: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceMultiviewProperties = struct_VkPhysicalDeviceMultiviewProperties;
pub const struct_VkPhysicalDeviceVariablePointersFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    variablePointersStorageBuffer: VkBool32 = @import("std").mem.zeroes(VkBool32),
    variablePointers: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceVariablePointersFeatures = struct_VkPhysicalDeviceVariablePointersFeatures;
pub const VkPhysicalDeviceVariablePointerFeatures = VkPhysicalDeviceVariablePointersFeatures;
pub const struct_VkPhysicalDeviceProtectedMemoryFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    protectedMemory: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceProtectedMemoryFeatures = struct_VkPhysicalDeviceProtectedMemoryFeatures;
pub const struct_VkPhysicalDeviceProtectedMemoryProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    protectedNoFault: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceProtectedMemoryProperties = struct_VkPhysicalDeviceProtectedMemoryProperties;
pub const struct_VkDeviceQueueInfo2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkDeviceQueueCreateFlags = @import("std").mem.zeroes(VkDeviceQueueCreateFlags),
    queueFamilyIndex: u32 = @import("std").mem.zeroes(u32),
    queueIndex: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDeviceQueueInfo2 = struct_VkDeviceQueueInfo2;
pub const struct_VkProtectedSubmitInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    protectedSubmit: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkProtectedSubmitInfo = struct_VkProtectedSubmitInfo;
pub const struct_VkSamplerYcbcrConversionCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
    ycbcrModel: VkSamplerYcbcrModelConversion = @import("std").mem.zeroes(VkSamplerYcbcrModelConversion),
    ycbcrRange: VkSamplerYcbcrRange = @import("std").mem.zeroes(VkSamplerYcbcrRange),
    components: VkComponentMapping = @import("std").mem.zeroes(VkComponentMapping),
    xChromaOffset: VkChromaLocation = @import("std").mem.zeroes(VkChromaLocation),
    yChromaOffset: VkChromaLocation = @import("std").mem.zeroes(VkChromaLocation),
    chromaFilter: VkFilter = @import("std").mem.zeroes(VkFilter),
    forceExplicitReconstruction: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkSamplerYcbcrConversionCreateInfo = struct_VkSamplerYcbcrConversionCreateInfo;
pub const struct_VkSamplerYcbcrConversionInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    conversion: VkSamplerYcbcrConversion = @import("std").mem.zeroes(VkSamplerYcbcrConversion),
};
pub const VkSamplerYcbcrConversionInfo = struct_VkSamplerYcbcrConversionInfo;
pub const struct_VkBindImagePlaneMemoryInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    planeAspect: VkImageAspectFlagBits = @import("std").mem.zeroes(VkImageAspectFlagBits),
};
pub const VkBindImagePlaneMemoryInfo = struct_VkBindImagePlaneMemoryInfo;
pub const struct_VkImagePlaneMemoryRequirementsInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    planeAspect: VkImageAspectFlagBits = @import("std").mem.zeroes(VkImageAspectFlagBits),
};
pub const VkImagePlaneMemoryRequirementsInfo = struct_VkImagePlaneMemoryRequirementsInfo;
pub const struct_VkPhysicalDeviceSamplerYcbcrConversionFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    samplerYcbcrConversion: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceSamplerYcbcrConversionFeatures = struct_VkPhysicalDeviceSamplerYcbcrConversionFeatures;
pub const struct_VkSamplerYcbcrConversionImageFormatProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    combinedImageSamplerDescriptorCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkSamplerYcbcrConversionImageFormatProperties = struct_VkSamplerYcbcrConversionImageFormatProperties;
pub const struct_VkDescriptorUpdateTemplateEntry = extern struct {
    dstBinding: u32 = @import("std").mem.zeroes(u32),
    dstArrayElement: u32 = @import("std").mem.zeroes(u32),
    descriptorCount: u32 = @import("std").mem.zeroes(u32),
    descriptorType: VkDescriptorType = @import("std").mem.zeroes(VkDescriptorType),
    offset: usize = @import("std").mem.zeroes(usize),
    stride: usize = @import("std").mem.zeroes(usize),
};
pub const VkDescriptorUpdateTemplateEntry = struct_VkDescriptorUpdateTemplateEntry;
pub const struct_VkDescriptorUpdateTemplateCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkDescriptorUpdateTemplateCreateFlags = @import("std").mem.zeroes(VkDescriptorUpdateTemplateCreateFlags),
    descriptorUpdateEntryCount: u32 = @import("std").mem.zeroes(u32),
    pDescriptorUpdateEntries: [*c]const VkDescriptorUpdateTemplateEntry = @import("std").mem.zeroes([*c]const VkDescriptorUpdateTemplateEntry),
    templateType: VkDescriptorUpdateTemplateType = @import("std").mem.zeroes(VkDescriptorUpdateTemplateType),
    descriptorSetLayout: VkDescriptorSetLayout = @import("std").mem.zeroes(VkDescriptorSetLayout),
    pipelineBindPoint: VkPipelineBindPoint = @import("std").mem.zeroes(VkPipelineBindPoint),
    pipelineLayout: VkPipelineLayout = @import("std").mem.zeroes(VkPipelineLayout),
    set: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDescriptorUpdateTemplateCreateInfo = struct_VkDescriptorUpdateTemplateCreateInfo;
pub const struct_VkExternalMemoryProperties = extern struct {
    externalMemoryFeatures: VkExternalMemoryFeatureFlags = @import("std").mem.zeroes(VkExternalMemoryFeatureFlags),
    exportFromImportedHandleTypes: VkExternalMemoryHandleTypeFlags = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlags),
    compatibleHandleTypes: VkExternalMemoryHandleTypeFlags = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlags),
};
pub const VkExternalMemoryProperties = struct_VkExternalMemoryProperties;
pub const struct_VkPhysicalDeviceExternalImageFormatInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    handleType: VkExternalMemoryHandleTypeFlagBits = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlagBits),
};
pub const VkPhysicalDeviceExternalImageFormatInfo = struct_VkPhysicalDeviceExternalImageFormatInfo;
pub const struct_VkExternalImageFormatProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    externalMemoryProperties: VkExternalMemoryProperties = @import("std").mem.zeroes(VkExternalMemoryProperties),
};
pub const VkExternalImageFormatProperties = struct_VkExternalImageFormatProperties;
pub const struct_VkPhysicalDeviceExternalBufferInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkBufferCreateFlags = @import("std").mem.zeroes(VkBufferCreateFlags),
    usage: VkBufferUsageFlags = @import("std").mem.zeroes(VkBufferUsageFlags),
    handleType: VkExternalMemoryHandleTypeFlagBits = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlagBits),
};
pub const VkPhysicalDeviceExternalBufferInfo = struct_VkPhysicalDeviceExternalBufferInfo;
pub const struct_VkExternalBufferProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    externalMemoryProperties: VkExternalMemoryProperties = @import("std").mem.zeroes(VkExternalMemoryProperties),
};
pub const VkExternalBufferProperties = struct_VkExternalBufferProperties;
pub const struct_VkPhysicalDeviceIDProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    deviceUUID: [16]u8 = @import("std").mem.zeroes([16]u8),
    driverUUID: [16]u8 = @import("std").mem.zeroes([16]u8),
    deviceLUID: [8]u8 = @import("std").mem.zeroes([8]u8),
    deviceNodeMask: u32 = @import("std").mem.zeroes(u32),
    deviceLUIDValid: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceIDProperties = struct_VkPhysicalDeviceIDProperties;
pub const struct_VkExternalMemoryImageCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    handleTypes: VkExternalMemoryHandleTypeFlags = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlags),
};
pub const VkExternalMemoryImageCreateInfo = struct_VkExternalMemoryImageCreateInfo;
pub const struct_VkExternalMemoryBufferCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    handleTypes: VkExternalMemoryHandleTypeFlags = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlags),
};
pub const VkExternalMemoryBufferCreateInfo = struct_VkExternalMemoryBufferCreateInfo;
pub const struct_VkExportMemoryAllocateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    handleTypes: VkExternalMemoryHandleTypeFlags = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlags),
};
pub const VkExportMemoryAllocateInfo = struct_VkExportMemoryAllocateInfo;
pub const struct_VkPhysicalDeviceExternalFenceInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    handleType: VkExternalFenceHandleTypeFlagBits = @import("std").mem.zeroes(VkExternalFenceHandleTypeFlagBits),
};
pub const VkPhysicalDeviceExternalFenceInfo = struct_VkPhysicalDeviceExternalFenceInfo;
pub const struct_VkExternalFenceProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    exportFromImportedHandleTypes: VkExternalFenceHandleTypeFlags = @import("std").mem.zeroes(VkExternalFenceHandleTypeFlags),
    compatibleHandleTypes: VkExternalFenceHandleTypeFlags = @import("std").mem.zeroes(VkExternalFenceHandleTypeFlags),
    externalFenceFeatures: VkExternalFenceFeatureFlags = @import("std").mem.zeroes(VkExternalFenceFeatureFlags),
};
pub const VkExternalFenceProperties = struct_VkExternalFenceProperties;
pub const struct_VkExportFenceCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    handleTypes: VkExternalFenceHandleTypeFlags = @import("std").mem.zeroes(VkExternalFenceHandleTypeFlags),
};
pub const VkExportFenceCreateInfo = struct_VkExportFenceCreateInfo;
pub const struct_VkExportSemaphoreCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    handleTypes: VkExternalSemaphoreHandleTypeFlags = @import("std").mem.zeroes(VkExternalSemaphoreHandleTypeFlags),
};
pub const VkExportSemaphoreCreateInfo = struct_VkExportSemaphoreCreateInfo;
pub const struct_VkPhysicalDeviceExternalSemaphoreInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    handleType: VkExternalSemaphoreHandleTypeFlagBits = @import("std").mem.zeroes(VkExternalSemaphoreHandleTypeFlagBits),
};
pub const VkPhysicalDeviceExternalSemaphoreInfo = struct_VkPhysicalDeviceExternalSemaphoreInfo;
pub const struct_VkExternalSemaphoreProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    exportFromImportedHandleTypes: VkExternalSemaphoreHandleTypeFlags = @import("std").mem.zeroes(VkExternalSemaphoreHandleTypeFlags),
    compatibleHandleTypes: VkExternalSemaphoreHandleTypeFlags = @import("std").mem.zeroes(VkExternalSemaphoreHandleTypeFlags),
    externalSemaphoreFeatures: VkExternalSemaphoreFeatureFlags = @import("std").mem.zeroes(VkExternalSemaphoreFeatureFlags),
};
pub const VkExternalSemaphoreProperties = struct_VkExternalSemaphoreProperties;
pub const struct_VkPhysicalDeviceMaintenance3Properties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxPerSetDescriptors: u32 = @import("std").mem.zeroes(u32),
    maxMemoryAllocationSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkPhysicalDeviceMaintenance3Properties = struct_VkPhysicalDeviceMaintenance3Properties;
pub const struct_VkDescriptorSetLayoutSupport = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    supported: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkDescriptorSetLayoutSupport = struct_VkDescriptorSetLayoutSupport;
pub const struct_VkPhysicalDeviceShaderDrawParametersFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderDrawParameters: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderDrawParametersFeatures = struct_VkPhysicalDeviceShaderDrawParametersFeatures;
pub const VkPhysicalDeviceShaderDrawParameterFeatures = VkPhysicalDeviceShaderDrawParametersFeatures;
pub const PFN_vkEnumerateInstanceVersion = ?*const fn ([*c]u32) callconv(.C) VkResult;
pub const PFN_vkBindBufferMemory2 = ?*const fn (VkDevice, u32, [*c]const VkBindBufferMemoryInfo) callconv(.C) VkResult;
pub const PFN_vkBindImageMemory2 = ?*const fn (VkDevice, u32, [*c]const VkBindImageMemoryInfo) callconv(.C) VkResult;
pub const PFN_vkGetDeviceGroupPeerMemoryFeatures = ?*const fn (VkDevice, u32, u32, u32, [*c]VkPeerMemoryFeatureFlags) callconv(.C) void;
pub const PFN_vkCmdSetDeviceMask = ?*const fn (VkCommandBuffer, u32) callconv(.C) void;
pub const PFN_vkCmdDispatchBase = ?*const fn (VkCommandBuffer, u32, u32, u32, u32, u32, u32) callconv(.C) void;
pub const PFN_vkEnumeratePhysicalDeviceGroups = ?*const fn (VkInstance, [*c]u32, [*c]VkPhysicalDeviceGroupProperties) callconv(.C) VkResult;
pub const PFN_vkGetImageMemoryRequirements2 = ?*const fn (VkDevice, [*c]const VkImageMemoryRequirementsInfo2, [*c]VkMemoryRequirements2) callconv(.C) void;
pub const PFN_vkGetBufferMemoryRequirements2 = ?*const fn (VkDevice, [*c]const VkBufferMemoryRequirementsInfo2, [*c]VkMemoryRequirements2) callconv(.C) void;
pub const PFN_vkGetImageSparseMemoryRequirements2 = ?*const fn (VkDevice, [*c]const VkImageSparseMemoryRequirementsInfo2, [*c]u32, [*c]VkSparseImageMemoryRequirements2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceFeatures2 = ?*const fn (VkPhysicalDevice, [*c]VkPhysicalDeviceFeatures2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceProperties2 = ?*const fn (VkPhysicalDevice, [*c]VkPhysicalDeviceProperties2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceFormatProperties2 = ?*const fn (VkPhysicalDevice, VkFormat, [*c]VkFormatProperties2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceImageFormatProperties2 = ?*const fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceImageFormatInfo2, [*c]VkImageFormatProperties2) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDeviceQueueFamilyProperties2 = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkQueueFamilyProperties2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceMemoryProperties2 = ?*const fn (VkPhysicalDevice, [*c]VkPhysicalDeviceMemoryProperties2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceSparseImageFormatProperties2 = ?*const fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceSparseImageFormatInfo2, [*c]u32, [*c]VkSparseImageFormatProperties2) callconv(.C) void;
pub const PFN_vkTrimCommandPool = ?*const fn (VkDevice, VkCommandPool, VkCommandPoolTrimFlags) callconv(.C) void;
pub const PFN_vkGetDeviceQueue2 = ?*const fn (VkDevice, [*c]const VkDeviceQueueInfo2, [*c]VkQueue) callconv(.C) void;
pub const PFN_vkCreateSamplerYcbcrConversion = ?*const fn (VkDevice, [*c]const VkSamplerYcbcrConversionCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkSamplerYcbcrConversion) callconv(.C) VkResult;
pub const PFN_vkDestroySamplerYcbcrConversion = ?*const fn (VkDevice, VkSamplerYcbcrConversion, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreateDescriptorUpdateTemplate = ?*const fn (VkDevice, [*c]const VkDescriptorUpdateTemplateCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkDescriptorUpdateTemplate) callconv(.C) VkResult;
pub const PFN_vkDestroyDescriptorUpdateTemplate = ?*const fn (VkDevice, VkDescriptorUpdateTemplate, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkUpdateDescriptorSetWithTemplate = ?*const fn (VkDevice, VkDescriptorSet, VkDescriptorUpdateTemplate, ?*const anyopaque) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceExternalBufferProperties = ?*const fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceExternalBufferInfo, [*c]VkExternalBufferProperties) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceExternalFenceProperties = ?*const fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceExternalFenceInfo, [*c]VkExternalFenceProperties) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceExternalSemaphoreProperties = ?*const fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceExternalSemaphoreInfo, [*c]VkExternalSemaphoreProperties) callconv(.C) void;
pub const PFN_vkGetDescriptorSetLayoutSupport = ?*const fn (VkDevice, [*c]const VkDescriptorSetLayoutCreateInfo, [*c]VkDescriptorSetLayoutSupport) callconv(.C) void;
pub extern fn vkEnumerateInstanceVersion(pApiVersion: [*c]u32) VkResult;
pub extern fn vkBindBufferMemory2(device: VkDevice, bindInfoCount: u32, pBindInfos: [*c]const VkBindBufferMemoryInfo) VkResult;
pub extern fn vkBindImageMemory2(device: VkDevice, bindInfoCount: u32, pBindInfos: [*c]const VkBindImageMemoryInfo) VkResult;
pub extern fn vkGetDeviceGroupPeerMemoryFeatures(device: VkDevice, heapIndex: u32, localDeviceIndex: u32, remoteDeviceIndex: u32, pPeerMemoryFeatures: [*c]VkPeerMemoryFeatureFlags) void;
pub extern fn vkCmdSetDeviceMask(commandBuffer: VkCommandBuffer, deviceMask: u32) void;
pub extern fn vkCmdDispatchBase(commandBuffer: VkCommandBuffer, baseGroupX: u32, baseGroupY: u32, baseGroupZ: u32, groupCountX: u32, groupCountY: u32, groupCountZ: u32) void;
pub extern fn vkEnumeratePhysicalDeviceGroups(instance: VkInstance, pPhysicalDeviceGroupCount: [*c]u32, pPhysicalDeviceGroupProperties: [*c]VkPhysicalDeviceGroupProperties) VkResult;
pub extern fn vkGetImageMemoryRequirements2(device: VkDevice, pInfo: [*c]const VkImageMemoryRequirementsInfo2, pMemoryRequirements: [*c]VkMemoryRequirements2) void;
pub extern fn vkGetBufferMemoryRequirements2(device: VkDevice, pInfo: [*c]const VkBufferMemoryRequirementsInfo2, pMemoryRequirements: [*c]VkMemoryRequirements2) void;
pub extern fn vkGetImageSparseMemoryRequirements2(device: VkDevice, pInfo: [*c]const VkImageSparseMemoryRequirementsInfo2, pSparseMemoryRequirementCount: [*c]u32, pSparseMemoryRequirements: [*c]VkSparseImageMemoryRequirements2) void;
pub extern fn vkGetPhysicalDeviceFeatures2(physicalDevice: VkPhysicalDevice, pFeatures: [*c]VkPhysicalDeviceFeatures2) void;
pub extern fn vkGetPhysicalDeviceProperties2(physicalDevice: VkPhysicalDevice, pProperties: [*c]VkPhysicalDeviceProperties2) void;
pub extern fn vkGetPhysicalDeviceFormatProperties2(physicalDevice: VkPhysicalDevice, format: VkFormat, pFormatProperties: [*c]VkFormatProperties2) void;
pub extern fn vkGetPhysicalDeviceImageFormatProperties2(physicalDevice: VkPhysicalDevice, pImageFormatInfo: [*c]const VkPhysicalDeviceImageFormatInfo2, pImageFormatProperties: [*c]VkImageFormatProperties2) VkResult;
pub extern fn vkGetPhysicalDeviceQueueFamilyProperties2(physicalDevice: VkPhysicalDevice, pQueueFamilyPropertyCount: [*c]u32, pQueueFamilyProperties: [*c]VkQueueFamilyProperties2) void;
pub extern fn vkGetPhysicalDeviceMemoryProperties2(physicalDevice: VkPhysicalDevice, pMemoryProperties: [*c]VkPhysicalDeviceMemoryProperties2) void;
pub extern fn vkGetPhysicalDeviceSparseImageFormatProperties2(physicalDevice: VkPhysicalDevice, pFormatInfo: [*c]const VkPhysicalDeviceSparseImageFormatInfo2, pPropertyCount: [*c]u32, pProperties: [*c]VkSparseImageFormatProperties2) void;
pub extern fn vkTrimCommandPool(device: VkDevice, commandPool: VkCommandPool, flags: VkCommandPoolTrimFlags) void;
pub extern fn vkGetDeviceQueue2(device: VkDevice, pQueueInfo: [*c]const VkDeviceQueueInfo2, pQueue: [*c]VkQueue) void;
pub extern fn vkCreateSamplerYcbcrConversion(device: VkDevice, pCreateInfo: [*c]const VkSamplerYcbcrConversionCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pYcbcrConversion: [*c]VkSamplerYcbcrConversion) VkResult;
pub extern fn vkDestroySamplerYcbcrConversion(device: VkDevice, ycbcrConversion: VkSamplerYcbcrConversion, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkCreateDescriptorUpdateTemplate(device: VkDevice, pCreateInfo: [*c]const VkDescriptorUpdateTemplateCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pDescriptorUpdateTemplate: [*c]VkDescriptorUpdateTemplate) VkResult;
pub extern fn vkDestroyDescriptorUpdateTemplate(device: VkDevice, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkUpdateDescriptorSetWithTemplate(device: VkDevice, descriptorSet: VkDescriptorSet, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, pData: ?*const anyopaque) void;
pub extern fn vkGetPhysicalDeviceExternalBufferProperties(physicalDevice: VkPhysicalDevice, pExternalBufferInfo: [*c]const VkPhysicalDeviceExternalBufferInfo, pExternalBufferProperties: [*c]VkExternalBufferProperties) void;
pub extern fn vkGetPhysicalDeviceExternalFenceProperties(physicalDevice: VkPhysicalDevice, pExternalFenceInfo: [*c]const VkPhysicalDeviceExternalFenceInfo, pExternalFenceProperties: [*c]VkExternalFenceProperties) void;
pub extern fn vkGetPhysicalDeviceExternalSemaphoreProperties(physicalDevice: VkPhysicalDevice, pExternalSemaphoreInfo: [*c]const VkPhysicalDeviceExternalSemaphoreInfo, pExternalSemaphoreProperties: [*c]VkExternalSemaphoreProperties) void;
pub extern fn vkGetDescriptorSetLayoutSupport(device: VkDevice, pCreateInfo: [*c]const VkDescriptorSetLayoutCreateInfo, pSupport: [*c]VkDescriptorSetLayoutSupport) void;
pub const VK_DRIVER_ID_AMD_PROPRIETARY: c_int = 1;
pub const VK_DRIVER_ID_AMD_OPEN_SOURCE: c_int = 2;
pub const VK_DRIVER_ID_MESA_RADV: c_int = 3;
pub const VK_DRIVER_ID_NVIDIA_PROPRIETARY: c_int = 4;
pub const VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS: c_int = 5;
pub const VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA: c_int = 6;
pub const VK_DRIVER_ID_IMAGINATION_PROPRIETARY: c_int = 7;
pub const VK_DRIVER_ID_QUALCOMM_PROPRIETARY: c_int = 8;
pub const VK_DRIVER_ID_ARM_PROPRIETARY: c_int = 9;
pub const VK_DRIVER_ID_GOOGLE_SWIFTSHADER: c_int = 10;
pub const VK_DRIVER_ID_GGP_PROPRIETARY: c_int = 11;
pub const VK_DRIVER_ID_BROADCOM_PROPRIETARY: c_int = 12;
pub const VK_DRIVER_ID_MESA_LLVMPIPE: c_int = 13;
pub const VK_DRIVER_ID_MOLTENVK: c_int = 14;
pub const VK_DRIVER_ID_COREAVI_PROPRIETARY: c_int = 15;
pub const VK_DRIVER_ID_JUICE_PROPRIETARY: c_int = 16;
pub const VK_DRIVER_ID_VERISILICON_PROPRIETARY: c_int = 17;
pub const VK_DRIVER_ID_MESA_TURNIP: c_int = 18;
pub const VK_DRIVER_ID_MESA_V3DV: c_int = 19;
pub const VK_DRIVER_ID_MESA_PANVK: c_int = 20;
pub const VK_DRIVER_ID_SAMSUNG_PROPRIETARY: c_int = 21;
pub const VK_DRIVER_ID_MESA_VENUS: c_int = 22;
pub const VK_DRIVER_ID_MESA_DOZEN: c_int = 23;
pub const VK_DRIVER_ID_MESA_NVK: c_int = 24;
pub const VK_DRIVER_ID_IMAGINATION_OPEN_SOURCE_MESA: c_int = 25;
pub const VK_DRIVER_ID_MESA_HONEYKRISP: c_int = 26;
pub const VK_DRIVER_ID_RESERVED_27: c_int = 27;
pub const VK_DRIVER_ID_AMD_PROPRIETARY_KHR: c_int = 1;
pub const VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR: c_int = 2;
pub const VK_DRIVER_ID_MESA_RADV_KHR: c_int = 3;
pub const VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR: c_int = 4;
pub const VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR: c_int = 5;
pub const VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR: c_int = 6;
pub const VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR: c_int = 7;
pub const VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR: c_int = 8;
pub const VK_DRIVER_ID_ARM_PROPRIETARY_KHR: c_int = 9;
pub const VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR: c_int = 10;
pub const VK_DRIVER_ID_GGP_PROPRIETARY_KHR: c_int = 11;
pub const VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR: c_int = 12;
pub const VK_DRIVER_ID_MAX_ENUM: c_int = 2147483647;
pub const enum_VkDriverId = c_uint;
pub const VkDriverId = enum_VkDriverId;
pub const VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY: c_int = 0;
pub const VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL: c_int = 1;
pub const VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE: c_int = 2;
pub const VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR: c_int = 0;
pub const VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR: c_int = 1;
pub const VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR: c_int = 2;
pub const VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkShaderFloatControlsIndependence = c_uint;
pub const VkShaderFloatControlsIndependence = enum_VkShaderFloatControlsIndependence;
pub const VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE: c_int = 0;
pub const VK_SAMPLER_REDUCTION_MODE_MIN: c_int = 1;
pub const VK_SAMPLER_REDUCTION_MODE_MAX: c_int = 2;
pub const VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_RANGECLAMP_QCOM: c_int = 1000521000;
pub const VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT: c_int = 0;
pub const VK_SAMPLER_REDUCTION_MODE_MIN_EXT: c_int = 1;
pub const VK_SAMPLER_REDUCTION_MODE_MAX_EXT: c_int = 2;
pub const VK_SAMPLER_REDUCTION_MODE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSamplerReductionMode = c_uint;
pub const VkSamplerReductionMode = enum_VkSamplerReductionMode;
pub const VK_SEMAPHORE_TYPE_BINARY: c_int = 0;
pub const VK_SEMAPHORE_TYPE_TIMELINE: c_int = 1;
pub const VK_SEMAPHORE_TYPE_BINARY_KHR: c_int = 0;
pub const VK_SEMAPHORE_TYPE_TIMELINE_KHR: c_int = 1;
pub const VK_SEMAPHORE_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSemaphoreType = c_uint;
pub const VkSemaphoreType = enum_VkSemaphoreType;
pub const VK_RESOLVE_MODE_NONE: c_int = 0;
pub const VK_RESOLVE_MODE_SAMPLE_ZERO_BIT: c_int = 1;
pub const VK_RESOLVE_MODE_AVERAGE_BIT: c_int = 2;
pub const VK_RESOLVE_MODE_MIN_BIT: c_int = 4;
pub const VK_RESOLVE_MODE_MAX_BIT: c_int = 8;
pub const VK_RESOLVE_MODE_EXTERNAL_FORMAT_DOWNSAMPLE_ANDROID: c_int = 16;
pub const VK_RESOLVE_MODE_NONE_KHR: c_int = 0;
pub const VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR: c_int = 1;
pub const VK_RESOLVE_MODE_AVERAGE_BIT_KHR: c_int = 2;
pub const VK_RESOLVE_MODE_MIN_BIT_KHR: c_int = 4;
pub const VK_RESOLVE_MODE_MAX_BIT_KHR: c_int = 8;
pub const VK_RESOLVE_MODE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkResolveModeFlagBits = c_uint;
pub const VkResolveModeFlagBits = enum_VkResolveModeFlagBits;
pub const VkResolveModeFlags = VkFlags;
pub const VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT: c_int = 1;
pub const VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT: c_int = 2;
pub const VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT: c_int = 4;
pub const VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT: c_int = 8;
pub const VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT: c_int = 1;
pub const VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT: c_int = 2;
pub const VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT: c_int = 4;
pub const VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT: c_int = 8;
pub const VK_DESCRIPTOR_BINDING_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkDescriptorBindingFlagBits = c_uint;
pub const VkDescriptorBindingFlagBits = enum_VkDescriptorBindingFlagBits;
pub const VkDescriptorBindingFlags = VkFlags;
pub const VK_SEMAPHORE_WAIT_ANY_BIT: c_int = 1;
pub const VK_SEMAPHORE_WAIT_ANY_BIT_KHR: c_int = 1;
pub const VK_SEMAPHORE_WAIT_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSemaphoreWaitFlagBits = c_uint;
pub const VkSemaphoreWaitFlagBits = enum_VkSemaphoreWaitFlagBits;
pub const VkSemaphoreWaitFlags = VkFlags;
pub const struct_VkPhysicalDeviceVulkan11Features = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    storageBuffer16BitAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    uniformAndStorageBuffer16BitAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    storagePushConstant16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    storageInputOutput16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    multiview: VkBool32 = @import("std").mem.zeroes(VkBool32),
    multiviewGeometryShader: VkBool32 = @import("std").mem.zeroes(VkBool32),
    multiviewTessellationShader: VkBool32 = @import("std").mem.zeroes(VkBool32),
    variablePointersStorageBuffer: VkBool32 = @import("std").mem.zeroes(VkBool32),
    variablePointers: VkBool32 = @import("std").mem.zeroes(VkBool32),
    protectedMemory: VkBool32 = @import("std").mem.zeroes(VkBool32),
    samplerYcbcrConversion: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderDrawParameters: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceVulkan11Features = struct_VkPhysicalDeviceVulkan11Features;
pub const struct_VkPhysicalDeviceVulkan11Properties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    deviceUUID: [16]u8 = @import("std").mem.zeroes([16]u8),
    driverUUID: [16]u8 = @import("std").mem.zeroes([16]u8),
    deviceLUID: [8]u8 = @import("std").mem.zeroes([8]u8),
    deviceNodeMask: u32 = @import("std").mem.zeroes(u32),
    deviceLUIDValid: VkBool32 = @import("std").mem.zeroes(VkBool32),
    subgroupSize: u32 = @import("std").mem.zeroes(u32),
    subgroupSupportedStages: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    subgroupSupportedOperations: VkSubgroupFeatureFlags = @import("std").mem.zeroes(VkSubgroupFeatureFlags),
    subgroupQuadOperationsInAllStages: VkBool32 = @import("std").mem.zeroes(VkBool32),
    pointClippingBehavior: VkPointClippingBehavior = @import("std").mem.zeroes(VkPointClippingBehavior),
    maxMultiviewViewCount: u32 = @import("std").mem.zeroes(u32),
    maxMultiviewInstanceIndex: u32 = @import("std").mem.zeroes(u32),
    protectedNoFault: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxPerSetDescriptors: u32 = @import("std").mem.zeroes(u32),
    maxMemoryAllocationSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkPhysicalDeviceVulkan11Properties = struct_VkPhysicalDeviceVulkan11Properties;
pub const struct_VkPhysicalDeviceVulkan12Features = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    samplerMirrorClampToEdge: VkBool32 = @import("std").mem.zeroes(VkBool32),
    drawIndirectCount: VkBool32 = @import("std").mem.zeroes(VkBool32),
    storageBuffer8BitAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    uniformAndStorageBuffer8BitAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    storagePushConstant8: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderBufferInt64Atomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSharedInt64Atomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderFloat16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderInt8: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderInputAttachmentArrayDynamicIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderUniformTexelBufferArrayDynamicIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageTexelBufferArrayDynamicIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderUniformBufferArrayNonUniformIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSampledImageArrayNonUniformIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageBufferArrayNonUniformIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageImageArrayNonUniformIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderInputAttachmentArrayNonUniformIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderUniformTexelBufferArrayNonUniformIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageTexelBufferArrayNonUniformIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingUniformBufferUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingSampledImageUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingStorageImageUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingStorageBufferUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingUniformTexelBufferUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingStorageTexelBufferUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingUpdateUnusedWhilePending: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingPartiallyBound: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingVariableDescriptorCount: VkBool32 = @import("std").mem.zeroes(VkBool32),
    runtimeDescriptorArray: VkBool32 = @import("std").mem.zeroes(VkBool32),
    samplerFilterMinmax: VkBool32 = @import("std").mem.zeroes(VkBool32),
    scalarBlockLayout: VkBool32 = @import("std").mem.zeroes(VkBool32),
    imagelessFramebuffer: VkBool32 = @import("std").mem.zeroes(VkBool32),
    uniformBufferStandardLayout: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSubgroupExtendedTypes: VkBool32 = @import("std").mem.zeroes(VkBool32),
    separateDepthStencilLayouts: VkBool32 = @import("std").mem.zeroes(VkBool32),
    hostQueryReset: VkBool32 = @import("std").mem.zeroes(VkBool32),
    timelineSemaphore: VkBool32 = @import("std").mem.zeroes(VkBool32),
    bufferDeviceAddress: VkBool32 = @import("std").mem.zeroes(VkBool32),
    bufferDeviceAddressCaptureReplay: VkBool32 = @import("std").mem.zeroes(VkBool32),
    bufferDeviceAddressMultiDevice: VkBool32 = @import("std").mem.zeroes(VkBool32),
    vulkanMemoryModel: VkBool32 = @import("std").mem.zeroes(VkBool32),
    vulkanMemoryModelDeviceScope: VkBool32 = @import("std").mem.zeroes(VkBool32),
    vulkanMemoryModelAvailabilityVisibilityChains: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderOutputViewportIndex: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderOutputLayer: VkBool32 = @import("std").mem.zeroes(VkBool32),
    subgroupBroadcastDynamicId: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceVulkan12Features = struct_VkPhysicalDeviceVulkan12Features;
pub const struct_VkConformanceVersion = extern struct {
    major: u8 = @import("std").mem.zeroes(u8),
    minor: u8 = @import("std").mem.zeroes(u8),
    subminor: u8 = @import("std").mem.zeroes(u8),
    patch: u8 = @import("std").mem.zeroes(u8),
};
pub const VkConformanceVersion = struct_VkConformanceVersion;
pub const struct_VkPhysicalDeviceVulkan12Properties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    driverID: VkDriverId = @import("std").mem.zeroes(VkDriverId),
    driverName: [256]u8 = @import("std").mem.zeroes([256]u8),
    driverInfo: [256]u8 = @import("std").mem.zeroes([256]u8),
    conformanceVersion: VkConformanceVersion = @import("std").mem.zeroes(VkConformanceVersion),
    denormBehaviorIndependence: VkShaderFloatControlsIndependence = @import("std").mem.zeroes(VkShaderFloatControlsIndependence),
    roundingModeIndependence: VkShaderFloatControlsIndependence = @import("std").mem.zeroes(VkShaderFloatControlsIndependence),
    shaderSignedZeroInfNanPreserveFloat16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSignedZeroInfNanPreserveFloat32: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSignedZeroInfNanPreserveFloat64: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderDenormPreserveFloat16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderDenormPreserveFloat32: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderDenormPreserveFloat64: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderDenormFlushToZeroFloat16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderDenormFlushToZeroFloat32: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderDenormFlushToZeroFloat64: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderRoundingModeRTEFloat16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderRoundingModeRTEFloat32: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderRoundingModeRTEFloat64: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderRoundingModeRTZFloat16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderRoundingModeRTZFloat32: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderRoundingModeRTZFloat64: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxUpdateAfterBindDescriptorsInAllPools: u32 = @import("std").mem.zeroes(u32),
    shaderUniformBufferArrayNonUniformIndexingNative: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSampledImageArrayNonUniformIndexingNative: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageBufferArrayNonUniformIndexingNative: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageImageArrayNonUniformIndexingNative: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderInputAttachmentArrayNonUniformIndexingNative: VkBool32 = @import("std").mem.zeroes(VkBool32),
    robustBufferAccessUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    quadDivergentImplicitLod: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxPerStageDescriptorUpdateAfterBindSamplers: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorUpdateAfterBindUniformBuffers: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorUpdateAfterBindStorageBuffers: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorUpdateAfterBindSampledImages: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorUpdateAfterBindStorageImages: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorUpdateAfterBindInputAttachments: u32 = @import("std").mem.zeroes(u32),
    maxPerStageUpdateAfterBindResources: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindSamplers: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindUniformBuffers: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindStorageBuffers: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindSampledImages: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindStorageImages: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindInputAttachments: u32 = @import("std").mem.zeroes(u32),
    supportedDepthResolveModes: VkResolveModeFlags = @import("std").mem.zeroes(VkResolveModeFlags),
    supportedStencilResolveModes: VkResolveModeFlags = @import("std").mem.zeroes(VkResolveModeFlags),
    independentResolveNone: VkBool32 = @import("std").mem.zeroes(VkBool32),
    independentResolve: VkBool32 = @import("std").mem.zeroes(VkBool32),
    filterMinmaxSingleComponentFormats: VkBool32 = @import("std").mem.zeroes(VkBool32),
    filterMinmaxImageComponentMapping: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxTimelineSemaphoreValueDifference: u64 = @import("std").mem.zeroes(u64),
    framebufferIntegerColorSampleCounts: VkSampleCountFlags = @import("std").mem.zeroes(VkSampleCountFlags),
};
pub const VkPhysicalDeviceVulkan12Properties = struct_VkPhysicalDeviceVulkan12Properties;
pub const struct_VkImageFormatListCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    viewFormatCount: u32 = @import("std").mem.zeroes(u32),
    pViewFormats: [*c]const VkFormat = @import("std").mem.zeroes([*c]const VkFormat),
};
pub const VkImageFormatListCreateInfo = struct_VkImageFormatListCreateInfo;
pub const struct_VkAttachmentDescription2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkAttachmentDescriptionFlags = @import("std").mem.zeroes(VkAttachmentDescriptionFlags),
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
    samples: VkSampleCountFlagBits = @import("std").mem.zeroes(VkSampleCountFlagBits),
    loadOp: VkAttachmentLoadOp = @import("std").mem.zeroes(VkAttachmentLoadOp),
    storeOp: VkAttachmentStoreOp = @import("std").mem.zeroes(VkAttachmentStoreOp),
    stencilLoadOp: VkAttachmentLoadOp = @import("std").mem.zeroes(VkAttachmentLoadOp),
    stencilStoreOp: VkAttachmentStoreOp = @import("std").mem.zeroes(VkAttachmentStoreOp),
    initialLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    finalLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
};
pub const VkAttachmentDescription2 = struct_VkAttachmentDescription2;
pub const struct_VkAttachmentReference2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    attachment: u32 = @import("std").mem.zeroes(u32),
    layout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    aspectMask: VkImageAspectFlags = @import("std").mem.zeroes(VkImageAspectFlags),
};
pub const VkAttachmentReference2 = struct_VkAttachmentReference2;
pub const struct_VkSubpassDescription2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkSubpassDescriptionFlags = @import("std").mem.zeroes(VkSubpassDescriptionFlags),
    pipelineBindPoint: VkPipelineBindPoint = @import("std").mem.zeroes(VkPipelineBindPoint),
    viewMask: u32 = @import("std").mem.zeroes(u32),
    inputAttachmentCount: u32 = @import("std").mem.zeroes(u32),
    pInputAttachments: [*c]const VkAttachmentReference2 = @import("std").mem.zeroes([*c]const VkAttachmentReference2),
    colorAttachmentCount: u32 = @import("std").mem.zeroes(u32),
    pColorAttachments: [*c]const VkAttachmentReference2 = @import("std").mem.zeroes([*c]const VkAttachmentReference2),
    pResolveAttachments: [*c]const VkAttachmentReference2 = @import("std").mem.zeroes([*c]const VkAttachmentReference2),
    pDepthStencilAttachment: [*c]const VkAttachmentReference2 = @import("std").mem.zeroes([*c]const VkAttachmentReference2),
    preserveAttachmentCount: u32 = @import("std").mem.zeroes(u32),
    pPreserveAttachments: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkSubpassDescription2 = struct_VkSubpassDescription2;
pub const struct_VkSubpassDependency2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcSubpass: u32 = @import("std").mem.zeroes(u32),
    dstSubpass: u32 = @import("std").mem.zeroes(u32),
    srcStageMask: VkPipelineStageFlags = @import("std").mem.zeroes(VkPipelineStageFlags),
    dstStageMask: VkPipelineStageFlags = @import("std").mem.zeroes(VkPipelineStageFlags),
    srcAccessMask: VkAccessFlags = @import("std").mem.zeroes(VkAccessFlags),
    dstAccessMask: VkAccessFlags = @import("std").mem.zeroes(VkAccessFlags),
    dependencyFlags: VkDependencyFlags = @import("std").mem.zeroes(VkDependencyFlags),
    viewOffset: i32 = @import("std").mem.zeroes(i32),
};
pub const VkSubpassDependency2 = struct_VkSubpassDependency2;
pub const struct_VkRenderPassCreateInfo2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkRenderPassCreateFlags = @import("std").mem.zeroes(VkRenderPassCreateFlags),
    attachmentCount: u32 = @import("std").mem.zeroes(u32),
    pAttachments: [*c]const VkAttachmentDescription2 = @import("std").mem.zeroes([*c]const VkAttachmentDescription2),
    subpassCount: u32 = @import("std").mem.zeroes(u32),
    pSubpasses: [*c]const VkSubpassDescription2 = @import("std").mem.zeroes([*c]const VkSubpassDescription2),
    dependencyCount: u32 = @import("std").mem.zeroes(u32),
    pDependencies: [*c]const VkSubpassDependency2 = @import("std").mem.zeroes([*c]const VkSubpassDependency2),
    correlatedViewMaskCount: u32 = @import("std").mem.zeroes(u32),
    pCorrelatedViewMasks: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkRenderPassCreateInfo2 = struct_VkRenderPassCreateInfo2;
pub const struct_VkSubpassBeginInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    contents: VkSubpassContents = @import("std").mem.zeroes(VkSubpassContents),
};
pub const VkSubpassBeginInfo = struct_VkSubpassBeginInfo;
pub const struct_VkSubpassEndInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const VkSubpassEndInfo = struct_VkSubpassEndInfo;
pub const struct_VkPhysicalDevice8BitStorageFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    storageBuffer8BitAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    uniformAndStorageBuffer8BitAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    storagePushConstant8: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevice8BitStorageFeatures = struct_VkPhysicalDevice8BitStorageFeatures;
pub const struct_VkPhysicalDeviceDriverProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    driverID: VkDriverId = @import("std").mem.zeroes(VkDriverId),
    driverName: [256]u8 = @import("std").mem.zeroes([256]u8),
    driverInfo: [256]u8 = @import("std").mem.zeroes([256]u8),
    conformanceVersion: VkConformanceVersion = @import("std").mem.zeroes(VkConformanceVersion),
};
pub const VkPhysicalDeviceDriverProperties = struct_VkPhysicalDeviceDriverProperties;
pub const struct_VkPhysicalDeviceShaderAtomicInt64Features = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderBufferInt64Atomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSharedInt64Atomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderAtomicInt64Features = struct_VkPhysicalDeviceShaderAtomicInt64Features;
pub const struct_VkPhysicalDeviceShaderFloat16Int8Features = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderFloat16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderInt8: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderFloat16Int8Features = struct_VkPhysicalDeviceShaderFloat16Int8Features;
pub const struct_VkPhysicalDeviceFloatControlsProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    denormBehaviorIndependence: VkShaderFloatControlsIndependence = @import("std").mem.zeroes(VkShaderFloatControlsIndependence),
    roundingModeIndependence: VkShaderFloatControlsIndependence = @import("std").mem.zeroes(VkShaderFloatControlsIndependence),
    shaderSignedZeroInfNanPreserveFloat16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSignedZeroInfNanPreserveFloat32: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSignedZeroInfNanPreserveFloat64: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderDenormPreserveFloat16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderDenormPreserveFloat32: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderDenormPreserveFloat64: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderDenormFlushToZeroFloat16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderDenormFlushToZeroFloat32: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderDenormFlushToZeroFloat64: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderRoundingModeRTEFloat16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderRoundingModeRTEFloat32: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderRoundingModeRTEFloat64: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderRoundingModeRTZFloat16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderRoundingModeRTZFloat32: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderRoundingModeRTZFloat64: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceFloatControlsProperties = struct_VkPhysicalDeviceFloatControlsProperties;
pub const struct_VkDescriptorSetLayoutBindingFlagsCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    bindingCount: u32 = @import("std").mem.zeroes(u32),
    pBindingFlags: [*c]const VkDescriptorBindingFlags = @import("std").mem.zeroes([*c]const VkDescriptorBindingFlags),
};
pub const VkDescriptorSetLayoutBindingFlagsCreateInfo = struct_VkDescriptorSetLayoutBindingFlagsCreateInfo;
pub const struct_VkPhysicalDeviceDescriptorIndexingFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderInputAttachmentArrayDynamicIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderUniformTexelBufferArrayDynamicIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageTexelBufferArrayDynamicIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderUniformBufferArrayNonUniformIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSampledImageArrayNonUniformIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageBufferArrayNonUniformIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageImageArrayNonUniformIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderInputAttachmentArrayNonUniformIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderUniformTexelBufferArrayNonUniformIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageTexelBufferArrayNonUniformIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingUniformBufferUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingSampledImageUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingStorageImageUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingStorageBufferUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingUniformTexelBufferUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingStorageTexelBufferUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingUpdateUnusedWhilePending: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingPartiallyBound: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingVariableDescriptorCount: VkBool32 = @import("std").mem.zeroes(VkBool32),
    runtimeDescriptorArray: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceDescriptorIndexingFeatures = struct_VkPhysicalDeviceDescriptorIndexingFeatures;
pub const struct_VkPhysicalDeviceDescriptorIndexingProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxUpdateAfterBindDescriptorsInAllPools: u32 = @import("std").mem.zeroes(u32),
    shaderUniformBufferArrayNonUniformIndexingNative: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSampledImageArrayNonUniformIndexingNative: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageBufferArrayNonUniformIndexingNative: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageImageArrayNonUniformIndexingNative: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderInputAttachmentArrayNonUniformIndexingNative: VkBool32 = @import("std").mem.zeroes(VkBool32),
    robustBufferAccessUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    quadDivergentImplicitLod: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxPerStageDescriptorUpdateAfterBindSamplers: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorUpdateAfterBindUniformBuffers: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorUpdateAfterBindStorageBuffers: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorUpdateAfterBindSampledImages: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorUpdateAfterBindStorageImages: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorUpdateAfterBindInputAttachments: u32 = @import("std").mem.zeroes(u32),
    maxPerStageUpdateAfterBindResources: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindSamplers: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindUniformBuffers: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindStorageBuffers: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindSampledImages: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindStorageImages: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindInputAttachments: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceDescriptorIndexingProperties = struct_VkPhysicalDeviceDescriptorIndexingProperties;
pub const struct_VkDescriptorSetVariableDescriptorCountAllocateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    descriptorSetCount: u32 = @import("std").mem.zeroes(u32),
    pDescriptorCounts: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkDescriptorSetVariableDescriptorCountAllocateInfo = struct_VkDescriptorSetVariableDescriptorCountAllocateInfo;
pub const struct_VkDescriptorSetVariableDescriptorCountLayoutSupport = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxVariableDescriptorCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDescriptorSetVariableDescriptorCountLayoutSupport = struct_VkDescriptorSetVariableDescriptorCountLayoutSupport;
pub const struct_VkSubpassDescriptionDepthStencilResolve = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    depthResolveMode: VkResolveModeFlagBits = @import("std").mem.zeroes(VkResolveModeFlagBits),
    stencilResolveMode: VkResolveModeFlagBits = @import("std").mem.zeroes(VkResolveModeFlagBits),
    pDepthStencilResolveAttachment: [*c]const VkAttachmentReference2 = @import("std").mem.zeroes([*c]const VkAttachmentReference2),
};
pub const VkSubpassDescriptionDepthStencilResolve = struct_VkSubpassDescriptionDepthStencilResolve;
pub const struct_VkPhysicalDeviceDepthStencilResolveProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    supportedDepthResolveModes: VkResolveModeFlags = @import("std").mem.zeroes(VkResolveModeFlags),
    supportedStencilResolveModes: VkResolveModeFlags = @import("std").mem.zeroes(VkResolveModeFlags),
    independentResolveNone: VkBool32 = @import("std").mem.zeroes(VkBool32),
    independentResolve: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceDepthStencilResolveProperties = struct_VkPhysicalDeviceDepthStencilResolveProperties;
pub const struct_VkPhysicalDeviceScalarBlockLayoutFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    scalarBlockLayout: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceScalarBlockLayoutFeatures = struct_VkPhysicalDeviceScalarBlockLayoutFeatures;
pub const struct_VkImageStencilUsageCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stencilUsage: VkImageUsageFlags = @import("std").mem.zeroes(VkImageUsageFlags),
};
pub const VkImageStencilUsageCreateInfo = struct_VkImageStencilUsageCreateInfo;
pub const struct_VkSamplerReductionModeCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    reductionMode: VkSamplerReductionMode = @import("std").mem.zeroes(VkSamplerReductionMode),
};
pub const VkSamplerReductionModeCreateInfo = struct_VkSamplerReductionModeCreateInfo;
pub const struct_VkPhysicalDeviceSamplerFilterMinmaxProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    filterMinmaxSingleComponentFormats: VkBool32 = @import("std").mem.zeroes(VkBool32),
    filterMinmaxImageComponentMapping: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceSamplerFilterMinmaxProperties = struct_VkPhysicalDeviceSamplerFilterMinmaxProperties;
pub const struct_VkPhysicalDeviceVulkanMemoryModelFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    vulkanMemoryModel: VkBool32 = @import("std").mem.zeroes(VkBool32),
    vulkanMemoryModelDeviceScope: VkBool32 = @import("std").mem.zeroes(VkBool32),
    vulkanMemoryModelAvailabilityVisibilityChains: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceVulkanMemoryModelFeatures = struct_VkPhysicalDeviceVulkanMemoryModelFeatures;
pub const struct_VkPhysicalDeviceImagelessFramebufferFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    imagelessFramebuffer: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceImagelessFramebufferFeatures = struct_VkPhysicalDeviceImagelessFramebufferFeatures;
pub const struct_VkFramebufferAttachmentImageInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkImageCreateFlags = @import("std").mem.zeroes(VkImageCreateFlags),
    usage: VkImageUsageFlags = @import("std").mem.zeroes(VkImageUsageFlags),
    width: u32 = @import("std").mem.zeroes(u32),
    height: u32 = @import("std").mem.zeroes(u32),
    layerCount: u32 = @import("std").mem.zeroes(u32),
    viewFormatCount: u32 = @import("std").mem.zeroes(u32),
    pViewFormats: [*c]const VkFormat = @import("std").mem.zeroes([*c]const VkFormat),
};
pub const VkFramebufferAttachmentImageInfo = struct_VkFramebufferAttachmentImageInfo;
pub const struct_VkFramebufferAttachmentsCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    attachmentImageInfoCount: u32 = @import("std").mem.zeroes(u32),
    pAttachmentImageInfos: [*c]const VkFramebufferAttachmentImageInfo = @import("std").mem.zeroes([*c]const VkFramebufferAttachmentImageInfo),
};
pub const VkFramebufferAttachmentsCreateInfo = struct_VkFramebufferAttachmentsCreateInfo;
pub const struct_VkRenderPassAttachmentBeginInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    attachmentCount: u32 = @import("std").mem.zeroes(u32),
    pAttachments: [*c]const VkImageView = @import("std").mem.zeroes([*c]const VkImageView),
};
pub const VkRenderPassAttachmentBeginInfo = struct_VkRenderPassAttachmentBeginInfo;
pub const struct_VkPhysicalDeviceUniformBufferStandardLayoutFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    uniformBufferStandardLayout: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceUniformBufferStandardLayoutFeatures = struct_VkPhysicalDeviceUniformBufferStandardLayoutFeatures;
pub const struct_VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderSubgroupExtendedTypes: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures = struct_VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures;
pub const struct_VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    separateDepthStencilLayouts: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures = struct_VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures;
pub const struct_VkAttachmentReferenceStencilLayout = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    stencilLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
};
pub const VkAttachmentReferenceStencilLayout = struct_VkAttachmentReferenceStencilLayout;
pub const struct_VkAttachmentDescriptionStencilLayout = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    stencilInitialLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    stencilFinalLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
};
pub const VkAttachmentDescriptionStencilLayout = struct_VkAttachmentDescriptionStencilLayout;
pub const struct_VkPhysicalDeviceHostQueryResetFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    hostQueryReset: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceHostQueryResetFeatures = struct_VkPhysicalDeviceHostQueryResetFeatures;
pub const struct_VkPhysicalDeviceTimelineSemaphoreFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    timelineSemaphore: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceTimelineSemaphoreFeatures = struct_VkPhysicalDeviceTimelineSemaphoreFeatures;
pub const struct_VkPhysicalDeviceTimelineSemaphoreProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxTimelineSemaphoreValueDifference: u64 = @import("std").mem.zeroes(u64),
};
pub const VkPhysicalDeviceTimelineSemaphoreProperties = struct_VkPhysicalDeviceTimelineSemaphoreProperties;
pub const struct_VkSemaphoreTypeCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    semaphoreType: VkSemaphoreType = @import("std").mem.zeroes(VkSemaphoreType),
    initialValue: u64 = @import("std").mem.zeroes(u64),
};
pub const VkSemaphoreTypeCreateInfo = struct_VkSemaphoreTypeCreateInfo;
pub const struct_VkTimelineSemaphoreSubmitInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    waitSemaphoreValueCount: u32 = @import("std").mem.zeroes(u32),
    pWaitSemaphoreValues: [*c]const u64 = @import("std").mem.zeroes([*c]const u64),
    signalSemaphoreValueCount: u32 = @import("std").mem.zeroes(u32),
    pSignalSemaphoreValues: [*c]const u64 = @import("std").mem.zeroes([*c]const u64),
};
pub const VkTimelineSemaphoreSubmitInfo = struct_VkTimelineSemaphoreSubmitInfo;
pub const struct_VkSemaphoreWaitInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkSemaphoreWaitFlags = @import("std").mem.zeroes(VkSemaphoreWaitFlags),
    semaphoreCount: u32 = @import("std").mem.zeroes(u32),
    pSemaphores: [*c]const VkSemaphore = @import("std").mem.zeroes([*c]const VkSemaphore),
    pValues: [*c]const u64 = @import("std").mem.zeroes([*c]const u64),
};
pub const VkSemaphoreWaitInfo = struct_VkSemaphoreWaitInfo;
pub const struct_VkSemaphoreSignalInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    semaphore: VkSemaphore = @import("std").mem.zeroes(VkSemaphore),
    value: u64 = @import("std").mem.zeroes(u64),
};
pub const VkSemaphoreSignalInfo = struct_VkSemaphoreSignalInfo;
pub const struct_VkPhysicalDeviceBufferDeviceAddressFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    bufferDeviceAddress: VkBool32 = @import("std").mem.zeroes(VkBool32),
    bufferDeviceAddressCaptureReplay: VkBool32 = @import("std").mem.zeroes(VkBool32),
    bufferDeviceAddressMultiDevice: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceBufferDeviceAddressFeatures = struct_VkPhysicalDeviceBufferDeviceAddressFeatures;
pub const struct_VkBufferDeviceAddressInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
};
pub const VkBufferDeviceAddressInfo = struct_VkBufferDeviceAddressInfo;
pub const struct_VkBufferOpaqueCaptureAddressCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    opaqueCaptureAddress: u64 = @import("std").mem.zeroes(u64),
};
pub const VkBufferOpaqueCaptureAddressCreateInfo = struct_VkBufferOpaqueCaptureAddressCreateInfo;
pub const struct_VkMemoryOpaqueCaptureAddressAllocateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    opaqueCaptureAddress: u64 = @import("std").mem.zeroes(u64),
};
pub const VkMemoryOpaqueCaptureAddressAllocateInfo = struct_VkMemoryOpaqueCaptureAddressAllocateInfo;
pub const struct_VkDeviceMemoryOpaqueCaptureAddressInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    memory: VkDeviceMemory = @import("std").mem.zeroes(VkDeviceMemory),
};
pub const VkDeviceMemoryOpaqueCaptureAddressInfo = struct_VkDeviceMemoryOpaqueCaptureAddressInfo;
pub const PFN_vkCmdDrawIndirectCount = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawIndexedIndirectCount = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, u32, u32) callconv(.C) void;
pub const PFN_vkCreateRenderPass2 = ?*const fn (VkDevice, [*c]const VkRenderPassCreateInfo2, [*c]const VkAllocationCallbacks, [*c]VkRenderPass) callconv(.C) VkResult;
pub const PFN_vkCmdBeginRenderPass2 = ?*const fn (VkCommandBuffer, [*c]const VkRenderPassBeginInfo, [*c]const VkSubpassBeginInfo) callconv(.C) void;
pub const PFN_vkCmdNextSubpass2 = ?*const fn (VkCommandBuffer, [*c]const VkSubpassBeginInfo, [*c]const VkSubpassEndInfo) callconv(.C) void;
pub const PFN_vkCmdEndRenderPass2 = ?*const fn (VkCommandBuffer, [*c]const VkSubpassEndInfo) callconv(.C) void;
pub const PFN_vkResetQueryPool = ?*const fn (VkDevice, VkQueryPool, u32, u32) callconv(.C) void;
pub const PFN_vkGetSemaphoreCounterValue = ?*const fn (VkDevice, VkSemaphore, [*c]u64) callconv(.C) VkResult;
pub const PFN_vkWaitSemaphores = ?*const fn (VkDevice, [*c]const VkSemaphoreWaitInfo, u64) callconv(.C) VkResult;
pub const PFN_vkSignalSemaphore = ?*const fn (VkDevice, [*c]const VkSemaphoreSignalInfo) callconv(.C) VkResult;
pub const PFN_vkGetBufferDeviceAddress = ?*const fn (VkDevice, [*c]const VkBufferDeviceAddressInfo) callconv(.C) VkDeviceAddress;
pub const PFN_vkGetBufferOpaqueCaptureAddress = ?*const fn (VkDevice, [*c]const VkBufferDeviceAddressInfo) callconv(.C) u64;
pub const PFN_vkGetDeviceMemoryOpaqueCaptureAddress = ?*const fn (VkDevice, [*c]const VkDeviceMemoryOpaqueCaptureAddressInfo) callconv(.C) u64;
pub extern fn vkCmdDrawIndirectCount(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: u32, stride: u32) void;
pub extern fn vkCmdDrawIndexedIndirectCount(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: u32, stride: u32) void;
pub extern fn vkCreateRenderPass2(device: VkDevice, pCreateInfo: [*c]const VkRenderPassCreateInfo2, pAllocator: [*c]const VkAllocationCallbacks, pRenderPass: [*c]VkRenderPass) VkResult;
pub extern fn vkCmdBeginRenderPass2(commandBuffer: VkCommandBuffer, pRenderPassBegin: [*c]const VkRenderPassBeginInfo, pSubpassBeginInfo: [*c]const VkSubpassBeginInfo) void;
pub extern fn vkCmdNextSubpass2(commandBuffer: VkCommandBuffer, pSubpassBeginInfo: [*c]const VkSubpassBeginInfo, pSubpassEndInfo: [*c]const VkSubpassEndInfo) void;
pub extern fn vkCmdEndRenderPass2(commandBuffer: VkCommandBuffer, pSubpassEndInfo: [*c]const VkSubpassEndInfo) void;
pub extern fn vkResetQueryPool(device: VkDevice, queryPool: VkQueryPool, firstQuery: u32, queryCount: u32) void;
pub extern fn vkGetSemaphoreCounterValue(device: VkDevice, semaphore: VkSemaphore, pValue: [*c]u64) VkResult;
pub extern fn vkWaitSemaphores(device: VkDevice, pWaitInfo: [*c]const VkSemaphoreWaitInfo, timeout: u64) VkResult;
pub extern fn vkSignalSemaphore(device: VkDevice, pSignalInfo: [*c]const VkSemaphoreSignalInfo) VkResult;
pub extern fn vkGetBufferDeviceAddress(device: VkDevice, pInfo: [*c]const VkBufferDeviceAddressInfo) VkDeviceAddress;
pub extern fn vkGetBufferOpaqueCaptureAddress(device: VkDevice, pInfo: [*c]const VkBufferDeviceAddressInfo) u64;
pub extern fn vkGetDeviceMemoryOpaqueCaptureAddress(device: VkDevice, pInfo: [*c]const VkDeviceMemoryOpaqueCaptureAddressInfo) u64;
pub const VkFlags64 = u64;
pub const struct_VkPrivateDataSlot_T = opaque {};
pub const VkPrivateDataSlot = ?*struct_VkPrivateDataSlot_T;
pub const VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT: c_int = 1;
pub const VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT: c_int = 2;
pub const VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT: c_int = 4;
pub const VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT: c_int = 1;
pub const VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT: c_int = 2;
pub const VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT: c_int = 4;
pub const VK_PIPELINE_CREATION_FEEDBACK_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPipelineCreationFeedbackFlagBits = c_uint;
pub const VkPipelineCreationFeedbackFlagBits = enum_VkPipelineCreationFeedbackFlagBits;
pub const VkPipelineCreationFeedbackFlags = VkFlags;
pub const VK_TOOL_PURPOSE_VALIDATION_BIT: c_int = 1;
pub const VK_TOOL_PURPOSE_PROFILING_BIT: c_int = 2;
pub const VK_TOOL_PURPOSE_TRACING_BIT: c_int = 4;
pub const VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT: c_int = 8;
pub const VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT: c_int = 16;
pub const VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT: c_int = 32;
pub const VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT: c_int = 64;
pub const VK_TOOL_PURPOSE_VALIDATION_BIT_EXT: c_int = 1;
pub const VK_TOOL_PURPOSE_PROFILING_BIT_EXT: c_int = 2;
pub const VK_TOOL_PURPOSE_TRACING_BIT_EXT: c_int = 4;
pub const VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT: c_int = 8;
pub const VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT: c_int = 16;
pub const VK_TOOL_PURPOSE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkToolPurposeFlagBits = c_uint;
pub const VkToolPurposeFlagBits = enum_VkToolPurposeFlagBits;
pub const VkToolPurposeFlags = VkFlags;
pub const VkPrivateDataSlotCreateFlags = VkFlags;
pub const VkPipelineStageFlags2 = VkFlags64;
pub const VkPipelineStageFlagBits2 = VkFlags64;
pub const VK_PIPELINE_STAGE_2_NONE: VkPipelineStageFlagBits2 = 0;
pub const VK_PIPELINE_STAGE_2_NONE_KHR: VkPipelineStageFlagBits2 = 0;
pub const VK_PIPELINE_STAGE_2_TOP_OF_PIPE_BIT: VkPipelineStageFlagBits2 = 1;
pub const VK_PIPELINE_STAGE_2_TOP_OF_PIPE_BIT_KHR: VkPipelineStageFlagBits2 = 1;
pub const VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT: VkPipelineStageFlagBits2 = 2;
pub const VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT_KHR: VkPipelineStageFlagBits2 = 2;
pub const VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT: VkPipelineStageFlagBits2 = 4;
pub const VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT_KHR: VkPipelineStageFlagBits2 = 4;
pub const VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT: VkPipelineStageFlagBits2 = 8;
pub const VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT_KHR: VkPipelineStageFlagBits2 = 8;
pub const VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT: VkPipelineStageFlagBits2 = 16;
pub const VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT_KHR: VkPipelineStageFlagBits2 = 16;
pub const VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT: VkPipelineStageFlagBits2 = 32;
pub const VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT_KHR: VkPipelineStageFlagBits2 = 32;
pub const VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT: VkPipelineStageFlagBits2 = 64;
pub const VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT_KHR: VkPipelineStageFlagBits2 = 64;
pub const VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT: VkPipelineStageFlagBits2 = 128;
pub const VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT_KHR: VkPipelineStageFlagBits2 = 128;
pub const VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 256)))));
pub const VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 256)))));
pub const VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 512)))));
pub const VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 512)))));
pub const VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1024)))));
pub const VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1024)))));
pub const VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2048)))));
pub const VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2048)))));
pub const VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4096)))));
pub const VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4096)))));
pub const VK_PIPELINE_STAGE_2_TRANSFER_BIT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4096)))));
pub const VK_PIPELINE_STAGE_2_TRANSFER_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4096)))));
pub const VK_PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8192)))));
pub const VK_PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8192)))));
pub const VK_PIPELINE_STAGE_2_HOST_BIT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 16384)))));
pub const VK_PIPELINE_STAGE_2_HOST_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 16384)))));
pub const VK_PIPELINE_STAGE_2_ALL_GRAPHICS_BIT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 32768)))));
pub const VK_PIPELINE_STAGE_2_ALL_GRAPHICS_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 32768)))));
pub const VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 65536)))));
pub const VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 65536)))));
pub const VK_PIPELINE_STAGE_2_COPY_BIT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4294967296)))));
pub const VK_PIPELINE_STAGE_2_COPY_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4294967296)))));
pub const VK_PIPELINE_STAGE_2_RESOLVE_BIT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8589934592)))));
pub const VK_PIPELINE_STAGE_2_RESOLVE_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8589934592)))));
pub const VK_PIPELINE_STAGE_2_BLIT_BIT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 17179869184)))));
pub const VK_PIPELINE_STAGE_2_BLIT_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 17179869184)))));
pub const VK_PIPELINE_STAGE_2_CLEAR_BIT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 34359738368)))));
pub const VK_PIPELINE_STAGE_2_CLEAR_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 34359738368)))));
pub const VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 68719476736)))));
pub const VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 68719476736)))));
pub const VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 137438953472)))));
pub const VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 137438953472)))));
pub const VK_PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 274877906944)))));
pub const VK_PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 274877906944)))));
pub const VK_PIPELINE_STAGE_2_VIDEO_DECODE_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 67108864)))));
pub const VK_PIPELINE_STAGE_2_VIDEO_ENCODE_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 134217728)))));
pub const VK_PIPELINE_STAGE_2_TRANSFORM_FEEDBACK_BIT_EXT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 16777216)))));
pub const VK_PIPELINE_STAGE_2_CONDITIONAL_RENDERING_BIT_EXT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 262144)))));
pub const VK_PIPELINE_STAGE_2_COMMAND_PREPROCESS_BIT_NV: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 131072)))));
pub const VK_PIPELINE_STAGE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4194304)))));
pub const VK_PIPELINE_STAGE_2_SHADING_RATE_IMAGE_BIT_NV: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4194304)))));
pub const VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 33554432)))));
pub const VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2097152)))));
pub const VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_NV: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2097152)))));
pub const VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_NV: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 33554432)))));
pub const VK_PIPELINE_STAGE_2_FRAGMENT_DENSITY_PROCESS_BIT_EXT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8388608)))));
pub const VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_NV: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 524288)))));
pub const VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_NV: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1048576)))));
pub const VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_EXT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 524288)))));
pub const VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_EXT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1048576)))));
pub const VK_PIPELINE_STAGE_2_SUBPASS_SHADER_BIT_HUAWEI: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 549755813888)))));
pub const VK_PIPELINE_STAGE_2_SUBPASS_SHADING_BIT_HUAWEI: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 549755813888)))));
pub const VK_PIPELINE_STAGE_2_INVOCATION_MASK_BIT_HUAWEI: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1099511627776)))));
pub const VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_COPY_BIT_KHR: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 268435456)))));
pub const VK_PIPELINE_STAGE_2_MICROMAP_BUILD_BIT_EXT: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1073741824)))));
pub const VK_PIPELINE_STAGE_2_CLUSTER_CULLING_SHADER_BIT_HUAWEI: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2199023255552)))));
pub const VK_PIPELINE_STAGE_2_OPTICAL_FLOW_BIT_NV: VkPipelineStageFlagBits2 = @as(VkPipelineStageFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 536870912)))));
pub const VkAccessFlags2 = VkFlags64;
pub const VkAccessFlagBits2 = VkFlags64;
pub const VK_ACCESS_2_NONE: VkAccessFlagBits2 = 0;
pub const VK_ACCESS_2_NONE_KHR: VkAccessFlagBits2 = 0;
pub const VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT: VkAccessFlagBits2 = 1;
pub const VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT_KHR: VkAccessFlagBits2 = 1;
pub const VK_ACCESS_2_INDEX_READ_BIT: VkAccessFlagBits2 = 2;
pub const VK_ACCESS_2_INDEX_READ_BIT_KHR: VkAccessFlagBits2 = 2;
pub const VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT: VkAccessFlagBits2 = 4;
pub const VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT_KHR: VkAccessFlagBits2 = 4;
pub const VK_ACCESS_2_UNIFORM_READ_BIT: VkAccessFlagBits2 = 8;
pub const VK_ACCESS_2_UNIFORM_READ_BIT_KHR: VkAccessFlagBits2 = 8;
pub const VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT: VkAccessFlagBits2 = 16;
pub const VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT_KHR: VkAccessFlagBits2 = 16;
pub const VK_ACCESS_2_SHADER_READ_BIT: VkAccessFlagBits2 = 32;
pub const VK_ACCESS_2_SHADER_READ_BIT_KHR: VkAccessFlagBits2 = 32;
pub const VK_ACCESS_2_SHADER_WRITE_BIT: VkAccessFlagBits2 = 64;
pub const VK_ACCESS_2_SHADER_WRITE_BIT_KHR: VkAccessFlagBits2 = 64;
pub const VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT: VkAccessFlagBits2 = 128;
pub const VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT_KHR: VkAccessFlagBits2 = 128;
pub const VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 256)))));
pub const VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT_KHR: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 256)))));
pub const VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 512)))));
pub const VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT_KHR: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 512)))));
pub const VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1024)))));
pub const VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT_KHR: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1024)))));
pub const VK_ACCESS_2_TRANSFER_READ_BIT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2048)))));
pub const VK_ACCESS_2_TRANSFER_READ_BIT_KHR: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2048)))));
pub const VK_ACCESS_2_TRANSFER_WRITE_BIT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4096)))));
pub const VK_ACCESS_2_TRANSFER_WRITE_BIT_KHR: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4096)))));
pub const VK_ACCESS_2_HOST_READ_BIT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8192)))));
pub const VK_ACCESS_2_HOST_READ_BIT_KHR: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8192)))));
pub const VK_ACCESS_2_HOST_WRITE_BIT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 16384)))));
pub const VK_ACCESS_2_HOST_WRITE_BIT_KHR: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 16384)))));
pub const VK_ACCESS_2_MEMORY_READ_BIT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 32768)))));
pub const VK_ACCESS_2_MEMORY_READ_BIT_KHR: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 32768)))));
pub const VK_ACCESS_2_MEMORY_WRITE_BIT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 65536)))));
pub const VK_ACCESS_2_MEMORY_WRITE_BIT_KHR: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 65536)))));
pub const VK_ACCESS_2_SHADER_SAMPLED_READ_BIT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4294967296)))));
pub const VK_ACCESS_2_SHADER_SAMPLED_READ_BIT_KHR: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4294967296)))));
pub const VK_ACCESS_2_SHADER_STORAGE_READ_BIT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8589934592)))));
pub const VK_ACCESS_2_SHADER_STORAGE_READ_BIT_KHR: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8589934592)))));
pub const VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 17179869184)))));
pub const VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT_KHR: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 17179869184)))));
pub const VK_ACCESS_2_VIDEO_DECODE_READ_BIT_KHR: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 34359738368)))));
pub const VK_ACCESS_2_VIDEO_DECODE_WRITE_BIT_KHR: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 68719476736)))));
pub const VK_ACCESS_2_VIDEO_ENCODE_READ_BIT_KHR: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 137438953472)))));
pub const VK_ACCESS_2_VIDEO_ENCODE_WRITE_BIT_KHR: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 274877906944)))));
pub const VK_ACCESS_2_TRANSFORM_FEEDBACK_WRITE_BIT_EXT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 33554432)))));
pub const VK_ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 67108864)))));
pub const VK_ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 134217728)))));
pub const VK_ACCESS_2_CONDITIONAL_RENDERING_READ_BIT_EXT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1048576)))));
pub const VK_ACCESS_2_COMMAND_PREPROCESS_READ_BIT_NV: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 131072)))));
pub const VK_ACCESS_2_COMMAND_PREPROCESS_WRITE_BIT_NV: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 262144)))));
pub const VK_ACCESS_2_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8388608)))));
pub const VK_ACCESS_2_SHADING_RATE_IMAGE_READ_BIT_NV: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8388608)))));
pub const VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_KHR: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2097152)))));
pub const VK_ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_KHR: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4194304)))));
pub const VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_NV: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2097152)))));
pub const VK_ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_NV: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4194304)))));
pub const VK_ACCESS_2_FRAGMENT_DENSITY_MAP_READ_BIT_EXT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 16777216)))));
pub const VK_ACCESS_2_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 524288)))));
pub const VK_ACCESS_2_DESCRIPTOR_BUFFER_READ_BIT_EXT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2199023255552)))));
pub const VK_ACCESS_2_INVOCATION_MASK_READ_BIT_HUAWEI: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 549755813888)))));
pub const VK_ACCESS_2_SHADER_BINDING_TABLE_READ_BIT_KHR: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1099511627776)))));
pub const VK_ACCESS_2_MICROMAP_READ_BIT_EXT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 17592186044416)))));
pub const VK_ACCESS_2_MICROMAP_WRITE_BIT_EXT: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 35184372088832)))));
pub const VK_ACCESS_2_OPTICAL_FLOW_READ_BIT_NV: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4398046511104)))));
pub const VK_ACCESS_2_OPTICAL_FLOW_WRITE_BIT_NV: VkAccessFlagBits2 = @as(VkAccessFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8796093022208)))));
pub const VK_SUBMIT_PROTECTED_BIT: c_int = 1;
pub const VK_SUBMIT_PROTECTED_BIT_KHR: c_int = 1;
pub const VK_SUBMIT_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSubmitFlagBits = c_uint;
pub const VkSubmitFlagBits = enum_VkSubmitFlagBits;
pub const VkSubmitFlags = VkFlags;
pub const VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT: c_int = 1;
pub const VK_RENDERING_SUSPENDING_BIT: c_int = 2;
pub const VK_RENDERING_RESUMING_BIT: c_int = 4;
pub const VK_RENDERING_ENABLE_LEGACY_DITHERING_BIT_EXT: c_int = 8;
pub const VK_RENDERING_CONTENTS_INLINE_BIT_KHR: c_int = 16;
pub const VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT_KHR: c_int = 1;
pub const VK_RENDERING_SUSPENDING_BIT_KHR: c_int = 2;
pub const VK_RENDERING_RESUMING_BIT_KHR: c_int = 4;
pub const VK_RENDERING_CONTENTS_INLINE_BIT_EXT: c_int = 16;
pub const VK_RENDERING_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkRenderingFlagBits = c_uint;
pub const VkRenderingFlagBits = enum_VkRenderingFlagBits;
pub const VkRenderingFlags = VkFlags;
pub const VkFormatFeatureFlags2 = VkFlags64;
pub const VkFormatFeatureFlagBits2 = VkFlags64;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT: VkFormatFeatureFlagBits2 = 1;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT_KHR: VkFormatFeatureFlagBits2 = 1;
pub const VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT: VkFormatFeatureFlagBits2 = 2;
pub const VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT_KHR: VkFormatFeatureFlagBits2 = 2;
pub const VK_FORMAT_FEATURE_2_STORAGE_IMAGE_ATOMIC_BIT: VkFormatFeatureFlagBits2 = 4;
pub const VK_FORMAT_FEATURE_2_STORAGE_IMAGE_ATOMIC_BIT_KHR: VkFormatFeatureFlagBits2 = 4;
pub const VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT: VkFormatFeatureFlagBits2 = 8;
pub const VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT_KHR: VkFormatFeatureFlagBits2 = 8;
pub const VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT: VkFormatFeatureFlagBits2 = 16;
pub const VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT_KHR: VkFormatFeatureFlagBits2 = 16;
pub const VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_ATOMIC_BIT: VkFormatFeatureFlagBits2 = 32;
pub const VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_ATOMIC_BIT_KHR: VkFormatFeatureFlagBits2 = 32;
pub const VK_FORMAT_FEATURE_2_VERTEX_BUFFER_BIT: VkFormatFeatureFlagBits2 = 64;
pub const VK_FORMAT_FEATURE_2_VERTEX_BUFFER_BIT_KHR: VkFormatFeatureFlagBits2 = 64;
pub const VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT: VkFormatFeatureFlagBits2 = 128;
pub const VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT_KHR: VkFormatFeatureFlagBits2 = 128;
pub const VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 256)))));
pub const VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 256)))));
pub const VK_FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 512)))));
pub const VK_FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 512)))));
pub const VK_FORMAT_FEATURE_2_BLIT_SRC_BIT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1024)))));
pub const VK_FORMAT_FEATURE_2_BLIT_SRC_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1024)))));
pub const VK_FORMAT_FEATURE_2_BLIT_DST_BIT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2048)))));
pub const VK_FORMAT_FEATURE_2_BLIT_DST_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2048)))));
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4096)))));
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4096)))));
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_CUBIC_BIT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8192)))));
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8192)))));
pub const VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 16384)))));
pub const VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 16384)))));
pub const VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 32768)))));
pub const VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 32768)))));
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 65536)))));
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 65536)))));
pub const VK_FORMAT_FEATURE_2_MIDPOINT_CHROMA_SAMPLES_BIT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 131072)))));
pub const VK_FORMAT_FEATURE_2_MIDPOINT_CHROMA_SAMPLES_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 131072)))));
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 262144)))));
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 262144)))));
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 524288)))));
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 524288)))));
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1048576)))));
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1048576)))));
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2097152)))));
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2097152)))));
pub const VK_FORMAT_FEATURE_2_DISJOINT_BIT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4194304)))));
pub const VK_FORMAT_FEATURE_2_DISJOINT_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4194304)))));
pub const VK_FORMAT_FEATURE_2_COSITED_CHROMA_SAMPLES_BIT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8388608)))));
pub const VK_FORMAT_FEATURE_2_COSITED_CHROMA_SAMPLES_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8388608)))));
pub const VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2147483648)))));
pub const VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2147483648)))));
pub const VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4294967296)))));
pub const VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4294967296)))));
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8589934592)))));
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8589934592)))));
pub const VK_FORMAT_FEATURE_2_VIDEO_DECODE_OUTPUT_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 33554432)))));
pub const VK_FORMAT_FEATURE_2_VIDEO_DECODE_DPB_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 67108864)))));
pub const VK_FORMAT_FEATURE_2_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 536870912)))));
pub const VK_FORMAT_FEATURE_2_FRAGMENT_DENSITY_MAP_BIT_EXT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 16777216)))));
pub const VK_FORMAT_FEATURE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1073741824)))));
pub const VK_FORMAT_FEATURE_2_HOST_IMAGE_TRANSFER_BIT_EXT: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 70368744177664)))));
pub const VK_FORMAT_FEATURE_2_VIDEO_ENCODE_INPUT_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 134217728)))));
pub const VK_FORMAT_FEATURE_2_VIDEO_ENCODE_DPB_BIT_KHR: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 268435456)))));
pub const VK_FORMAT_FEATURE_2_LINEAR_COLOR_ATTACHMENT_BIT_NV: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 274877906944)))));
pub const VK_FORMAT_FEATURE_2_WEIGHT_IMAGE_BIT_QCOM: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 17179869184)))));
pub const VK_FORMAT_FEATURE_2_WEIGHT_SAMPLED_IMAGE_BIT_QCOM: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 34359738368)))));
pub const VK_FORMAT_FEATURE_2_BLOCK_MATCHING_BIT_QCOM: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 68719476736)))));
pub const VK_FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 137438953472)))));
pub const VK_FORMAT_FEATURE_2_OPTICAL_FLOW_IMAGE_BIT_NV: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1099511627776)))));
pub const VK_FORMAT_FEATURE_2_OPTICAL_FLOW_VECTOR_BIT_NV: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2199023255552)))));
pub const VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV: VkFormatFeatureFlagBits2 = @as(VkFormatFeatureFlagBits2, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4398046511104)))));
pub const struct_VkPhysicalDeviceVulkan13Features = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    robustImageAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    inlineUniformBlock: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingInlineUniformBlockUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    pipelineCreationCacheControl: VkBool32 = @import("std").mem.zeroes(VkBool32),
    privateData: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderDemoteToHelperInvocation: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderTerminateInvocation: VkBool32 = @import("std").mem.zeroes(VkBool32),
    subgroupSizeControl: VkBool32 = @import("std").mem.zeroes(VkBool32),
    computeFullSubgroups: VkBool32 = @import("std").mem.zeroes(VkBool32),
    synchronization2: VkBool32 = @import("std").mem.zeroes(VkBool32),
    textureCompressionASTC_HDR: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderZeroInitializeWorkgroupMemory: VkBool32 = @import("std").mem.zeroes(VkBool32),
    dynamicRendering: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderIntegerDotProduct: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maintenance4: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceVulkan13Features = struct_VkPhysicalDeviceVulkan13Features;
pub const struct_VkPhysicalDeviceVulkan13Properties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    minSubgroupSize: u32 = @import("std").mem.zeroes(u32),
    maxSubgroupSize: u32 = @import("std").mem.zeroes(u32),
    maxComputeWorkgroupSubgroups: u32 = @import("std").mem.zeroes(u32),
    requiredSubgroupSizeStages: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    maxInlineUniformBlockSize: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorInlineUniformBlocks: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetInlineUniformBlocks: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindInlineUniformBlocks: u32 = @import("std").mem.zeroes(u32),
    maxInlineUniformTotalSize: u32 = @import("std").mem.zeroes(u32),
    integerDotProduct8BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct8BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct8BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct4x8BitPackedUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct4x8BitPackedSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct4x8BitPackedMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct16BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct16BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct16BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct32BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct32BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct32BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct64BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct64BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct64BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating8BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating8BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating16BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating16BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating32BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating32BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating64BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating64BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    storageTexelBufferOffsetAlignmentBytes: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    storageTexelBufferOffsetSingleTexelAlignment: VkBool32 = @import("std").mem.zeroes(VkBool32),
    uniformTexelBufferOffsetAlignmentBytes: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    uniformTexelBufferOffsetSingleTexelAlignment: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxBufferSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkPhysicalDeviceVulkan13Properties = struct_VkPhysicalDeviceVulkan13Properties;
pub const struct_VkPipelineCreationFeedback = extern struct {
    flags: VkPipelineCreationFeedbackFlags = @import("std").mem.zeroes(VkPipelineCreationFeedbackFlags),
    duration: u64 = @import("std").mem.zeroes(u64),
};
pub const VkPipelineCreationFeedback = struct_VkPipelineCreationFeedback;
pub const struct_VkPipelineCreationFeedbackCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pPipelineCreationFeedback: [*c]VkPipelineCreationFeedback = @import("std").mem.zeroes([*c]VkPipelineCreationFeedback),
    pipelineStageCreationFeedbackCount: u32 = @import("std").mem.zeroes(u32),
    pPipelineStageCreationFeedbacks: [*c]VkPipelineCreationFeedback = @import("std").mem.zeroes([*c]VkPipelineCreationFeedback),
};
pub const VkPipelineCreationFeedbackCreateInfo = struct_VkPipelineCreationFeedbackCreateInfo;
pub const struct_VkPhysicalDeviceShaderTerminateInvocationFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderTerminateInvocation: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderTerminateInvocationFeatures = struct_VkPhysicalDeviceShaderTerminateInvocationFeatures;
pub const struct_VkPhysicalDeviceToolProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    name: [256]u8 = @import("std").mem.zeroes([256]u8),
    version: [256]u8 = @import("std").mem.zeroes([256]u8),
    purposes: VkToolPurposeFlags = @import("std").mem.zeroes(VkToolPurposeFlags),
    description: [256]u8 = @import("std").mem.zeroes([256]u8),
    layer: [256]u8 = @import("std").mem.zeroes([256]u8),
};
pub const VkPhysicalDeviceToolProperties = struct_VkPhysicalDeviceToolProperties;
pub const struct_VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderDemoteToHelperInvocation: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures = struct_VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures;
pub const struct_VkPhysicalDevicePrivateDataFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    privateData: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevicePrivateDataFeatures = struct_VkPhysicalDevicePrivateDataFeatures;
pub const struct_VkDevicePrivateDataCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    privateDataSlotRequestCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDevicePrivateDataCreateInfo = struct_VkDevicePrivateDataCreateInfo;
pub const struct_VkPrivateDataSlotCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPrivateDataSlotCreateFlags = @import("std").mem.zeroes(VkPrivateDataSlotCreateFlags),
};
pub const VkPrivateDataSlotCreateInfo = struct_VkPrivateDataSlotCreateInfo;
pub const struct_VkPhysicalDevicePipelineCreationCacheControlFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pipelineCreationCacheControl: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevicePipelineCreationCacheControlFeatures = struct_VkPhysicalDevicePipelineCreationCacheControlFeatures;
pub const struct_VkMemoryBarrier2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcStageMask: VkPipelineStageFlags2 = @import("std").mem.zeroes(VkPipelineStageFlags2),
    srcAccessMask: VkAccessFlags2 = @import("std").mem.zeroes(VkAccessFlags2),
    dstStageMask: VkPipelineStageFlags2 = @import("std").mem.zeroes(VkPipelineStageFlags2),
    dstAccessMask: VkAccessFlags2 = @import("std").mem.zeroes(VkAccessFlags2),
};
pub const VkMemoryBarrier2 = struct_VkMemoryBarrier2;
pub const struct_VkBufferMemoryBarrier2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcStageMask: VkPipelineStageFlags2 = @import("std").mem.zeroes(VkPipelineStageFlags2),
    srcAccessMask: VkAccessFlags2 = @import("std").mem.zeroes(VkAccessFlags2),
    dstStageMask: VkPipelineStageFlags2 = @import("std").mem.zeroes(VkPipelineStageFlags2),
    dstAccessMask: VkAccessFlags2 = @import("std").mem.zeroes(VkAccessFlags2),
    srcQueueFamilyIndex: u32 = @import("std").mem.zeroes(u32),
    dstQueueFamilyIndex: u32 = @import("std").mem.zeroes(u32),
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    offset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkBufferMemoryBarrier2 = struct_VkBufferMemoryBarrier2;
pub const struct_VkImageMemoryBarrier2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcStageMask: VkPipelineStageFlags2 = @import("std").mem.zeroes(VkPipelineStageFlags2),
    srcAccessMask: VkAccessFlags2 = @import("std").mem.zeroes(VkAccessFlags2),
    dstStageMask: VkPipelineStageFlags2 = @import("std").mem.zeroes(VkPipelineStageFlags2),
    dstAccessMask: VkAccessFlags2 = @import("std").mem.zeroes(VkAccessFlags2),
    oldLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    newLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    srcQueueFamilyIndex: u32 = @import("std").mem.zeroes(u32),
    dstQueueFamilyIndex: u32 = @import("std").mem.zeroes(u32),
    image: VkImage = @import("std").mem.zeroes(VkImage),
    subresourceRange: VkImageSubresourceRange = @import("std").mem.zeroes(VkImageSubresourceRange),
};
pub const VkImageMemoryBarrier2 = struct_VkImageMemoryBarrier2;
pub const struct_VkDependencyInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    dependencyFlags: VkDependencyFlags = @import("std").mem.zeroes(VkDependencyFlags),
    memoryBarrierCount: u32 = @import("std").mem.zeroes(u32),
    pMemoryBarriers: [*c]const VkMemoryBarrier2 = @import("std").mem.zeroes([*c]const VkMemoryBarrier2),
    bufferMemoryBarrierCount: u32 = @import("std").mem.zeroes(u32),
    pBufferMemoryBarriers: [*c]const VkBufferMemoryBarrier2 = @import("std").mem.zeroes([*c]const VkBufferMemoryBarrier2),
    imageMemoryBarrierCount: u32 = @import("std").mem.zeroes(u32),
    pImageMemoryBarriers: [*c]const VkImageMemoryBarrier2 = @import("std").mem.zeroes([*c]const VkImageMemoryBarrier2),
};
pub const VkDependencyInfo = struct_VkDependencyInfo;
pub const struct_VkSemaphoreSubmitInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    semaphore: VkSemaphore = @import("std").mem.zeroes(VkSemaphore),
    value: u64 = @import("std").mem.zeroes(u64),
    stageMask: VkPipelineStageFlags2 = @import("std").mem.zeroes(VkPipelineStageFlags2),
    deviceIndex: u32 = @import("std").mem.zeroes(u32),
};
pub const VkSemaphoreSubmitInfo = struct_VkSemaphoreSubmitInfo;
pub const struct_VkCommandBufferSubmitInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    commandBuffer: VkCommandBuffer = @import("std").mem.zeroes(VkCommandBuffer),
    deviceMask: u32 = @import("std").mem.zeroes(u32),
};
pub const VkCommandBufferSubmitInfo = struct_VkCommandBufferSubmitInfo;
pub const struct_VkSubmitInfo2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkSubmitFlags = @import("std").mem.zeroes(VkSubmitFlags),
    waitSemaphoreInfoCount: u32 = @import("std").mem.zeroes(u32),
    pWaitSemaphoreInfos: [*c]const VkSemaphoreSubmitInfo = @import("std").mem.zeroes([*c]const VkSemaphoreSubmitInfo),
    commandBufferInfoCount: u32 = @import("std").mem.zeroes(u32),
    pCommandBufferInfos: [*c]const VkCommandBufferSubmitInfo = @import("std").mem.zeroes([*c]const VkCommandBufferSubmitInfo),
    signalSemaphoreInfoCount: u32 = @import("std").mem.zeroes(u32),
    pSignalSemaphoreInfos: [*c]const VkSemaphoreSubmitInfo = @import("std").mem.zeroes([*c]const VkSemaphoreSubmitInfo),
};
pub const VkSubmitInfo2 = struct_VkSubmitInfo2;
pub const struct_VkPhysicalDeviceSynchronization2Features = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    synchronization2: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceSynchronization2Features = struct_VkPhysicalDeviceSynchronization2Features;
pub const struct_VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderZeroInitializeWorkgroupMemory: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures = struct_VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures;
pub const struct_VkPhysicalDeviceImageRobustnessFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    robustImageAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceImageRobustnessFeatures = struct_VkPhysicalDeviceImageRobustnessFeatures;
pub const struct_VkBufferCopy2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    dstOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkBufferCopy2 = struct_VkBufferCopy2;
pub const struct_VkCopyBufferInfo2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcBuffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    dstBuffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    regionCount: u32 = @import("std").mem.zeroes(u32),
    pRegions: [*c]const VkBufferCopy2 = @import("std").mem.zeroes([*c]const VkBufferCopy2),
};
pub const VkCopyBufferInfo2 = struct_VkCopyBufferInfo2;
pub const struct_VkImageCopy2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    srcOffset: VkOffset3D = @import("std").mem.zeroes(VkOffset3D),
    dstSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    dstOffset: VkOffset3D = @import("std").mem.zeroes(VkOffset3D),
    extent: VkExtent3D = @import("std").mem.zeroes(VkExtent3D),
};
pub const VkImageCopy2 = struct_VkImageCopy2;
pub const struct_VkCopyImageInfo2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcImage: VkImage = @import("std").mem.zeroes(VkImage),
    srcImageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    dstImage: VkImage = @import("std").mem.zeroes(VkImage),
    dstImageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    regionCount: u32 = @import("std").mem.zeroes(u32),
    pRegions: [*c]const VkImageCopy2 = @import("std").mem.zeroes([*c]const VkImageCopy2),
};
pub const VkCopyImageInfo2 = struct_VkCopyImageInfo2;
pub const struct_VkBufferImageCopy2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    bufferOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    bufferRowLength: u32 = @import("std").mem.zeroes(u32),
    bufferImageHeight: u32 = @import("std").mem.zeroes(u32),
    imageSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    imageOffset: VkOffset3D = @import("std").mem.zeroes(VkOffset3D),
    imageExtent: VkExtent3D = @import("std").mem.zeroes(VkExtent3D),
};
pub const VkBufferImageCopy2 = struct_VkBufferImageCopy2;
pub const struct_VkCopyBufferToImageInfo2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcBuffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    dstImage: VkImage = @import("std").mem.zeroes(VkImage),
    dstImageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    regionCount: u32 = @import("std").mem.zeroes(u32),
    pRegions: [*c]const VkBufferImageCopy2 = @import("std").mem.zeroes([*c]const VkBufferImageCopy2),
};
pub const VkCopyBufferToImageInfo2 = struct_VkCopyBufferToImageInfo2;
pub const struct_VkCopyImageToBufferInfo2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcImage: VkImage = @import("std").mem.zeroes(VkImage),
    srcImageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    dstBuffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    regionCount: u32 = @import("std").mem.zeroes(u32),
    pRegions: [*c]const VkBufferImageCopy2 = @import("std").mem.zeroes([*c]const VkBufferImageCopy2),
};
pub const VkCopyImageToBufferInfo2 = struct_VkCopyImageToBufferInfo2;
pub const struct_VkImageBlit2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    srcOffsets: [2]VkOffset3D = @import("std").mem.zeroes([2]VkOffset3D),
    dstSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    dstOffsets: [2]VkOffset3D = @import("std").mem.zeroes([2]VkOffset3D),
};
pub const VkImageBlit2 = struct_VkImageBlit2;
pub const struct_VkBlitImageInfo2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcImage: VkImage = @import("std").mem.zeroes(VkImage),
    srcImageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    dstImage: VkImage = @import("std").mem.zeroes(VkImage),
    dstImageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    regionCount: u32 = @import("std").mem.zeroes(u32),
    pRegions: [*c]const VkImageBlit2 = @import("std").mem.zeroes([*c]const VkImageBlit2),
    filter: VkFilter = @import("std").mem.zeroes(VkFilter),
};
pub const VkBlitImageInfo2 = struct_VkBlitImageInfo2;
pub const struct_VkImageResolve2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    srcOffset: VkOffset3D = @import("std").mem.zeroes(VkOffset3D),
    dstSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    dstOffset: VkOffset3D = @import("std").mem.zeroes(VkOffset3D),
    extent: VkExtent3D = @import("std").mem.zeroes(VkExtent3D),
};
pub const VkImageResolve2 = struct_VkImageResolve2;
pub const struct_VkResolveImageInfo2 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcImage: VkImage = @import("std").mem.zeroes(VkImage),
    srcImageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    dstImage: VkImage = @import("std").mem.zeroes(VkImage),
    dstImageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    regionCount: u32 = @import("std").mem.zeroes(u32),
    pRegions: [*c]const VkImageResolve2 = @import("std").mem.zeroes([*c]const VkImageResolve2),
};
pub const VkResolveImageInfo2 = struct_VkResolveImageInfo2;
pub const struct_VkPhysicalDeviceSubgroupSizeControlFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    subgroupSizeControl: VkBool32 = @import("std").mem.zeroes(VkBool32),
    computeFullSubgroups: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceSubgroupSizeControlFeatures = struct_VkPhysicalDeviceSubgroupSizeControlFeatures;
pub const struct_VkPhysicalDeviceSubgroupSizeControlProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    minSubgroupSize: u32 = @import("std").mem.zeroes(u32),
    maxSubgroupSize: u32 = @import("std").mem.zeroes(u32),
    maxComputeWorkgroupSubgroups: u32 = @import("std").mem.zeroes(u32),
    requiredSubgroupSizeStages: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
};
pub const VkPhysicalDeviceSubgroupSizeControlProperties = struct_VkPhysicalDeviceSubgroupSizeControlProperties;
pub const struct_VkPipelineShaderStageRequiredSubgroupSizeCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    requiredSubgroupSize: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPipelineShaderStageRequiredSubgroupSizeCreateInfo = struct_VkPipelineShaderStageRequiredSubgroupSizeCreateInfo;
pub const struct_VkPhysicalDeviceInlineUniformBlockFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    inlineUniformBlock: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingInlineUniformBlockUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceInlineUniformBlockFeatures = struct_VkPhysicalDeviceInlineUniformBlockFeatures;
pub const struct_VkPhysicalDeviceInlineUniformBlockProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxInlineUniformBlockSize: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorInlineUniformBlocks: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetInlineUniformBlocks: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindInlineUniformBlocks: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceInlineUniformBlockProperties = struct_VkPhysicalDeviceInlineUniformBlockProperties;
pub const struct_VkWriteDescriptorSetInlineUniformBlock = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    dataSize: u32 = @import("std").mem.zeroes(u32),
    pData: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const VkWriteDescriptorSetInlineUniformBlock = struct_VkWriteDescriptorSetInlineUniformBlock;
pub const struct_VkDescriptorPoolInlineUniformBlockCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    maxInlineUniformBlockBindings: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDescriptorPoolInlineUniformBlockCreateInfo = struct_VkDescriptorPoolInlineUniformBlockCreateInfo;
pub const struct_VkPhysicalDeviceTextureCompressionASTCHDRFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    textureCompressionASTC_HDR: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceTextureCompressionASTCHDRFeatures = struct_VkPhysicalDeviceTextureCompressionASTCHDRFeatures;
pub const struct_VkRenderingAttachmentInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    imageView: VkImageView = @import("std").mem.zeroes(VkImageView),
    imageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    resolveMode: VkResolveModeFlagBits = @import("std").mem.zeroes(VkResolveModeFlagBits),
    resolveImageView: VkImageView = @import("std").mem.zeroes(VkImageView),
    resolveImageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    loadOp: VkAttachmentLoadOp = @import("std").mem.zeroes(VkAttachmentLoadOp),
    storeOp: VkAttachmentStoreOp = @import("std").mem.zeroes(VkAttachmentStoreOp),
    clearValue: VkClearValue = @import("std").mem.zeroes(VkClearValue),
};
pub const VkRenderingAttachmentInfo = struct_VkRenderingAttachmentInfo;
pub const struct_VkRenderingInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkRenderingFlags = @import("std").mem.zeroes(VkRenderingFlags),
    renderArea: VkRect2D = @import("std").mem.zeroes(VkRect2D),
    layerCount: u32 = @import("std").mem.zeroes(u32),
    viewMask: u32 = @import("std").mem.zeroes(u32),
    colorAttachmentCount: u32 = @import("std").mem.zeroes(u32),
    pColorAttachments: [*c]const VkRenderingAttachmentInfo = @import("std").mem.zeroes([*c]const VkRenderingAttachmentInfo),
    pDepthAttachment: [*c]const VkRenderingAttachmentInfo = @import("std").mem.zeroes([*c]const VkRenderingAttachmentInfo),
    pStencilAttachment: [*c]const VkRenderingAttachmentInfo = @import("std").mem.zeroes([*c]const VkRenderingAttachmentInfo),
};
pub const VkRenderingInfo = struct_VkRenderingInfo;
pub const struct_VkPipelineRenderingCreateInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    viewMask: u32 = @import("std").mem.zeroes(u32),
    colorAttachmentCount: u32 = @import("std").mem.zeroes(u32),
    pColorAttachmentFormats: [*c]const VkFormat = @import("std").mem.zeroes([*c]const VkFormat),
    depthAttachmentFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
    stencilAttachmentFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
};
pub const VkPipelineRenderingCreateInfo = struct_VkPipelineRenderingCreateInfo;
pub const struct_VkPhysicalDeviceDynamicRenderingFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    dynamicRendering: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceDynamicRenderingFeatures = struct_VkPhysicalDeviceDynamicRenderingFeatures;
pub const struct_VkCommandBufferInheritanceRenderingInfo = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkRenderingFlags = @import("std").mem.zeroes(VkRenderingFlags),
    viewMask: u32 = @import("std").mem.zeroes(u32),
    colorAttachmentCount: u32 = @import("std").mem.zeroes(u32),
    pColorAttachmentFormats: [*c]const VkFormat = @import("std").mem.zeroes([*c]const VkFormat),
    depthAttachmentFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
    stencilAttachmentFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
    rasterizationSamples: VkSampleCountFlagBits = @import("std").mem.zeroes(VkSampleCountFlagBits),
};
pub const VkCommandBufferInheritanceRenderingInfo = struct_VkCommandBufferInheritanceRenderingInfo;
pub const struct_VkPhysicalDeviceShaderIntegerDotProductFeatures = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderIntegerDotProduct: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderIntegerDotProductFeatures = struct_VkPhysicalDeviceShaderIntegerDotProductFeatures;
pub const struct_VkPhysicalDeviceShaderIntegerDotProductProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    integerDotProduct8BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct8BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct8BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct4x8BitPackedUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct4x8BitPackedSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct4x8BitPackedMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct16BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct16BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct16BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct32BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct32BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct32BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct64BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct64BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct64BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating8BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating8BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating16BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating16BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating32BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating32BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating64BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating64BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderIntegerDotProductProperties = struct_VkPhysicalDeviceShaderIntegerDotProductProperties;
pub const struct_VkPhysicalDeviceTexelBufferAlignmentProperties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    storageTexelBufferOffsetAlignmentBytes: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    storageTexelBufferOffsetSingleTexelAlignment: VkBool32 = @import("std").mem.zeroes(VkBool32),
    uniformTexelBufferOffsetAlignmentBytes: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    uniformTexelBufferOffsetSingleTexelAlignment: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceTexelBufferAlignmentProperties = struct_VkPhysicalDeviceTexelBufferAlignmentProperties;
pub const struct_VkFormatProperties3 = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    linearTilingFeatures: VkFormatFeatureFlags2 = @import("std").mem.zeroes(VkFormatFeatureFlags2),
    optimalTilingFeatures: VkFormatFeatureFlags2 = @import("std").mem.zeroes(VkFormatFeatureFlags2),
    bufferFeatures: VkFormatFeatureFlags2 = @import("std").mem.zeroes(VkFormatFeatureFlags2),
};
pub const VkFormatProperties3 = struct_VkFormatProperties3;
pub const struct_VkPhysicalDeviceMaintenance4Features = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maintenance4: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceMaintenance4Features = struct_VkPhysicalDeviceMaintenance4Features;
pub const struct_VkPhysicalDeviceMaintenance4Properties = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxBufferSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkPhysicalDeviceMaintenance4Properties = struct_VkPhysicalDeviceMaintenance4Properties;
pub const struct_VkDeviceBufferMemoryRequirements = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pCreateInfo: [*c]const VkBufferCreateInfo = @import("std").mem.zeroes([*c]const VkBufferCreateInfo),
};
pub const VkDeviceBufferMemoryRequirements = struct_VkDeviceBufferMemoryRequirements;
pub const struct_VkDeviceImageMemoryRequirements = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pCreateInfo: [*c]const VkImageCreateInfo = @import("std").mem.zeroes([*c]const VkImageCreateInfo),
    planeAspect: VkImageAspectFlagBits = @import("std").mem.zeroes(VkImageAspectFlagBits),
};
pub const VkDeviceImageMemoryRequirements = struct_VkDeviceImageMemoryRequirements;
pub const PFN_vkGetPhysicalDeviceToolProperties = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkPhysicalDeviceToolProperties) callconv(.C) VkResult;
pub const PFN_vkCreatePrivateDataSlot = ?*const fn (VkDevice, [*c]const VkPrivateDataSlotCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkPrivateDataSlot) callconv(.C) VkResult;
pub const PFN_vkDestroyPrivateDataSlot = ?*const fn (VkDevice, VkPrivateDataSlot, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkSetPrivateData = ?*const fn (VkDevice, VkObjectType, u64, VkPrivateDataSlot, u64) callconv(.C) VkResult;
pub const PFN_vkGetPrivateData = ?*const fn (VkDevice, VkObjectType, u64, VkPrivateDataSlot, [*c]u64) callconv(.C) void;
pub const PFN_vkCmdSetEvent2 = ?*const fn (VkCommandBuffer, VkEvent, [*c]const VkDependencyInfo) callconv(.C) void;
pub const PFN_vkCmdResetEvent2 = ?*const fn (VkCommandBuffer, VkEvent, VkPipelineStageFlags2) callconv(.C) void;
pub const PFN_vkCmdWaitEvents2 = ?*const fn (VkCommandBuffer, u32, [*c]const VkEvent, [*c]const VkDependencyInfo) callconv(.C) void;
pub const PFN_vkCmdPipelineBarrier2 = ?*const fn (VkCommandBuffer, [*c]const VkDependencyInfo) callconv(.C) void;
pub const PFN_vkCmdWriteTimestamp2 = ?*const fn (VkCommandBuffer, VkPipelineStageFlags2, VkQueryPool, u32) callconv(.C) void;
pub const PFN_vkQueueSubmit2 = ?*const fn (VkQueue, u32, [*c]const VkSubmitInfo2, VkFence) callconv(.C) VkResult;
pub const PFN_vkCmdCopyBuffer2 = ?*const fn (VkCommandBuffer, [*c]const VkCopyBufferInfo2) callconv(.C) void;
pub const PFN_vkCmdCopyImage2 = ?*const fn (VkCommandBuffer, [*c]const VkCopyImageInfo2) callconv(.C) void;
pub const PFN_vkCmdCopyBufferToImage2 = ?*const fn (VkCommandBuffer, [*c]const VkCopyBufferToImageInfo2) callconv(.C) void;
pub const PFN_vkCmdCopyImageToBuffer2 = ?*const fn (VkCommandBuffer, [*c]const VkCopyImageToBufferInfo2) callconv(.C) void;
pub const PFN_vkCmdBlitImage2 = ?*const fn (VkCommandBuffer, [*c]const VkBlitImageInfo2) callconv(.C) void;
pub const PFN_vkCmdResolveImage2 = ?*const fn (VkCommandBuffer, [*c]const VkResolveImageInfo2) callconv(.C) void;
pub const PFN_vkCmdBeginRendering = ?*const fn (VkCommandBuffer, [*c]const VkRenderingInfo) callconv(.C) void;
pub const PFN_vkCmdEndRendering = ?*const fn (VkCommandBuffer) callconv(.C) void;
pub const PFN_vkCmdSetCullMode = ?*const fn (VkCommandBuffer, VkCullModeFlags) callconv(.C) void;
pub const PFN_vkCmdSetFrontFace = ?*const fn (VkCommandBuffer, VkFrontFace) callconv(.C) void;
pub const PFN_vkCmdSetPrimitiveTopology = ?*const fn (VkCommandBuffer, VkPrimitiveTopology) callconv(.C) void;
pub const PFN_vkCmdSetViewportWithCount = ?*const fn (VkCommandBuffer, u32, [*c]const VkViewport) callconv(.C) void;
pub const PFN_vkCmdSetScissorWithCount = ?*const fn (VkCommandBuffer, u32, [*c]const VkRect2D) callconv(.C) void;
pub const PFN_vkCmdBindVertexBuffers2 = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkBuffer, [*c]const VkDeviceSize, [*c]const VkDeviceSize, [*c]const VkDeviceSize) callconv(.C) void;
pub const PFN_vkCmdSetDepthTestEnable = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetDepthWriteEnable = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetDepthCompareOp = ?*const fn (VkCommandBuffer, VkCompareOp) callconv(.C) void;
pub const PFN_vkCmdSetDepthBoundsTestEnable = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetStencilTestEnable = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetStencilOp = ?*const fn (VkCommandBuffer, VkStencilFaceFlags, VkStencilOp, VkStencilOp, VkStencilOp, VkCompareOp) callconv(.C) void;
pub const PFN_vkCmdSetRasterizerDiscardEnable = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetDepthBiasEnable = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetPrimitiveRestartEnable = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkGetDeviceBufferMemoryRequirements = ?*const fn (VkDevice, [*c]const VkDeviceBufferMemoryRequirements, [*c]VkMemoryRequirements2) callconv(.C) void;
pub const PFN_vkGetDeviceImageMemoryRequirements = ?*const fn (VkDevice, [*c]const VkDeviceImageMemoryRequirements, [*c]VkMemoryRequirements2) callconv(.C) void;
pub const PFN_vkGetDeviceImageSparseMemoryRequirements = ?*const fn (VkDevice, [*c]const VkDeviceImageMemoryRequirements, [*c]u32, [*c]VkSparseImageMemoryRequirements2) callconv(.C) void;
pub extern fn vkGetPhysicalDeviceToolProperties(physicalDevice: VkPhysicalDevice, pToolCount: [*c]u32, pToolProperties: [*c]VkPhysicalDeviceToolProperties) VkResult;
pub extern fn vkCreatePrivateDataSlot(device: VkDevice, pCreateInfo: [*c]const VkPrivateDataSlotCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pPrivateDataSlot: [*c]VkPrivateDataSlot) VkResult;
pub extern fn vkDestroyPrivateDataSlot(device: VkDevice, privateDataSlot: VkPrivateDataSlot, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkSetPrivateData(device: VkDevice, objectType: VkObjectType, objectHandle: u64, privateDataSlot: VkPrivateDataSlot, data: u64) VkResult;
pub extern fn vkGetPrivateData(device: VkDevice, objectType: VkObjectType, objectHandle: u64, privateDataSlot: VkPrivateDataSlot, pData: [*c]u64) void;
pub extern fn vkCmdSetEvent2(commandBuffer: VkCommandBuffer, event: VkEvent, pDependencyInfo: [*c]const VkDependencyInfo) void;
pub extern fn vkCmdResetEvent2(commandBuffer: VkCommandBuffer, event: VkEvent, stageMask: VkPipelineStageFlags2) void;
pub extern fn vkCmdWaitEvents2(commandBuffer: VkCommandBuffer, eventCount: u32, pEvents: [*c]const VkEvent, pDependencyInfos: [*c]const VkDependencyInfo) void;
pub extern fn vkCmdPipelineBarrier2(commandBuffer: VkCommandBuffer, pDependencyInfo: [*c]const VkDependencyInfo) void;
pub extern fn vkCmdWriteTimestamp2(commandBuffer: VkCommandBuffer, stage: VkPipelineStageFlags2, queryPool: VkQueryPool, query: u32) void;
pub extern fn vkQueueSubmit2(queue: VkQueue, submitCount: u32, pSubmits: [*c]const VkSubmitInfo2, fence: VkFence) VkResult;
pub extern fn vkCmdCopyBuffer2(commandBuffer: VkCommandBuffer, pCopyBufferInfo: [*c]const VkCopyBufferInfo2) void;
pub extern fn vkCmdCopyImage2(commandBuffer: VkCommandBuffer, pCopyImageInfo: [*c]const VkCopyImageInfo2) void;
pub extern fn vkCmdCopyBufferToImage2(commandBuffer: VkCommandBuffer, pCopyBufferToImageInfo: [*c]const VkCopyBufferToImageInfo2) void;
pub extern fn vkCmdCopyImageToBuffer2(commandBuffer: VkCommandBuffer, pCopyImageToBufferInfo: [*c]const VkCopyImageToBufferInfo2) void;
pub extern fn vkCmdBlitImage2(commandBuffer: VkCommandBuffer, pBlitImageInfo: [*c]const VkBlitImageInfo2) void;
pub extern fn vkCmdResolveImage2(commandBuffer: VkCommandBuffer, pResolveImageInfo: [*c]const VkResolveImageInfo2) void;
pub extern fn vkCmdBeginRendering(commandBuffer: VkCommandBuffer, pRenderingInfo: [*c]const VkRenderingInfo) void;
pub extern fn vkCmdEndRendering(commandBuffer: VkCommandBuffer) void;
pub extern fn vkCmdSetCullMode(commandBuffer: VkCommandBuffer, cullMode: VkCullModeFlags) void;
pub extern fn vkCmdSetFrontFace(commandBuffer: VkCommandBuffer, frontFace: VkFrontFace) void;
pub extern fn vkCmdSetPrimitiveTopology(commandBuffer: VkCommandBuffer, primitiveTopology: VkPrimitiveTopology) void;
pub extern fn vkCmdSetViewportWithCount(commandBuffer: VkCommandBuffer, viewportCount: u32, pViewports: [*c]const VkViewport) void;
pub extern fn vkCmdSetScissorWithCount(commandBuffer: VkCommandBuffer, scissorCount: u32, pScissors: [*c]const VkRect2D) void;
pub extern fn vkCmdBindVertexBuffers2(commandBuffer: VkCommandBuffer, firstBinding: u32, bindingCount: u32, pBuffers: [*c]const VkBuffer, pOffsets: [*c]const VkDeviceSize, pSizes: [*c]const VkDeviceSize, pStrides: [*c]const VkDeviceSize) void;
pub extern fn vkCmdSetDepthTestEnable(commandBuffer: VkCommandBuffer, depthTestEnable: VkBool32) void;
pub extern fn vkCmdSetDepthWriteEnable(commandBuffer: VkCommandBuffer, depthWriteEnable: VkBool32) void;
pub extern fn vkCmdSetDepthCompareOp(commandBuffer: VkCommandBuffer, depthCompareOp: VkCompareOp) void;
pub extern fn vkCmdSetDepthBoundsTestEnable(commandBuffer: VkCommandBuffer, depthBoundsTestEnable: VkBool32) void;
pub extern fn vkCmdSetStencilTestEnable(commandBuffer: VkCommandBuffer, stencilTestEnable: VkBool32) void;
pub extern fn vkCmdSetStencilOp(commandBuffer: VkCommandBuffer, faceMask: VkStencilFaceFlags, failOp: VkStencilOp, passOp: VkStencilOp, depthFailOp: VkStencilOp, compareOp: VkCompareOp) void;
pub extern fn vkCmdSetRasterizerDiscardEnable(commandBuffer: VkCommandBuffer, rasterizerDiscardEnable: VkBool32) void;
pub extern fn vkCmdSetDepthBiasEnable(commandBuffer: VkCommandBuffer, depthBiasEnable: VkBool32) void;
pub extern fn vkCmdSetPrimitiveRestartEnable(commandBuffer: VkCommandBuffer, primitiveRestartEnable: VkBool32) void;
pub extern fn vkGetDeviceBufferMemoryRequirements(device: VkDevice, pInfo: [*c]const VkDeviceBufferMemoryRequirements, pMemoryRequirements: [*c]VkMemoryRequirements2) void;
pub extern fn vkGetDeviceImageMemoryRequirements(device: VkDevice, pInfo: [*c]const VkDeviceImageMemoryRequirements, pMemoryRequirements: [*c]VkMemoryRequirements2) void;
pub extern fn vkGetDeviceImageSparseMemoryRequirements(device: VkDevice, pInfo: [*c]const VkDeviceImageMemoryRequirements, pSparseMemoryRequirementCount: [*c]u32, pSparseMemoryRequirements: [*c]VkSparseImageMemoryRequirements2) void;
pub const struct_VkSurfaceKHR_T = opaque {};
pub const VkSurfaceKHR = ?*struct_VkSurfaceKHR_T;
pub const VK_PRESENT_MODE_IMMEDIATE_KHR: c_int = 0;
pub const VK_PRESENT_MODE_MAILBOX_KHR: c_int = 1;
pub const VK_PRESENT_MODE_FIFO_KHR: c_int = 2;
pub const VK_PRESENT_MODE_FIFO_RELAXED_KHR: c_int = 3;
pub const VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR: c_int = 1000111000;
pub const VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR: c_int = 1000111001;
pub const VK_PRESENT_MODE_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkPresentModeKHR = c_uint;
pub const VkPresentModeKHR = enum_VkPresentModeKHR;
pub const VK_COLOR_SPACE_SRGB_NONLINEAR_KHR: c_int = 0;
pub const VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT: c_int = 1000104001;
pub const VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT: c_int = 1000104002;
pub const VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT: c_int = 1000104003;
pub const VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT: c_int = 1000104004;
pub const VK_COLOR_SPACE_BT709_LINEAR_EXT: c_int = 1000104005;
pub const VK_COLOR_SPACE_BT709_NONLINEAR_EXT: c_int = 1000104006;
pub const VK_COLOR_SPACE_BT2020_LINEAR_EXT: c_int = 1000104007;
pub const VK_COLOR_SPACE_HDR10_ST2084_EXT: c_int = 1000104008;
pub const VK_COLOR_SPACE_DOLBYVISION_EXT: c_int = 1000104009;
pub const VK_COLOR_SPACE_HDR10_HLG_EXT: c_int = 1000104010;
pub const VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT: c_int = 1000104011;
pub const VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT: c_int = 1000104012;
pub const VK_COLOR_SPACE_PASS_THROUGH_EXT: c_int = 1000104013;
pub const VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT: c_int = 1000104014;
pub const VK_COLOR_SPACE_DISPLAY_NATIVE_AMD: c_int = 1000213000;
pub const VK_COLORSPACE_SRGB_NONLINEAR_KHR: c_int = 0;
pub const VK_COLOR_SPACE_DCI_P3_LINEAR_EXT: c_int = 1000104003;
pub const VK_COLOR_SPACE_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkColorSpaceKHR = c_uint;
pub const VkColorSpaceKHR = enum_VkColorSpaceKHR;
pub const VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR: c_int = 1;
pub const VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR: c_int = 2;
pub const VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR: c_int = 4;
pub const VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR: c_int = 8;
pub const VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR: c_int = 16;
pub const VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR: c_int = 32;
pub const VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR: c_int = 64;
pub const VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR: c_int = 128;
pub const VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR: c_int = 256;
pub const VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkSurfaceTransformFlagBitsKHR = c_uint;
pub const VkSurfaceTransformFlagBitsKHR = enum_VkSurfaceTransformFlagBitsKHR;
pub const VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR: c_int = 1;
pub const VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR: c_int = 2;
pub const VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR: c_int = 4;
pub const VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR: c_int = 8;
pub const VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkCompositeAlphaFlagBitsKHR = c_uint;
pub const VkCompositeAlphaFlagBitsKHR = enum_VkCompositeAlphaFlagBitsKHR;
pub const VkCompositeAlphaFlagsKHR = VkFlags;
pub const VkSurfaceTransformFlagsKHR = VkFlags;
pub const struct_VkSurfaceCapabilitiesKHR = extern struct {
    minImageCount: u32 = @import("std").mem.zeroes(u32),
    maxImageCount: u32 = @import("std").mem.zeroes(u32),
    currentExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    minImageExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxImageExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxImageArrayLayers: u32 = @import("std").mem.zeroes(u32),
    supportedTransforms: VkSurfaceTransformFlagsKHR = @import("std").mem.zeroes(VkSurfaceTransformFlagsKHR),
    currentTransform: VkSurfaceTransformFlagBitsKHR = @import("std").mem.zeroes(VkSurfaceTransformFlagBitsKHR),
    supportedCompositeAlpha: VkCompositeAlphaFlagsKHR = @import("std").mem.zeroes(VkCompositeAlphaFlagsKHR),
    supportedUsageFlags: VkImageUsageFlags = @import("std").mem.zeroes(VkImageUsageFlags),
};
pub const VkSurfaceCapabilitiesKHR = struct_VkSurfaceCapabilitiesKHR;
pub const struct_VkSurfaceFormatKHR = extern struct {
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
    colorSpace: VkColorSpaceKHR = @import("std").mem.zeroes(VkColorSpaceKHR),
};
pub const VkSurfaceFormatKHR = struct_VkSurfaceFormatKHR;
pub const PFN_vkDestroySurfaceKHR = ?*const fn (VkInstance, VkSurfaceKHR, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceSurfaceSupportKHR = ?*const fn (VkPhysicalDevice, u32, VkSurfaceKHR, [*c]VkBool32) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR = ?*const fn (VkPhysicalDevice, VkSurfaceKHR, [*c]VkSurfaceCapabilitiesKHR) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDeviceSurfaceFormatsKHR = ?*const fn (VkPhysicalDevice, VkSurfaceKHR, [*c]u32, [*c]VkSurfaceFormatKHR) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDeviceSurfacePresentModesKHR = ?*const fn (VkPhysicalDevice, VkSurfaceKHR, [*c]u32, [*c]VkPresentModeKHR) callconv(.C) VkResult;
pub extern fn vkDestroySurfaceKHR(instance: VkInstance, surface: VkSurfaceKHR, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice: VkPhysicalDevice, queueFamilyIndex: u32, surface: VkSurfaceKHR, pSupported: [*c]VkBool32) VkResult;
pub extern fn vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pSurfaceCapabilities: [*c]VkSurfaceCapabilitiesKHR) VkResult;
pub extern fn vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pSurfaceFormatCount: [*c]u32, pSurfaceFormats: [*c]VkSurfaceFormatKHR) VkResult;
pub extern fn vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pPresentModeCount: [*c]u32, pPresentModes: [*c]VkPresentModeKHR) VkResult;
pub const struct_VkSwapchainKHR_T = opaque {};
pub const VkSwapchainKHR = ?*struct_VkSwapchainKHR_T;
pub const VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR: c_int = 1;
pub const VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR: c_int = 2;
pub const VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR: c_int = 4;
pub const VK_SWAPCHAIN_CREATE_DEFERRED_MEMORY_ALLOCATION_BIT_EXT: c_int = 8;
pub const VK_SWAPCHAIN_CREATE_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkSwapchainCreateFlagBitsKHR = c_uint;
pub const VkSwapchainCreateFlagBitsKHR = enum_VkSwapchainCreateFlagBitsKHR;
pub const VkSwapchainCreateFlagsKHR = VkFlags;
pub const VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR: c_int = 1;
pub const VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR: c_int = 2;
pub const VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR: c_int = 4;
pub const VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR: c_int = 8;
pub const VK_DEVICE_GROUP_PRESENT_MODE_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkDeviceGroupPresentModeFlagBitsKHR = c_uint;
pub const VkDeviceGroupPresentModeFlagBitsKHR = enum_VkDeviceGroupPresentModeFlagBitsKHR;
pub const VkDeviceGroupPresentModeFlagsKHR = VkFlags;
pub const struct_VkSwapchainCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkSwapchainCreateFlagsKHR = @import("std").mem.zeroes(VkSwapchainCreateFlagsKHR),
    surface: VkSurfaceKHR = @import("std").mem.zeroes(VkSurfaceKHR),
    minImageCount: u32 = @import("std").mem.zeroes(u32),
    imageFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
    imageColorSpace: VkColorSpaceKHR = @import("std").mem.zeroes(VkColorSpaceKHR),
    imageExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    imageArrayLayers: u32 = @import("std").mem.zeroes(u32),
    imageUsage: VkImageUsageFlags = @import("std").mem.zeroes(VkImageUsageFlags),
    imageSharingMode: VkSharingMode = @import("std").mem.zeroes(VkSharingMode),
    queueFamilyIndexCount: u32 = @import("std").mem.zeroes(u32),
    pQueueFamilyIndices: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    preTransform: VkSurfaceTransformFlagBitsKHR = @import("std").mem.zeroes(VkSurfaceTransformFlagBitsKHR),
    compositeAlpha: VkCompositeAlphaFlagBitsKHR = @import("std").mem.zeroes(VkCompositeAlphaFlagBitsKHR),
    presentMode: VkPresentModeKHR = @import("std").mem.zeroes(VkPresentModeKHR),
    clipped: VkBool32 = @import("std").mem.zeroes(VkBool32),
    oldSwapchain: VkSwapchainKHR = @import("std").mem.zeroes(VkSwapchainKHR),
};
pub const VkSwapchainCreateInfoKHR = struct_VkSwapchainCreateInfoKHR;
pub const struct_VkPresentInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    waitSemaphoreCount: u32 = @import("std").mem.zeroes(u32),
    pWaitSemaphores: [*c]const VkSemaphore = @import("std").mem.zeroes([*c]const VkSemaphore),
    swapchainCount: u32 = @import("std").mem.zeroes(u32),
    pSwapchains: [*c]const VkSwapchainKHR = @import("std").mem.zeroes([*c]const VkSwapchainKHR),
    pImageIndices: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    pResults: [*c]VkResult = @import("std").mem.zeroes([*c]VkResult),
};
pub const VkPresentInfoKHR = struct_VkPresentInfoKHR;
pub const struct_VkImageSwapchainCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    swapchain: VkSwapchainKHR = @import("std").mem.zeroes(VkSwapchainKHR),
};
pub const VkImageSwapchainCreateInfoKHR = struct_VkImageSwapchainCreateInfoKHR;
pub const struct_VkBindImageMemorySwapchainInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    swapchain: VkSwapchainKHR = @import("std").mem.zeroes(VkSwapchainKHR),
    imageIndex: u32 = @import("std").mem.zeroes(u32),
};
pub const VkBindImageMemorySwapchainInfoKHR = struct_VkBindImageMemorySwapchainInfoKHR;
pub const struct_VkAcquireNextImageInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    swapchain: VkSwapchainKHR = @import("std").mem.zeroes(VkSwapchainKHR),
    timeout: u64 = @import("std").mem.zeroes(u64),
    semaphore: VkSemaphore = @import("std").mem.zeroes(VkSemaphore),
    fence: VkFence = @import("std").mem.zeroes(VkFence),
    deviceMask: u32 = @import("std").mem.zeroes(u32),
};
pub const VkAcquireNextImageInfoKHR = struct_VkAcquireNextImageInfoKHR;
pub const struct_VkDeviceGroupPresentCapabilitiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    presentMask: [32]u32 = @import("std").mem.zeroes([32]u32),
    modes: VkDeviceGroupPresentModeFlagsKHR = @import("std").mem.zeroes(VkDeviceGroupPresentModeFlagsKHR),
};
pub const VkDeviceGroupPresentCapabilitiesKHR = struct_VkDeviceGroupPresentCapabilitiesKHR;
pub const struct_VkDeviceGroupPresentInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    swapchainCount: u32 = @import("std").mem.zeroes(u32),
    pDeviceMasks: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    mode: VkDeviceGroupPresentModeFlagBitsKHR = @import("std").mem.zeroes(VkDeviceGroupPresentModeFlagBitsKHR),
};
pub const VkDeviceGroupPresentInfoKHR = struct_VkDeviceGroupPresentInfoKHR;
pub const struct_VkDeviceGroupSwapchainCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    modes: VkDeviceGroupPresentModeFlagsKHR = @import("std").mem.zeroes(VkDeviceGroupPresentModeFlagsKHR),
};
pub const VkDeviceGroupSwapchainCreateInfoKHR = struct_VkDeviceGroupSwapchainCreateInfoKHR;
pub const PFN_vkCreateSwapchainKHR = ?*const fn (VkDevice, [*c]const VkSwapchainCreateInfoKHR, [*c]const VkAllocationCallbacks, [*c]VkSwapchainKHR) callconv(.C) VkResult;
pub const PFN_vkDestroySwapchainKHR = ?*const fn (VkDevice, VkSwapchainKHR, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkGetSwapchainImagesKHR = ?*const fn (VkDevice, VkSwapchainKHR, [*c]u32, [*c]VkImage) callconv(.C) VkResult;
pub const PFN_vkAcquireNextImageKHR = ?*const fn (VkDevice, VkSwapchainKHR, u64, VkSemaphore, VkFence, [*c]u32) callconv(.C) VkResult;
pub const PFN_vkQueuePresentKHR = ?*const fn (VkQueue, [*c]const VkPresentInfoKHR) callconv(.C) VkResult;
pub const PFN_vkGetDeviceGroupPresentCapabilitiesKHR = ?*const fn (VkDevice, [*c]VkDeviceGroupPresentCapabilitiesKHR) callconv(.C) VkResult;
pub const PFN_vkGetDeviceGroupSurfacePresentModesKHR = ?*const fn (VkDevice, VkSurfaceKHR, [*c]VkDeviceGroupPresentModeFlagsKHR) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDevicePresentRectanglesKHR = ?*const fn (VkPhysicalDevice, VkSurfaceKHR, [*c]u32, [*c]VkRect2D) callconv(.C) VkResult;
pub const PFN_vkAcquireNextImage2KHR = ?*const fn (VkDevice, [*c]const VkAcquireNextImageInfoKHR, [*c]u32) callconv(.C) VkResult;
pub extern fn vkCreateSwapchainKHR(device: VkDevice, pCreateInfo: [*c]const VkSwapchainCreateInfoKHR, pAllocator: [*c]const VkAllocationCallbacks, pSwapchain: [*c]VkSwapchainKHR) VkResult;
pub extern fn vkDestroySwapchainKHR(device: VkDevice, swapchain: VkSwapchainKHR, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkGetSwapchainImagesKHR(device: VkDevice, swapchain: VkSwapchainKHR, pSwapchainImageCount: [*c]u32, pSwapchainImages: [*c]VkImage) VkResult;
pub extern fn vkAcquireNextImageKHR(device: VkDevice, swapchain: VkSwapchainKHR, timeout: u64, semaphore: VkSemaphore, fence: VkFence, pImageIndex: [*c]u32) VkResult;
pub extern fn vkQueuePresentKHR(queue: VkQueue, pPresentInfo: [*c]const VkPresentInfoKHR) VkResult;
pub extern fn vkGetDeviceGroupPresentCapabilitiesKHR(device: VkDevice, pDeviceGroupPresentCapabilities: [*c]VkDeviceGroupPresentCapabilitiesKHR) VkResult;
pub extern fn vkGetDeviceGroupSurfacePresentModesKHR(device: VkDevice, surface: VkSurfaceKHR, pModes: [*c]VkDeviceGroupPresentModeFlagsKHR) VkResult;
pub extern fn vkGetPhysicalDevicePresentRectanglesKHR(physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pRectCount: [*c]u32, pRects: [*c]VkRect2D) VkResult;
pub extern fn vkAcquireNextImage2KHR(device: VkDevice, pAcquireInfo: [*c]const VkAcquireNextImageInfoKHR, pImageIndex: [*c]u32) VkResult;
pub const struct_VkDisplayKHR_T = opaque {};
pub const VkDisplayKHR = ?*struct_VkDisplayKHR_T;
pub const struct_VkDisplayModeKHR_T = opaque {};
pub const VkDisplayModeKHR = ?*struct_VkDisplayModeKHR_T;
pub const VkDisplayModeCreateFlagsKHR = VkFlags;
pub const VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR: c_int = 1;
pub const VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR: c_int = 2;
pub const VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR: c_int = 4;
pub const VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR: c_int = 8;
pub const VK_DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkDisplayPlaneAlphaFlagBitsKHR = c_uint;
pub const VkDisplayPlaneAlphaFlagBitsKHR = enum_VkDisplayPlaneAlphaFlagBitsKHR;
pub const VkDisplayPlaneAlphaFlagsKHR = VkFlags;
pub const VkDisplaySurfaceCreateFlagsKHR = VkFlags;
pub const struct_VkDisplayModeParametersKHR = extern struct {
    visibleRegion: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    refreshRate: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDisplayModeParametersKHR = struct_VkDisplayModeParametersKHR;
pub const struct_VkDisplayModeCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkDisplayModeCreateFlagsKHR = @import("std").mem.zeroes(VkDisplayModeCreateFlagsKHR),
    parameters: VkDisplayModeParametersKHR = @import("std").mem.zeroes(VkDisplayModeParametersKHR),
};
pub const VkDisplayModeCreateInfoKHR = struct_VkDisplayModeCreateInfoKHR;
pub const struct_VkDisplayModePropertiesKHR = extern struct {
    displayMode: VkDisplayModeKHR = @import("std").mem.zeroes(VkDisplayModeKHR),
    parameters: VkDisplayModeParametersKHR = @import("std").mem.zeroes(VkDisplayModeParametersKHR),
};
pub const VkDisplayModePropertiesKHR = struct_VkDisplayModePropertiesKHR;
pub const struct_VkDisplayPlaneCapabilitiesKHR = extern struct {
    supportedAlpha: VkDisplayPlaneAlphaFlagsKHR = @import("std").mem.zeroes(VkDisplayPlaneAlphaFlagsKHR),
    minSrcPosition: VkOffset2D = @import("std").mem.zeroes(VkOffset2D),
    maxSrcPosition: VkOffset2D = @import("std").mem.zeroes(VkOffset2D),
    minSrcExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxSrcExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    minDstPosition: VkOffset2D = @import("std").mem.zeroes(VkOffset2D),
    maxDstPosition: VkOffset2D = @import("std").mem.zeroes(VkOffset2D),
    minDstExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxDstExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
};
pub const VkDisplayPlaneCapabilitiesKHR = struct_VkDisplayPlaneCapabilitiesKHR;
pub const struct_VkDisplayPlanePropertiesKHR = extern struct {
    currentDisplay: VkDisplayKHR = @import("std").mem.zeroes(VkDisplayKHR),
    currentStackIndex: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDisplayPlanePropertiesKHR = struct_VkDisplayPlanePropertiesKHR;
pub const struct_VkDisplayPropertiesKHR = extern struct {
    display: VkDisplayKHR = @import("std").mem.zeroes(VkDisplayKHR),
    displayName: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    physicalDimensions: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    physicalResolution: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    supportedTransforms: VkSurfaceTransformFlagsKHR = @import("std").mem.zeroes(VkSurfaceTransformFlagsKHR),
    planeReorderPossible: VkBool32 = @import("std").mem.zeroes(VkBool32),
    persistentContent: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkDisplayPropertiesKHR = struct_VkDisplayPropertiesKHR;
pub const struct_VkDisplaySurfaceCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkDisplaySurfaceCreateFlagsKHR = @import("std").mem.zeroes(VkDisplaySurfaceCreateFlagsKHR),
    displayMode: VkDisplayModeKHR = @import("std").mem.zeroes(VkDisplayModeKHR),
    planeIndex: u32 = @import("std").mem.zeroes(u32),
    planeStackIndex: u32 = @import("std").mem.zeroes(u32),
    transform: VkSurfaceTransformFlagBitsKHR = @import("std").mem.zeroes(VkSurfaceTransformFlagBitsKHR),
    globalAlpha: f32 = @import("std").mem.zeroes(f32),
    alphaMode: VkDisplayPlaneAlphaFlagBitsKHR = @import("std").mem.zeroes(VkDisplayPlaneAlphaFlagBitsKHR),
    imageExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
};
pub const VkDisplaySurfaceCreateInfoKHR = struct_VkDisplaySurfaceCreateInfoKHR;
pub const PFN_vkGetPhysicalDeviceDisplayPropertiesKHR = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkDisplayPropertiesKHR) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkDisplayPlanePropertiesKHR) callconv(.C) VkResult;
pub const PFN_vkGetDisplayPlaneSupportedDisplaysKHR = ?*const fn (VkPhysicalDevice, u32, [*c]u32, [*c]VkDisplayKHR) callconv(.C) VkResult;
pub const PFN_vkGetDisplayModePropertiesKHR = ?*const fn (VkPhysicalDevice, VkDisplayKHR, [*c]u32, [*c]VkDisplayModePropertiesKHR) callconv(.C) VkResult;
pub const PFN_vkCreateDisplayModeKHR = ?*const fn (VkPhysicalDevice, VkDisplayKHR, [*c]const VkDisplayModeCreateInfoKHR, [*c]const VkAllocationCallbacks, [*c]VkDisplayModeKHR) callconv(.C) VkResult;
pub const PFN_vkGetDisplayPlaneCapabilitiesKHR = ?*const fn (VkPhysicalDevice, VkDisplayModeKHR, u32, [*c]VkDisplayPlaneCapabilitiesKHR) callconv(.C) VkResult;
pub const PFN_vkCreateDisplayPlaneSurfaceKHR = ?*const fn (VkInstance, [*c]const VkDisplaySurfaceCreateInfoKHR, [*c]const VkAllocationCallbacks, [*c]VkSurfaceKHR) callconv(.C) VkResult;
pub extern fn vkGetPhysicalDeviceDisplayPropertiesKHR(physicalDevice: VkPhysicalDevice, pPropertyCount: [*c]u32, pProperties: [*c]VkDisplayPropertiesKHR) VkResult;
pub extern fn vkGetPhysicalDeviceDisplayPlanePropertiesKHR(physicalDevice: VkPhysicalDevice, pPropertyCount: [*c]u32, pProperties: [*c]VkDisplayPlanePropertiesKHR) VkResult;
pub extern fn vkGetDisplayPlaneSupportedDisplaysKHR(physicalDevice: VkPhysicalDevice, planeIndex: u32, pDisplayCount: [*c]u32, pDisplays: [*c]VkDisplayKHR) VkResult;
pub extern fn vkGetDisplayModePropertiesKHR(physicalDevice: VkPhysicalDevice, display: VkDisplayKHR, pPropertyCount: [*c]u32, pProperties: [*c]VkDisplayModePropertiesKHR) VkResult;
pub extern fn vkCreateDisplayModeKHR(physicalDevice: VkPhysicalDevice, display: VkDisplayKHR, pCreateInfo: [*c]const VkDisplayModeCreateInfoKHR, pAllocator: [*c]const VkAllocationCallbacks, pMode: [*c]VkDisplayModeKHR) VkResult;
pub extern fn vkGetDisplayPlaneCapabilitiesKHR(physicalDevice: VkPhysicalDevice, mode: VkDisplayModeKHR, planeIndex: u32, pCapabilities: [*c]VkDisplayPlaneCapabilitiesKHR) VkResult;
pub extern fn vkCreateDisplayPlaneSurfaceKHR(instance: VkInstance, pCreateInfo: [*c]const VkDisplaySurfaceCreateInfoKHR, pAllocator: [*c]const VkAllocationCallbacks, pSurface: [*c]VkSurfaceKHR) VkResult;
pub const struct_VkDisplayPresentInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcRect: VkRect2D = @import("std").mem.zeroes(VkRect2D),
    dstRect: VkRect2D = @import("std").mem.zeroes(VkRect2D),
    persistent: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkDisplayPresentInfoKHR = struct_VkDisplayPresentInfoKHR;
pub const PFN_vkCreateSharedSwapchainsKHR = ?*const fn (VkDevice, u32, [*c]const VkSwapchainCreateInfoKHR, [*c]const VkAllocationCallbacks, [*c]VkSwapchainKHR) callconv(.C) VkResult;
pub extern fn vkCreateSharedSwapchainsKHR(device: VkDevice, swapchainCount: u32, pCreateInfos: [*c]const VkSwapchainCreateInfoKHR, pAllocator: [*c]const VkAllocationCallbacks, pSwapchains: [*c]VkSwapchainKHR) VkResult;
pub const struct_VkVideoSessionKHR_T = opaque {};
pub const VkVideoSessionKHR = ?*struct_VkVideoSessionKHR_T;
pub const struct_VkVideoSessionParametersKHR_T = opaque {};
pub const VkVideoSessionParametersKHR = ?*struct_VkVideoSessionParametersKHR_T;
pub const VK_QUERY_RESULT_STATUS_ERROR_KHR: c_int = -1;
pub const VK_QUERY_RESULT_STATUS_NOT_READY_KHR: c_int = 0;
pub const VK_QUERY_RESULT_STATUS_COMPLETE_KHR: c_int = 1;
pub const VK_QUERY_RESULT_STATUS_INSUFFICIENT_BITSTREAM_BUFFER_RANGE_KHR: c_int = -1000299000;
pub const VK_QUERY_RESULT_STATUS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkQueryResultStatusKHR = c_int;
pub const VkQueryResultStatusKHR = enum_VkQueryResultStatusKHR;
pub const VK_VIDEO_CODEC_OPERATION_NONE_KHR: c_int = 0;
pub const VK_VIDEO_CODEC_OPERATION_ENCODE_H264_BIT_KHR: c_int = 65536;
pub const VK_VIDEO_CODEC_OPERATION_ENCODE_H265_BIT_KHR: c_int = 131072;
pub const VK_VIDEO_CODEC_OPERATION_DECODE_H264_BIT_KHR: c_int = 1;
pub const VK_VIDEO_CODEC_OPERATION_DECODE_H265_BIT_KHR: c_int = 2;
pub const VK_VIDEO_CODEC_OPERATION_DECODE_AV1_BIT_KHR: c_int = 4;
pub const VK_VIDEO_CODEC_OPERATION_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoCodecOperationFlagBitsKHR = c_uint;
pub const VkVideoCodecOperationFlagBitsKHR = enum_VkVideoCodecOperationFlagBitsKHR;
pub const VkVideoCodecOperationFlagsKHR = VkFlags;
pub const VK_VIDEO_CHROMA_SUBSAMPLING_INVALID_KHR: c_int = 0;
pub const VK_VIDEO_CHROMA_SUBSAMPLING_MONOCHROME_BIT_KHR: c_int = 1;
pub const VK_VIDEO_CHROMA_SUBSAMPLING_420_BIT_KHR: c_int = 2;
pub const VK_VIDEO_CHROMA_SUBSAMPLING_422_BIT_KHR: c_int = 4;
pub const VK_VIDEO_CHROMA_SUBSAMPLING_444_BIT_KHR: c_int = 8;
pub const VK_VIDEO_CHROMA_SUBSAMPLING_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoChromaSubsamplingFlagBitsKHR = c_uint;
pub const VkVideoChromaSubsamplingFlagBitsKHR = enum_VkVideoChromaSubsamplingFlagBitsKHR;
pub const VkVideoChromaSubsamplingFlagsKHR = VkFlags;
pub const VK_VIDEO_COMPONENT_BIT_DEPTH_INVALID_KHR: c_int = 0;
pub const VK_VIDEO_COMPONENT_BIT_DEPTH_8_BIT_KHR: c_int = 1;
pub const VK_VIDEO_COMPONENT_BIT_DEPTH_10_BIT_KHR: c_int = 4;
pub const VK_VIDEO_COMPONENT_BIT_DEPTH_12_BIT_KHR: c_int = 16;
pub const VK_VIDEO_COMPONENT_BIT_DEPTH_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoComponentBitDepthFlagBitsKHR = c_uint;
pub const VkVideoComponentBitDepthFlagBitsKHR = enum_VkVideoComponentBitDepthFlagBitsKHR;
pub const VkVideoComponentBitDepthFlagsKHR = VkFlags;
pub const VK_VIDEO_CAPABILITY_PROTECTED_CONTENT_BIT_KHR: c_int = 1;
pub const VK_VIDEO_CAPABILITY_SEPARATE_REFERENCE_IMAGES_BIT_KHR: c_int = 2;
pub const VK_VIDEO_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoCapabilityFlagBitsKHR = c_uint;
pub const VkVideoCapabilityFlagBitsKHR = enum_VkVideoCapabilityFlagBitsKHR;
pub const VkVideoCapabilityFlagsKHR = VkFlags;
pub const VK_VIDEO_SESSION_CREATE_PROTECTED_CONTENT_BIT_KHR: c_int = 1;
pub const VK_VIDEO_SESSION_CREATE_ALLOW_ENCODE_PARAMETER_OPTIMIZATIONS_BIT_KHR: c_int = 2;
pub const VK_VIDEO_SESSION_CREATE_INLINE_QUERIES_BIT_KHR: c_int = 4;
pub const VK_VIDEO_SESSION_CREATE_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoSessionCreateFlagBitsKHR = c_uint;
pub const VkVideoSessionCreateFlagBitsKHR = enum_VkVideoSessionCreateFlagBitsKHR;
pub const VkVideoSessionCreateFlagsKHR = VkFlags;
pub const VkVideoSessionParametersCreateFlagsKHR = VkFlags;
pub const VkVideoBeginCodingFlagsKHR = VkFlags;
pub const VkVideoEndCodingFlagsKHR = VkFlags;
pub const VK_VIDEO_CODING_CONTROL_RESET_BIT_KHR: c_int = 1;
pub const VK_VIDEO_CODING_CONTROL_ENCODE_RATE_CONTROL_BIT_KHR: c_int = 2;
pub const VK_VIDEO_CODING_CONTROL_ENCODE_QUALITY_LEVEL_BIT_KHR: c_int = 4;
pub const VK_VIDEO_CODING_CONTROL_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoCodingControlFlagBitsKHR = c_uint;
pub const VkVideoCodingControlFlagBitsKHR = enum_VkVideoCodingControlFlagBitsKHR;
pub const VkVideoCodingControlFlagsKHR = VkFlags;
pub const struct_VkQueueFamilyQueryResultStatusPropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    queryResultStatusSupport: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkQueueFamilyQueryResultStatusPropertiesKHR = struct_VkQueueFamilyQueryResultStatusPropertiesKHR;
pub const struct_VkQueueFamilyVideoPropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    videoCodecOperations: VkVideoCodecOperationFlagsKHR = @import("std").mem.zeroes(VkVideoCodecOperationFlagsKHR),
};
pub const VkQueueFamilyVideoPropertiesKHR = struct_VkQueueFamilyVideoPropertiesKHR;
pub const struct_VkVideoProfileInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    videoCodecOperation: VkVideoCodecOperationFlagBitsKHR = @import("std").mem.zeroes(VkVideoCodecOperationFlagBitsKHR),
    chromaSubsampling: VkVideoChromaSubsamplingFlagsKHR = @import("std").mem.zeroes(VkVideoChromaSubsamplingFlagsKHR),
    lumaBitDepth: VkVideoComponentBitDepthFlagsKHR = @import("std").mem.zeroes(VkVideoComponentBitDepthFlagsKHR),
    chromaBitDepth: VkVideoComponentBitDepthFlagsKHR = @import("std").mem.zeroes(VkVideoComponentBitDepthFlagsKHR),
};
pub const VkVideoProfileInfoKHR = struct_VkVideoProfileInfoKHR;
pub const struct_VkVideoProfileListInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    profileCount: u32 = @import("std").mem.zeroes(u32),
    pProfiles: [*c]const VkVideoProfileInfoKHR = @import("std").mem.zeroes([*c]const VkVideoProfileInfoKHR),
};
pub const VkVideoProfileListInfoKHR = struct_VkVideoProfileListInfoKHR;
pub const struct_VkVideoCapabilitiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    flags: VkVideoCapabilityFlagsKHR = @import("std").mem.zeroes(VkVideoCapabilityFlagsKHR),
    minBitstreamBufferOffsetAlignment: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    minBitstreamBufferSizeAlignment: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    pictureAccessGranularity: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    minCodedExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxCodedExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxDpbSlots: u32 = @import("std").mem.zeroes(u32),
    maxActiveReferencePictures: u32 = @import("std").mem.zeroes(u32),
    stdHeaderVersion: VkExtensionProperties = @import("std").mem.zeroes(VkExtensionProperties),
};
pub const VkVideoCapabilitiesKHR = struct_VkVideoCapabilitiesKHR;
pub const struct_VkPhysicalDeviceVideoFormatInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    imageUsage: VkImageUsageFlags = @import("std").mem.zeroes(VkImageUsageFlags),
};
pub const VkPhysicalDeviceVideoFormatInfoKHR = struct_VkPhysicalDeviceVideoFormatInfoKHR;
pub const struct_VkVideoFormatPropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
    componentMapping: VkComponentMapping = @import("std").mem.zeroes(VkComponentMapping),
    imageCreateFlags: VkImageCreateFlags = @import("std").mem.zeroes(VkImageCreateFlags),
    imageType: VkImageType = @import("std").mem.zeroes(VkImageType),
    imageTiling: VkImageTiling = @import("std").mem.zeroes(VkImageTiling),
    imageUsageFlags: VkImageUsageFlags = @import("std").mem.zeroes(VkImageUsageFlags),
};
pub const VkVideoFormatPropertiesKHR = struct_VkVideoFormatPropertiesKHR;
pub const struct_VkVideoPictureResourceInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    codedOffset: VkOffset2D = @import("std").mem.zeroes(VkOffset2D),
    codedExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    baseArrayLayer: u32 = @import("std").mem.zeroes(u32),
    imageViewBinding: VkImageView = @import("std").mem.zeroes(VkImageView),
};
pub const VkVideoPictureResourceInfoKHR = struct_VkVideoPictureResourceInfoKHR;
pub const struct_VkVideoReferenceSlotInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    slotIndex: i32 = @import("std").mem.zeroes(i32),
    pPictureResource: [*c]const VkVideoPictureResourceInfoKHR = @import("std").mem.zeroes([*c]const VkVideoPictureResourceInfoKHR),
};
pub const VkVideoReferenceSlotInfoKHR = struct_VkVideoReferenceSlotInfoKHR;
pub const struct_VkVideoSessionMemoryRequirementsKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    memoryBindIndex: u32 = @import("std").mem.zeroes(u32),
    memoryRequirements: VkMemoryRequirements = @import("std").mem.zeroes(VkMemoryRequirements),
};
pub const VkVideoSessionMemoryRequirementsKHR = struct_VkVideoSessionMemoryRequirementsKHR;
pub const struct_VkBindVideoSessionMemoryInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    memoryBindIndex: u32 = @import("std").mem.zeroes(u32),
    memory: VkDeviceMemory = @import("std").mem.zeroes(VkDeviceMemory),
    memoryOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    memorySize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkBindVideoSessionMemoryInfoKHR = struct_VkBindVideoSessionMemoryInfoKHR;
pub const struct_VkVideoSessionCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    queueFamilyIndex: u32 = @import("std").mem.zeroes(u32),
    flags: VkVideoSessionCreateFlagsKHR = @import("std").mem.zeroes(VkVideoSessionCreateFlagsKHR),
    pVideoProfile: [*c]const VkVideoProfileInfoKHR = @import("std").mem.zeroes([*c]const VkVideoProfileInfoKHR),
    pictureFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
    maxCodedExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    referencePictureFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
    maxDpbSlots: u32 = @import("std").mem.zeroes(u32),
    maxActiveReferencePictures: u32 = @import("std").mem.zeroes(u32),
    pStdHeaderVersion: [*c]const VkExtensionProperties = @import("std").mem.zeroes([*c]const VkExtensionProperties),
};
pub const VkVideoSessionCreateInfoKHR = struct_VkVideoSessionCreateInfoKHR;
pub const struct_VkVideoSessionParametersCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkVideoSessionParametersCreateFlagsKHR = @import("std").mem.zeroes(VkVideoSessionParametersCreateFlagsKHR),
    videoSessionParametersTemplate: VkVideoSessionParametersKHR = @import("std").mem.zeroes(VkVideoSessionParametersKHR),
    videoSession: VkVideoSessionKHR = @import("std").mem.zeroes(VkVideoSessionKHR),
};
pub const VkVideoSessionParametersCreateInfoKHR = struct_VkVideoSessionParametersCreateInfoKHR;
pub const struct_VkVideoSessionParametersUpdateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    updateSequenceCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVideoSessionParametersUpdateInfoKHR = struct_VkVideoSessionParametersUpdateInfoKHR;
pub const struct_VkVideoBeginCodingInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkVideoBeginCodingFlagsKHR = @import("std").mem.zeroes(VkVideoBeginCodingFlagsKHR),
    videoSession: VkVideoSessionKHR = @import("std").mem.zeroes(VkVideoSessionKHR),
    videoSessionParameters: VkVideoSessionParametersKHR = @import("std").mem.zeroes(VkVideoSessionParametersKHR),
    referenceSlotCount: u32 = @import("std").mem.zeroes(u32),
    pReferenceSlots: [*c]const VkVideoReferenceSlotInfoKHR = @import("std").mem.zeroes([*c]const VkVideoReferenceSlotInfoKHR),
};
pub const VkVideoBeginCodingInfoKHR = struct_VkVideoBeginCodingInfoKHR;
pub const struct_VkVideoEndCodingInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkVideoEndCodingFlagsKHR = @import("std").mem.zeroes(VkVideoEndCodingFlagsKHR),
};
pub const VkVideoEndCodingInfoKHR = struct_VkVideoEndCodingInfoKHR;
pub const struct_VkVideoCodingControlInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkVideoCodingControlFlagsKHR = @import("std").mem.zeroes(VkVideoCodingControlFlagsKHR),
};
pub const VkVideoCodingControlInfoKHR = struct_VkVideoCodingControlInfoKHR;
pub const PFN_vkGetPhysicalDeviceVideoCapabilitiesKHR = ?*const fn (VkPhysicalDevice, [*c]const VkVideoProfileInfoKHR, [*c]VkVideoCapabilitiesKHR) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDeviceVideoFormatPropertiesKHR = ?*const fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceVideoFormatInfoKHR, [*c]u32, [*c]VkVideoFormatPropertiesKHR) callconv(.C) VkResult;
pub const PFN_vkCreateVideoSessionKHR = ?*const fn (VkDevice, [*c]const VkVideoSessionCreateInfoKHR, [*c]const VkAllocationCallbacks, [*c]VkVideoSessionKHR) callconv(.C) VkResult;
pub const PFN_vkDestroyVideoSessionKHR = ?*const fn (VkDevice, VkVideoSessionKHR, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkGetVideoSessionMemoryRequirementsKHR = ?*const fn (VkDevice, VkVideoSessionKHR, [*c]u32, [*c]VkVideoSessionMemoryRequirementsKHR) callconv(.C) VkResult;
pub const PFN_vkBindVideoSessionMemoryKHR = ?*const fn (VkDevice, VkVideoSessionKHR, u32, [*c]const VkBindVideoSessionMemoryInfoKHR) callconv(.C) VkResult;
pub const PFN_vkCreateVideoSessionParametersKHR = ?*const fn (VkDevice, [*c]const VkVideoSessionParametersCreateInfoKHR, [*c]const VkAllocationCallbacks, [*c]VkVideoSessionParametersKHR) callconv(.C) VkResult;
pub const PFN_vkUpdateVideoSessionParametersKHR = ?*const fn (VkDevice, VkVideoSessionParametersKHR, [*c]const VkVideoSessionParametersUpdateInfoKHR) callconv(.C) VkResult;
pub const PFN_vkDestroyVideoSessionParametersKHR = ?*const fn (VkDevice, VkVideoSessionParametersKHR, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCmdBeginVideoCodingKHR = ?*const fn (VkCommandBuffer, [*c]const VkVideoBeginCodingInfoKHR) callconv(.C) void;
pub const PFN_vkCmdEndVideoCodingKHR = ?*const fn (VkCommandBuffer, [*c]const VkVideoEndCodingInfoKHR) callconv(.C) void;
pub const PFN_vkCmdControlVideoCodingKHR = ?*const fn (VkCommandBuffer, [*c]const VkVideoCodingControlInfoKHR) callconv(.C) void;
pub extern fn vkGetPhysicalDeviceVideoCapabilitiesKHR(physicalDevice: VkPhysicalDevice, pVideoProfile: [*c]const VkVideoProfileInfoKHR, pCapabilities: [*c]VkVideoCapabilitiesKHR) VkResult;
pub extern fn vkGetPhysicalDeviceVideoFormatPropertiesKHR(physicalDevice: VkPhysicalDevice, pVideoFormatInfo: [*c]const VkPhysicalDeviceVideoFormatInfoKHR, pVideoFormatPropertyCount: [*c]u32, pVideoFormatProperties: [*c]VkVideoFormatPropertiesKHR) VkResult;
pub extern fn vkCreateVideoSessionKHR(device: VkDevice, pCreateInfo: [*c]const VkVideoSessionCreateInfoKHR, pAllocator: [*c]const VkAllocationCallbacks, pVideoSession: [*c]VkVideoSessionKHR) VkResult;
pub extern fn vkDestroyVideoSessionKHR(device: VkDevice, videoSession: VkVideoSessionKHR, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkGetVideoSessionMemoryRequirementsKHR(device: VkDevice, videoSession: VkVideoSessionKHR, pMemoryRequirementsCount: [*c]u32, pMemoryRequirements: [*c]VkVideoSessionMemoryRequirementsKHR) VkResult;
pub extern fn vkBindVideoSessionMemoryKHR(device: VkDevice, videoSession: VkVideoSessionKHR, bindSessionMemoryInfoCount: u32, pBindSessionMemoryInfos: [*c]const VkBindVideoSessionMemoryInfoKHR) VkResult;
pub extern fn vkCreateVideoSessionParametersKHR(device: VkDevice, pCreateInfo: [*c]const VkVideoSessionParametersCreateInfoKHR, pAllocator: [*c]const VkAllocationCallbacks, pVideoSessionParameters: [*c]VkVideoSessionParametersKHR) VkResult;
pub extern fn vkUpdateVideoSessionParametersKHR(device: VkDevice, videoSessionParameters: VkVideoSessionParametersKHR, pUpdateInfo: [*c]const VkVideoSessionParametersUpdateInfoKHR) VkResult;
pub extern fn vkDestroyVideoSessionParametersKHR(device: VkDevice, videoSessionParameters: VkVideoSessionParametersKHR, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkCmdBeginVideoCodingKHR(commandBuffer: VkCommandBuffer, pBeginInfo: [*c]const VkVideoBeginCodingInfoKHR) void;
pub extern fn vkCmdEndVideoCodingKHR(commandBuffer: VkCommandBuffer, pEndCodingInfo: [*c]const VkVideoEndCodingInfoKHR) void;
pub extern fn vkCmdControlVideoCodingKHR(commandBuffer: VkCommandBuffer, pCodingControlInfo: [*c]const VkVideoCodingControlInfoKHR) void;
pub const VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_COINCIDE_BIT_KHR: c_int = 1;
pub const VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_DISTINCT_BIT_KHR: c_int = 2;
pub const VK_VIDEO_DECODE_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoDecodeCapabilityFlagBitsKHR = c_uint;
pub const VkVideoDecodeCapabilityFlagBitsKHR = enum_VkVideoDecodeCapabilityFlagBitsKHR;
pub const VkVideoDecodeCapabilityFlagsKHR = VkFlags;
pub const VK_VIDEO_DECODE_USAGE_DEFAULT_KHR: c_int = 0;
pub const VK_VIDEO_DECODE_USAGE_TRANSCODING_BIT_KHR: c_int = 1;
pub const VK_VIDEO_DECODE_USAGE_OFFLINE_BIT_KHR: c_int = 2;
pub const VK_VIDEO_DECODE_USAGE_STREAMING_BIT_KHR: c_int = 4;
pub const VK_VIDEO_DECODE_USAGE_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoDecodeUsageFlagBitsKHR = c_uint;
pub const VkVideoDecodeUsageFlagBitsKHR = enum_VkVideoDecodeUsageFlagBitsKHR;
pub const VkVideoDecodeUsageFlagsKHR = VkFlags;
pub const VkVideoDecodeFlagsKHR = VkFlags;
pub const struct_VkVideoDecodeCapabilitiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    flags: VkVideoDecodeCapabilityFlagsKHR = @import("std").mem.zeroes(VkVideoDecodeCapabilityFlagsKHR),
};
pub const VkVideoDecodeCapabilitiesKHR = struct_VkVideoDecodeCapabilitiesKHR;
pub const struct_VkVideoDecodeUsageInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    videoUsageHints: VkVideoDecodeUsageFlagsKHR = @import("std").mem.zeroes(VkVideoDecodeUsageFlagsKHR),
};
pub const VkVideoDecodeUsageInfoKHR = struct_VkVideoDecodeUsageInfoKHR;
pub const struct_VkVideoDecodeInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkVideoDecodeFlagsKHR = @import("std").mem.zeroes(VkVideoDecodeFlagsKHR),
    srcBuffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    srcBufferOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    srcBufferRange: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    dstPictureResource: VkVideoPictureResourceInfoKHR = @import("std").mem.zeroes(VkVideoPictureResourceInfoKHR),
    pSetupReferenceSlot: [*c]const VkVideoReferenceSlotInfoKHR = @import("std").mem.zeroes([*c]const VkVideoReferenceSlotInfoKHR),
    referenceSlotCount: u32 = @import("std").mem.zeroes(u32),
    pReferenceSlots: [*c]const VkVideoReferenceSlotInfoKHR = @import("std").mem.zeroes([*c]const VkVideoReferenceSlotInfoKHR),
};
pub const VkVideoDecodeInfoKHR = struct_VkVideoDecodeInfoKHR;
pub const PFN_vkCmdDecodeVideoKHR = ?*const fn (VkCommandBuffer, [*c]const VkVideoDecodeInfoKHR) callconv(.C) void;
pub extern fn vkCmdDecodeVideoKHR(commandBuffer: VkCommandBuffer, pDecodeInfo: [*c]const VkVideoDecodeInfoKHR) void;
pub const STD_VIDEO_H264_CHROMA_FORMAT_IDC_MONOCHROME: c_int = 0;
pub const STD_VIDEO_H264_CHROMA_FORMAT_IDC_420: c_int = 1;
pub const STD_VIDEO_H264_CHROMA_FORMAT_IDC_422: c_int = 2;
pub const STD_VIDEO_H264_CHROMA_FORMAT_IDC_444: c_int = 3;
pub const STD_VIDEO_H264_CHROMA_FORMAT_IDC_INVALID: c_int = 2147483647;
pub const STD_VIDEO_H264_CHROMA_FORMAT_IDC_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoH264ChromaFormatIdc = c_uint;
pub const StdVideoH264ChromaFormatIdc = enum_StdVideoH264ChromaFormatIdc;
pub const STD_VIDEO_H264_PROFILE_IDC_BASELINE: c_int = 66;
pub const STD_VIDEO_H264_PROFILE_IDC_MAIN: c_int = 77;
pub const STD_VIDEO_H264_PROFILE_IDC_HIGH: c_int = 100;
pub const STD_VIDEO_H264_PROFILE_IDC_HIGH_444_PREDICTIVE: c_int = 244;
pub const STD_VIDEO_H264_PROFILE_IDC_INVALID: c_int = 2147483647;
pub const STD_VIDEO_H264_PROFILE_IDC_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoH264ProfileIdc = c_uint;
pub const StdVideoH264ProfileIdc = enum_StdVideoH264ProfileIdc;
pub const STD_VIDEO_H264_LEVEL_IDC_1_0: c_int = 0;
pub const STD_VIDEO_H264_LEVEL_IDC_1_1: c_int = 1;
pub const STD_VIDEO_H264_LEVEL_IDC_1_2: c_int = 2;
pub const STD_VIDEO_H264_LEVEL_IDC_1_3: c_int = 3;
pub const STD_VIDEO_H264_LEVEL_IDC_2_0: c_int = 4;
pub const STD_VIDEO_H264_LEVEL_IDC_2_1: c_int = 5;
pub const STD_VIDEO_H264_LEVEL_IDC_2_2: c_int = 6;
pub const STD_VIDEO_H264_LEVEL_IDC_3_0: c_int = 7;
pub const STD_VIDEO_H264_LEVEL_IDC_3_1: c_int = 8;
pub const STD_VIDEO_H264_LEVEL_IDC_3_2: c_int = 9;
pub const STD_VIDEO_H264_LEVEL_IDC_4_0: c_int = 10;
pub const STD_VIDEO_H264_LEVEL_IDC_4_1: c_int = 11;
pub const STD_VIDEO_H264_LEVEL_IDC_4_2: c_int = 12;
pub const STD_VIDEO_H264_LEVEL_IDC_5_0: c_int = 13;
pub const STD_VIDEO_H264_LEVEL_IDC_5_1: c_int = 14;
pub const STD_VIDEO_H264_LEVEL_IDC_5_2: c_int = 15;
pub const STD_VIDEO_H264_LEVEL_IDC_6_0: c_int = 16;
pub const STD_VIDEO_H264_LEVEL_IDC_6_1: c_int = 17;
pub const STD_VIDEO_H264_LEVEL_IDC_6_2: c_int = 18;
pub const STD_VIDEO_H264_LEVEL_IDC_INVALID: c_int = 2147483647;
pub const STD_VIDEO_H264_LEVEL_IDC_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoH264LevelIdc = c_uint;
pub const StdVideoH264LevelIdc = enum_StdVideoH264LevelIdc;
pub const STD_VIDEO_H264_POC_TYPE_0: c_int = 0;
pub const STD_VIDEO_H264_POC_TYPE_1: c_int = 1;
pub const STD_VIDEO_H264_POC_TYPE_2: c_int = 2;
pub const STD_VIDEO_H264_POC_TYPE_INVALID: c_int = 2147483647;
pub const STD_VIDEO_H264_POC_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoH264PocType = c_uint;
pub const StdVideoH264PocType = enum_StdVideoH264PocType;
pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_UNSPECIFIED: c_int = 0;
pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_SQUARE: c_int = 1;
pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_12_11: c_int = 2;
pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_10_11: c_int = 3;
pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_16_11: c_int = 4;
pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_40_33: c_int = 5;
pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_24_11: c_int = 6;
pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_20_11: c_int = 7;
pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_32_11: c_int = 8;
pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_80_33: c_int = 9;
pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_18_11: c_int = 10;
pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_15_11: c_int = 11;
pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_64_33: c_int = 12;
pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_160_99: c_int = 13;
pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_4_3: c_int = 14;
pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_3_2: c_int = 15;
pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_2_1: c_int = 16;
pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_EXTENDED_SAR: c_int = 255;
pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_INVALID: c_int = 2147483647;
pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoH264AspectRatioIdc = c_uint;
pub const StdVideoH264AspectRatioIdc = enum_StdVideoH264AspectRatioIdc;
pub const STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_DEFAULT: c_int = 0;
pub const STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_EXPLICIT: c_int = 1;
pub const STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_IMPLICIT: c_int = 2;
pub const STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_INVALID: c_int = 2147483647;
pub const STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoH264WeightedBipredIdc = c_uint;
pub const StdVideoH264WeightedBipredIdc = enum_StdVideoH264WeightedBipredIdc;
pub const STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_SHORT_TERM_SUBTRACT: c_int = 0;
pub const STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_SHORT_TERM_ADD: c_int = 1;
pub const STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_LONG_TERM: c_int = 2;
pub const STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_END: c_int = 3;
pub const STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_INVALID: c_int = 2147483647;
pub const STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoH264ModificationOfPicNumsIdc = c_uint;
pub const StdVideoH264ModificationOfPicNumsIdc = enum_StdVideoH264ModificationOfPicNumsIdc;
pub const STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_END: c_int = 0;
pub const STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_SHORT_TERM: c_int = 1;
pub const STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_LONG_TERM: c_int = 2;
pub const STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MARK_LONG_TERM: c_int = 3;
pub const STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_SET_MAX_LONG_TERM_INDEX: c_int = 4;
pub const STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_ALL: c_int = 5;
pub const STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MARK_CURRENT_AS_LONG_TERM: c_int = 6;
pub const STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_INVALID: c_int = 2147483647;
pub const STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoH264MemMgmtControlOp = c_uint;
pub const StdVideoH264MemMgmtControlOp = enum_StdVideoH264MemMgmtControlOp;
pub const STD_VIDEO_H264_CABAC_INIT_IDC_0: c_int = 0;
pub const STD_VIDEO_H264_CABAC_INIT_IDC_1: c_int = 1;
pub const STD_VIDEO_H264_CABAC_INIT_IDC_2: c_int = 2;
pub const STD_VIDEO_H264_CABAC_INIT_IDC_INVALID: c_int = 2147483647;
pub const STD_VIDEO_H264_CABAC_INIT_IDC_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoH264CabacInitIdc = c_uint;
pub const StdVideoH264CabacInitIdc = enum_StdVideoH264CabacInitIdc;
pub const STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_DISABLED: c_int = 0;
pub const STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_ENABLED: c_int = 1;
pub const STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_PARTIAL: c_int = 2;
pub const STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_INVALID: c_int = 2147483647;
pub const STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoH264DisableDeblockingFilterIdc = c_uint;
pub const StdVideoH264DisableDeblockingFilterIdc = enum_StdVideoH264DisableDeblockingFilterIdc;
pub const STD_VIDEO_H264_SLICE_TYPE_P: c_int = 0;
pub const STD_VIDEO_H264_SLICE_TYPE_B: c_int = 1;
pub const STD_VIDEO_H264_SLICE_TYPE_I: c_int = 2;
pub const STD_VIDEO_H264_SLICE_TYPE_INVALID: c_int = 2147483647;
pub const STD_VIDEO_H264_SLICE_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoH264SliceType = c_uint;
pub const StdVideoH264SliceType = enum_StdVideoH264SliceType;
pub const STD_VIDEO_H264_PICTURE_TYPE_P: c_int = 0;
pub const STD_VIDEO_H264_PICTURE_TYPE_B: c_int = 1;
pub const STD_VIDEO_H264_PICTURE_TYPE_I: c_int = 2;
pub const STD_VIDEO_H264_PICTURE_TYPE_IDR: c_int = 5;
pub const STD_VIDEO_H264_PICTURE_TYPE_INVALID: c_int = 2147483647;
pub const STD_VIDEO_H264_PICTURE_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoH264PictureType = c_uint;
pub const StdVideoH264PictureType = enum_StdVideoH264PictureType;
pub const STD_VIDEO_H264_NON_VCL_NALU_TYPE_SPS: c_int = 0;
pub const STD_VIDEO_H264_NON_VCL_NALU_TYPE_PPS: c_int = 1;
pub const STD_VIDEO_H264_NON_VCL_NALU_TYPE_AUD: c_int = 2;
pub const STD_VIDEO_H264_NON_VCL_NALU_TYPE_PREFIX: c_int = 3;
pub const STD_VIDEO_H264_NON_VCL_NALU_TYPE_END_OF_SEQUENCE: c_int = 4;
pub const STD_VIDEO_H264_NON_VCL_NALU_TYPE_END_OF_STREAM: c_int = 5;
pub const STD_VIDEO_H264_NON_VCL_NALU_TYPE_PRECODED: c_int = 6;
pub const STD_VIDEO_H264_NON_VCL_NALU_TYPE_INVALID: c_int = 2147483647;
pub const STD_VIDEO_H264_NON_VCL_NALU_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoH264NonVclNaluType = c_uint;
pub const StdVideoH264NonVclNaluType = enum_StdVideoH264NonVclNaluType;
// /usr/include/vk_video/vulkan_video_codec_h264std.h:181:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoH264SpsVuiFlags = opaque {};
pub const StdVideoH264SpsVuiFlags = struct_StdVideoH264SpsVuiFlags;
pub const struct_StdVideoH264HrdParameters = extern struct {
    cpb_cnt_minus1: u8 = @import("std").mem.zeroes(u8),
    bit_rate_scale: u8 = @import("std").mem.zeroes(u8),
    cpb_size_scale: u8 = @import("std").mem.zeroes(u8),
    reserved1: u8 = @import("std").mem.zeroes(u8),
    bit_rate_value_minus1: [32]u32 = @import("std").mem.zeroes([32]u32),
    cpb_size_value_minus1: [32]u32 = @import("std").mem.zeroes([32]u32),
    cbr_flag: [32]u8 = @import("std").mem.zeroes([32]u8),
    initial_cpb_removal_delay_length_minus1: u32 = @import("std").mem.zeroes(u32),
    cpb_removal_delay_length_minus1: u32 = @import("std").mem.zeroes(u32),
    dpb_output_delay_length_minus1: u32 = @import("std").mem.zeroes(u32),
    time_offset_length: u32 = @import("std").mem.zeroes(u32),
};
pub const StdVideoH264HrdParameters = struct_StdVideoH264HrdParameters;
pub const struct_StdVideoH264SequenceParameterSetVui = extern struct {
    flags: StdVideoH264SpsVuiFlags = @import("std").mem.zeroes(StdVideoH264SpsVuiFlags),
    aspect_ratio_idc: StdVideoH264AspectRatioIdc = @import("std").mem.zeroes(StdVideoH264AspectRatioIdc),
    sar_width: u16 = @import("std").mem.zeroes(u16),
    sar_height: u16 = @import("std").mem.zeroes(u16),
    video_format: u8 = @import("std").mem.zeroes(u8),
    colour_primaries: u8 = @import("std").mem.zeroes(u8),
    transfer_characteristics: u8 = @import("std").mem.zeroes(u8),
    matrix_coefficients: u8 = @import("std").mem.zeroes(u8),
    num_units_in_tick: u32 = @import("std").mem.zeroes(u32),
    time_scale: u32 = @import("std").mem.zeroes(u32),
    max_num_reorder_frames: u8 = @import("std").mem.zeroes(u8),
    max_dec_frame_buffering: u8 = @import("std").mem.zeroes(u8),
    chroma_sample_loc_type_top_field: u8 = @import("std").mem.zeroes(u8),
    chroma_sample_loc_type_bottom_field: u8 = @import("std").mem.zeroes(u8),
    reserved1: u32 = @import("std").mem.zeroes(u32),
    pHrdParameters: [*c]const StdVideoH264HrdParameters = @import("std").mem.zeroes([*c]const StdVideoH264HrdParameters),
};
pub const StdVideoH264SequenceParameterSetVui = struct_StdVideoH264SequenceParameterSetVui;
// /usr/include/vk_video/vulkan_video_codec_h264std.h:229:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoH264SpsFlags = opaque {};
pub const StdVideoH264SpsFlags = struct_StdVideoH264SpsFlags;
pub const struct_StdVideoH264ScalingLists = extern struct {
    scaling_list_present_mask: u16 = @import("std").mem.zeroes(u16),
    use_default_scaling_matrix_mask: u16 = @import("std").mem.zeroes(u16),
    ScalingList4x4: [6][16]u8 = @import("std").mem.zeroes([6][16]u8),
    ScalingList8x8: [6][64]u8 = @import("std").mem.zeroes([6][64]u8),
};
pub const StdVideoH264ScalingLists = struct_StdVideoH264ScalingLists;
pub const struct_StdVideoH264SequenceParameterSet = extern struct {
    flags: StdVideoH264SpsFlags = @import("std").mem.zeroes(StdVideoH264SpsFlags),
    profile_idc: StdVideoH264ProfileIdc = @import("std").mem.zeroes(StdVideoH264ProfileIdc),
    level_idc: StdVideoH264LevelIdc = @import("std").mem.zeroes(StdVideoH264LevelIdc),
    chroma_format_idc: StdVideoH264ChromaFormatIdc = @import("std").mem.zeroes(StdVideoH264ChromaFormatIdc),
    seq_parameter_set_id: u8 = @import("std").mem.zeroes(u8),
    bit_depth_luma_minus8: u8 = @import("std").mem.zeroes(u8),
    bit_depth_chroma_minus8: u8 = @import("std").mem.zeroes(u8),
    log2_max_frame_num_minus4: u8 = @import("std").mem.zeroes(u8),
    pic_order_cnt_type: StdVideoH264PocType = @import("std").mem.zeroes(StdVideoH264PocType),
    offset_for_non_ref_pic: i32 = @import("std").mem.zeroes(i32),
    offset_for_top_to_bottom_field: i32 = @import("std").mem.zeroes(i32),
    log2_max_pic_order_cnt_lsb_minus4: u8 = @import("std").mem.zeroes(u8),
    num_ref_frames_in_pic_order_cnt_cycle: u8 = @import("std").mem.zeroes(u8),
    max_num_ref_frames: u8 = @import("std").mem.zeroes(u8),
    reserved1: u8 = @import("std").mem.zeroes(u8),
    pic_width_in_mbs_minus1: u32 = @import("std").mem.zeroes(u32),
    pic_height_in_map_units_minus1: u32 = @import("std").mem.zeroes(u32),
    frame_crop_left_offset: u32 = @import("std").mem.zeroes(u32),
    frame_crop_right_offset: u32 = @import("std").mem.zeroes(u32),
    frame_crop_top_offset: u32 = @import("std").mem.zeroes(u32),
    frame_crop_bottom_offset: u32 = @import("std").mem.zeroes(u32),
    reserved2: u32 = @import("std").mem.zeroes(u32),
    pOffsetForRefFrame: [*c]const i32 = @import("std").mem.zeroes([*c]const i32),
    pScalingLists: [*c]const StdVideoH264ScalingLists = @import("std").mem.zeroes([*c]const StdVideoH264ScalingLists),
    pSequenceParameterSetVui: ?*const StdVideoH264SequenceParameterSetVui = @import("std").mem.zeroes(?*const StdVideoH264SequenceParameterSetVui),
};
pub const StdVideoH264SequenceParameterSet = struct_StdVideoH264SequenceParameterSet;
// /usr/include/vk_video/vulkan_video_codec_h264std.h:283:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoH264PpsFlags = opaque {};
pub const StdVideoH264PpsFlags = struct_StdVideoH264PpsFlags;
pub const struct_StdVideoH264PictureParameterSet = extern struct {
    flags: StdVideoH264PpsFlags = @import("std").mem.zeroes(StdVideoH264PpsFlags),
    seq_parameter_set_id: u8 = @import("std").mem.zeroes(u8),
    pic_parameter_set_id: u8 = @import("std").mem.zeroes(u8),
    num_ref_idx_l0_default_active_minus1: u8 = @import("std").mem.zeroes(u8),
    num_ref_idx_l1_default_active_minus1: u8 = @import("std").mem.zeroes(u8),
    weighted_bipred_idc: StdVideoH264WeightedBipredIdc = @import("std").mem.zeroes(StdVideoH264WeightedBipredIdc),
    pic_init_qp_minus26: i8 = @import("std").mem.zeroes(i8),
    pic_init_qs_minus26: i8 = @import("std").mem.zeroes(i8),
    chroma_qp_index_offset: i8 = @import("std").mem.zeroes(i8),
    second_chroma_qp_index_offset: i8 = @import("std").mem.zeroes(i8),
    pScalingLists: [*c]const StdVideoH264ScalingLists = @import("std").mem.zeroes([*c]const StdVideoH264ScalingLists),
};
pub const StdVideoH264PictureParameterSet = struct_StdVideoH264PictureParameterSet;
pub const struct_StdVideoEncodeH264WeightTableFlags = extern struct {
    luma_weight_l0_flag: u32 = @import("std").mem.zeroes(u32),
    chroma_weight_l0_flag: u32 = @import("std").mem.zeroes(u32),
    luma_weight_l1_flag: u32 = @import("std").mem.zeroes(u32),
    chroma_weight_l1_flag: u32 = @import("std").mem.zeroes(u32),
};
pub const StdVideoEncodeH264WeightTableFlags = struct_StdVideoEncodeH264WeightTableFlags;
pub const struct_StdVideoEncodeH264WeightTable = extern struct {
    flags: StdVideoEncodeH264WeightTableFlags = @import("std").mem.zeroes(StdVideoEncodeH264WeightTableFlags),
    luma_log2_weight_denom: u8 = @import("std").mem.zeroes(u8),
    chroma_log2_weight_denom: u8 = @import("std").mem.zeroes(u8),
    luma_weight_l0: [32]i8 = @import("std").mem.zeroes([32]i8),
    luma_offset_l0: [32]i8 = @import("std").mem.zeroes([32]i8),
    chroma_weight_l0: [32][2]i8 = @import("std").mem.zeroes([32][2]i8),
    chroma_offset_l0: [32][2]i8 = @import("std").mem.zeroes([32][2]i8),
    luma_weight_l1: [32]i8 = @import("std").mem.zeroes([32]i8),
    luma_offset_l1: [32]i8 = @import("std").mem.zeroes([32]i8),
    chroma_weight_l1: [32][2]i8 = @import("std").mem.zeroes([32][2]i8),
    chroma_offset_l1: [32][2]i8 = @import("std").mem.zeroes([32][2]i8),
};
pub const StdVideoEncodeH264WeightTable = struct_StdVideoEncodeH264WeightTable;
// /usr/include/vk_video/vulkan_video_codec_h264std_encode.h:52:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoEncodeH264SliceHeaderFlags = opaque {};
pub const StdVideoEncodeH264SliceHeaderFlags = struct_StdVideoEncodeH264SliceHeaderFlags;
// /usr/include/vk_video/vulkan_video_codec_h264std_encode.h:58:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoEncodeH264PictureInfoFlags = opaque {};
pub const StdVideoEncodeH264PictureInfoFlags = struct_StdVideoEncodeH264PictureInfoFlags;
// /usr/include/vk_video/vulkan_video_codec_h264std_encode.h:67:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoEncodeH264ReferenceInfoFlags = opaque {};
pub const StdVideoEncodeH264ReferenceInfoFlags = struct_StdVideoEncodeH264ReferenceInfoFlags;
// /usr/include/vk_video/vulkan_video_codec_h264std_encode.h:72:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoEncodeH264ReferenceListsInfoFlags = opaque {};
pub const StdVideoEncodeH264ReferenceListsInfoFlags = struct_StdVideoEncodeH264ReferenceListsInfoFlags;
pub const struct_StdVideoEncodeH264RefListModEntry = extern struct {
    modification_of_pic_nums_idc: StdVideoH264ModificationOfPicNumsIdc = @import("std").mem.zeroes(StdVideoH264ModificationOfPicNumsIdc),
    abs_diff_pic_num_minus1: u16 = @import("std").mem.zeroes(u16),
    long_term_pic_num: u16 = @import("std").mem.zeroes(u16),
};
pub const StdVideoEncodeH264RefListModEntry = struct_StdVideoEncodeH264RefListModEntry;
pub const struct_StdVideoEncodeH264RefPicMarkingEntry = extern struct {
    memory_management_control_operation: StdVideoH264MemMgmtControlOp = @import("std").mem.zeroes(StdVideoH264MemMgmtControlOp),
    difference_of_pic_nums_minus1: u16 = @import("std").mem.zeroes(u16),
    long_term_pic_num: u16 = @import("std").mem.zeroes(u16),
    long_term_frame_idx: u16 = @import("std").mem.zeroes(u16),
    max_long_term_frame_idx_plus1: u16 = @import("std").mem.zeroes(u16),
};
pub const StdVideoEncodeH264RefPicMarkingEntry = struct_StdVideoEncodeH264RefPicMarkingEntry;
pub const struct_StdVideoEncodeH264ReferenceListsInfo = extern struct {
    flags: StdVideoEncodeH264ReferenceListsInfoFlags = @import("std").mem.zeroes(StdVideoEncodeH264ReferenceListsInfoFlags),
    num_ref_idx_l0_active_minus1: u8 = @import("std").mem.zeroes(u8),
    num_ref_idx_l1_active_minus1: u8 = @import("std").mem.zeroes(u8),
    RefPicList0: [32]u8 = @import("std").mem.zeroes([32]u8),
    RefPicList1: [32]u8 = @import("std").mem.zeroes([32]u8),
    refList0ModOpCount: u8 = @import("std").mem.zeroes(u8),
    refList1ModOpCount: u8 = @import("std").mem.zeroes(u8),
    refPicMarkingOpCount: u8 = @import("std").mem.zeroes(u8),
    reserved1: [7]u8 = @import("std").mem.zeroes([7]u8),
    pRefList0ModOperations: [*c]const StdVideoEncodeH264RefListModEntry = @import("std").mem.zeroes([*c]const StdVideoEncodeH264RefListModEntry),
    pRefList1ModOperations: [*c]const StdVideoEncodeH264RefListModEntry = @import("std").mem.zeroes([*c]const StdVideoEncodeH264RefListModEntry),
    pRefPicMarkingOperations: [*c]const StdVideoEncodeH264RefPicMarkingEntry = @import("std").mem.zeroes([*c]const StdVideoEncodeH264RefPicMarkingEntry),
};
pub const StdVideoEncodeH264ReferenceListsInfo = struct_StdVideoEncodeH264ReferenceListsInfo;
pub const struct_StdVideoEncodeH264PictureInfo = extern struct {
    flags: StdVideoEncodeH264PictureInfoFlags = @import("std").mem.zeroes(StdVideoEncodeH264PictureInfoFlags),
    seq_parameter_set_id: u8 = @import("std").mem.zeroes(u8),
    pic_parameter_set_id: u8 = @import("std").mem.zeroes(u8),
    idr_pic_id: u16 = @import("std").mem.zeroes(u16),
    primary_pic_type: StdVideoH264PictureType = @import("std").mem.zeroes(StdVideoH264PictureType),
    frame_num: u32 = @import("std").mem.zeroes(u32),
    PicOrderCnt: i32 = @import("std").mem.zeroes(i32),
    temporal_id: u8 = @import("std").mem.zeroes(u8),
    reserved1: [3]u8 = @import("std").mem.zeroes([3]u8),
    pRefLists: ?*const StdVideoEncodeH264ReferenceListsInfo = @import("std").mem.zeroes(?*const StdVideoEncodeH264ReferenceListsInfo),
};
pub const StdVideoEncodeH264PictureInfo = struct_StdVideoEncodeH264PictureInfo;
pub const struct_StdVideoEncodeH264ReferenceInfo = extern struct {
    flags: StdVideoEncodeH264ReferenceInfoFlags = @import("std").mem.zeroes(StdVideoEncodeH264ReferenceInfoFlags),
    primary_pic_type: StdVideoH264PictureType = @import("std").mem.zeroes(StdVideoH264PictureType),
    FrameNum: u32 = @import("std").mem.zeroes(u32),
    PicOrderCnt: i32 = @import("std").mem.zeroes(i32),
    long_term_pic_num: u16 = @import("std").mem.zeroes(u16),
    long_term_frame_idx: u16 = @import("std").mem.zeroes(u16),
    temporal_id: u8 = @import("std").mem.zeroes(u8),
};
pub const StdVideoEncodeH264ReferenceInfo = struct_StdVideoEncodeH264ReferenceInfo;
pub const struct_StdVideoEncodeH264SliceHeader = extern struct {
    flags: StdVideoEncodeH264SliceHeaderFlags = @import("std").mem.zeroes(StdVideoEncodeH264SliceHeaderFlags),
    first_mb_in_slice: u32 = @import("std").mem.zeroes(u32),
    slice_type: StdVideoH264SliceType = @import("std").mem.zeroes(StdVideoH264SliceType),
    slice_alpha_c0_offset_div2: i8 = @import("std").mem.zeroes(i8),
    slice_beta_offset_div2: i8 = @import("std").mem.zeroes(i8),
    slice_qp_delta: i8 = @import("std").mem.zeroes(i8),
    reserved1: u8 = @import("std").mem.zeroes(u8),
    cabac_init_idc: StdVideoH264CabacInitIdc = @import("std").mem.zeroes(StdVideoH264CabacInitIdc),
    disable_deblocking_filter_idc: StdVideoH264DisableDeblockingFilterIdc = @import("std").mem.zeroes(StdVideoH264DisableDeblockingFilterIdc),
    pWeightTable: [*c]const StdVideoEncodeH264WeightTable = @import("std").mem.zeroes([*c]const StdVideoEncodeH264WeightTable),
};
pub const StdVideoEncodeH264SliceHeader = struct_StdVideoEncodeH264SliceHeader;
pub const VK_VIDEO_ENCODE_H264_CAPABILITY_HRD_COMPLIANCE_BIT_KHR: c_int = 1;
pub const VK_VIDEO_ENCODE_H264_CAPABILITY_PREDICTION_WEIGHT_TABLE_GENERATED_BIT_KHR: c_int = 2;
pub const VK_VIDEO_ENCODE_H264_CAPABILITY_ROW_UNALIGNED_SLICE_BIT_KHR: c_int = 4;
pub const VK_VIDEO_ENCODE_H264_CAPABILITY_DIFFERENT_SLICE_TYPE_BIT_KHR: c_int = 8;
pub const VK_VIDEO_ENCODE_H264_CAPABILITY_B_FRAME_IN_L0_LIST_BIT_KHR: c_int = 16;
pub const VK_VIDEO_ENCODE_H264_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_KHR: c_int = 32;
pub const VK_VIDEO_ENCODE_H264_CAPABILITY_PER_PICTURE_TYPE_MIN_MAX_QP_BIT_KHR: c_int = 64;
pub const VK_VIDEO_ENCODE_H264_CAPABILITY_PER_SLICE_CONSTANT_QP_BIT_KHR: c_int = 128;
pub const VK_VIDEO_ENCODE_H264_CAPABILITY_GENERATE_PREFIX_NALU_BIT_KHR: c_int = 256;
pub const VK_VIDEO_ENCODE_H264_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoEncodeH264CapabilityFlagBitsKHR = c_uint;
pub const VkVideoEncodeH264CapabilityFlagBitsKHR = enum_VkVideoEncodeH264CapabilityFlagBitsKHR;
pub const VkVideoEncodeH264CapabilityFlagsKHR = VkFlags;
pub const VK_VIDEO_ENCODE_H264_STD_SEPARATE_COLOR_PLANE_FLAG_SET_BIT_KHR: c_int = 1;
pub const VK_VIDEO_ENCODE_H264_STD_QPPRIME_Y_ZERO_TRANSFORM_BYPASS_FLAG_SET_BIT_KHR: c_int = 2;
pub const VK_VIDEO_ENCODE_H264_STD_SCALING_MATRIX_PRESENT_FLAG_SET_BIT_KHR: c_int = 4;
pub const VK_VIDEO_ENCODE_H264_STD_CHROMA_QP_INDEX_OFFSET_BIT_KHR: c_int = 8;
pub const VK_VIDEO_ENCODE_H264_STD_SECOND_CHROMA_QP_INDEX_OFFSET_BIT_KHR: c_int = 16;
pub const VK_VIDEO_ENCODE_H264_STD_PIC_INIT_QP_MINUS26_BIT_KHR: c_int = 32;
pub const VK_VIDEO_ENCODE_H264_STD_WEIGHTED_PRED_FLAG_SET_BIT_KHR: c_int = 64;
pub const VK_VIDEO_ENCODE_H264_STD_WEIGHTED_BIPRED_IDC_EXPLICIT_BIT_KHR: c_int = 128;
pub const VK_VIDEO_ENCODE_H264_STD_WEIGHTED_BIPRED_IDC_IMPLICIT_BIT_KHR: c_int = 256;
pub const VK_VIDEO_ENCODE_H264_STD_TRANSFORM_8X8_MODE_FLAG_SET_BIT_KHR: c_int = 512;
pub const VK_VIDEO_ENCODE_H264_STD_DIRECT_SPATIAL_MV_PRED_FLAG_UNSET_BIT_KHR: c_int = 1024;
pub const VK_VIDEO_ENCODE_H264_STD_ENTROPY_CODING_MODE_FLAG_UNSET_BIT_KHR: c_int = 2048;
pub const VK_VIDEO_ENCODE_H264_STD_ENTROPY_CODING_MODE_FLAG_SET_BIT_KHR: c_int = 4096;
pub const VK_VIDEO_ENCODE_H264_STD_DIRECT_8X8_INFERENCE_FLAG_UNSET_BIT_KHR: c_int = 8192;
pub const VK_VIDEO_ENCODE_H264_STD_CONSTRAINED_INTRA_PRED_FLAG_SET_BIT_KHR: c_int = 16384;
pub const VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_DISABLED_BIT_KHR: c_int = 32768;
pub const VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_ENABLED_BIT_KHR: c_int = 65536;
pub const VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_PARTIAL_BIT_KHR: c_int = 131072;
pub const VK_VIDEO_ENCODE_H264_STD_SLICE_QP_DELTA_BIT_KHR: c_int = 524288;
pub const VK_VIDEO_ENCODE_H264_STD_DIFFERENT_SLICE_QP_DELTA_BIT_KHR: c_int = 1048576;
pub const VK_VIDEO_ENCODE_H264_STD_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoEncodeH264StdFlagBitsKHR = c_uint;
pub const VkVideoEncodeH264StdFlagBitsKHR = enum_VkVideoEncodeH264StdFlagBitsKHR;
pub const VkVideoEncodeH264StdFlagsKHR = VkFlags;
pub const VK_VIDEO_ENCODE_H264_RATE_CONTROL_ATTEMPT_HRD_COMPLIANCE_BIT_KHR: c_int = 1;
pub const VK_VIDEO_ENCODE_H264_RATE_CONTROL_REGULAR_GOP_BIT_KHR: c_int = 2;
pub const VK_VIDEO_ENCODE_H264_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR: c_int = 4;
pub const VK_VIDEO_ENCODE_H264_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR: c_int = 8;
pub const VK_VIDEO_ENCODE_H264_RATE_CONTROL_TEMPORAL_LAYER_PATTERN_DYADIC_BIT_KHR: c_int = 16;
pub const VK_VIDEO_ENCODE_H264_RATE_CONTROL_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoEncodeH264RateControlFlagBitsKHR = c_uint;
pub const VkVideoEncodeH264RateControlFlagBitsKHR = enum_VkVideoEncodeH264RateControlFlagBitsKHR;
pub const VkVideoEncodeH264RateControlFlagsKHR = VkFlags;
pub const struct_VkVideoEncodeH264CapabilitiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    flags: VkVideoEncodeH264CapabilityFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeH264CapabilityFlagsKHR),
    maxLevelIdc: StdVideoH264LevelIdc = @import("std").mem.zeroes(StdVideoH264LevelIdc),
    maxSliceCount: u32 = @import("std").mem.zeroes(u32),
    maxPPictureL0ReferenceCount: u32 = @import("std").mem.zeroes(u32),
    maxBPictureL0ReferenceCount: u32 = @import("std").mem.zeroes(u32),
    maxL1ReferenceCount: u32 = @import("std").mem.zeroes(u32),
    maxTemporalLayerCount: u32 = @import("std").mem.zeroes(u32),
    expectDyadicTemporalLayerPattern: VkBool32 = @import("std").mem.zeroes(VkBool32),
    minQp: i32 = @import("std").mem.zeroes(i32),
    maxQp: i32 = @import("std").mem.zeroes(i32),
    prefersGopRemainingFrames: VkBool32 = @import("std").mem.zeroes(VkBool32),
    requiresGopRemainingFrames: VkBool32 = @import("std").mem.zeroes(VkBool32),
    stdSyntaxFlags: VkVideoEncodeH264StdFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeH264StdFlagsKHR),
};
pub const VkVideoEncodeH264CapabilitiesKHR = struct_VkVideoEncodeH264CapabilitiesKHR;
pub const struct_VkVideoEncodeH264QpKHR = extern struct {
    qpI: i32 = @import("std").mem.zeroes(i32),
    qpP: i32 = @import("std").mem.zeroes(i32),
    qpB: i32 = @import("std").mem.zeroes(i32),
};
pub const VkVideoEncodeH264QpKHR = struct_VkVideoEncodeH264QpKHR;
pub const struct_VkVideoEncodeH264QualityLevelPropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    preferredRateControlFlags: VkVideoEncodeH264RateControlFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeH264RateControlFlagsKHR),
    preferredGopFrameCount: u32 = @import("std").mem.zeroes(u32),
    preferredIdrPeriod: u32 = @import("std").mem.zeroes(u32),
    preferredConsecutiveBFrameCount: u32 = @import("std").mem.zeroes(u32),
    preferredTemporalLayerCount: u32 = @import("std").mem.zeroes(u32),
    preferredConstantQp: VkVideoEncodeH264QpKHR = @import("std").mem.zeroes(VkVideoEncodeH264QpKHR),
    preferredMaxL0ReferenceCount: u32 = @import("std").mem.zeroes(u32),
    preferredMaxL1ReferenceCount: u32 = @import("std").mem.zeroes(u32),
    preferredStdEntropyCodingModeFlag: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkVideoEncodeH264QualityLevelPropertiesKHR = struct_VkVideoEncodeH264QualityLevelPropertiesKHR;
pub const struct_VkVideoEncodeH264SessionCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    useMaxLevelIdc: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxLevelIdc: StdVideoH264LevelIdc = @import("std").mem.zeroes(StdVideoH264LevelIdc),
};
pub const VkVideoEncodeH264SessionCreateInfoKHR = struct_VkVideoEncodeH264SessionCreateInfoKHR;
pub const struct_VkVideoEncodeH264SessionParametersAddInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stdSPSCount: u32 = @import("std").mem.zeroes(u32),
    pStdSPSs: ?*const StdVideoH264SequenceParameterSet = @import("std").mem.zeroes(?*const StdVideoH264SequenceParameterSet),
    stdPPSCount: u32 = @import("std").mem.zeroes(u32),
    pStdPPSs: ?*const StdVideoH264PictureParameterSet = @import("std").mem.zeroes(?*const StdVideoH264PictureParameterSet),
};
pub const VkVideoEncodeH264SessionParametersAddInfoKHR = struct_VkVideoEncodeH264SessionParametersAddInfoKHR;
pub const struct_VkVideoEncodeH264SessionParametersCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    maxStdSPSCount: u32 = @import("std").mem.zeroes(u32),
    maxStdPPSCount: u32 = @import("std").mem.zeroes(u32),
    pParametersAddInfo: [*c]const VkVideoEncodeH264SessionParametersAddInfoKHR = @import("std").mem.zeroes([*c]const VkVideoEncodeH264SessionParametersAddInfoKHR),
};
pub const VkVideoEncodeH264SessionParametersCreateInfoKHR = struct_VkVideoEncodeH264SessionParametersCreateInfoKHR;
pub const struct_VkVideoEncodeH264SessionParametersGetInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    writeStdSPS: VkBool32 = @import("std").mem.zeroes(VkBool32),
    writeStdPPS: VkBool32 = @import("std").mem.zeroes(VkBool32),
    stdSPSId: u32 = @import("std").mem.zeroes(u32),
    stdPPSId: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVideoEncodeH264SessionParametersGetInfoKHR = struct_VkVideoEncodeH264SessionParametersGetInfoKHR;
pub const struct_VkVideoEncodeH264SessionParametersFeedbackInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    hasStdSPSOverrides: VkBool32 = @import("std").mem.zeroes(VkBool32),
    hasStdPPSOverrides: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkVideoEncodeH264SessionParametersFeedbackInfoKHR = struct_VkVideoEncodeH264SessionParametersFeedbackInfoKHR;
pub const struct_VkVideoEncodeH264NaluSliceInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    constantQp: i32 = @import("std").mem.zeroes(i32),
    pStdSliceHeader: ?*const StdVideoEncodeH264SliceHeader = @import("std").mem.zeroes(?*const StdVideoEncodeH264SliceHeader),
};
pub const VkVideoEncodeH264NaluSliceInfoKHR = struct_VkVideoEncodeH264NaluSliceInfoKHR;
pub const struct_VkVideoEncodeH264PictureInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    naluSliceEntryCount: u32 = @import("std").mem.zeroes(u32),
    pNaluSliceEntries: [*c]const VkVideoEncodeH264NaluSliceInfoKHR = @import("std").mem.zeroes([*c]const VkVideoEncodeH264NaluSliceInfoKHR),
    pStdPictureInfo: ?*const StdVideoEncodeH264PictureInfo = @import("std").mem.zeroes(?*const StdVideoEncodeH264PictureInfo),
    generatePrefixNalu: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkVideoEncodeH264PictureInfoKHR = struct_VkVideoEncodeH264PictureInfoKHR;
pub const struct_VkVideoEncodeH264DpbSlotInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pStdReferenceInfo: ?*const StdVideoEncodeH264ReferenceInfo = @import("std").mem.zeroes(?*const StdVideoEncodeH264ReferenceInfo),
};
pub const VkVideoEncodeH264DpbSlotInfoKHR = struct_VkVideoEncodeH264DpbSlotInfoKHR;
pub const struct_VkVideoEncodeH264ProfileInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stdProfileIdc: StdVideoH264ProfileIdc = @import("std").mem.zeroes(StdVideoH264ProfileIdc),
};
pub const VkVideoEncodeH264ProfileInfoKHR = struct_VkVideoEncodeH264ProfileInfoKHR;
pub const struct_VkVideoEncodeH264RateControlInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkVideoEncodeH264RateControlFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeH264RateControlFlagsKHR),
    gopFrameCount: u32 = @import("std").mem.zeroes(u32),
    idrPeriod: u32 = @import("std").mem.zeroes(u32),
    consecutiveBFrameCount: u32 = @import("std").mem.zeroes(u32),
    temporalLayerCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVideoEncodeH264RateControlInfoKHR = struct_VkVideoEncodeH264RateControlInfoKHR;
pub const struct_VkVideoEncodeH264FrameSizeKHR = extern struct {
    frameISize: u32 = @import("std").mem.zeroes(u32),
    framePSize: u32 = @import("std").mem.zeroes(u32),
    frameBSize: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVideoEncodeH264FrameSizeKHR = struct_VkVideoEncodeH264FrameSizeKHR;
pub const struct_VkVideoEncodeH264RateControlLayerInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    useMinQp: VkBool32 = @import("std").mem.zeroes(VkBool32),
    minQp: VkVideoEncodeH264QpKHR = @import("std").mem.zeroes(VkVideoEncodeH264QpKHR),
    useMaxQp: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxQp: VkVideoEncodeH264QpKHR = @import("std").mem.zeroes(VkVideoEncodeH264QpKHR),
    useMaxFrameSize: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxFrameSize: VkVideoEncodeH264FrameSizeKHR = @import("std").mem.zeroes(VkVideoEncodeH264FrameSizeKHR),
};
pub const VkVideoEncodeH264RateControlLayerInfoKHR = struct_VkVideoEncodeH264RateControlLayerInfoKHR;
pub const struct_VkVideoEncodeH264GopRemainingFrameInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    useGopRemainingFrames: VkBool32 = @import("std").mem.zeroes(VkBool32),
    gopRemainingI: u32 = @import("std").mem.zeroes(u32),
    gopRemainingP: u32 = @import("std").mem.zeroes(u32),
    gopRemainingB: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVideoEncodeH264GopRemainingFrameInfoKHR = struct_VkVideoEncodeH264GopRemainingFrameInfoKHR;
pub const STD_VIDEO_H265_CHROMA_FORMAT_IDC_MONOCHROME: c_int = 0;
pub const STD_VIDEO_H265_CHROMA_FORMAT_IDC_420: c_int = 1;
pub const STD_VIDEO_H265_CHROMA_FORMAT_IDC_422: c_int = 2;
pub const STD_VIDEO_H265_CHROMA_FORMAT_IDC_444: c_int = 3;
pub const STD_VIDEO_H265_CHROMA_FORMAT_IDC_INVALID: c_int = 2147483647;
pub const STD_VIDEO_H265_CHROMA_FORMAT_IDC_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoH265ChromaFormatIdc = c_uint;
pub const StdVideoH265ChromaFormatIdc = enum_StdVideoH265ChromaFormatIdc;
pub const STD_VIDEO_H265_PROFILE_IDC_MAIN: c_int = 1;
pub const STD_VIDEO_H265_PROFILE_IDC_MAIN_10: c_int = 2;
pub const STD_VIDEO_H265_PROFILE_IDC_MAIN_STILL_PICTURE: c_int = 3;
pub const STD_VIDEO_H265_PROFILE_IDC_FORMAT_RANGE_EXTENSIONS: c_int = 4;
pub const STD_VIDEO_H265_PROFILE_IDC_SCC_EXTENSIONS: c_int = 9;
pub const STD_VIDEO_H265_PROFILE_IDC_INVALID: c_int = 2147483647;
pub const STD_VIDEO_H265_PROFILE_IDC_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoH265ProfileIdc = c_uint;
pub const StdVideoH265ProfileIdc = enum_StdVideoH265ProfileIdc;
pub const STD_VIDEO_H265_LEVEL_IDC_1_0: c_int = 0;
pub const STD_VIDEO_H265_LEVEL_IDC_2_0: c_int = 1;
pub const STD_VIDEO_H265_LEVEL_IDC_2_1: c_int = 2;
pub const STD_VIDEO_H265_LEVEL_IDC_3_0: c_int = 3;
pub const STD_VIDEO_H265_LEVEL_IDC_3_1: c_int = 4;
pub const STD_VIDEO_H265_LEVEL_IDC_4_0: c_int = 5;
pub const STD_VIDEO_H265_LEVEL_IDC_4_1: c_int = 6;
pub const STD_VIDEO_H265_LEVEL_IDC_5_0: c_int = 7;
pub const STD_VIDEO_H265_LEVEL_IDC_5_1: c_int = 8;
pub const STD_VIDEO_H265_LEVEL_IDC_5_2: c_int = 9;
pub const STD_VIDEO_H265_LEVEL_IDC_6_0: c_int = 10;
pub const STD_VIDEO_H265_LEVEL_IDC_6_1: c_int = 11;
pub const STD_VIDEO_H265_LEVEL_IDC_6_2: c_int = 12;
pub const STD_VIDEO_H265_LEVEL_IDC_INVALID: c_int = 2147483647;
pub const STD_VIDEO_H265_LEVEL_IDC_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoH265LevelIdc = c_uint;
pub const StdVideoH265LevelIdc = enum_StdVideoH265LevelIdc;
pub const STD_VIDEO_H265_SLICE_TYPE_B: c_int = 0;
pub const STD_VIDEO_H265_SLICE_TYPE_P: c_int = 1;
pub const STD_VIDEO_H265_SLICE_TYPE_I: c_int = 2;
pub const STD_VIDEO_H265_SLICE_TYPE_INVALID: c_int = 2147483647;
pub const STD_VIDEO_H265_SLICE_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoH265SliceType = c_uint;
pub const StdVideoH265SliceType = enum_StdVideoH265SliceType;
pub const STD_VIDEO_H265_PICTURE_TYPE_P: c_int = 0;
pub const STD_VIDEO_H265_PICTURE_TYPE_B: c_int = 1;
pub const STD_VIDEO_H265_PICTURE_TYPE_I: c_int = 2;
pub const STD_VIDEO_H265_PICTURE_TYPE_IDR: c_int = 3;
pub const STD_VIDEO_H265_PICTURE_TYPE_INVALID: c_int = 2147483647;
pub const STD_VIDEO_H265_PICTURE_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoH265PictureType = c_uint;
pub const StdVideoH265PictureType = enum_StdVideoH265PictureType;
pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_UNSPECIFIED: c_int = 0;
pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_SQUARE: c_int = 1;
pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_12_11: c_int = 2;
pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_10_11: c_int = 3;
pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_16_11: c_int = 4;
pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_40_33: c_int = 5;
pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_24_11: c_int = 6;
pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_20_11: c_int = 7;
pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_32_11: c_int = 8;
pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_80_33: c_int = 9;
pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_18_11: c_int = 10;
pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_15_11: c_int = 11;
pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_64_33: c_int = 12;
pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_160_99: c_int = 13;
pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_4_3: c_int = 14;
pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_3_2: c_int = 15;
pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_2_1: c_int = 16;
pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_EXTENDED_SAR: c_int = 255;
pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_INVALID: c_int = 2147483647;
pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoH265AspectRatioIdc = c_uint;
pub const StdVideoH265AspectRatioIdc = enum_StdVideoH265AspectRatioIdc;
pub const struct_StdVideoH265DecPicBufMgr = extern struct {
    max_latency_increase_plus1: [7]u32 = @import("std").mem.zeroes([7]u32),
    max_dec_pic_buffering_minus1: [7]u8 = @import("std").mem.zeroes([7]u8),
    max_num_reorder_pics: [7]u8 = @import("std").mem.zeroes([7]u8),
};
pub const StdVideoH265DecPicBufMgr = struct_StdVideoH265DecPicBufMgr;
pub const struct_StdVideoH265SubLayerHrdParameters = extern struct {
    bit_rate_value_minus1: [32]u32 = @import("std").mem.zeroes([32]u32),
    cpb_size_value_minus1: [32]u32 = @import("std").mem.zeroes([32]u32),
    cpb_size_du_value_minus1: [32]u32 = @import("std").mem.zeroes([32]u32),
    bit_rate_du_value_minus1: [32]u32 = @import("std").mem.zeroes([32]u32),
    cbr_flag: u32 = @import("std").mem.zeroes(u32),
};
pub const StdVideoH265SubLayerHrdParameters = struct_StdVideoH265SubLayerHrdParameters;
// /usr/include/vk_video/vulkan_video_codec_h265std.h:140:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoH265HrdFlags = opaque {};
pub const StdVideoH265HrdFlags = struct_StdVideoH265HrdFlags;
pub const struct_StdVideoH265HrdParameters = extern struct {
    flags: StdVideoH265HrdFlags = @import("std").mem.zeroes(StdVideoH265HrdFlags),
    tick_divisor_minus2: u8 = @import("std").mem.zeroes(u8),
    du_cpb_removal_delay_increment_length_minus1: u8 = @import("std").mem.zeroes(u8),
    dpb_output_delay_du_length_minus1: u8 = @import("std").mem.zeroes(u8),
    bit_rate_scale: u8 = @import("std").mem.zeroes(u8),
    cpb_size_scale: u8 = @import("std").mem.zeroes(u8),
    cpb_size_du_scale: u8 = @import("std").mem.zeroes(u8),
    initial_cpb_removal_delay_length_minus1: u8 = @import("std").mem.zeroes(u8),
    au_cpb_removal_delay_length_minus1: u8 = @import("std").mem.zeroes(u8),
    dpb_output_delay_length_minus1: u8 = @import("std").mem.zeroes(u8),
    cpb_cnt_minus1: [7]u8 = @import("std").mem.zeroes([7]u8),
    elemental_duration_in_tc_minus1: [7]u16 = @import("std").mem.zeroes([7]u16),
    reserved: [3]u16 = @import("std").mem.zeroes([3]u16),
    pSubLayerHrdParametersNal: [*c]const StdVideoH265SubLayerHrdParameters = @import("std").mem.zeroes([*c]const StdVideoH265SubLayerHrdParameters),
    pSubLayerHrdParametersVcl: [*c]const StdVideoH265SubLayerHrdParameters = @import("std").mem.zeroes([*c]const StdVideoH265SubLayerHrdParameters),
};
pub const StdVideoH265HrdParameters = struct_StdVideoH265HrdParameters;
// /usr/include/vk_video/vulkan_video_codec_h265std.h:168:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoH265VpsFlags = opaque {};
pub const StdVideoH265VpsFlags = struct_StdVideoH265VpsFlags;
// /usr/include/vk_video/vulkan_video_codec_h265std.h:175:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoH265ProfileTierLevelFlags = opaque {};
pub const StdVideoH265ProfileTierLevelFlags = struct_StdVideoH265ProfileTierLevelFlags;
pub const struct_StdVideoH265ProfileTierLevel = extern struct {
    flags: StdVideoH265ProfileTierLevelFlags = @import("std").mem.zeroes(StdVideoH265ProfileTierLevelFlags),
    general_profile_idc: StdVideoH265ProfileIdc = @import("std").mem.zeroes(StdVideoH265ProfileIdc),
    general_level_idc: StdVideoH265LevelIdc = @import("std").mem.zeroes(StdVideoH265LevelIdc),
};
pub const StdVideoH265ProfileTierLevel = struct_StdVideoH265ProfileTierLevel;
pub const struct_StdVideoH265VideoParameterSet = extern struct {
    flags: StdVideoH265VpsFlags = @import("std").mem.zeroes(StdVideoH265VpsFlags),
    vps_video_parameter_set_id: u8 = @import("std").mem.zeroes(u8),
    vps_max_sub_layers_minus1: u8 = @import("std").mem.zeroes(u8),
    reserved1: u8 = @import("std").mem.zeroes(u8),
    reserved2: u8 = @import("std").mem.zeroes(u8),
    vps_num_units_in_tick: u32 = @import("std").mem.zeroes(u32),
    vps_time_scale: u32 = @import("std").mem.zeroes(u32),
    vps_num_ticks_poc_diff_one_minus1: u32 = @import("std").mem.zeroes(u32),
    reserved3: u32 = @import("std").mem.zeroes(u32),
    pDecPicBufMgr: [*c]const StdVideoH265DecPicBufMgr = @import("std").mem.zeroes([*c]const StdVideoH265DecPicBufMgr),
    pHrdParameters: ?*const StdVideoH265HrdParameters = @import("std").mem.zeroes(?*const StdVideoH265HrdParameters),
    pProfileTierLevel: ?*const StdVideoH265ProfileTierLevel = @import("std").mem.zeroes(?*const StdVideoH265ProfileTierLevel),
};
pub const StdVideoH265VideoParameterSet = struct_StdVideoH265VideoParameterSet;
pub const struct_StdVideoH265ScalingLists = extern struct {
    ScalingList4x4: [6][16]u8 = @import("std").mem.zeroes([6][16]u8),
    ScalingList8x8: [6][64]u8 = @import("std").mem.zeroes([6][64]u8),
    ScalingList16x16: [6][64]u8 = @import("std").mem.zeroes([6][64]u8),
    ScalingList32x32: [2][64]u8 = @import("std").mem.zeroes([2][64]u8),
    ScalingListDCCoef16x16: [6]u8 = @import("std").mem.zeroes([6]u8),
    ScalingListDCCoef32x32: [2]u8 = @import("std").mem.zeroes([2]u8),
};
pub const StdVideoH265ScalingLists = struct_StdVideoH265ScalingLists;
// /usr/include/vk_video/vulkan_video_codec_h265std.h:213:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoH265SpsVuiFlags = opaque {};
pub const StdVideoH265SpsVuiFlags = struct_StdVideoH265SpsVuiFlags;
pub const struct_StdVideoH265SequenceParameterSetVui = extern struct {
    flags: StdVideoH265SpsVuiFlags = @import("std").mem.zeroes(StdVideoH265SpsVuiFlags),
    aspect_ratio_idc: StdVideoH265AspectRatioIdc = @import("std").mem.zeroes(StdVideoH265AspectRatioIdc),
    sar_width: u16 = @import("std").mem.zeroes(u16),
    sar_height: u16 = @import("std").mem.zeroes(u16),
    video_format: u8 = @import("std").mem.zeroes(u8),
    colour_primaries: u8 = @import("std").mem.zeroes(u8),
    transfer_characteristics: u8 = @import("std").mem.zeroes(u8),
    matrix_coeffs: u8 = @import("std").mem.zeroes(u8),
    chroma_sample_loc_type_top_field: u8 = @import("std").mem.zeroes(u8),
    chroma_sample_loc_type_bottom_field: u8 = @import("std").mem.zeroes(u8),
    reserved1: u8 = @import("std").mem.zeroes(u8),
    reserved2: u8 = @import("std").mem.zeroes(u8),
    def_disp_win_left_offset: u16 = @import("std").mem.zeroes(u16),
    def_disp_win_right_offset: u16 = @import("std").mem.zeroes(u16),
    def_disp_win_top_offset: u16 = @import("std").mem.zeroes(u16),
    def_disp_win_bottom_offset: u16 = @import("std").mem.zeroes(u16),
    vui_num_units_in_tick: u32 = @import("std").mem.zeroes(u32),
    vui_time_scale: u32 = @import("std").mem.zeroes(u32),
    vui_num_ticks_poc_diff_one_minus1: u32 = @import("std").mem.zeroes(u32),
    min_spatial_segmentation_idc: u16 = @import("std").mem.zeroes(u16),
    reserved3: u16 = @import("std").mem.zeroes(u16),
    max_bytes_per_pic_denom: u8 = @import("std").mem.zeroes(u8),
    max_bits_per_min_cu_denom: u8 = @import("std").mem.zeroes(u8),
    log2_max_mv_length_horizontal: u8 = @import("std").mem.zeroes(u8),
    log2_max_mv_length_vertical: u8 = @import("std").mem.zeroes(u8),
    pHrdParameters: ?*const StdVideoH265HrdParameters = @import("std").mem.zeroes(?*const StdVideoH265HrdParameters),
};
pub const StdVideoH265SequenceParameterSetVui = struct_StdVideoH265SequenceParameterSetVui;
pub const struct_StdVideoH265PredictorPaletteEntries = extern struct {
    PredictorPaletteEntries: [3][128]u16 = @import("std").mem.zeroes([3][128]u16),
};
pub const StdVideoH265PredictorPaletteEntries = struct_StdVideoH265PredictorPaletteEntries;
// /usr/include/vk_video/vulkan_video_codec_h265std.h:267:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoH265SpsFlags = opaque {};
pub const StdVideoH265SpsFlags = struct_StdVideoH265SpsFlags;
// /usr/include/vk_video/vulkan_video_codec_h265std.h:300:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoH265ShortTermRefPicSetFlags = opaque {};
pub const StdVideoH265ShortTermRefPicSetFlags = struct_StdVideoH265ShortTermRefPicSetFlags;
pub const struct_StdVideoH265ShortTermRefPicSet = extern struct {
    flags: StdVideoH265ShortTermRefPicSetFlags = @import("std").mem.zeroes(StdVideoH265ShortTermRefPicSetFlags),
    delta_idx_minus1: u32 = @import("std").mem.zeroes(u32),
    use_delta_flag: u16 = @import("std").mem.zeroes(u16),
    abs_delta_rps_minus1: u16 = @import("std").mem.zeroes(u16),
    used_by_curr_pic_flag: u16 = @import("std").mem.zeroes(u16),
    used_by_curr_pic_s0_flag: u16 = @import("std").mem.zeroes(u16),
    used_by_curr_pic_s1_flag: u16 = @import("std").mem.zeroes(u16),
    reserved1: u16 = @import("std").mem.zeroes(u16),
    reserved2: u8 = @import("std").mem.zeroes(u8),
    reserved3: u8 = @import("std").mem.zeroes(u8),
    num_negative_pics: u8 = @import("std").mem.zeroes(u8),
    num_positive_pics: u8 = @import("std").mem.zeroes(u8),
    delta_poc_s0_minus1: [16]u16 = @import("std").mem.zeroes([16]u16),
    delta_poc_s1_minus1: [16]u16 = @import("std").mem.zeroes([16]u16),
};
pub const StdVideoH265ShortTermRefPicSet = struct_StdVideoH265ShortTermRefPicSet;
pub const struct_StdVideoH265LongTermRefPicsSps = extern struct {
    used_by_curr_pic_lt_sps_flag: u32 = @import("std").mem.zeroes(u32),
    lt_ref_pic_poc_lsb_sps: [32]u32 = @import("std").mem.zeroes([32]u32),
};
pub const StdVideoH265LongTermRefPicsSps = struct_StdVideoH265LongTermRefPicsSps;
pub const struct_StdVideoH265SequenceParameterSet = extern struct {
    flags: StdVideoH265SpsFlags = @import("std").mem.zeroes(StdVideoH265SpsFlags),
    chroma_format_idc: StdVideoH265ChromaFormatIdc = @import("std").mem.zeroes(StdVideoH265ChromaFormatIdc),
    pic_width_in_luma_samples: u32 = @import("std").mem.zeroes(u32),
    pic_height_in_luma_samples: u32 = @import("std").mem.zeroes(u32),
    sps_video_parameter_set_id: u8 = @import("std").mem.zeroes(u8),
    sps_max_sub_layers_minus1: u8 = @import("std").mem.zeroes(u8),
    sps_seq_parameter_set_id: u8 = @import("std").mem.zeroes(u8),
    bit_depth_luma_minus8: u8 = @import("std").mem.zeroes(u8),
    bit_depth_chroma_minus8: u8 = @import("std").mem.zeroes(u8),
    log2_max_pic_order_cnt_lsb_minus4: u8 = @import("std").mem.zeroes(u8),
    log2_min_luma_coding_block_size_minus3: u8 = @import("std").mem.zeroes(u8),
    log2_diff_max_min_luma_coding_block_size: u8 = @import("std").mem.zeroes(u8),
    log2_min_luma_transform_block_size_minus2: u8 = @import("std").mem.zeroes(u8),
    log2_diff_max_min_luma_transform_block_size: u8 = @import("std").mem.zeroes(u8),
    max_transform_hierarchy_depth_inter: u8 = @import("std").mem.zeroes(u8),
    max_transform_hierarchy_depth_intra: u8 = @import("std").mem.zeroes(u8),
    num_short_term_ref_pic_sets: u8 = @import("std").mem.zeroes(u8),
    num_long_term_ref_pics_sps: u8 = @import("std").mem.zeroes(u8),
    pcm_sample_bit_depth_luma_minus1: u8 = @import("std").mem.zeroes(u8),
    pcm_sample_bit_depth_chroma_minus1: u8 = @import("std").mem.zeroes(u8),
    log2_min_pcm_luma_coding_block_size_minus3: u8 = @import("std").mem.zeroes(u8),
    log2_diff_max_min_pcm_luma_coding_block_size: u8 = @import("std").mem.zeroes(u8),
    reserved1: u8 = @import("std").mem.zeroes(u8),
    reserved2: u8 = @import("std").mem.zeroes(u8),
    palette_max_size: u8 = @import("std").mem.zeroes(u8),
    delta_palette_max_predictor_size: u8 = @import("std").mem.zeroes(u8),
    motion_vector_resolution_control_idc: u8 = @import("std").mem.zeroes(u8),
    sps_num_palette_predictor_initializers_minus1: u8 = @import("std").mem.zeroes(u8),
    conf_win_left_offset: u32 = @import("std").mem.zeroes(u32),
    conf_win_right_offset: u32 = @import("std").mem.zeroes(u32),
    conf_win_top_offset: u32 = @import("std").mem.zeroes(u32),
    conf_win_bottom_offset: u32 = @import("std").mem.zeroes(u32),
    pProfileTierLevel: ?*const StdVideoH265ProfileTierLevel = @import("std").mem.zeroes(?*const StdVideoH265ProfileTierLevel),
    pDecPicBufMgr: [*c]const StdVideoH265DecPicBufMgr = @import("std").mem.zeroes([*c]const StdVideoH265DecPicBufMgr),
    pScalingLists: [*c]const StdVideoH265ScalingLists = @import("std").mem.zeroes([*c]const StdVideoH265ScalingLists),
    pShortTermRefPicSet: ?*const StdVideoH265ShortTermRefPicSet = @import("std").mem.zeroes(?*const StdVideoH265ShortTermRefPicSet),
    pLongTermRefPicsSps: [*c]const StdVideoH265LongTermRefPicsSps = @import("std").mem.zeroes([*c]const StdVideoH265LongTermRefPicsSps),
    pSequenceParameterSetVui: ?*const StdVideoH265SequenceParameterSetVui = @import("std").mem.zeroes(?*const StdVideoH265SequenceParameterSetVui),
    pPredictorPaletteEntries: [*c]const StdVideoH265PredictorPaletteEntries = @import("std").mem.zeroes([*c]const StdVideoH265PredictorPaletteEntries),
};
pub const StdVideoH265SequenceParameterSet = struct_StdVideoH265SequenceParameterSet;
// /usr/include/vk_video/vulkan_video_codec_h265std.h:369:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoH265PpsFlags = opaque {};
pub const StdVideoH265PpsFlags = struct_StdVideoH265PpsFlags;
pub const struct_StdVideoH265PictureParameterSet = extern struct {
    flags: StdVideoH265PpsFlags = @import("std").mem.zeroes(StdVideoH265PpsFlags),
    pps_pic_parameter_set_id: u8 = @import("std").mem.zeroes(u8),
    pps_seq_parameter_set_id: u8 = @import("std").mem.zeroes(u8),
    sps_video_parameter_set_id: u8 = @import("std").mem.zeroes(u8),
    num_extra_slice_header_bits: u8 = @import("std").mem.zeroes(u8),
    num_ref_idx_l0_default_active_minus1: u8 = @import("std").mem.zeroes(u8),
    num_ref_idx_l1_default_active_minus1: u8 = @import("std").mem.zeroes(u8),
    init_qp_minus26: i8 = @import("std").mem.zeroes(i8),
    diff_cu_qp_delta_depth: u8 = @import("std").mem.zeroes(u8),
    pps_cb_qp_offset: i8 = @import("std").mem.zeroes(i8),
    pps_cr_qp_offset: i8 = @import("std").mem.zeroes(i8),
    pps_beta_offset_div2: i8 = @import("std").mem.zeroes(i8),
    pps_tc_offset_div2: i8 = @import("std").mem.zeroes(i8),
    log2_parallel_merge_level_minus2: u8 = @import("std").mem.zeroes(u8),
    log2_max_transform_skip_block_size_minus2: u8 = @import("std").mem.zeroes(u8),
    diff_cu_chroma_qp_offset_depth: u8 = @import("std").mem.zeroes(u8),
    chroma_qp_offset_list_len_minus1: u8 = @import("std").mem.zeroes(u8),
    cb_qp_offset_list: [6]i8 = @import("std").mem.zeroes([6]i8),
    cr_qp_offset_list: [6]i8 = @import("std").mem.zeroes([6]i8),
    log2_sao_offset_scale_luma: u8 = @import("std").mem.zeroes(u8),
    log2_sao_offset_scale_chroma: u8 = @import("std").mem.zeroes(u8),
    pps_act_y_qp_offset_plus5: i8 = @import("std").mem.zeroes(i8),
    pps_act_cb_qp_offset_plus5: i8 = @import("std").mem.zeroes(i8),
    pps_act_cr_qp_offset_plus3: i8 = @import("std").mem.zeroes(i8),
    pps_num_palette_predictor_initializers: u8 = @import("std").mem.zeroes(u8),
    luma_bit_depth_entry_minus8: u8 = @import("std").mem.zeroes(u8),
    chroma_bit_depth_entry_minus8: u8 = @import("std").mem.zeroes(u8),
    num_tile_columns_minus1: u8 = @import("std").mem.zeroes(u8),
    num_tile_rows_minus1: u8 = @import("std").mem.zeroes(u8),
    reserved1: u8 = @import("std").mem.zeroes(u8),
    reserved2: u8 = @import("std").mem.zeroes(u8),
    column_width_minus1: [19]u16 = @import("std").mem.zeroes([19]u16),
    row_height_minus1: [21]u16 = @import("std").mem.zeroes([21]u16),
    reserved3: u32 = @import("std").mem.zeroes(u32),
    pScalingLists: [*c]const StdVideoH265ScalingLists = @import("std").mem.zeroes([*c]const StdVideoH265ScalingLists),
    pPredictorPaletteEntries: [*c]const StdVideoH265PredictorPaletteEntries = @import("std").mem.zeroes([*c]const StdVideoH265PredictorPaletteEntries),
};
pub const StdVideoH265PictureParameterSet = struct_StdVideoH265PictureParameterSet;
pub const struct_StdVideoEncodeH265WeightTableFlags = extern struct {
    luma_weight_l0_flag: u16 = @import("std").mem.zeroes(u16),
    chroma_weight_l0_flag: u16 = @import("std").mem.zeroes(u16),
    luma_weight_l1_flag: u16 = @import("std").mem.zeroes(u16),
    chroma_weight_l1_flag: u16 = @import("std").mem.zeroes(u16),
};
pub const StdVideoEncodeH265WeightTableFlags = struct_StdVideoEncodeH265WeightTableFlags;
pub const struct_StdVideoEncodeH265WeightTable = extern struct {
    flags: StdVideoEncodeH265WeightTableFlags = @import("std").mem.zeroes(StdVideoEncodeH265WeightTableFlags),
    luma_log2_weight_denom: u8 = @import("std").mem.zeroes(u8),
    delta_chroma_log2_weight_denom: i8 = @import("std").mem.zeroes(i8),
    delta_luma_weight_l0: [15]i8 = @import("std").mem.zeroes([15]i8),
    luma_offset_l0: [15]i8 = @import("std").mem.zeroes([15]i8),
    delta_chroma_weight_l0: [15][2]i8 = @import("std").mem.zeroes([15][2]i8),
    delta_chroma_offset_l0: [15][2]i8 = @import("std").mem.zeroes([15][2]i8),
    delta_luma_weight_l1: [15]i8 = @import("std").mem.zeroes([15]i8),
    luma_offset_l1: [15]i8 = @import("std").mem.zeroes([15]i8),
    delta_chroma_weight_l1: [15][2]i8 = @import("std").mem.zeroes([15][2]i8),
    delta_chroma_offset_l1: [15][2]i8 = @import("std").mem.zeroes([15][2]i8),
};
pub const StdVideoEncodeH265WeightTable = struct_StdVideoEncodeH265WeightTable;
// /usr/include/vk_video/vulkan_video_codec_h265std_encode.h:52:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoEncodeH265SliceSegmentHeaderFlags = opaque {};
pub const StdVideoEncodeH265SliceSegmentHeaderFlags = struct_StdVideoEncodeH265SliceSegmentHeaderFlags;
pub const struct_StdVideoEncodeH265SliceSegmentHeader = extern struct {
    flags: StdVideoEncodeH265SliceSegmentHeaderFlags = @import("std").mem.zeroes(StdVideoEncodeH265SliceSegmentHeaderFlags),
    slice_type: StdVideoH265SliceType = @import("std").mem.zeroes(StdVideoH265SliceType),
    slice_segment_address: u32 = @import("std").mem.zeroes(u32),
    collocated_ref_idx: u8 = @import("std").mem.zeroes(u8),
    MaxNumMergeCand: u8 = @import("std").mem.zeroes(u8),
    slice_cb_qp_offset: i8 = @import("std").mem.zeroes(i8),
    slice_cr_qp_offset: i8 = @import("std").mem.zeroes(i8),
    slice_beta_offset_div2: i8 = @import("std").mem.zeroes(i8),
    slice_tc_offset_div2: i8 = @import("std").mem.zeroes(i8),
    slice_act_y_qp_offset: i8 = @import("std").mem.zeroes(i8),
    slice_act_cb_qp_offset: i8 = @import("std").mem.zeroes(i8),
    slice_act_cr_qp_offset: i8 = @import("std").mem.zeroes(i8),
    slice_qp_delta: i8 = @import("std").mem.zeroes(i8),
    reserved1: u16 = @import("std").mem.zeroes(u16),
    pWeightTable: [*c]const StdVideoEncodeH265WeightTable = @import("std").mem.zeroes([*c]const StdVideoEncodeH265WeightTable),
};
pub const StdVideoEncodeH265SliceSegmentHeader = struct_StdVideoEncodeH265SliceSegmentHeader;
// /usr/include/vk_video/vulkan_video_codec_h265std_encode.h:86:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoEncodeH265ReferenceListsInfoFlags = opaque {};
pub const StdVideoEncodeH265ReferenceListsInfoFlags = struct_StdVideoEncodeH265ReferenceListsInfoFlags;
pub const struct_StdVideoEncodeH265ReferenceListsInfo = extern struct {
    flags: StdVideoEncodeH265ReferenceListsInfoFlags = @import("std").mem.zeroes(StdVideoEncodeH265ReferenceListsInfoFlags),
    num_ref_idx_l0_active_minus1: u8 = @import("std").mem.zeroes(u8),
    num_ref_idx_l1_active_minus1: u8 = @import("std").mem.zeroes(u8),
    RefPicList0: [15]u8 = @import("std").mem.zeroes([15]u8),
    RefPicList1: [15]u8 = @import("std").mem.zeroes([15]u8),
    list_entry_l0: [15]u8 = @import("std").mem.zeroes([15]u8),
    list_entry_l1: [15]u8 = @import("std").mem.zeroes([15]u8),
};
pub const StdVideoEncodeH265ReferenceListsInfo = struct_StdVideoEncodeH265ReferenceListsInfo;
// /usr/include/vk_video/vulkan_video_codec_h265std_encode.h:102:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoEncodeH265PictureInfoFlags = opaque {};
pub const StdVideoEncodeH265PictureInfoFlags = struct_StdVideoEncodeH265PictureInfoFlags;
pub const struct_StdVideoEncodeH265LongTermRefPics = extern struct {
    num_long_term_sps: u8 = @import("std").mem.zeroes(u8),
    num_long_term_pics: u8 = @import("std").mem.zeroes(u8),
    lt_idx_sps: [32]u8 = @import("std").mem.zeroes([32]u8),
    poc_lsb_lt: [16]u8 = @import("std").mem.zeroes([16]u8),
    used_by_curr_pic_lt_flag: u16 = @import("std").mem.zeroes(u16),
    delta_poc_msb_present_flag: [48]u8 = @import("std").mem.zeroes([48]u8),
    delta_poc_msb_cycle_lt: [48]u8 = @import("std").mem.zeroes([48]u8),
};
pub const StdVideoEncodeH265LongTermRefPics = struct_StdVideoEncodeH265LongTermRefPics;
pub const struct_StdVideoEncodeH265PictureInfo = extern struct {
    flags: StdVideoEncodeH265PictureInfoFlags = @import("std").mem.zeroes(StdVideoEncodeH265PictureInfoFlags),
    pic_type: StdVideoH265PictureType = @import("std").mem.zeroes(StdVideoH265PictureType),
    sps_video_parameter_set_id: u8 = @import("std").mem.zeroes(u8),
    pps_seq_parameter_set_id: u8 = @import("std").mem.zeroes(u8),
    pps_pic_parameter_set_id: u8 = @import("std").mem.zeroes(u8),
    short_term_ref_pic_set_idx: u8 = @import("std").mem.zeroes(u8),
    PicOrderCntVal: i32 = @import("std").mem.zeroes(i32),
    TemporalId: u8 = @import("std").mem.zeroes(u8),
    reserved1: [7]u8 = @import("std").mem.zeroes([7]u8),
    pRefLists: ?*const StdVideoEncodeH265ReferenceListsInfo = @import("std").mem.zeroes(?*const StdVideoEncodeH265ReferenceListsInfo),
    pShortTermRefPicSet: ?*const StdVideoH265ShortTermRefPicSet = @import("std").mem.zeroes(?*const StdVideoH265ShortTermRefPicSet),
    pLongTermRefPics: [*c]const StdVideoEncodeH265LongTermRefPics = @import("std").mem.zeroes([*c]const StdVideoEncodeH265LongTermRefPics),
};
pub const StdVideoEncodeH265PictureInfo = struct_StdVideoEncodeH265PictureInfo;
// /usr/include/vk_video/vulkan_video_codec_h265std_encode.h:140:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoEncodeH265ReferenceInfoFlags = opaque {};
pub const StdVideoEncodeH265ReferenceInfoFlags = struct_StdVideoEncodeH265ReferenceInfoFlags;
pub const struct_StdVideoEncodeH265ReferenceInfo = extern struct {
    flags: StdVideoEncodeH265ReferenceInfoFlags = @import("std").mem.zeroes(StdVideoEncodeH265ReferenceInfoFlags),
    pic_type: StdVideoH265PictureType = @import("std").mem.zeroes(StdVideoH265PictureType),
    PicOrderCntVal: i32 = @import("std").mem.zeroes(i32),
    TemporalId: u8 = @import("std").mem.zeroes(u8),
};
pub const StdVideoEncodeH265ReferenceInfo = struct_StdVideoEncodeH265ReferenceInfo;
pub const VK_VIDEO_ENCODE_H265_CAPABILITY_HRD_COMPLIANCE_BIT_KHR: c_int = 1;
pub const VK_VIDEO_ENCODE_H265_CAPABILITY_PREDICTION_WEIGHT_TABLE_GENERATED_BIT_KHR: c_int = 2;
pub const VK_VIDEO_ENCODE_H265_CAPABILITY_ROW_UNALIGNED_SLICE_SEGMENT_BIT_KHR: c_int = 4;
pub const VK_VIDEO_ENCODE_H265_CAPABILITY_DIFFERENT_SLICE_SEGMENT_TYPE_BIT_KHR: c_int = 8;
pub const VK_VIDEO_ENCODE_H265_CAPABILITY_B_FRAME_IN_L0_LIST_BIT_KHR: c_int = 16;
pub const VK_VIDEO_ENCODE_H265_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_KHR: c_int = 32;
pub const VK_VIDEO_ENCODE_H265_CAPABILITY_PER_PICTURE_TYPE_MIN_MAX_QP_BIT_KHR: c_int = 64;
pub const VK_VIDEO_ENCODE_H265_CAPABILITY_PER_SLICE_SEGMENT_CONSTANT_QP_BIT_KHR: c_int = 128;
pub const VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_TILES_PER_SLICE_SEGMENT_BIT_KHR: c_int = 256;
pub const VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_SLICE_SEGMENTS_PER_TILE_BIT_KHR: c_int = 512;
pub const VK_VIDEO_ENCODE_H265_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoEncodeH265CapabilityFlagBitsKHR = c_uint;
pub const VkVideoEncodeH265CapabilityFlagBitsKHR = enum_VkVideoEncodeH265CapabilityFlagBitsKHR;
pub const VkVideoEncodeH265CapabilityFlagsKHR = VkFlags;
pub const VK_VIDEO_ENCODE_H265_STD_SEPARATE_COLOR_PLANE_FLAG_SET_BIT_KHR: c_int = 1;
pub const VK_VIDEO_ENCODE_H265_STD_SAMPLE_ADAPTIVE_OFFSET_ENABLED_FLAG_SET_BIT_KHR: c_int = 2;
pub const VK_VIDEO_ENCODE_H265_STD_SCALING_LIST_DATA_PRESENT_FLAG_SET_BIT_KHR: c_int = 4;
pub const VK_VIDEO_ENCODE_H265_STD_PCM_ENABLED_FLAG_SET_BIT_KHR: c_int = 8;
pub const VK_VIDEO_ENCODE_H265_STD_SPS_TEMPORAL_MVP_ENABLED_FLAG_SET_BIT_KHR: c_int = 16;
pub const VK_VIDEO_ENCODE_H265_STD_INIT_QP_MINUS26_BIT_KHR: c_int = 32;
pub const VK_VIDEO_ENCODE_H265_STD_WEIGHTED_PRED_FLAG_SET_BIT_KHR: c_int = 64;
pub const VK_VIDEO_ENCODE_H265_STD_WEIGHTED_BIPRED_FLAG_SET_BIT_KHR: c_int = 128;
pub const VK_VIDEO_ENCODE_H265_STD_LOG2_PARALLEL_MERGE_LEVEL_MINUS2_BIT_KHR: c_int = 256;
pub const VK_VIDEO_ENCODE_H265_STD_SIGN_DATA_HIDING_ENABLED_FLAG_SET_BIT_KHR: c_int = 512;
pub const VK_VIDEO_ENCODE_H265_STD_TRANSFORM_SKIP_ENABLED_FLAG_SET_BIT_KHR: c_int = 1024;
pub const VK_VIDEO_ENCODE_H265_STD_TRANSFORM_SKIP_ENABLED_FLAG_UNSET_BIT_KHR: c_int = 2048;
pub const VK_VIDEO_ENCODE_H265_STD_PPS_SLICE_CHROMA_QP_OFFSETS_PRESENT_FLAG_SET_BIT_KHR: c_int = 4096;
pub const VK_VIDEO_ENCODE_H265_STD_TRANSQUANT_BYPASS_ENABLED_FLAG_SET_BIT_KHR: c_int = 8192;
pub const VK_VIDEO_ENCODE_H265_STD_CONSTRAINED_INTRA_PRED_FLAG_SET_BIT_KHR: c_int = 16384;
pub const VK_VIDEO_ENCODE_H265_STD_ENTROPY_CODING_SYNC_ENABLED_FLAG_SET_BIT_KHR: c_int = 32768;
pub const VK_VIDEO_ENCODE_H265_STD_DEBLOCKING_FILTER_OVERRIDE_ENABLED_FLAG_SET_BIT_KHR: c_int = 65536;
pub const VK_VIDEO_ENCODE_H265_STD_DEPENDENT_SLICE_SEGMENTS_ENABLED_FLAG_SET_BIT_KHR: c_int = 131072;
pub const VK_VIDEO_ENCODE_H265_STD_DEPENDENT_SLICE_SEGMENT_FLAG_SET_BIT_KHR: c_int = 262144;
pub const VK_VIDEO_ENCODE_H265_STD_SLICE_QP_DELTA_BIT_KHR: c_int = 524288;
pub const VK_VIDEO_ENCODE_H265_STD_DIFFERENT_SLICE_QP_DELTA_BIT_KHR: c_int = 1048576;
pub const VK_VIDEO_ENCODE_H265_STD_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoEncodeH265StdFlagBitsKHR = c_uint;
pub const VkVideoEncodeH265StdFlagBitsKHR = enum_VkVideoEncodeH265StdFlagBitsKHR;
pub const VkVideoEncodeH265StdFlagsKHR = VkFlags;
pub const VK_VIDEO_ENCODE_H265_CTB_SIZE_16_BIT_KHR: c_int = 1;
pub const VK_VIDEO_ENCODE_H265_CTB_SIZE_32_BIT_KHR: c_int = 2;
pub const VK_VIDEO_ENCODE_H265_CTB_SIZE_64_BIT_KHR: c_int = 4;
pub const VK_VIDEO_ENCODE_H265_CTB_SIZE_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoEncodeH265CtbSizeFlagBitsKHR = c_uint;
pub const VkVideoEncodeH265CtbSizeFlagBitsKHR = enum_VkVideoEncodeH265CtbSizeFlagBitsKHR;
pub const VkVideoEncodeH265CtbSizeFlagsKHR = VkFlags;
pub const VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_4_BIT_KHR: c_int = 1;
pub const VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_8_BIT_KHR: c_int = 2;
pub const VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_16_BIT_KHR: c_int = 4;
pub const VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_32_BIT_KHR: c_int = 8;
pub const VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoEncodeH265TransformBlockSizeFlagBitsKHR = c_uint;
pub const VkVideoEncodeH265TransformBlockSizeFlagBitsKHR = enum_VkVideoEncodeH265TransformBlockSizeFlagBitsKHR;
pub const VkVideoEncodeH265TransformBlockSizeFlagsKHR = VkFlags;
pub const VK_VIDEO_ENCODE_H265_RATE_CONTROL_ATTEMPT_HRD_COMPLIANCE_BIT_KHR: c_int = 1;
pub const VK_VIDEO_ENCODE_H265_RATE_CONTROL_REGULAR_GOP_BIT_KHR: c_int = 2;
pub const VK_VIDEO_ENCODE_H265_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR: c_int = 4;
pub const VK_VIDEO_ENCODE_H265_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR: c_int = 8;
pub const VK_VIDEO_ENCODE_H265_RATE_CONTROL_TEMPORAL_SUB_LAYER_PATTERN_DYADIC_BIT_KHR: c_int = 16;
pub const VK_VIDEO_ENCODE_H265_RATE_CONTROL_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoEncodeH265RateControlFlagBitsKHR = c_uint;
pub const VkVideoEncodeH265RateControlFlagBitsKHR = enum_VkVideoEncodeH265RateControlFlagBitsKHR;
pub const VkVideoEncodeH265RateControlFlagsKHR = VkFlags;
pub const struct_VkVideoEncodeH265CapabilitiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    flags: VkVideoEncodeH265CapabilityFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeH265CapabilityFlagsKHR),
    maxLevelIdc: StdVideoH265LevelIdc = @import("std").mem.zeroes(StdVideoH265LevelIdc),
    maxSliceSegmentCount: u32 = @import("std").mem.zeroes(u32),
    maxTiles: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    ctbSizes: VkVideoEncodeH265CtbSizeFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeH265CtbSizeFlagsKHR),
    transformBlockSizes: VkVideoEncodeH265TransformBlockSizeFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeH265TransformBlockSizeFlagsKHR),
    maxPPictureL0ReferenceCount: u32 = @import("std").mem.zeroes(u32),
    maxBPictureL0ReferenceCount: u32 = @import("std").mem.zeroes(u32),
    maxL1ReferenceCount: u32 = @import("std").mem.zeroes(u32),
    maxSubLayerCount: u32 = @import("std").mem.zeroes(u32),
    expectDyadicTemporalSubLayerPattern: VkBool32 = @import("std").mem.zeroes(VkBool32),
    minQp: i32 = @import("std").mem.zeroes(i32),
    maxQp: i32 = @import("std").mem.zeroes(i32),
    prefersGopRemainingFrames: VkBool32 = @import("std").mem.zeroes(VkBool32),
    requiresGopRemainingFrames: VkBool32 = @import("std").mem.zeroes(VkBool32),
    stdSyntaxFlags: VkVideoEncodeH265StdFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeH265StdFlagsKHR),
};
pub const VkVideoEncodeH265CapabilitiesKHR = struct_VkVideoEncodeH265CapabilitiesKHR;
pub const struct_VkVideoEncodeH265SessionCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    useMaxLevelIdc: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxLevelIdc: StdVideoH265LevelIdc = @import("std").mem.zeroes(StdVideoH265LevelIdc),
};
pub const VkVideoEncodeH265SessionCreateInfoKHR = struct_VkVideoEncodeH265SessionCreateInfoKHR;
pub const struct_VkVideoEncodeH265QpKHR = extern struct {
    qpI: i32 = @import("std").mem.zeroes(i32),
    qpP: i32 = @import("std").mem.zeroes(i32),
    qpB: i32 = @import("std").mem.zeroes(i32),
};
pub const VkVideoEncodeH265QpKHR = struct_VkVideoEncodeH265QpKHR;
pub const struct_VkVideoEncodeH265QualityLevelPropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    preferredRateControlFlags: VkVideoEncodeH265RateControlFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeH265RateControlFlagsKHR),
    preferredGopFrameCount: u32 = @import("std").mem.zeroes(u32),
    preferredIdrPeriod: u32 = @import("std").mem.zeroes(u32),
    preferredConsecutiveBFrameCount: u32 = @import("std").mem.zeroes(u32),
    preferredSubLayerCount: u32 = @import("std").mem.zeroes(u32),
    preferredConstantQp: VkVideoEncodeH265QpKHR = @import("std").mem.zeroes(VkVideoEncodeH265QpKHR),
    preferredMaxL0ReferenceCount: u32 = @import("std").mem.zeroes(u32),
    preferredMaxL1ReferenceCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVideoEncodeH265QualityLevelPropertiesKHR = struct_VkVideoEncodeH265QualityLevelPropertiesKHR;
pub const struct_VkVideoEncodeH265SessionParametersAddInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stdVPSCount: u32 = @import("std").mem.zeroes(u32),
    pStdVPSs: ?*const StdVideoH265VideoParameterSet = @import("std").mem.zeroes(?*const StdVideoH265VideoParameterSet),
    stdSPSCount: u32 = @import("std").mem.zeroes(u32),
    pStdSPSs: ?*const StdVideoH265SequenceParameterSet = @import("std").mem.zeroes(?*const StdVideoH265SequenceParameterSet),
    stdPPSCount: u32 = @import("std").mem.zeroes(u32),
    pStdPPSs: ?*const StdVideoH265PictureParameterSet = @import("std").mem.zeroes(?*const StdVideoH265PictureParameterSet),
};
pub const VkVideoEncodeH265SessionParametersAddInfoKHR = struct_VkVideoEncodeH265SessionParametersAddInfoKHR;
pub const struct_VkVideoEncodeH265SessionParametersCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    maxStdVPSCount: u32 = @import("std").mem.zeroes(u32),
    maxStdSPSCount: u32 = @import("std").mem.zeroes(u32),
    maxStdPPSCount: u32 = @import("std").mem.zeroes(u32),
    pParametersAddInfo: [*c]const VkVideoEncodeH265SessionParametersAddInfoKHR = @import("std").mem.zeroes([*c]const VkVideoEncodeH265SessionParametersAddInfoKHR),
};
pub const VkVideoEncodeH265SessionParametersCreateInfoKHR = struct_VkVideoEncodeH265SessionParametersCreateInfoKHR;
pub const struct_VkVideoEncodeH265SessionParametersGetInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    writeStdVPS: VkBool32 = @import("std").mem.zeroes(VkBool32),
    writeStdSPS: VkBool32 = @import("std").mem.zeroes(VkBool32),
    writeStdPPS: VkBool32 = @import("std").mem.zeroes(VkBool32),
    stdVPSId: u32 = @import("std").mem.zeroes(u32),
    stdSPSId: u32 = @import("std").mem.zeroes(u32),
    stdPPSId: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVideoEncodeH265SessionParametersGetInfoKHR = struct_VkVideoEncodeH265SessionParametersGetInfoKHR;
pub const struct_VkVideoEncodeH265SessionParametersFeedbackInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    hasStdVPSOverrides: VkBool32 = @import("std").mem.zeroes(VkBool32),
    hasStdSPSOverrides: VkBool32 = @import("std").mem.zeroes(VkBool32),
    hasStdPPSOverrides: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkVideoEncodeH265SessionParametersFeedbackInfoKHR = struct_VkVideoEncodeH265SessionParametersFeedbackInfoKHR;
pub const struct_VkVideoEncodeH265NaluSliceSegmentInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    constantQp: i32 = @import("std").mem.zeroes(i32),
    pStdSliceSegmentHeader: ?*const StdVideoEncodeH265SliceSegmentHeader = @import("std").mem.zeroes(?*const StdVideoEncodeH265SliceSegmentHeader),
};
pub const VkVideoEncodeH265NaluSliceSegmentInfoKHR = struct_VkVideoEncodeH265NaluSliceSegmentInfoKHR;
pub const struct_VkVideoEncodeH265PictureInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    naluSliceSegmentEntryCount: u32 = @import("std").mem.zeroes(u32),
    pNaluSliceSegmentEntries: [*c]const VkVideoEncodeH265NaluSliceSegmentInfoKHR = @import("std").mem.zeroes([*c]const VkVideoEncodeH265NaluSliceSegmentInfoKHR),
    pStdPictureInfo: ?*const StdVideoEncodeH265PictureInfo = @import("std").mem.zeroes(?*const StdVideoEncodeH265PictureInfo),
};
pub const VkVideoEncodeH265PictureInfoKHR = struct_VkVideoEncodeH265PictureInfoKHR;
pub const struct_VkVideoEncodeH265DpbSlotInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pStdReferenceInfo: ?*const StdVideoEncodeH265ReferenceInfo = @import("std").mem.zeroes(?*const StdVideoEncodeH265ReferenceInfo),
};
pub const VkVideoEncodeH265DpbSlotInfoKHR = struct_VkVideoEncodeH265DpbSlotInfoKHR;
pub const struct_VkVideoEncodeH265ProfileInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stdProfileIdc: StdVideoH265ProfileIdc = @import("std").mem.zeroes(StdVideoH265ProfileIdc),
};
pub const VkVideoEncodeH265ProfileInfoKHR = struct_VkVideoEncodeH265ProfileInfoKHR;
pub const struct_VkVideoEncodeH265RateControlInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkVideoEncodeH265RateControlFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeH265RateControlFlagsKHR),
    gopFrameCount: u32 = @import("std").mem.zeroes(u32),
    idrPeriod: u32 = @import("std").mem.zeroes(u32),
    consecutiveBFrameCount: u32 = @import("std").mem.zeroes(u32),
    subLayerCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVideoEncodeH265RateControlInfoKHR = struct_VkVideoEncodeH265RateControlInfoKHR;
pub const struct_VkVideoEncodeH265FrameSizeKHR = extern struct {
    frameISize: u32 = @import("std").mem.zeroes(u32),
    framePSize: u32 = @import("std").mem.zeroes(u32),
    frameBSize: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVideoEncodeH265FrameSizeKHR = struct_VkVideoEncodeH265FrameSizeKHR;
pub const struct_VkVideoEncodeH265RateControlLayerInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    useMinQp: VkBool32 = @import("std").mem.zeroes(VkBool32),
    minQp: VkVideoEncodeH265QpKHR = @import("std").mem.zeroes(VkVideoEncodeH265QpKHR),
    useMaxQp: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxQp: VkVideoEncodeH265QpKHR = @import("std").mem.zeroes(VkVideoEncodeH265QpKHR),
    useMaxFrameSize: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxFrameSize: VkVideoEncodeH265FrameSizeKHR = @import("std").mem.zeroes(VkVideoEncodeH265FrameSizeKHR),
};
pub const VkVideoEncodeH265RateControlLayerInfoKHR = struct_VkVideoEncodeH265RateControlLayerInfoKHR;
pub const struct_VkVideoEncodeH265GopRemainingFrameInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    useGopRemainingFrames: VkBool32 = @import("std").mem.zeroes(VkBool32),
    gopRemainingI: u32 = @import("std").mem.zeroes(u32),
    gopRemainingP: u32 = @import("std").mem.zeroes(u32),
    gopRemainingB: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVideoEncodeH265GopRemainingFrameInfoKHR = struct_VkVideoEncodeH265GopRemainingFrameInfoKHR;
pub const STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_TOP: c_int = 0;
pub const STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_BOTTOM: c_int = 1;
pub const STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_INVALID: c_int = 2147483647;
pub const STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoDecodeH264FieldOrderCount = c_uint;
pub const StdVideoDecodeH264FieldOrderCount = enum_StdVideoDecodeH264FieldOrderCount;
// /usr/include/vk_video/vulkan_video_codec_h264std_decode.h:39:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoDecodeH264PictureInfoFlags = opaque {};
pub const StdVideoDecodeH264PictureInfoFlags = struct_StdVideoDecodeH264PictureInfoFlags;
pub const struct_StdVideoDecodeH264PictureInfo = extern struct {
    flags: StdVideoDecodeH264PictureInfoFlags = @import("std").mem.zeroes(StdVideoDecodeH264PictureInfoFlags),
    seq_parameter_set_id: u8 = @import("std").mem.zeroes(u8),
    pic_parameter_set_id: u8 = @import("std").mem.zeroes(u8),
    reserved1: u8 = @import("std").mem.zeroes(u8),
    reserved2: u8 = @import("std").mem.zeroes(u8),
    frame_num: u16 = @import("std").mem.zeroes(u16),
    idr_pic_id: u16 = @import("std").mem.zeroes(u16),
    PicOrderCnt: [2]i32 = @import("std").mem.zeroes([2]i32),
};
pub const StdVideoDecodeH264PictureInfo = struct_StdVideoDecodeH264PictureInfo;
// /usr/include/vk_video/vulkan_video_codec_h264std_decode.h:59:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoDecodeH264ReferenceInfoFlags = opaque {};
pub const StdVideoDecodeH264ReferenceInfoFlags = struct_StdVideoDecodeH264ReferenceInfoFlags;
pub const struct_StdVideoDecodeH264ReferenceInfo = extern struct {
    flags: StdVideoDecodeH264ReferenceInfoFlags = @import("std").mem.zeroes(StdVideoDecodeH264ReferenceInfoFlags),
    FrameNum: u16 = @import("std").mem.zeroes(u16),
    reserved: u16 = @import("std").mem.zeroes(u16),
    PicOrderCnt: [2]i32 = @import("std").mem.zeroes([2]i32),
};
pub const StdVideoDecodeH264ReferenceInfo = struct_StdVideoDecodeH264ReferenceInfo;
pub const VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_PROGRESSIVE_KHR: c_int = 0;
pub const VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_INTERLEAVED_LINES_BIT_KHR: c_int = 1;
pub const VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_SEPARATE_PLANES_BIT_KHR: c_int = 2;
pub const VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoDecodeH264PictureLayoutFlagBitsKHR = c_uint;
pub const VkVideoDecodeH264PictureLayoutFlagBitsKHR = enum_VkVideoDecodeH264PictureLayoutFlagBitsKHR;
pub const VkVideoDecodeH264PictureLayoutFlagsKHR = VkFlags;
pub const struct_VkVideoDecodeH264ProfileInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stdProfileIdc: StdVideoH264ProfileIdc = @import("std").mem.zeroes(StdVideoH264ProfileIdc),
    pictureLayout: VkVideoDecodeH264PictureLayoutFlagBitsKHR = @import("std").mem.zeroes(VkVideoDecodeH264PictureLayoutFlagBitsKHR),
};
pub const VkVideoDecodeH264ProfileInfoKHR = struct_VkVideoDecodeH264ProfileInfoKHR;
pub const struct_VkVideoDecodeH264CapabilitiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxLevelIdc: StdVideoH264LevelIdc = @import("std").mem.zeroes(StdVideoH264LevelIdc),
    fieldOffsetGranularity: VkOffset2D = @import("std").mem.zeroes(VkOffset2D),
};
pub const VkVideoDecodeH264CapabilitiesKHR = struct_VkVideoDecodeH264CapabilitiesKHR;
pub const struct_VkVideoDecodeH264SessionParametersAddInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stdSPSCount: u32 = @import("std").mem.zeroes(u32),
    pStdSPSs: ?*const StdVideoH264SequenceParameterSet = @import("std").mem.zeroes(?*const StdVideoH264SequenceParameterSet),
    stdPPSCount: u32 = @import("std").mem.zeroes(u32),
    pStdPPSs: ?*const StdVideoH264PictureParameterSet = @import("std").mem.zeroes(?*const StdVideoH264PictureParameterSet),
};
pub const VkVideoDecodeH264SessionParametersAddInfoKHR = struct_VkVideoDecodeH264SessionParametersAddInfoKHR;
pub const struct_VkVideoDecodeH264SessionParametersCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    maxStdSPSCount: u32 = @import("std").mem.zeroes(u32),
    maxStdPPSCount: u32 = @import("std").mem.zeroes(u32),
    pParametersAddInfo: [*c]const VkVideoDecodeH264SessionParametersAddInfoKHR = @import("std").mem.zeroes([*c]const VkVideoDecodeH264SessionParametersAddInfoKHR),
};
pub const VkVideoDecodeH264SessionParametersCreateInfoKHR = struct_VkVideoDecodeH264SessionParametersCreateInfoKHR;
pub const struct_VkVideoDecodeH264PictureInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pStdPictureInfo: ?*const StdVideoDecodeH264PictureInfo = @import("std").mem.zeroes(?*const StdVideoDecodeH264PictureInfo),
    sliceCount: u32 = @import("std").mem.zeroes(u32),
    pSliceOffsets: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkVideoDecodeH264PictureInfoKHR = struct_VkVideoDecodeH264PictureInfoKHR;
pub const struct_VkVideoDecodeH264DpbSlotInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pStdReferenceInfo: ?*const StdVideoDecodeH264ReferenceInfo = @import("std").mem.zeroes(?*const StdVideoDecodeH264ReferenceInfo),
};
pub const VkVideoDecodeH264DpbSlotInfoKHR = struct_VkVideoDecodeH264DpbSlotInfoKHR;
pub const VkRenderingFlagsKHR = VkRenderingFlags;
pub const VkRenderingFlagBitsKHR = VkRenderingFlagBits;
pub const VkRenderingInfoKHR = VkRenderingInfo;
pub const VkRenderingAttachmentInfoKHR = VkRenderingAttachmentInfo;
pub const VkPipelineRenderingCreateInfoKHR = VkPipelineRenderingCreateInfo;
pub const VkPhysicalDeviceDynamicRenderingFeaturesKHR = VkPhysicalDeviceDynamicRenderingFeatures;
pub const VkCommandBufferInheritanceRenderingInfoKHR = VkCommandBufferInheritanceRenderingInfo;
pub const struct_VkRenderingFragmentShadingRateAttachmentInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    imageView: VkImageView = @import("std").mem.zeroes(VkImageView),
    imageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    shadingRateAttachmentTexelSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
};
pub const VkRenderingFragmentShadingRateAttachmentInfoKHR = struct_VkRenderingFragmentShadingRateAttachmentInfoKHR;
pub const struct_VkRenderingFragmentDensityMapAttachmentInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    imageView: VkImageView = @import("std").mem.zeroes(VkImageView),
    imageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
};
pub const VkRenderingFragmentDensityMapAttachmentInfoEXT = struct_VkRenderingFragmentDensityMapAttachmentInfoEXT;
pub const struct_VkAttachmentSampleCountInfoAMD = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    colorAttachmentCount: u32 = @import("std").mem.zeroes(u32),
    pColorAttachmentSamples: [*c]const VkSampleCountFlagBits = @import("std").mem.zeroes([*c]const VkSampleCountFlagBits),
    depthStencilAttachmentSamples: VkSampleCountFlagBits = @import("std").mem.zeroes(VkSampleCountFlagBits),
};
pub const VkAttachmentSampleCountInfoAMD = struct_VkAttachmentSampleCountInfoAMD;
pub const VkAttachmentSampleCountInfoNV = VkAttachmentSampleCountInfoAMD;
pub const struct_VkMultiviewPerViewAttributesInfoNVX = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    perViewAttributes: VkBool32 = @import("std").mem.zeroes(VkBool32),
    perViewAttributesPositionXOnly: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkMultiviewPerViewAttributesInfoNVX = struct_VkMultiviewPerViewAttributesInfoNVX;
pub const PFN_vkCmdBeginRenderingKHR = ?*const fn (VkCommandBuffer, [*c]const VkRenderingInfo) callconv(.C) void;
pub const PFN_vkCmdEndRenderingKHR = ?*const fn (VkCommandBuffer) callconv(.C) void;
pub extern fn vkCmdBeginRenderingKHR(commandBuffer: VkCommandBuffer, pRenderingInfo: [*c]const VkRenderingInfo) void;
pub extern fn vkCmdEndRenderingKHR(commandBuffer: VkCommandBuffer) void;
pub const VkRenderPassMultiviewCreateInfoKHR = VkRenderPassMultiviewCreateInfo;
pub const VkPhysicalDeviceMultiviewFeaturesKHR = VkPhysicalDeviceMultiviewFeatures;
pub const VkPhysicalDeviceMultiviewPropertiesKHR = VkPhysicalDeviceMultiviewProperties;
pub const VkPhysicalDeviceFeatures2KHR = VkPhysicalDeviceFeatures2;
pub const VkPhysicalDeviceProperties2KHR = VkPhysicalDeviceProperties2;
pub const VkFormatProperties2KHR = VkFormatProperties2;
pub const VkImageFormatProperties2KHR = VkImageFormatProperties2;
pub const VkPhysicalDeviceImageFormatInfo2KHR = VkPhysicalDeviceImageFormatInfo2;
pub const VkQueueFamilyProperties2KHR = VkQueueFamilyProperties2;
pub const VkPhysicalDeviceMemoryProperties2KHR = VkPhysicalDeviceMemoryProperties2;
pub const VkSparseImageFormatProperties2KHR = VkSparseImageFormatProperties2;
pub const VkPhysicalDeviceSparseImageFormatInfo2KHR = VkPhysicalDeviceSparseImageFormatInfo2;
pub const PFN_vkGetPhysicalDeviceFeatures2KHR = ?*const fn (VkPhysicalDevice, [*c]VkPhysicalDeviceFeatures2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceProperties2KHR = ?*const fn (VkPhysicalDevice, [*c]VkPhysicalDeviceProperties2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceFormatProperties2KHR = ?*const fn (VkPhysicalDevice, VkFormat, [*c]VkFormatProperties2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceImageFormatProperties2KHR = ?*const fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceImageFormatInfo2, [*c]VkImageFormatProperties2) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkQueueFamilyProperties2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceMemoryProperties2KHR = ?*const fn (VkPhysicalDevice, [*c]VkPhysicalDeviceMemoryProperties2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR = ?*const fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceSparseImageFormatInfo2, [*c]u32, [*c]VkSparseImageFormatProperties2) callconv(.C) void;
pub extern fn vkGetPhysicalDeviceFeatures2KHR(physicalDevice: VkPhysicalDevice, pFeatures: [*c]VkPhysicalDeviceFeatures2) void;
pub extern fn vkGetPhysicalDeviceProperties2KHR(physicalDevice: VkPhysicalDevice, pProperties: [*c]VkPhysicalDeviceProperties2) void;
pub extern fn vkGetPhysicalDeviceFormatProperties2KHR(physicalDevice: VkPhysicalDevice, format: VkFormat, pFormatProperties: [*c]VkFormatProperties2) void;
pub extern fn vkGetPhysicalDeviceImageFormatProperties2KHR(physicalDevice: VkPhysicalDevice, pImageFormatInfo: [*c]const VkPhysicalDeviceImageFormatInfo2, pImageFormatProperties: [*c]VkImageFormatProperties2) VkResult;
pub extern fn vkGetPhysicalDeviceQueueFamilyProperties2KHR(physicalDevice: VkPhysicalDevice, pQueueFamilyPropertyCount: [*c]u32, pQueueFamilyProperties: [*c]VkQueueFamilyProperties2) void;
pub extern fn vkGetPhysicalDeviceMemoryProperties2KHR(physicalDevice: VkPhysicalDevice, pMemoryProperties: [*c]VkPhysicalDeviceMemoryProperties2) void;
pub extern fn vkGetPhysicalDeviceSparseImageFormatProperties2KHR(physicalDevice: VkPhysicalDevice, pFormatInfo: [*c]const VkPhysicalDeviceSparseImageFormatInfo2, pPropertyCount: [*c]u32, pProperties: [*c]VkSparseImageFormatProperties2) void;
pub const VkPeerMemoryFeatureFlagsKHR = VkPeerMemoryFeatureFlags;
pub const VkPeerMemoryFeatureFlagBitsKHR = VkPeerMemoryFeatureFlagBits;
pub const VkMemoryAllocateFlagsKHR = VkMemoryAllocateFlags;
pub const VkMemoryAllocateFlagBitsKHR = VkMemoryAllocateFlagBits;
pub const VkMemoryAllocateFlagsInfoKHR = VkMemoryAllocateFlagsInfo;
pub const VkDeviceGroupRenderPassBeginInfoKHR = VkDeviceGroupRenderPassBeginInfo;
pub const VkDeviceGroupCommandBufferBeginInfoKHR = VkDeviceGroupCommandBufferBeginInfo;
pub const VkDeviceGroupSubmitInfoKHR = VkDeviceGroupSubmitInfo;
pub const VkDeviceGroupBindSparseInfoKHR = VkDeviceGroupBindSparseInfo;
pub const VkBindBufferMemoryDeviceGroupInfoKHR = VkBindBufferMemoryDeviceGroupInfo;
pub const VkBindImageMemoryDeviceGroupInfoKHR = VkBindImageMemoryDeviceGroupInfo;
pub const PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR = ?*const fn (VkDevice, u32, u32, u32, [*c]VkPeerMemoryFeatureFlags) callconv(.C) void;
pub const PFN_vkCmdSetDeviceMaskKHR = ?*const fn (VkCommandBuffer, u32) callconv(.C) void;
pub const PFN_vkCmdDispatchBaseKHR = ?*const fn (VkCommandBuffer, u32, u32, u32, u32, u32, u32) callconv(.C) void;
pub extern fn vkGetDeviceGroupPeerMemoryFeaturesKHR(device: VkDevice, heapIndex: u32, localDeviceIndex: u32, remoteDeviceIndex: u32, pPeerMemoryFeatures: [*c]VkPeerMemoryFeatureFlags) void;
pub extern fn vkCmdSetDeviceMaskKHR(commandBuffer: VkCommandBuffer, deviceMask: u32) void;
pub extern fn vkCmdDispatchBaseKHR(commandBuffer: VkCommandBuffer, baseGroupX: u32, baseGroupY: u32, baseGroupZ: u32, groupCountX: u32, groupCountY: u32, groupCountZ: u32) void;
pub const VkCommandPoolTrimFlagsKHR = VkCommandPoolTrimFlags;
pub const PFN_vkTrimCommandPoolKHR = ?*const fn (VkDevice, VkCommandPool, VkCommandPoolTrimFlags) callconv(.C) void;
pub extern fn vkTrimCommandPoolKHR(device: VkDevice, commandPool: VkCommandPool, flags: VkCommandPoolTrimFlags) void;
pub const VkPhysicalDeviceGroupPropertiesKHR = VkPhysicalDeviceGroupProperties;
pub const VkDeviceGroupDeviceCreateInfoKHR = VkDeviceGroupDeviceCreateInfo;
pub const PFN_vkEnumeratePhysicalDeviceGroupsKHR = ?*const fn (VkInstance, [*c]u32, [*c]VkPhysicalDeviceGroupProperties) callconv(.C) VkResult;
pub extern fn vkEnumeratePhysicalDeviceGroupsKHR(instance: VkInstance, pPhysicalDeviceGroupCount: [*c]u32, pPhysicalDeviceGroupProperties: [*c]VkPhysicalDeviceGroupProperties) VkResult;
pub const VkExternalMemoryHandleTypeFlagsKHR = VkExternalMemoryHandleTypeFlags;
pub const VkExternalMemoryHandleTypeFlagBitsKHR = VkExternalMemoryHandleTypeFlagBits;
pub const VkExternalMemoryFeatureFlagsKHR = VkExternalMemoryFeatureFlags;
pub const VkExternalMemoryFeatureFlagBitsKHR = VkExternalMemoryFeatureFlagBits;
pub const VkExternalMemoryPropertiesKHR = VkExternalMemoryProperties;
pub const VkPhysicalDeviceExternalImageFormatInfoKHR = VkPhysicalDeviceExternalImageFormatInfo;
pub const VkExternalImageFormatPropertiesKHR = VkExternalImageFormatProperties;
pub const VkPhysicalDeviceExternalBufferInfoKHR = VkPhysicalDeviceExternalBufferInfo;
pub const VkExternalBufferPropertiesKHR = VkExternalBufferProperties;
pub const VkPhysicalDeviceIDPropertiesKHR = VkPhysicalDeviceIDProperties;
pub const PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR = ?*const fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceExternalBufferInfo, [*c]VkExternalBufferProperties) callconv(.C) void;
pub extern fn vkGetPhysicalDeviceExternalBufferPropertiesKHR(physicalDevice: VkPhysicalDevice, pExternalBufferInfo: [*c]const VkPhysicalDeviceExternalBufferInfo, pExternalBufferProperties: [*c]VkExternalBufferProperties) void;
pub const VkExternalMemoryImageCreateInfoKHR = VkExternalMemoryImageCreateInfo;
pub const VkExternalMemoryBufferCreateInfoKHR = VkExternalMemoryBufferCreateInfo;
pub const VkExportMemoryAllocateInfoKHR = VkExportMemoryAllocateInfo;
pub const struct_VkImportMemoryFdInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    handleType: VkExternalMemoryHandleTypeFlagBits = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlagBits),
    fd: c_int = @import("std").mem.zeroes(c_int),
};
pub const VkImportMemoryFdInfoKHR = struct_VkImportMemoryFdInfoKHR;
pub const struct_VkMemoryFdPropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    memoryTypeBits: u32 = @import("std").mem.zeroes(u32),
};
pub const VkMemoryFdPropertiesKHR = struct_VkMemoryFdPropertiesKHR;
pub const struct_VkMemoryGetFdInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    memory: VkDeviceMemory = @import("std").mem.zeroes(VkDeviceMemory),
    handleType: VkExternalMemoryHandleTypeFlagBits = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlagBits),
};
pub const VkMemoryGetFdInfoKHR = struct_VkMemoryGetFdInfoKHR;
pub const PFN_vkGetMemoryFdKHR = ?*const fn (VkDevice, [*c]const VkMemoryGetFdInfoKHR, [*c]c_int) callconv(.C) VkResult;
pub const PFN_vkGetMemoryFdPropertiesKHR = ?*const fn (VkDevice, VkExternalMemoryHandleTypeFlagBits, c_int, [*c]VkMemoryFdPropertiesKHR) callconv(.C) VkResult;
pub extern fn vkGetMemoryFdKHR(device: VkDevice, pGetFdInfo: [*c]const VkMemoryGetFdInfoKHR, pFd: [*c]c_int) VkResult;
pub extern fn vkGetMemoryFdPropertiesKHR(device: VkDevice, handleType: VkExternalMemoryHandleTypeFlagBits, fd: c_int, pMemoryFdProperties: [*c]VkMemoryFdPropertiesKHR) VkResult;
pub const VkExternalSemaphoreHandleTypeFlagsKHR = VkExternalSemaphoreHandleTypeFlags;
pub const VkExternalSemaphoreHandleTypeFlagBitsKHR = VkExternalSemaphoreHandleTypeFlagBits;
pub const VkExternalSemaphoreFeatureFlagsKHR = VkExternalSemaphoreFeatureFlags;
pub const VkExternalSemaphoreFeatureFlagBitsKHR = VkExternalSemaphoreFeatureFlagBits;
pub const VkPhysicalDeviceExternalSemaphoreInfoKHR = VkPhysicalDeviceExternalSemaphoreInfo;
pub const VkExternalSemaphorePropertiesKHR = VkExternalSemaphoreProperties;
pub const PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = ?*const fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceExternalSemaphoreInfo, [*c]VkExternalSemaphoreProperties) callconv(.C) void;
pub extern fn vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(physicalDevice: VkPhysicalDevice, pExternalSemaphoreInfo: [*c]const VkPhysicalDeviceExternalSemaphoreInfo, pExternalSemaphoreProperties: [*c]VkExternalSemaphoreProperties) void;
pub const VkSemaphoreImportFlagsKHR = VkSemaphoreImportFlags;
pub const VkSemaphoreImportFlagBitsKHR = VkSemaphoreImportFlagBits;
pub const VkExportSemaphoreCreateInfoKHR = VkExportSemaphoreCreateInfo;
pub const struct_VkImportSemaphoreFdInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    semaphore: VkSemaphore = @import("std").mem.zeroes(VkSemaphore),
    flags: VkSemaphoreImportFlags = @import("std").mem.zeroes(VkSemaphoreImportFlags),
    handleType: VkExternalSemaphoreHandleTypeFlagBits = @import("std").mem.zeroes(VkExternalSemaphoreHandleTypeFlagBits),
    fd: c_int = @import("std").mem.zeroes(c_int),
};
pub const VkImportSemaphoreFdInfoKHR = struct_VkImportSemaphoreFdInfoKHR;
pub const struct_VkSemaphoreGetFdInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    semaphore: VkSemaphore = @import("std").mem.zeroes(VkSemaphore),
    handleType: VkExternalSemaphoreHandleTypeFlagBits = @import("std").mem.zeroes(VkExternalSemaphoreHandleTypeFlagBits),
};
pub const VkSemaphoreGetFdInfoKHR = struct_VkSemaphoreGetFdInfoKHR;
pub const PFN_vkImportSemaphoreFdKHR = ?*const fn (VkDevice, [*c]const VkImportSemaphoreFdInfoKHR) callconv(.C) VkResult;
pub const PFN_vkGetSemaphoreFdKHR = ?*const fn (VkDevice, [*c]const VkSemaphoreGetFdInfoKHR, [*c]c_int) callconv(.C) VkResult;
pub extern fn vkImportSemaphoreFdKHR(device: VkDevice, pImportSemaphoreFdInfo: [*c]const VkImportSemaphoreFdInfoKHR) VkResult;
pub extern fn vkGetSemaphoreFdKHR(device: VkDevice, pGetFdInfo: [*c]const VkSemaphoreGetFdInfoKHR, pFd: [*c]c_int) VkResult;
pub const struct_VkPhysicalDevicePushDescriptorPropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxPushDescriptors: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDevicePushDescriptorPropertiesKHR = struct_VkPhysicalDevicePushDescriptorPropertiesKHR;
pub const PFN_vkCmdPushDescriptorSetKHR = ?*const fn (VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, u32, u32, [*c]const VkWriteDescriptorSet) callconv(.C) void;
pub const PFN_vkCmdPushDescriptorSetWithTemplateKHR = ?*const fn (VkCommandBuffer, VkDescriptorUpdateTemplate, VkPipelineLayout, u32, ?*const anyopaque) callconv(.C) void;
pub extern fn vkCmdPushDescriptorSetKHR(commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, layout: VkPipelineLayout, set: u32, descriptorWriteCount: u32, pDescriptorWrites: [*c]const VkWriteDescriptorSet) void;
pub extern fn vkCmdPushDescriptorSetWithTemplateKHR(commandBuffer: VkCommandBuffer, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, layout: VkPipelineLayout, set: u32, pData: ?*const anyopaque) void;
pub const VkPhysicalDeviceShaderFloat16Int8FeaturesKHR = VkPhysicalDeviceShaderFloat16Int8Features;
pub const VkPhysicalDeviceFloat16Int8FeaturesKHR = VkPhysicalDeviceShaderFloat16Int8Features;
pub const VkPhysicalDevice16BitStorageFeaturesKHR = VkPhysicalDevice16BitStorageFeatures;
pub const struct_VkRectLayerKHR = extern struct {
    offset: VkOffset2D = @import("std").mem.zeroes(VkOffset2D),
    extent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    layer: u32 = @import("std").mem.zeroes(u32),
};
pub const VkRectLayerKHR = struct_VkRectLayerKHR;
pub const struct_VkPresentRegionKHR = extern struct {
    rectangleCount: u32 = @import("std").mem.zeroes(u32),
    pRectangles: [*c]const VkRectLayerKHR = @import("std").mem.zeroes([*c]const VkRectLayerKHR),
};
pub const VkPresentRegionKHR = struct_VkPresentRegionKHR;
pub const struct_VkPresentRegionsKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    swapchainCount: u32 = @import("std").mem.zeroes(u32),
    pRegions: [*c]const VkPresentRegionKHR = @import("std").mem.zeroes([*c]const VkPresentRegionKHR),
};
pub const VkPresentRegionsKHR = struct_VkPresentRegionsKHR;
pub const VkDescriptorUpdateTemplateKHR = VkDescriptorUpdateTemplate;
pub const VkDescriptorUpdateTemplateTypeKHR = VkDescriptorUpdateTemplateType;
pub const VkDescriptorUpdateTemplateCreateFlagsKHR = VkDescriptorUpdateTemplateCreateFlags;
pub const VkDescriptorUpdateTemplateEntryKHR = VkDescriptorUpdateTemplateEntry;
pub const VkDescriptorUpdateTemplateCreateInfoKHR = VkDescriptorUpdateTemplateCreateInfo;
pub const PFN_vkCreateDescriptorUpdateTemplateKHR = ?*const fn (VkDevice, [*c]const VkDescriptorUpdateTemplateCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkDescriptorUpdateTemplate) callconv(.C) VkResult;
pub const PFN_vkDestroyDescriptorUpdateTemplateKHR = ?*const fn (VkDevice, VkDescriptorUpdateTemplate, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkUpdateDescriptorSetWithTemplateKHR = ?*const fn (VkDevice, VkDescriptorSet, VkDescriptorUpdateTemplate, ?*const anyopaque) callconv(.C) void;
pub extern fn vkCreateDescriptorUpdateTemplateKHR(device: VkDevice, pCreateInfo: [*c]const VkDescriptorUpdateTemplateCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pDescriptorUpdateTemplate: [*c]VkDescriptorUpdateTemplate) VkResult;
pub extern fn vkDestroyDescriptorUpdateTemplateKHR(device: VkDevice, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkUpdateDescriptorSetWithTemplateKHR(device: VkDevice, descriptorSet: VkDescriptorSet, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, pData: ?*const anyopaque) void;
pub const VkPhysicalDeviceImagelessFramebufferFeaturesKHR = VkPhysicalDeviceImagelessFramebufferFeatures;
pub const VkFramebufferAttachmentsCreateInfoKHR = VkFramebufferAttachmentsCreateInfo;
pub const VkFramebufferAttachmentImageInfoKHR = VkFramebufferAttachmentImageInfo;
pub const VkRenderPassAttachmentBeginInfoKHR = VkRenderPassAttachmentBeginInfo;
pub const VkRenderPassCreateInfo2KHR = VkRenderPassCreateInfo2;
pub const VkAttachmentDescription2KHR = VkAttachmentDescription2;
pub const VkAttachmentReference2KHR = VkAttachmentReference2;
pub const VkSubpassDescription2KHR = VkSubpassDescription2;
pub const VkSubpassDependency2KHR = VkSubpassDependency2;
pub const VkSubpassBeginInfoKHR = VkSubpassBeginInfo;
pub const VkSubpassEndInfoKHR = VkSubpassEndInfo;
pub const PFN_vkCreateRenderPass2KHR = ?*const fn (VkDevice, [*c]const VkRenderPassCreateInfo2, [*c]const VkAllocationCallbacks, [*c]VkRenderPass) callconv(.C) VkResult;
pub const PFN_vkCmdBeginRenderPass2KHR = ?*const fn (VkCommandBuffer, [*c]const VkRenderPassBeginInfo, [*c]const VkSubpassBeginInfo) callconv(.C) void;
pub const PFN_vkCmdNextSubpass2KHR = ?*const fn (VkCommandBuffer, [*c]const VkSubpassBeginInfo, [*c]const VkSubpassEndInfo) callconv(.C) void;
pub const PFN_vkCmdEndRenderPass2KHR = ?*const fn (VkCommandBuffer, [*c]const VkSubpassEndInfo) callconv(.C) void;
pub extern fn vkCreateRenderPass2KHR(device: VkDevice, pCreateInfo: [*c]const VkRenderPassCreateInfo2, pAllocator: [*c]const VkAllocationCallbacks, pRenderPass: [*c]VkRenderPass) VkResult;
pub extern fn vkCmdBeginRenderPass2KHR(commandBuffer: VkCommandBuffer, pRenderPassBegin: [*c]const VkRenderPassBeginInfo, pSubpassBeginInfo: [*c]const VkSubpassBeginInfo) void;
pub extern fn vkCmdNextSubpass2KHR(commandBuffer: VkCommandBuffer, pSubpassBeginInfo: [*c]const VkSubpassBeginInfo, pSubpassEndInfo: [*c]const VkSubpassEndInfo) void;
pub extern fn vkCmdEndRenderPass2KHR(commandBuffer: VkCommandBuffer, pSubpassEndInfo: [*c]const VkSubpassEndInfo) void;
pub const struct_VkSharedPresentSurfaceCapabilitiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    sharedPresentSupportedUsageFlags: VkImageUsageFlags = @import("std").mem.zeroes(VkImageUsageFlags),
};
pub const VkSharedPresentSurfaceCapabilitiesKHR = struct_VkSharedPresentSurfaceCapabilitiesKHR;
pub const PFN_vkGetSwapchainStatusKHR = ?*const fn (VkDevice, VkSwapchainKHR) callconv(.C) VkResult;
pub extern fn vkGetSwapchainStatusKHR(device: VkDevice, swapchain: VkSwapchainKHR) VkResult;
pub const VkExternalFenceHandleTypeFlagsKHR = VkExternalFenceHandleTypeFlags;
pub const VkExternalFenceHandleTypeFlagBitsKHR = VkExternalFenceHandleTypeFlagBits;
pub const VkExternalFenceFeatureFlagsKHR = VkExternalFenceFeatureFlags;
pub const VkExternalFenceFeatureFlagBitsKHR = VkExternalFenceFeatureFlagBits;
pub const VkPhysicalDeviceExternalFenceInfoKHR = VkPhysicalDeviceExternalFenceInfo;
pub const VkExternalFencePropertiesKHR = VkExternalFenceProperties;
pub const PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR = ?*const fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceExternalFenceInfo, [*c]VkExternalFenceProperties) callconv(.C) void;
pub extern fn vkGetPhysicalDeviceExternalFencePropertiesKHR(physicalDevice: VkPhysicalDevice, pExternalFenceInfo: [*c]const VkPhysicalDeviceExternalFenceInfo, pExternalFenceProperties: [*c]VkExternalFenceProperties) void;
pub const VkFenceImportFlagsKHR = VkFenceImportFlags;
pub const VkFenceImportFlagBitsKHR = VkFenceImportFlagBits;
pub const VkExportFenceCreateInfoKHR = VkExportFenceCreateInfo;
pub const struct_VkImportFenceFdInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    fence: VkFence = @import("std").mem.zeroes(VkFence),
    flags: VkFenceImportFlags = @import("std").mem.zeroes(VkFenceImportFlags),
    handleType: VkExternalFenceHandleTypeFlagBits = @import("std").mem.zeroes(VkExternalFenceHandleTypeFlagBits),
    fd: c_int = @import("std").mem.zeroes(c_int),
};
pub const VkImportFenceFdInfoKHR = struct_VkImportFenceFdInfoKHR;
pub const struct_VkFenceGetFdInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    fence: VkFence = @import("std").mem.zeroes(VkFence),
    handleType: VkExternalFenceHandleTypeFlagBits = @import("std").mem.zeroes(VkExternalFenceHandleTypeFlagBits),
};
pub const VkFenceGetFdInfoKHR = struct_VkFenceGetFdInfoKHR;
pub const PFN_vkImportFenceFdKHR = ?*const fn (VkDevice, [*c]const VkImportFenceFdInfoKHR) callconv(.C) VkResult;
pub const PFN_vkGetFenceFdKHR = ?*const fn (VkDevice, [*c]const VkFenceGetFdInfoKHR, [*c]c_int) callconv(.C) VkResult;
pub extern fn vkImportFenceFdKHR(device: VkDevice, pImportFenceFdInfo: [*c]const VkImportFenceFdInfoKHR) VkResult;
pub extern fn vkGetFenceFdKHR(device: VkDevice, pGetFdInfo: [*c]const VkFenceGetFdInfoKHR, pFd: [*c]c_int) VkResult;
pub const VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR: c_int = 0;
pub const VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR: c_int = 1;
pub const VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR: c_int = 2;
pub const VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR: c_int = 3;
pub const VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR: c_int = 4;
pub const VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR: c_int = 5;
pub const VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR: c_int = 6;
pub const VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR: c_int = 7;
pub const VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR: c_int = 8;
pub const VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR: c_int = 9;
pub const VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR: c_int = 10;
pub const VK_PERFORMANCE_COUNTER_UNIT_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkPerformanceCounterUnitKHR = c_uint;
pub const VkPerformanceCounterUnitKHR = enum_VkPerformanceCounterUnitKHR;
pub const VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR: c_int = 0;
pub const VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR: c_int = 1;
pub const VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR: c_int = 2;
pub const VK_QUERY_SCOPE_COMMAND_BUFFER_KHR: c_int = 0;
pub const VK_QUERY_SCOPE_RENDER_PASS_KHR: c_int = 1;
pub const VK_QUERY_SCOPE_COMMAND_KHR: c_int = 2;
pub const VK_PERFORMANCE_COUNTER_SCOPE_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkPerformanceCounterScopeKHR = c_uint;
pub const VkPerformanceCounterScopeKHR = enum_VkPerformanceCounterScopeKHR;
pub const VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR: c_int = 0;
pub const VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR: c_int = 1;
pub const VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR: c_int = 2;
pub const VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR: c_int = 3;
pub const VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR: c_int = 4;
pub const VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR: c_int = 5;
pub const VK_PERFORMANCE_COUNTER_STORAGE_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkPerformanceCounterStorageKHR = c_uint;
pub const VkPerformanceCounterStorageKHR = enum_VkPerformanceCounterStorageKHR;
pub const VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR: c_int = 1;
pub const VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR: c_int = 2;
pub const VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR: c_int = 1;
pub const VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR: c_int = 2;
pub const VK_PERFORMANCE_COUNTER_DESCRIPTION_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkPerformanceCounterDescriptionFlagBitsKHR = c_uint;
pub const VkPerformanceCounterDescriptionFlagBitsKHR = enum_VkPerformanceCounterDescriptionFlagBitsKHR;
pub const VkPerformanceCounterDescriptionFlagsKHR = VkFlags;
pub const VK_ACQUIRE_PROFILING_LOCK_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkAcquireProfilingLockFlagBitsKHR = c_uint;
pub const VkAcquireProfilingLockFlagBitsKHR = enum_VkAcquireProfilingLockFlagBitsKHR;
pub const VkAcquireProfilingLockFlagsKHR = VkFlags;
pub const struct_VkPhysicalDevicePerformanceQueryFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    performanceCounterQueryPools: VkBool32 = @import("std").mem.zeroes(VkBool32),
    performanceCounterMultipleQueryPools: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevicePerformanceQueryFeaturesKHR = struct_VkPhysicalDevicePerformanceQueryFeaturesKHR;
pub const struct_VkPhysicalDevicePerformanceQueryPropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    allowCommandBufferQueryCopies: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevicePerformanceQueryPropertiesKHR = struct_VkPhysicalDevicePerformanceQueryPropertiesKHR;
pub const struct_VkPerformanceCounterKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    unit: VkPerformanceCounterUnitKHR = @import("std").mem.zeroes(VkPerformanceCounterUnitKHR),
    scope: VkPerformanceCounterScopeKHR = @import("std").mem.zeroes(VkPerformanceCounterScopeKHR),
    storage: VkPerformanceCounterStorageKHR = @import("std").mem.zeroes(VkPerformanceCounterStorageKHR),
    uuid: [16]u8 = @import("std").mem.zeroes([16]u8),
};
pub const VkPerformanceCounterKHR = struct_VkPerformanceCounterKHR;
pub const struct_VkPerformanceCounterDescriptionKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    flags: VkPerformanceCounterDescriptionFlagsKHR = @import("std").mem.zeroes(VkPerformanceCounterDescriptionFlagsKHR),
    name: [256]u8 = @import("std").mem.zeroes([256]u8),
    category: [256]u8 = @import("std").mem.zeroes([256]u8),
    description: [256]u8 = @import("std").mem.zeroes([256]u8),
};
pub const VkPerformanceCounterDescriptionKHR = struct_VkPerformanceCounterDescriptionKHR;
pub const struct_VkQueryPoolPerformanceCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    queueFamilyIndex: u32 = @import("std").mem.zeroes(u32),
    counterIndexCount: u32 = @import("std").mem.zeroes(u32),
    pCounterIndices: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkQueryPoolPerformanceCreateInfoKHR = struct_VkQueryPoolPerformanceCreateInfoKHR;
pub const union_VkPerformanceCounterResultKHR = extern union {
    int32: i32,
    int64: i64,
    uint32: u32,
    uint64: u64,
    float32: f32,
    float64: f64,
};
pub const VkPerformanceCounterResultKHR = union_VkPerformanceCounterResultKHR;
pub const struct_VkAcquireProfilingLockInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkAcquireProfilingLockFlagsKHR = @import("std").mem.zeroes(VkAcquireProfilingLockFlagsKHR),
    timeout: u64 = @import("std").mem.zeroes(u64),
};
pub const VkAcquireProfilingLockInfoKHR = struct_VkAcquireProfilingLockInfoKHR;
pub const struct_VkPerformanceQuerySubmitInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    counterPassIndex: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPerformanceQuerySubmitInfoKHR = struct_VkPerformanceQuerySubmitInfoKHR;
pub const PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = ?*const fn (VkPhysicalDevice, u32, [*c]u32, [*c]VkPerformanceCounterKHR, [*c]VkPerformanceCounterDescriptionKHR) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = ?*const fn (VkPhysicalDevice, [*c]const VkQueryPoolPerformanceCreateInfoKHR, [*c]u32) callconv(.C) void;
pub const PFN_vkAcquireProfilingLockKHR = ?*const fn (VkDevice, [*c]const VkAcquireProfilingLockInfoKHR) callconv(.C) VkResult;
pub const PFN_vkReleaseProfilingLockKHR = ?*const fn (VkDevice) callconv(.C) void;
pub extern fn vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(physicalDevice: VkPhysicalDevice, queueFamilyIndex: u32, pCounterCount: [*c]u32, pCounters: [*c]VkPerformanceCounterKHR, pCounterDescriptions: [*c]VkPerformanceCounterDescriptionKHR) VkResult;
pub extern fn vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(physicalDevice: VkPhysicalDevice, pPerformanceQueryCreateInfo: [*c]const VkQueryPoolPerformanceCreateInfoKHR, pNumPasses: [*c]u32) void;
pub extern fn vkAcquireProfilingLockKHR(device: VkDevice, pInfo: [*c]const VkAcquireProfilingLockInfoKHR) VkResult;
pub extern fn vkReleaseProfilingLockKHR(device: VkDevice) void;
pub const VkPointClippingBehaviorKHR = VkPointClippingBehavior;
pub const VkTessellationDomainOriginKHR = VkTessellationDomainOrigin;
pub const VkPhysicalDevicePointClippingPropertiesKHR = VkPhysicalDevicePointClippingProperties;
pub const VkRenderPassInputAttachmentAspectCreateInfoKHR = VkRenderPassInputAttachmentAspectCreateInfo;
pub const VkInputAttachmentAspectReferenceKHR = VkInputAttachmentAspectReference;
pub const VkImageViewUsageCreateInfoKHR = VkImageViewUsageCreateInfo;
pub const VkPipelineTessellationDomainOriginStateCreateInfoKHR = VkPipelineTessellationDomainOriginStateCreateInfo;
pub const struct_VkPhysicalDeviceSurfaceInfo2KHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    surface: VkSurfaceKHR = @import("std").mem.zeroes(VkSurfaceKHR),
};
pub const VkPhysicalDeviceSurfaceInfo2KHR = struct_VkPhysicalDeviceSurfaceInfo2KHR;
pub const struct_VkSurfaceCapabilities2KHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    surfaceCapabilities: VkSurfaceCapabilitiesKHR = @import("std").mem.zeroes(VkSurfaceCapabilitiesKHR),
};
pub const VkSurfaceCapabilities2KHR = struct_VkSurfaceCapabilities2KHR;
pub const struct_VkSurfaceFormat2KHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    surfaceFormat: VkSurfaceFormatKHR = @import("std").mem.zeroes(VkSurfaceFormatKHR),
};
pub const VkSurfaceFormat2KHR = struct_VkSurfaceFormat2KHR;
pub const PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR = ?*const fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceSurfaceInfo2KHR, [*c]VkSurfaceCapabilities2KHR) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDeviceSurfaceFormats2KHR = ?*const fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceSurfaceInfo2KHR, [*c]u32, [*c]VkSurfaceFormat2KHR) callconv(.C) VkResult;
pub extern fn vkGetPhysicalDeviceSurfaceCapabilities2KHR(physicalDevice: VkPhysicalDevice, pSurfaceInfo: [*c]const VkPhysicalDeviceSurfaceInfo2KHR, pSurfaceCapabilities: [*c]VkSurfaceCapabilities2KHR) VkResult;
pub extern fn vkGetPhysicalDeviceSurfaceFormats2KHR(physicalDevice: VkPhysicalDevice, pSurfaceInfo: [*c]const VkPhysicalDeviceSurfaceInfo2KHR, pSurfaceFormatCount: [*c]u32, pSurfaceFormats: [*c]VkSurfaceFormat2KHR) VkResult;
pub const VkPhysicalDeviceVariablePointerFeaturesKHR = VkPhysicalDeviceVariablePointersFeatures;
pub const VkPhysicalDeviceVariablePointersFeaturesKHR = VkPhysicalDeviceVariablePointersFeatures;
pub const struct_VkDisplayProperties2KHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    displayProperties: VkDisplayPropertiesKHR = @import("std").mem.zeroes(VkDisplayPropertiesKHR),
};
pub const VkDisplayProperties2KHR = struct_VkDisplayProperties2KHR;
pub const struct_VkDisplayPlaneProperties2KHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    displayPlaneProperties: VkDisplayPlanePropertiesKHR = @import("std").mem.zeroes(VkDisplayPlanePropertiesKHR),
};
pub const VkDisplayPlaneProperties2KHR = struct_VkDisplayPlaneProperties2KHR;
pub const struct_VkDisplayModeProperties2KHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    displayModeProperties: VkDisplayModePropertiesKHR = @import("std").mem.zeroes(VkDisplayModePropertiesKHR),
};
pub const VkDisplayModeProperties2KHR = struct_VkDisplayModeProperties2KHR;
pub const struct_VkDisplayPlaneInfo2KHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    mode: VkDisplayModeKHR = @import("std").mem.zeroes(VkDisplayModeKHR),
    planeIndex: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDisplayPlaneInfo2KHR = struct_VkDisplayPlaneInfo2KHR;
pub const struct_VkDisplayPlaneCapabilities2KHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    capabilities: VkDisplayPlaneCapabilitiesKHR = @import("std").mem.zeroes(VkDisplayPlaneCapabilitiesKHR),
};
pub const VkDisplayPlaneCapabilities2KHR = struct_VkDisplayPlaneCapabilities2KHR;
pub const PFN_vkGetPhysicalDeviceDisplayProperties2KHR = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkDisplayProperties2KHR) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkDisplayPlaneProperties2KHR) callconv(.C) VkResult;
pub const PFN_vkGetDisplayModeProperties2KHR = ?*const fn (VkPhysicalDevice, VkDisplayKHR, [*c]u32, [*c]VkDisplayModeProperties2KHR) callconv(.C) VkResult;
pub const PFN_vkGetDisplayPlaneCapabilities2KHR = ?*const fn (VkPhysicalDevice, [*c]const VkDisplayPlaneInfo2KHR, [*c]VkDisplayPlaneCapabilities2KHR) callconv(.C) VkResult;
pub extern fn vkGetPhysicalDeviceDisplayProperties2KHR(physicalDevice: VkPhysicalDevice, pPropertyCount: [*c]u32, pProperties: [*c]VkDisplayProperties2KHR) VkResult;
pub extern fn vkGetPhysicalDeviceDisplayPlaneProperties2KHR(physicalDevice: VkPhysicalDevice, pPropertyCount: [*c]u32, pProperties: [*c]VkDisplayPlaneProperties2KHR) VkResult;
pub extern fn vkGetDisplayModeProperties2KHR(physicalDevice: VkPhysicalDevice, display: VkDisplayKHR, pPropertyCount: [*c]u32, pProperties: [*c]VkDisplayModeProperties2KHR) VkResult;
pub extern fn vkGetDisplayPlaneCapabilities2KHR(physicalDevice: VkPhysicalDevice, pDisplayPlaneInfo: [*c]const VkDisplayPlaneInfo2KHR, pCapabilities: [*c]VkDisplayPlaneCapabilities2KHR) VkResult;
pub const VkMemoryDedicatedRequirementsKHR = VkMemoryDedicatedRequirements;
pub const VkMemoryDedicatedAllocateInfoKHR = VkMemoryDedicatedAllocateInfo;
pub const VkBufferMemoryRequirementsInfo2KHR = VkBufferMemoryRequirementsInfo2;
pub const VkImageMemoryRequirementsInfo2KHR = VkImageMemoryRequirementsInfo2;
pub const VkImageSparseMemoryRequirementsInfo2KHR = VkImageSparseMemoryRequirementsInfo2;
pub const VkMemoryRequirements2KHR = VkMemoryRequirements2;
pub const VkSparseImageMemoryRequirements2KHR = VkSparseImageMemoryRequirements2;
pub const PFN_vkGetImageMemoryRequirements2KHR = ?*const fn (VkDevice, [*c]const VkImageMemoryRequirementsInfo2, [*c]VkMemoryRequirements2) callconv(.C) void;
pub const PFN_vkGetBufferMemoryRequirements2KHR = ?*const fn (VkDevice, [*c]const VkBufferMemoryRequirementsInfo2, [*c]VkMemoryRequirements2) callconv(.C) void;
pub const PFN_vkGetImageSparseMemoryRequirements2KHR = ?*const fn (VkDevice, [*c]const VkImageSparseMemoryRequirementsInfo2, [*c]u32, [*c]VkSparseImageMemoryRequirements2) callconv(.C) void;
pub extern fn vkGetImageMemoryRequirements2KHR(device: VkDevice, pInfo: [*c]const VkImageMemoryRequirementsInfo2, pMemoryRequirements: [*c]VkMemoryRequirements2) void;
pub extern fn vkGetBufferMemoryRequirements2KHR(device: VkDevice, pInfo: [*c]const VkBufferMemoryRequirementsInfo2, pMemoryRequirements: [*c]VkMemoryRequirements2) void;
pub extern fn vkGetImageSparseMemoryRequirements2KHR(device: VkDevice, pInfo: [*c]const VkImageSparseMemoryRequirementsInfo2, pSparseMemoryRequirementCount: [*c]u32, pSparseMemoryRequirements: [*c]VkSparseImageMemoryRequirements2) void;
pub const VkImageFormatListCreateInfoKHR = VkImageFormatListCreateInfo;
pub const VkSamplerYcbcrConversionKHR = VkSamplerYcbcrConversion;
pub const VkSamplerYcbcrModelConversionKHR = VkSamplerYcbcrModelConversion;
pub const VkSamplerYcbcrRangeKHR = VkSamplerYcbcrRange;
pub const VkChromaLocationKHR = VkChromaLocation;
pub const VkSamplerYcbcrConversionCreateInfoKHR = VkSamplerYcbcrConversionCreateInfo;
pub const VkSamplerYcbcrConversionInfoKHR = VkSamplerYcbcrConversionInfo;
pub const VkBindImagePlaneMemoryInfoKHR = VkBindImagePlaneMemoryInfo;
pub const VkImagePlaneMemoryRequirementsInfoKHR = VkImagePlaneMemoryRequirementsInfo;
pub const VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR = VkPhysicalDeviceSamplerYcbcrConversionFeatures;
pub const VkSamplerYcbcrConversionImageFormatPropertiesKHR = VkSamplerYcbcrConversionImageFormatProperties;
pub const PFN_vkCreateSamplerYcbcrConversionKHR = ?*const fn (VkDevice, [*c]const VkSamplerYcbcrConversionCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkSamplerYcbcrConversion) callconv(.C) VkResult;
pub const PFN_vkDestroySamplerYcbcrConversionKHR = ?*const fn (VkDevice, VkSamplerYcbcrConversion, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub extern fn vkCreateSamplerYcbcrConversionKHR(device: VkDevice, pCreateInfo: [*c]const VkSamplerYcbcrConversionCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pYcbcrConversion: [*c]VkSamplerYcbcrConversion) VkResult;
pub extern fn vkDestroySamplerYcbcrConversionKHR(device: VkDevice, ycbcrConversion: VkSamplerYcbcrConversion, pAllocator: [*c]const VkAllocationCallbacks) void;
pub const VkBindBufferMemoryInfoKHR = VkBindBufferMemoryInfo;
pub const VkBindImageMemoryInfoKHR = VkBindImageMemoryInfo;
pub const PFN_vkBindBufferMemory2KHR = ?*const fn (VkDevice, u32, [*c]const VkBindBufferMemoryInfo) callconv(.C) VkResult;
pub const PFN_vkBindImageMemory2KHR = ?*const fn (VkDevice, u32, [*c]const VkBindImageMemoryInfo) callconv(.C) VkResult;
pub extern fn vkBindBufferMemory2KHR(device: VkDevice, bindInfoCount: u32, pBindInfos: [*c]const VkBindBufferMemoryInfo) VkResult;
pub extern fn vkBindImageMemory2KHR(device: VkDevice, bindInfoCount: u32, pBindInfos: [*c]const VkBindImageMemoryInfo) VkResult;
pub const VkPhysicalDeviceMaintenance3PropertiesKHR = VkPhysicalDeviceMaintenance3Properties;
pub const VkDescriptorSetLayoutSupportKHR = VkDescriptorSetLayoutSupport;
pub const PFN_vkGetDescriptorSetLayoutSupportKHR = ?*const fn (VkDevice, [*c]const VkDescriptorSetLayoutCreateInfo, [*c]VkDescriptorSetLayoutSupport) callconv(.C) void;
pub extern fn vkGetDescriptorSetLayoutSupportKHR(device: VkDevice, pCreateInfo: [*c]const VkDescriptorSetLayoutCreateInfo, pSupport: [*c]VkDescriptorSetLayoutSupport) void;
pub const PFN_vkCmdDrawIndirectCountKHR = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawIndexedIndirectCountKHR = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, u32, u32) callconv(.C) void;
pub extern fn vkCmdDrawIndirectCountKHR(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: u32, stride: u32) void;
pub extern fn vkCmdDrawIndexedIndirectCountKHR(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: u32, stride: u32) void;
pub const VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR = VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures;
pub const VkPhysicalDevice8BitStorageFeaturesKHR = VkPhysicalDevice8BitStorageFeatures;
pub const VkPhysicalDeviceShaderAtomicInt64FeaturesKHR = VkPhysicalDeviceShaderAtomicInt64Features;
pub const struct_VkPhysicalDeviceShaderClockFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderSubgroupClock: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderDeviceClock: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderClockFeaturesKHR = struct_VkPhysicalDeviceShaderClockFeaturesKHR;
// /usr/include/vk_video/vulkan_video_codec_h265std_decode.h:32:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoDecodeH265PictureInfoFlags = opaque {};
pub const StdVideoDecodeH265PictureInfoFlags = struct_StdVideoDecodeH265PictureInfoFlags;
pub const struct_StdVideoDecodeH265PictureInfo = extern struct {
    flags: StdVideoDecodeH265PictureInfoFlags = @import("std").mem.zeroes(StdVideoDecodeH265PictureInfoFlags),
    sps_video_parameter_set_id: u8 = @import("std").mem.zeroes(u8),
    pps_seq_parameter_set_id: u8 = @import("std").mem.zeroes(u8),
    pps_pic_parameter_set_id: u8 = @import("std").mem.zeroes(u8),
    NumDeltaPocsOfRefRpsIdx: u8 = @import("std").mem.zeroes(u8),
    PicOrderCntVal: i32 = @import("std").mem.zeroes(i32),
    NumBitsForSTRefPicSetInSlice: u16 = @import("std").mem.zeroes(u16),
    reserved: u16 = @import("std").mem.zeroes(u16),
    RefPicSetStCurrBefore: [8]u8 = @import("std").mem.zeroes([8]u8),
    RefPicSetStCurrAfter: [8]u8 = @import("std").mem.zeroes([8]u8),
    RefPicSetLtCurr: [8]u8 = @import("std").mem.zeroes([8]u8),
};
pub const StdVideoDecodeH265PictureInfo = struct_StdVideoDecodeH265PictureInfo;
// /usr/include/vk_video/vulkan_video_codec_h265std_decode.h:53:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoDecodeH265ReferenceInfoFlags = opaque {};
pub const StdVideoDecodeH265ReferenceInfoFlags = struct_StdVideoDecodeH265ReferenceInfoFlags;
pub const struct_StdVideoDecodeH265ReferenceInfo = extern struct {
    flags: StdVideoDecodeH265ReferenceInfoFlags = @import("std").mem.zeroes(StdVideoDecodeH265ReferenceInfoFlags),
    PicOrderCntVal: i32 = @import("std").mem.zeroes(i32),
};
pub const StdVideoDecodeH265ReferenceInfo = struct_StdVideoDecodeH265ReferenceInfo;
pub const struct_VkVideoDecodeH265ProfileInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stdProfileIdc: StdVideoH265ProfileIdc = @import("std").mem.zeroes(StdVideoH265ProfileIdc),
};
pub const VkVideoDecodeH265ProfileInfoKHR = struct_VkVideoDecodeH265ProfileInfoKHR;
pub const struct_VkVideoDecodeH265CapabilitiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxLevelIdc: StdVideoH265LevelIdc = @import("std").mem.zeroes(StdVideoH265LevelIdc),
};
pub const VkVideoDecodeH265CapabilitiesKHR = struct_VkVideoDecodeH265CapabilitiesKHR;
pub const struct_VkVideoDecodeH265SessionParametersAddInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stdVPSCount: u32 = @import("std").mem.zeroes(u32),
    pStdVPSs: ?*const StdVideoH265VideoParameterSet = @import("std").mem.zeroes(?*const StdVideoH265VideoParameterSet),
    stdSPSCount: u32 = @import("std").mem.zeroes(u32),
    pStdSPSs: ?*const StdVideoH265SequenceParameterSet = @import("std").mem.zeroes(?*const StdVideoH265SequenceParameterSet),
    stdPPSCount: u32 = @import("std").mem.zeroes(u32),
    pStdPPSs: ?*const StdVideoH265PictureParameterSet = @import("std").mem.zeroes(?*const StdVideoH265PictureParameterSet),
};
pub const VkVideoDecodeH265SessionParametersAddInfoKHR = struct_VkVideoDecodeH265SessionParametersAddInfoKHR;
pub const struct_VkVideoDecodeH265SessionParametersCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    maxStdVPSCount: u32 = @import("std").mem.zeroes(u32),
    maxStdSPSCount: u32 = @import("std").mem.zeroes(u32),
    maxStdPPSCount: u32 = @import("std").mem.zeroes(u32),
    pParametersAddInfo: [*c]const VkVideoDecodeH265SessionParametersAddInfoKHR = @import("std").mem.zeroes([*c]const VkVideoDecodeH265SessionParametersAddInfoKHR),
};
pub const VkVideoDecodeH265SessionParametersCreateInfoKHR = struct_VkVideoDecodeH265SessionParametersCreateInfoKHR;
pub const struct_VkVideoDecodeH265PictureInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pStdPictureInfo: ?*const StdVideoDecodeH265PictureInfo = @import("std").mem.zeroes(?*const StdVideoDecodeH265PictureInfo),
    sliceSegmentCount: u32 = @import("std").mem.zeroes(u32),
    pSliceSegmentOffsets: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkVideoDecodeH265PictureInfoKHR = struct_VkVideoDecodeH265PictureInfoKHR;
pub const struct_VkVideoDecodeH265DpbSlotInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pStdReferenceInfo: ?*const StdVideoDecodeH265ReferenceInfo = @import("std").mem.zeroes(?*const StdVideoDecodeH265ReferenceInfo),
};
pub const VkVideoDecodeH265DpbSlotInfoKHR = struct_VkVideoDecodeH265DpbSlotInfoKHR;
pub const VK_QUEUE_GLOBAL_PRIORITY_LOW_KHR: c_int = 128;
pub const VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_KHR: c_int = 256;
pub const VK_QUEUE_GLOBAL_PRIORITY_HIGH_KHR: c_int = 512;
pub const VK_QUEUE_GLOBAL_PRIORITY_REALTIME_KHR: c_int = 1024;
pub const VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT: c_int = 128;
pub const VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT: c_int = 256;
pub const VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT: c_int = 512;
pub const VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT: c_int = 1024;
pub const VK_QUEUE_GLOBAL_PRIORITY_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkQueueGlobalPriorityKHR = c_uint;
pub const VkQueueGlobalPriorityKHR = enum_VkQueueGlobalPriorityKHR;
pub const struct_VkDeviceQueueGlobalPriorityCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    globalPriority: VkQueueGlobalPriorityKHR = @import("std").mem.zeroes(VkQueueGlobalPriorityKHR),
};
pub const VkDeviceQueueGlobalPriorityCreateInfoKHR = struct_VkDeviceQueueGlobalPriorityCreateInfoKHR;
pub const struct_VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    globalPriorityQuery: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR = struct_VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR;
pub const struct_VkQueueFamilyGlobalPriorityPropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    priorityCount: u32 = @import("std").mem.zeroes(u32),
    priorities: [16]VkQueueGlobalPriorityKHR = @import("std").mem.zeroes([16]VkQueueGlobalPriorityKHR),
};
pub const VkQueueFamilyGlobalPriorityPropertiesKHR = struct_VkQueueFamilyGlobalPriorityPropertiesKHR;
pub const VkDriverIdKHR = VkDriverId;
pub const VkConformanceVersionKHR = VkConformanceVersion;
pub const VkPhysicalDeviceDriverPropertiesKHR = VkPhysicalDeviceDriverProperties;
pub const VkShaderFloatControlsIndependenceKHR = VkShaderFloatControlsIndependence;
pub const VkPhysicalDeviceFloatControlsPropertiesKHR = VkPhysicalDeviceFloatControlsProperties;
pub const VkResolveModeFlagBitsKHR = VkResolveModeFlagBits;
pub const VkResolveModeFlagsKHR = VkResolveModeFlags;
pub const VkSubpassDescriptionDepthStencilResolveKHR = VkSubpassDescriptionDepthStencilResolve;
pub const VkPhysicalDeviceDepthStencilResolvePropertiesKHR = VkPhysicalDeviceDepthStencilResolveProperties;
pub const VkSemaphoreTypeKHR = VkSemaphoreType;
pub const VkSemaphoreWaitFlagBitsKHR = VkSemaphoreWaitFlagBits;
pub const VkSemaphoreWaitFlagsKHR = VkSemaphoreWaitFlags;
pub const VkPhysicalDeviceTimelineSemaphoreFeaturesKHR = VkPhysicalDeviceTimelineSemaphoreFeatures;
pub const VkPhysicalDeviceTimelineSemaphorePropertiesKHR = VkPhysicalDeviceTimelineSemaphoreProperties;
pub const VkSemaphoreTypeCreateInfoKHR = VkSemaphoreTypeCreateInfo;
pub const VkTimelineSemaphoreSubmitInfoKHR = VkTimelineSemaphoreSubmitInfo;
pub const VkSemaphoreWaitInfoKHR = VkSemaphoreWaitInfo;
pub const VkSemaphoreSignalInfoKHR = VkSemaphoreSignalInfo;
pub const PFN_vkGetSemaphoreCounterValueKHR = ?*const fn (VkDevice, VkSemaphore, [*c]u64) callconv(.C) VkResult;
pub const PFN_vkWaitSemaphoresKHR = ?*const fn (VkDevice, [*c]const VkSemaphoreWaitInfo, u64) callconv(.C) VkResult;
pub const PFN_vkSignalSemaphoreKHR = ?*const fn (VkDevice, [*c]const VkSemaphoreSignalInfo) callconv(.C) VkResult;
pub extern fn vkGetSemaphoreCounterValueKHR(device: VkDevice, semaphore: VkSemaphore, pValue: [*c]u64) VkResult;
pub extern fn vkWaitSemaphoresKHR(device: VkDevice, pWaitInfo: [*c]const VkSemaphoreWaitInfo, timeout: u64) VkResult;
pub extern fn vkSignalSemaphoreKHR(device: VkDevice, pSignalInfo: [*c]const VkSemaphoreSignalInfo) VkResult;
pub const VkPhysicalDeviceVulkanMemoryModelFeaturesKHR = VkPhysicalDeviceVulkanMemoryModelFeatures;
pub const VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR = VkPhysicalDeviceShaderTerminateInvocationFeatures;
pub const VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR: c_int = 0;
pub const VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR: c_int = 1;
pub const VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR: c_int = 2;
pub const VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR: c_int = 3;
pub const VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR: c_int = 4;
pub const VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkFragmentShadingRateCombinerOpKHR = c_uint;
pub const VkFragmentShadingRateCombinerOpKHR = enum_VkFragmentShadingRateCombinerOpKHR;
pub const struct_VkFragmentShadingRateAttachmentInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pFragmentShadingRateAttachment: [*c]const VkAttachmentReference2 = @import("std").mem.zeroes([*c]const VkAttachmentReference2),
    shadingRateAttachmentTexelSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
};
pub const VkFragmentShadingRateAttachmentInfoKHR = struct_VkFragmentShadingRateAttachmentInfoKHR;
pub const struct_VkPipelineFragmentShadingRateStateCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    fragmentSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    combinerOps: [2]VkFragmentShadingRateCombinerOpKHR = @import("std").mem.zeroes([2]VkFragmentShadingRateCombinerOpKHR),
};
pub const VkPipelineFragmentShadingRateStateCreateInfoKHR = struct_VkPipelineFragmentShadingRateStateCreateInfoKHR;
pub const struct_VkPhysicalDeviceFragmentShadingRateFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pipelineFragmentShadingRate: VkBool32 = @import("std").mem.zeroes(VkBool32),
    primitiveFragmentShadingRate: VkBool32 = @import("std").mem.zeroes(VkBool32),
    attachmentFragmentShadingRate: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceFragmentShadingRateFeaturesKHR = struct_VkPhysicalDeviceFragmentShadingRateFeaturesKHR;
pub const struct_VkPhysicalDeviceFragmentShadingRatePropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    minFragmentShadingRateAttachmentTexelSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxFragmentShadingRateAttachmentTexelSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxFragmentShadingRateAttachmentTexelSizeAspectRatio: u32 = @import("std").mem.zeroes(u32),
    primitiveFragmentShadingRateWithMultipleViewports: VkBool32 = @import("std").mem.zeroes(VkBool32),
    layeredShadingRateAttachments: VkBool32 = @import("std").mem.zeroes(VkBool32),
    fragmentShadingRateNonTrivialCombinerOps: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxFragmentSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxFragmentSizeAspectRatio: u32 = @import("std").mem.zeroes(u32),
    maxFragmentShadingRateCoverageSamples: u32 = @import("std").mem.zeroes(u32),
    maxFragmentShadingRateRasterizationSamples: VkSampleCountFlagBits = @import("std").mem.zeroes(VkSampleCountFlagBits),
    fragmentShadingRateWithShaderDepthStencilWrites: VkBool32 = @import("std").mem.zeroes(VkBool32),
    fragmentShadingRateWithSampleMask: VkBool32 = @import("std").mem.zeroes(VkBool32),
    fragmentShadingRateWithShaderSampleMask: VkBool32 = @import("std").mem.zeroes(VkBool32),
    fragmentShadingRateWithConservativeRasterization: VkBool32 = @import("std").mem.zeroes(VkBool32),
    fragmentShadingRateWithFragmentShaderInterlock: VkBool32 = @import("std").mem.zeroes(VkBool32),
    fragmentShadingRateWithCustomSampleLocations: VkBool32 = @import("std").mem.zeroes(VkBool32),
    fragmentShadingRateStrictMultiplyCombiner: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceFragmentShadingRatePropertiesKHR = struct_VkPhysicalDeviceFragmentShadingRatePropertiesKHR;
pub const struct_VkPhysicalDeviceFragmentShadingRateKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    sampleCounts: VkSampleCountFlags = @import("std").mem.zeroes(VkSampleCountFlags),
    fragmentSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
};
pub const VkPhysicalDeviceFragmentShadingRateKHR = struct_VkPhysicalDeviceFragmentShadingRateKHR;
pub const PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkPhysicalDeviceFragmentShadingRateKHR) callconv(.C) VkResult;
pub const PFN_vkCmdSetFragmentShadingRateKHR = ?*const fn (VkCommandBuffer, [*c]const VkExtent2D, [*c]const VkFragmentShadingRateCombinerOpKHR) callconv(.C) void;
pub extern fn vkGetPhysicalDeviceFragmentShadingRatesKHR(physicalDevice: VkPhysicalDevice, pFragmentShadingRateCount: [*c]u32, pFragmentShadingRates: [*c]VkPhysicalDeviceFragmentShadingRateKHR) VkResult;
pub extern fn vkCmdSetFragmentShadingRateKHR(commandBuffer: VkCommandBuffer, pFragmentSize: [*c]const VkExtent2D, combinerOps: [*c]const VkFragmentShadingRateCombinerOpKHR) void;
pub const struct_VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    dynamicRenderingLocalRead: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR = struct_VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR;
pub const struct_VkRenderingAttachmentLocationInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    colorAttachmentCount: u32 = @import("std").mem.zeroes(u32),
    pColorAttachmentLocations: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkRenderingAttachmentLocationInfoKHR = struct_VkRenderingAttachmentLocationInfoKHR;
pub const struct_VkRenderingInputAttachmentIndexInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    colorAttachmentCount: u32 = @import("std").mem.zeroes(u32),
    pColorAttachmentInputIndices: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    pDepthInputAttachmentIndex: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    pStencilInputAttachmentIndex: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkRenderingInputAttachmentIndexInfoKHR = struct_VkRenderingInputAttachmentIndexInfoKHR;
pub const PFN_vkCmdSetRenderingAttachmentLocationsKHR = ?*const fn (VkCommandBuffer, [*c]const VkRenderingAttachmentLocationInfoKHR) callconv(.C) void;
pub const PFN_vkCmdSetRenderingInputAttachmentIndicesKHR = ?*const fn (VkCommandBuffer, [*c]const VkRenderingInputAttachmentIndexInfoKHR) callconv(.C) void;
pub extern fn vkCmdSetRenderingAttachmentLocationsKHR(commandBuffer: VkCommandBuffer, pLocationInfo: [*c]const VkRenderingAttachmentLocationInfoKHR) void;
pub extern fn vkCmdSetRenderingInputAttachmentIndicesKHR(commandBuffer: VkCommandBuffer, pInputAttachmentIndexInfo: [*c]const VkRenderingInputAttachmentIndexInfoKHR) void;
pub const struct_VkPhysicalDeviceShaderQuadControlFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderQuadControl: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderQuadControlFeaturesKHR = struct_VkPhysicalDeviceShaderQuadControlFeaturesKHR;
pub const struct_VkSurfaceProtectedCapabilitiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    supportsProtected: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkSurfaceProtectedCapabilitiesKHR = struct_VkSurfaceProtectedCapabilitiesKHR;
pub const VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR = VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures;
pub const VkAttachmentReferenceStencilLayoutKHR = VkAttachmentReferenceStencilLayout;
pub const VkAttachmentDescriptionStencilLayoutKHR = VkAttachmentDescriptionStencilLayout;
pub const struct_VkPhysicalDevicePresentWaitFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    presentWait: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevicePresentWaitFeaturesKHR = struct_VkPhysicalDevicePresentWaitFeaturesKHR;
pub const PFN_vkWaitForPresentKHR = ?*const fn (VkDevice, VkSwapchainKHR, u64, u64) callconv(.C) VkResult;
pub extern fn vkWaitForPresentKHR(device: VkDevice, swapchain: VkSwapchainKHR, presentId: u64, timeout: u64) VkResult;
pub const VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR = VkPhysicalDeviceUniformBufferStandardLayoutFeatures;
pub const VkPhysicalDeviceBufferDeviceAddressFeaturesKHR = VkPhysicalDeviceBufferDeviceAddressFeatures;
pub const VkBufferDeviceAddressInfoKHR = VkBufferDeviceAddressInfo;
pub const VkBufferOpaqueCaptureAddressCreateInfoKHR = VkBufferOpaqueCaptureAddressCreateInfo;
pub const VkMemoryOpaqueCaptureAddressAllocateInfoKHR = VkMemoryOpaqueCaptureAddressAllocateInfo;
pub const VkDeviceMemoryOpaqueCaptureAddressInfoKHR = VkDeviceMemoryOpaqueCaptureAddressInfo;
pub const PFN_vkGetBufferDeviceAddressKHR = ?*const fn (VkDevice, [*c]const VkBufferDeviceAddressInfo) callconv(.C) VkDeviceAddress;
pub const PFN_vkGetBufferOpaqueCaptureAddressKHR = ?*const fn (VkDevice, [*c]const VkBufferDeviceAddressInfo) callconv(.C) u64;
pub const PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR = ?*const fn (VkDevice, [*c]const VkDeviceMemoryOpaqueCaptureAddressInfo) callconv(.C) u64;
pub extern fn vkGetBufferDeviceAddressKHR(device: VkDevice, pInfo: [*c]const VkBufferDeviceAddressInfo) VkDeviceAddress;
pub extern fn vkGetBufferOpaqueCaptureAddressKHR(device: VkDevice, pInfo: [*c]const VkBufferDeviceAddressInfo) u64;
pub extern fn vkGetDeviceMemoryOpaqueCaptureAddressKHR(device: VkDevice, pInfo: [*c]const VkDeviceMemoryOpaqueCaptureAddressInfo) u64;
pub const struct_VkDeferredOperationKHR_T = opaque {};
pub const VkDeferredOperationKHR = ?*struct_VkDeferredOperationKHR_T;
pub const PFN_vkCreateDeferredOperationKHR = ?*const fn (VkDevice, [*c]const VkAllocationCallbacks, [*c]VkDeferredOperationKHR) callconv(.C) VkResult;
pub const PFN_vkDestroyDeferredOperationKHR = ?*const fn (VkDevice, VkDeferredOperationKHR, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkGetDeferredOperationMaxConcurrencyKHR = ?*const fn (VkDevice, VkDeferredOperationKHR) callconv(.C) u32;
pub const PFN_vkGetDeferredOperationResultKHR = ?*const fn (VkDevice, VkDeferredOperationKHR) callconv(.C) VkResult;
pub const PFN_vkDeferredOperationJoinKHR = ?*const fn (VkDevice, VkDeferredOperationKHR) callconv(.C) VkResult;
pub extern fn vkCreateDeferredOperationKHR(device: VkDevice, pAllocator: [*c]const VkAllocationCallbacks, pDeferredOperation: [*c]VkDeferredOperationKHR) VkResult;
pub extern fn vkDestroyDeferredOperationKHR(device: VkDevice, operation: VkDeferredOperationKHR, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkGetDeferredOperationMaxConcurrencyKHR(device: VkDevice, operation: VkDeferredOperationKHR) u32;
pub extern fn vkGetDeferredOperationResultKHR(device: VkDevice, operation: VkDeferredOperationKHR) VkResult;
pub extern fn vkDeferredOperationJoinKHR(device: VkDevice, operation: VkDeferredOperationKHR) VkResult;
pub const VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR: c_int = 0;
pub const VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR: c_int = 1;
pub const VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR: c_int = 2;
pub const VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR: c_int = 3;
pub const VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkPipelineExecutableStatisticFormatKHR = c_uint;
pub const VkPipelineExecutableStatisticFormatKHR = enum_VkPipelineExecutableStatisticFormatKHR;
pub const struct_VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pipelineExecutableInfo: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR = struct_VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR;
pub const struct_VkPipelineInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pipeline: VkPipeline = @import("std").mem.zeroes(VkPipeline),
};
pub const VkPipelineInfoKHR = struct_VkPipelineInfoKHR;
pub const struct_VkPipelineExecutablePropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    stages: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    name: [256]u8 = @import("std").mem.zeroes([256]u8),
    description: [256]u8 = @import("std").mem.zeroes([256]u8),
    subgroupSize: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPipelineExecutablePropertiesKHR = struct_VkPipelineExecutablePropertiesKHR;
pub const struct_VkPipelineExecutableInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pipeline: VkPipeline = @import("std").mem.zeroes(VkPipeline),
    executableIndex: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPipelineExecutableInfoKHR = struct_VkPipelineExecutableInfoKHR;
pub const union_VkPipelineExecutableStatisticValueKHR = extern union {
    b32: VkBool32,
    i64: i64,
    u64: u64,
    f64: f64,
};
pub const VkPipelineExecutableStatisticValueKHR = union_VkPipelineExecutableStatisticValueKHR;
pub const struct_VkPipelineExecutableStatisticKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    name: [256]u8 = @import("std").mem.zeroes([256]u8),
    description: [256]u8 = @import("std").mem.zeroes([256]u8),
    format: VkPipelineExecutableStatisticFormatKHR = @import("std").mem.zeroes(VkPipelineExecutableStatisticFormatKHR),
    value: VkPipelineExecutableStatisticValueKHR = @import("std").mem.zeroes(VkPipelineExecutableStatisticValueKHR),
};
pub const VkPipelineExecutableStatisticKHR = struct_VkPipelineExecutableStatisticKHR;
pub const struct_VkPipelineExecutableInternalRepresentationKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    name: [256]u8 = @import("std").mem.zeroes([256]u8),
    description: [256]u8 = @import("std").mem.zeroes([256]u8),
    isText: VkBool32 = @import("std").mem.zeroes(VkBool32),
    dataSize: usize = @import("std").mem.zeroes(usize),
    pData: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const VkPipelineExecutableInternalRepresentationKHR = struct_VkPipelineExecutableInternalRepresentationKHR;
pub const PFN_vkGetPipelineExecutablePropertiesKHR = ?*const fn (VkDevice, [*c]const VkPipelineInfoKHR, [*c]u32, [*c]VkPipelineExecutablePropertiesKHR) callconv(.C) VkResult;
pub const PFN_vkGetPipelineExecutableStatisticsKHR = ?*const fn (VkDevice, [*c]const VkPipelineExecutableInfoKHR, [*c]u32, [*c]VkPipelineExecutableStatisticKHR) callconv(.C) VkResult;
pub const PFN_vkGetPipelineExecutableInternalRepresentationsKHR = ?*const fn (VkDevice, [*c]const VkPipelineExecutableInfoKHR, [*c]u32, [*c]VkPipelineExecutableInternalRepresentationKHR) callconv(.C) VkResult;
pub extern fn vkGetPipelineExecutablePropertiesKHR(device: VkDevice, pPipelineInfo: [*c]const VkPipelineInfoKHR, pExecutableCount: [*c]u32, pProperties: [*c]VkPipelineExecutablePropertiesKHR) VkResult;
pub extern fn vkGetPipelineExecutableStatisticsKHR(device: VkDevice, pExecutableInfo: [*c]const VkPipelineExecutableInfoKHR, pStatisticCount: [*c]u32, pStatistics: [*c]VkPipelineExecutableStatisticKHR) VkResult;
pub extern fn vkGetPipelineExecutableInternalRepresentationsKHR(device: VkDevice, pExecutableInfo: [*c]const VkPipelineExecutableInfoKHR, pInternalRepresentationCount: [*c]u32, pInternalRepresentations: [*c]VkPipelineExecutableInternalRepresentationKHR) VkResult;
pub const VK_MEMORY_UNMAP_RESERVE_BIT_EXT: c_int = 1;
pub const VK_MEMORY_UNMAP_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkMemoryUnmapFlagBitsKHR = c_uint;
pub const VkMemoryUnmapFlagBitsKHR = enum_VkMemoryUnmapFlagBitsKHR;
pub const VkMemoryUnmapFlagsKHR = VkFlags;
pub const struct_VkMemoryMapInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkMemoryMapFlags = @import("std").mem.zeroes(VkMemoryMapFlags),
    memory: VkDeviceMemory = @import("std").mem.zeroes(VkDeviceMemory),
    offset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkMemoryMapInfoKHR = struct_VkMemoryMapInfoKHR;
pub const struct_VkMemoryUnmapInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkMemoryUnmapFlagsKHR = @import("std").mem.zeroes(VkMemoryUnmapFlagsKHR),
    memory: VkDeviceMemory = @import("std").mem.zeroes(VkDeviceMemory),
};
pub const VkMemoryUnmapInfoKHR = struct_VkMemoryUnmapInfoKHR;
pub const PFN_vkMapMemory2KHR = ?*const fn (VkDevice, [*c]const VkMemoryMapInfoKHR, [*c]?*anyopaque) callconv(.C) VkResult;
pub const PFN_vkUnmapMemory2KHR = ?*const fn (VkDevice, [*c]const VkMemoryUnmapInfoKHR) callconv(.C) VkResult;
pub extern fn vkMapMemory2KHR(device: VkDevice, pMemoryMapInfo: [*c]const VkMemoryMapInfoKHR, ppData: [*c]?*anyopaque) VkResult;
pub extern fn vkUnmapMemory2KHR(device: VkDevice, pMemoryUnmapInfo: [*c]const VkMemoryUnmapInfoKHR) VkResult;
pub const VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR = VkPhysicalDeviceShaderIntegerDotProductFeatures;
pub const VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR = VkPhysicalDeviceShaderIntegerDotProductProperties;
pub const struct_VkPipelineLibraryCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    libraryCount: u32 = @import("std").mem.zeroes(u32),
    pLibraries: [*c]const VkPipeline = @import("std").mem.zeroes([*c]const VkPipeline),
};
pub const VkPipelineLibraryCreateInfoKHR = struct_VkPipelineLibraryCreateInfoKHR;
pub const struct_VkPresentIdKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    swapchainCount: u32 = @import("std").mem.zeroes(u32),
    pPresentIds: [*c]const u64 = @import("std").mem.zeroes([*c]const u64),
};
pub const VkPresentIdKHR = struct_VkPresentIdKHR;
pub const struct_VkPhysicalDevicePresentIdFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    presentId: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevicePresentIdFeaturesKHR = struct_VkPhysicalDevicePresentIdFeaturesKHR;
pub const VK_VIDEO_ENCODE_TUNING_MODE_DEFAULT_KHR: c_int = 0;
pub const VK_VIDEO_ENCODE_TUNING_MODE_HIGH_QUALITY_KHR: c_int = 1;
pub const VK_VIDEO_ENCODE_TUNING_MODE_LOW_LATENCY_KHR: c_int = 2;
pub const VK_VIDEO_ENCODE_TUNING_MODE_ULTRA_LOW_LATENCY_KHR: c_int = 3;
pub const VK_VIDEO_ENCODE_TUNING_MODE_LOSSLESS_KHR: c_int = 4;
pub const VK_VIDEO_ENCODE_TUNING_MODE_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoEncodeTuningModeKHR = c_uint;
pub const VkVideoEncodeTuningModeKHR = enum_VkVideoEncodeTuningModeKHR;
pub const VkVideoEncodeFlagsKHR = VkFlags;
pub const VK_VIDEO_ENCODE_CAPABILITY_PRECEDING_EXTERNALLY_ENCODED_BYTES_BIT_KHR: c_int = 1;
pub const VK_VIDEO_ENCODE_CAPABILITY_INSUFFICIENT_BITSTREAM_BUFFER_RANGE_DETECTION_BIT_KHR: c_int = 2;
pub const VK_VIDEO_ENCODE_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoEncodeCapabilityFlagBitsKHR = c_uint;
pub const VkVideoEncodeCapabilityFlagBitsKHR = enum_VkVideoEncodeCapabilityFlagBitsKHR;
pub const VkVideoEncodeCapabilityFlagsKHR = VkFlags;
pub const VK_VIDEO_ENCODE_RATE_CONTROL_MODE_DEFAULT_KHR: c_int = 0;
pub const VK_VIDEO_ENCODE_RATE_CONTROL_MODE_DISABLED_BIT_KHR: c_int = 1;
pub const VK_VIDEO_ENCODE_RATE_CONTROL_MODE_CBR_BIT_KHR: c_int = 2;
pub const VK_VIDEO_ENCODE_RATE_CONTROL_MODE_VBR_BIT_KHR: c_int = 4;
pub const VK_VIDEO_ENCODE_RATE_CONTROL_MODE_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoEncodeRateControlModeFlagBitsKHR = c_uint;
pub const VkVideoEncodeRateControlModeFlagBitsKHR = enum_VkVideoEncodeRateControlModeFlagBitsKHR;
pub const VkVideoEncodeRateControlModeFlagsKHR = VkFlags;
pub const VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_BUFFER_OFFSET_BIT_KHR: c_int = 1;
pub const VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_BYTES_WRITTEN_BIT_KHR: c_int = 2;
pub const VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_HAS_OVERRIDES_BIT_KHR: c_int = 4;
pub const VK_VIDEO_ENCODE_FEEDBACK_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoEncodeFeedbackFlagBitsKHR = c_uint;
pub const VkVideoEncodeFeedbackFlagBitsKHR = enum_VkVideoEncodeFeedbackFlagBitsKHR;
pub const VkVideoEncodeFeedbackFlagsKHR = VkFlags;
pub const VK_VIDEO_ENCODE_USAGE_DEFAULT_KHR: c_int = 0;
pub const VK_VIDEO_ENCODE_USAGE_TRANSCODING_BIT_KHR: c_int = 1;
pub const VK_VIDEO_ENCODE_USAGE_STREAMING_BIT_KHR: c_int = 2;
pub const VK_VIDEO_ENCODE_USAGE_RECORDING_BIT_KHR: c_int = 4;
pub const VK_VIDEO_ENCODE_USAGE_CONFERENCING_BIT_KHR: c_int = 8;
pub const VK_VIDEO_ENCODE_USAGE_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoEncodeUsageFlagBitsKHR = c_uint;
pub const VkVideoEncodeUsageFlagBitsKHR = enum_VkVideoEncodeUsageFlagBitsKHR;
pub const VkVideoEncodeUsageFlagsKHR = VkFlags;
pub const VK_VIDEO_ENCODE_CONTENT_DEFAULT_KHR: c_int = 0;
pub const VK_VIDEO_ENCODE_CONTENT_CAMERA_BIT_KHR: c_int = 1;
pub const VK_VIDEO_ENCODE_CONTENT_DESKTOP_BIT_KHR: c_int = 2;
pub const VK_VIDEO_ENCODE_CONTENT_RENDERED_BIT_KHR: c_int = 4;
pub const VK_VIDEO_ENCODE_CONTENT_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkVideoEncodeContentFlagBitsKHR = c_uint;
pub const VkVideoEncodeContentFlagBitsKHR = enum_VkVideoEncodeContentFlagBitsKHR;
pub const VkVideoEncodeContentFlagsKHR = VkFlags;
pub const VkVideoEncodeRateControlFlagsKHR = VkFlags;
pub const struct_VkVideoEncodeInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkVideoEncodeFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeFlagsKHR),
    dstBuffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    dstBufferOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    dstBufferRange: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    srcPictureResource: VkVideoPictureResourceInfoKHR = @import("std").mem.zeroes(VkVideoPictureResourceInfoKHR),
    pSetupReferenceSlot: [*c]const VkVideoReferenceSlotInfoKHR = @import("std").mem.zeroes([*c]const VkVideoReferenceSlotInfoKHR),
    referenceSlotCount: u32 = @import("std").mem.zeroes(u32),
    pReferenceSlots: [*c]const VkVideoReferenceSlotInfoKHR = @import("std").mem.zeroes([*c]const VkVideoReferenceSlotInfoKHR),
    precedingExternallyEncodedBytes: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVideoEncodeInfoKHR = struct_VkVideoEncodeInfoKHR;
pub const struct_VkVideoEncodeCapabilitiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    flags: VkVideoEncodeCapabilityFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeCapabilityFlagsKHR),
    rateControlModes: VkVideoEncodeRateControlModeFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeRateControlModeFlagsKHR),
    maxRateControlLayers: u32 = @import("std").mem.zeroes(u32),
    maxBitrate: u64 = @import("std").mem.zeroes(u64),
    maxQualityLevels: u32 = @import("std").mem.zeroes(u32),
    encodeInputPictureGranularity: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    supportedEncodeFeedbackFlags: VkVideoEncodeFeedbackFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeFeedbackFlagsKHR),
};
pub const VkVideoEncodeCapabilitiesKHR = struct_VkVideoEncodeCapabilitiesKHR;
pub const struct_VkQueryPoolVideoEncodeFeedbackCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    encodeFeedbackFlags: VkVideoEncodeFeedbackFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeFeedbackFlagsKHR),
};
pub const VkQueryPoolVideoEncodeFeedbackCreateInfoKHR = struct_VkQueryPoolVideoEncodeFeedbackCreateInfoKHR;
pub const struct_VkVideoEncodeUsageInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    videoUsageHints: VkVideoEncodeUsageFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeUsageFlagsKHR),
    videoContentHints: VkVideoEncodeContentFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeContentFlagsKHR),
    tuningMode: VkVideoEncodeTuningModeKHR = @import("std").mem.zeroes(VkVideoEncodeTuningModeKHR),
};
pub const VkVideoEncodeUsageInfoKHR = struct_VkVideoEncodeUsageInfoKHR;
pub const struct_VkVideoEncodeRateControlLayerInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    averageBitrate: u64 = @import("std").mem.zeroes(u64),
    maxBitrate: u64 = @import("std").mem.zeroes(u64),
    frameRateNumerator: u32 = @import("std").mem.zeroes(u32),
    frameRateDenominator: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVideoEncodeRateControlLayerInfoKHR = struct_VkVideoEncodeRateControlLayerInfoKHR;
pub const struct_VkVideoEncodeRateControlInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkVideoEncodeRateControlFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeRateControlFlagsKHR),
    rateControlMode: VkVideoEncodeRateControlModeFlagBitsKHR = @import("std").mem.zeroes(VkVideoEncodeRateControlModeFlagBitsKHR),
    layerCount: u32 = @import("std").mem.zeroes(u32),
    pLayers: [*c]const VkVideoEncodeRateControlLayerInfoKHR = @import("std").mem.zeroes([*c]const VkVideoEncodeRateControlLayerInfoKHR),
    virtualBufferSizeInMs: u32 = @import("std").mem.zeroes(u32),
    initialVirtualBufferSizeInMs: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVideoEncodeRateControlInfoKHR = struct_VkVideoEncodeRateControlInfoKHR;
pub const struct_VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pVideoProfile: [*c]const VkVideoProfileInfoKHR = @import("std").mem.zeroes([*c]const VkVideoProfileInfoKHR),
    qualityLevel: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR = struct_VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR;
pub const struct_VkVideoEncodeQualityLevelPropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    preferredRateControlMode: VkVideoEncodeRateControlModeFlagBitsKHR = @import("std").mem.zeroes(VkVideoEncodeRateControlModeFlagBitsKHR),
    preferredRateControlLayerCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVideoEncodeQualityLevelPropertiesKHR = struct_VkVideoEncodeQualityLevelPropertiesKHR;
pub const struct_VkVideoEncodeQualityLevelInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    qualityLevel: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVideoEncodeQualityLevelInfoKHR = struct_VkVideoEncodeQualityLevelInfoKHR;
pub const struct_VkVideoEncodeSessionParametersGetInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    videoSessionParameters: VkVideoSessionParametersKHR = @import("std").mem.zeroes(VkVideoSessionParametersKHR),
};
pub const VkVideoEncodeSessionParametersGetInfoKHR = struct_VkVideoEncodeSessionParametersGetInfoKHR;
pub const struct_VkVideoEncodeSessionParametersFeedbackInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    hasOverrides: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkVideoEncodeSessionParametersFeedbackInfoKHR = struct_VkVideoEncodeSessionParametersFeedbackInfoKHR;
pub const PFN_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = ?*const fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR, [*c]VkVideoEncodeQualityLevelPropertiesKHR) callconv(.C) VkResult;
pub const PFN_vkGetEncodedVideoSessionParametersKHR = ?*const fn (VkDevice, [*c]const VkVideoEncodeSessionParametersGetInfoKHR, [*c]VkVideoEncodeSessionParametersFeedbackInfoKHR, [*c]usize, ?*anyopaque) callconv(.C) VkResult;
pub const PFN_vkCmdEncodeVideoKHR = ?*const fn (VkCommandBuffer, [*c]const VkVideoEncodeInfoKHR) callconv(.C) void;
pub extern fn vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR(physicalDevice: VkPhysicalDevice, pQualityLevelInfo: [*c]const VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR, pQualityLevelProperties: [*c]VkVideoEncodeQualityLevelPropertiesKHR) VkResult;
pub extern fn vkGetEncodedVideoSessionParametersKHR(device: VkDevice, pVideoSessionParametersInfo: [*c]const VkVideoEncodeSessionParametersGetInfoKHR, pFeedbackInfo: [*c]VkVideoEncodeSessionParametersFeedbackInfoKHR, pDataSize: [*c]usize, pData: ?*anyopaque) VkResult;
pub extern fn vkCmdEncodeVideoKHR(commandBuffer: VkCommandBuffer, pEncodeInfo: [*c]const VkVideoEncodeInfoKHR) void;
pub const VkPipelineStageFlags2KHR = VkPipelineStageFlags2;
pub const VkPipelineStageFlagBits2KHR = VkPipelineStageFlagBits2;
pub const VkAccessFlags2KHR = VkAccessFlags2;
pub const VkAccessFlagBits2KHR = VkAccessFlagBits2;
pub const VkSubmitFlagBitsKHR = VkSubmitFlagBits;
pub const VkSubmitFlagsKHR = VkSubmitFlags;
pub const VkMemoryBarrier2KHR = VkMemoryBarrier2;
pub const VkBufferMemoryBarrier2KHR = VkBufferMemoryBarrier2;
pub const VkImageMemoryBarrier2KHR = VkImageMemoryBarrier2;
pub const VkDependencyInfoKHR = VkDependencyInfo;
pub const VkSubmitInfo2KHR = VkSubmitInfo2;
pub const VkSemaphoreSubmitInfoKHR = VkSemaphoreSubmitInfo;
pub const VkCommandBufferSubmitInfoKHR = VkCommandBufferSubmitInfo;
pub const VkPhysicalDeviceSynchronization2FeaturesKHR = VkPhysicalDeviceSynchronization2Features;
pub const struct_VkQueueFamilyCheckpointProperties2NV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    checkpointExecutionStageMask: VkPipelineStageFlags2 = @import("std").mem.zeroes(VkPipelineStageFlags2),
};
pub const VkQueueFamilyCheckpointProperties2NV = struct_VkQueueFamilyCheckpointProperties2NV;
pub const struct_VkCheckpointData2NV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    stage: VkPipelineStageFlags2 = @import("std").mem.zeroes(VkPipelineStageFlags2),
    pCheckpointMarker: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const VkCheckpointData2NV = struct_VkCheckpointData2NV;
pub const PFN_vkCmdSetEvent2KHR = ?*const fn (VkCommandBuffer, VkEvent, [*c]const VkDependencyInfo) callconv(.C) void;
pub const PFN_vkCmdResetEvent2KHR = ?*const fn (VkCommandBuffer, VkEvent, VkPipelineStageFlags2) callconv(.C) void;
pub const PFN_vkCmdWaitEvents2KHR = ?*const fn (VkCommandBuffer, u32, [*c]const VkEvent, [*c]const VkDependencyInfo) callconv(.C) void;
pub const PFN_vkCmdPipelineBarrier2KHR = ?*const fn (VkCommandBuffer, [*c]const VkDependencyInfo) callconv(.C) void;
pub const PFN_vkCmdWriteTimestamp2KHR = ?*const fn (VkCommandBuffer, VkPipelineStageFlags2, VkQueryPool, u32) callconv(.C) void;
pub const PFN_vkQueueSubmit2KHR = ?*const fn (VkQueue, u32, [*c]const VkSubmitInfo2, VkFence) callconv(.C) VkResult;
pub const PFN_vkCmdWriteBufferMarker2AMD = ?*const fn (VkCommandBuffer, VkPipelineStageFlags2, VkBuffer, VkDeviceSize, u32) callconv(.C) void;
pub const PFN_vkGetQueueCheckpointData2NV = ?*const fn (VkQueue, [*c]u32, [*c]VkCheckpointData2NV) callconv(.C) void;
pub extern fn vkCmdSetEvent2KHR(commandBuffer: VkCommandBuffer, event: VkEvent, pDependencyInfo: [*c]const VkDependencyInfo) void;
pub extern fn vkCmdResetEvent2KHR(commandBuffer: VkCommandBuffer, event: VkEvent, stageMask: VkPipelineStageFlags2) void;
pub extern fn vkCmdWaitEvents2KHR(commandBuffer: VkCommandBuffer, eventCount: u32, pEvents: [*c]const VkEvent, pDependencyInfos: [*c]const VkDependencyInfo) void;
pub extern fn vkCmdPipelineBarrier2KHR(commandBuffer: VkCommandBuffer, pDependencyInfo: [*c]const VkDependencyInfo) void;
pub extern fn vkCmdWriteTimestamp2KHR(commandBuffer: VkCommandBuffer, stage: VkPipelineStageFlags2, queryPool: VkQueryPool, query: u32) void;
pub extern fn vkQueueSubmit2KHR(queue: VkQueue, submitCount: u32, pSubmits: [*c]const VkSubmitInfo2, fence: VkFence) VkResult;
pub extern fn vkCmdWriteBufferMarker2AMD(commandBuffer: VkCommandBuffer, stage: VkPipelineStageFlags2, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, marker: u32) void;
pub extern fn vkGetQueueCheckpointData2NV(queue: VkQueue, pCheckpointDataCount: [*c]u32, pCheckpointData: [*c]VkCheckpointData2NV) void;
pub const struct_VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    fragmentShaderBarycentric: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR = struct_VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR;
pub const struct_VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    triStripVertexOrderIndependentOfProvokingVertex: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR = struct_VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR;
pub const struct_VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderSubgroupUniformControlFlow: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR = struct_VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR;
pub const VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR = VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures;
pub const struct_VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    workgroupMemoryExplicitLayout: VkBool32 = @import("std").mem.zeroes(VkBool32),
    workgroupMemoryExplicitLayoutScalarBlockLayout: VkBool32 = @import("std").mem.zeroes(VkBool32),
    workgroupMemoryExplicitLayout8BitAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    workgroupMemoryExplicitLayout16BitAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR = struct_VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR;
pub const VkCopyBufferInfo2KHR = VkCopyBufferInfo2;
pub const VkCopyImageInfo2KHR = VkCopyImageInfo2;
pub const VkCopyBufferToImageInfo2KHR = VkCopyBufferToImageInfo2;
pub const VkCopyImageToBufferInfo2KHR = VkCopyImageToBufferInfo2;
pub const VkBlitImageInfo2KHR = VkBlitImageInfo2;
pub const VkResolveImageInfo2KHR = VkResolveImageInfo2;
pub const VkBufferCopy2KHR = VkBufferCopy2;
pub const VkImageCopy2KHR = VkImageCopy2;
pub const VkImageBlit2KHR = VkImageBlit2;
pub const VkBufferImageCopy2KHR = VkBufferImageCopy2;
pub const VkImageResolve2KHR = VkImageResolve2;
pub const PFN_vkCmdCopyBuffer2KHR = ?*const fn (VkCommandBuffer, [*c]const VkCopyBufferInfo2) callconv(.C) void;
pub const PFN_vkCmdCopyImage2KHR = ?*const fn (VkCommandBuffer, [*c]const VkCopyImageInfo2) callconv(.C) void;
pub const PFN_vkCmdCopyBufferToImage2KHR = ?*const fn (VkCommandBuffer, [*c]const VkCopyBufferToImageInfo2) callconv(.C) void;
pub const PFN_vkCmdCopyImageToBuffer2KHR = ?*const fn (VkCommandBuffer, [*c]const VkCopyImageToBufferInfo2) callconv(.C) void;
pub const PFN_vkCmdBlitImage2KHR = ?*const fn (VkCommandBuffer, [*c]const VkBlitImageInfo2) callconv(.C) void;
pub const PFN_vkCmdResolveImage2KHR = ?*const fn (VkCommandBuffer, [*c]const VkResolveImageInfo2) callconv(.C) void;
pub extern fn vkCmdCopyBuffer2KHR(commandBuffer: VkCommandBuffer, pCopyBufferInfo: [*c]const VkCopyBufferInfo2) void;
pub extern fn vkCmdCopyImage2KHR(commandBuffer: VkCommandBuffer, pCopyImageInfo: [*c]const VkCopyImageInfo2) void;
pub extern fn vkCmdCopyBufferToImage2KHR(commandBuffer: VkCommandBuffer, pCopyBufferToImageInfo: [*c]const VkCopyBufferToImageInfo2) void;
pub extern fn vkCmdCopyImageToBuffer2KHR(commandBuffer: VkCommandBuffer, pCopyImageToBufferInfo: [*c]const VkCopyImageToBufferInfo2) void;
pub extern fn vkCmdBlitImage2KHR(commandBuffer: VkCommandBuffer, pBlitImageInfo: [*c]const VkBlitImageInfo2) void;
pub extern fn vkCmdResolveImage2KHR(commandBuffer: VkCommandBuffer, pResolveImageInfo: [*c]const VkResolveImageInfo2) void;
pub const VkFormatFeatureFlags2KHR = VkFormatFeatureFlags2;
pub const VkFormatFeatureFlagBits2KHR = VkFormatFeatureFlagBits2;
pub const VkFormatProperties3KHR = VkFormatProperties3;
pub const struct_VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    rayTracingMaintenance1: VkBool32 = @import("std").mem.zeroes(VkBool32),
    rayTracingPipelineTraceRaysIndirect2: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR = struct_VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR;
pub const struct_VkTraceRaysIndirectCommand2KHR = extern struct {
    raygenShaderRecordAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    raygenShaderRecordSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    missShaderBindingTableAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    missShaderBindingTableSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    missShaderBindingTableStride: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    hitShaderBindingTableAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    hitShaderBindingTableSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    hitShaderBindingTableStride: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    callableShaderBindingTableAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    callableShaderBindingTableSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    callableShaderBindingTableStride: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    width: u32 = @import("std").mem.zeroes(u32),
    height: u32 = @import("std").mem.zeroes(u32),
    depth: u32 = @import("std").mem.zeroes(u32),
};
pub const VkTraceRaysIndirectCommand2KHR = struct_VkTraceRaysIndirectCommand2KHR;
pub const PFN_vkCmdTraceRaysIndirect2KHR = ?*const fn (VkCommandBuffer, VkDeviceAddress) callconv(.C) void;
pub extern fn vkCmdTraceRaysIndirect2KHR(commandBuffer: VkCommandBuffer, indirectDeviceAddress: VkDeviceAddress) void;
pub const VkPhysicalDeviceMaintenance4FeaturesKHR = VkPhysicalDeviceMaintenance4Features;
pub const VkPhysicalDeviceMaintenance4PropertiesKHR = VkPhysicalDeviceMaintenance4Properties;
pub const VkDeviceBufferMemoryRequirementsKHR = VkDeviceBufferMemoryRequirements;
pub const VkDeviceImageMemoryRequirementsKHR = VkDeviceImageMemoryRequirements;
pub const PFN_vkGetDeviceBufferMemoryRequirementsKHR = ?*const fn (VkDevice, [*c]const VkDeviceBufferMemoryRequirements, [*c]VkMemoryRequirements2) callconv(.C) void;
pub const PFN_vkGetDeviceImageMemoryRequirementsKHR = ?*const fn (VkDevice, [*c]const VkDeviceImageMemoryRequirements, [*c]VkMemoryRequirements2) callconv(.C) void;
pub const PFN_vkGetDeviceImageSparseMemoryRequirementsKHR = ?*const fn (VkDevice, [*c]const VkDeviceImageMemoryRequirements, [*c]u32, [*c]VkSparseImageMemoryRequirements2) callconv(.C) void;
pub extern fn vkGetDeviceBufferMemoryRequirementsKHR(device: VkDevice, pInfo: [*c]const VkDeviceBufferMemoryRequirements, pMemoryRequirements: [*c]VkMemoryRequirements2) void;
pub extern fn vkGetDeviceImageMemoryRequirementsKHR(device: VkDevice, pInfo: [*c]const VkDeviceImageMemoryRequirements, pMemoryRequirements: [*c]VkMemoryRequirements2) void;
pub extern fn vkGetDeviceImageSparseMemoryRequirementsKHR(device: VkDevice, pInfo: [*c]const VkDeviceImageMemoryRequirements, pSparseMemoryRequirementCount: [*c]u32, pSparseMemoryRequirements: [*c]VkSparseImageMemoryRequirements2) void;
pub const struct_VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderSubgroupRotate: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSubgroupRotateClustered: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR = struct_VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR;
pub const struct_VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderMaximalReconvergence: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR = struct_VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR;
pub const VkPipelineCreateFlags2KHR = VkFlags64;
pub const VkPipelineCreateFlagBits2KHR = VkFlags64;
pub const VK_PIPELINE_CREATE_2_DISABLE_OPTIMIZATION_BIT_KHR: VkPipelineCreateFlagBits2KHR = 1;
pub const VK_PIPELINE_CREATE_2_ALLOW_DERIVATIVES_BIT_KHR: VkPipelineCreateFlagBits2KHR = 2;
pub const VK_PIPELINE_CREATE_2_DERIVATIVE_BIT_KHR: VkPipelineCreateFlagBits2KHR = 4;
pub const VK_PIPELINE_CREATE_2_ENABLE_LEGACY_DITHERING_BIT_EXT: VkPipelineCreateFlagBits2KHR = @as(VkPipelineCreateFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 17179869184)))));
pub const VK_PIPELINE_CREATE_2_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR: VkPipelineCreateFlagBits2KHR = 8;
pub const VK_PIPELINE_CREATE_2_DISPATCH_BASE_BIT_KHR: VkPipelineCreateFlagBits2KHR = 16;
pub const VK_PIPELINE_CREATE_2_DEFER_COMPILE_BIT_NV: VkPipelineCreateFlagBits2KHR = 32;
pub const VK_PIPELINE_CREATE_2_CAPTURE_STATISTICS_BIT_KHR: VkPipelineCreateFlagBits2KHR = 64;
pub const VK_PIPELINE_CREATE_2_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR: VkPipelineCreateFlagBits2KHR = 128;
pub const VK_PIPELINE_CREATE_2_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_KHR: VkPipelineCreateFlagBits2KHR = @as(VkPipelineCreateFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 256)))));
pub const VK_PIPELINE_CREATE_2_EARLY_RETURN_ON_FAILURE_BIT_KHR: VkPipelineCreateFlagBits2KHR = @as(VkPipelineCreateFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 512)))));
pub const VK_PIPELINE_CREATE_2_LINK_TIME_OPTIMIZATION_BIT_EXT: VkPipelineCreateFlagBits2KHR = @as(VkPipelineCreateFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1024)))));
pub const VK_PIPELINE_CREATE_2_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT: VkPipelineCreateFlagBits2KHR = @as(VkPipelineCreateFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8388608)))));
pub const VK_PIPELINE_CREATE_2_LIBRARY_BIT_KHR: VkPipelineCreateFlagBits2KHR = @as(VkPipelineCreateFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2048)))));
pub const VK_PIPELINE_CREATE_2_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR: VkPipelineCreateFlagBits2KHR = @as(VkPipelineCreateFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4096)))));
pub const VK_PIPELINE_CREATE_2_RAY_TRACING_SKIP_AABBS_BIT_KHR: VkPipelineCreateFlagBits2KHR = @as(VkPipelineCreateFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8192)))));
pub const VK_PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR: VkPipelineCreateFlagBits2KHR = @as(VkPipelineCreateFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 16384)))));
pub const VK_PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR: VkPipelineCreateFlagBits2KHR = @as(VkPipelineCreateFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 32768)))));
pub const VK_PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR: VkPipelineCreateFlagBits2KHR = @as(VkPipelineCreateFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 65536)))));
pub const VK_PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR: VkPipelineCreateFlagBits2KHR = @as(VkPipelineCreateFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 131072)))));
pub const VK_PIPELINE_CREATE_2_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR: VkPipelineCreateFlagBits2KHR = @as(VkPipelineCreateFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 524288)))));
pub const VK_PIPELINE_CREATE_2_INDIRECT_BINDABLE_BIT_NV: VkPipelineCreateFlagBits2KHR = @as(VkPipelineCreateFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 262144)))));
pub const VK_PIPELINE_CREATE_2_RAY_TRACING_ALLOW_MOTION_BIT_NV: VkPipelineCreateFlagBits2KHR = @as(VkPipelineCreateFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1048576)))));
pub const VK_PIPELINE_CREATE_2_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR: VkPipelineCreateFlagBits2KHR = @as(VkPipelineCreateFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2097152)))));
pub const VK_PIPELINE_CREATE_2_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT: VkPipelineCreateFlagBits2KHR = @as(VkPipelineCreateFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4194304)))));
pub const VK_PIPELINE_CREATE_2_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT: VkPipelineCreateFlagBits2KHR = @as(VkPipelineCreateFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 16777216)))));
pub const VK_PIPELINE_CREATE_2_COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT: VkPipelineCreateFlagBits2KHR = @as(VkPipelineCreateFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 33554432)))));
pub const VK_PIPELINE_CREATE_2_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT: VkPipelineCreateFlagBits2KHR = @as(VkPipelineCreateFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 67108864)))));
pub const VK_PIPELINE_CREATE_2_NO_PROTECTED_ACCESS_BIT_EXT: VkPipelineCreateFlagBits2KHR = @as(VkPipelineCreateFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 134217728)))));
pub const VK_PIPELINE_CREATE_2_PROTECTED_ACCESS_ONLY_BIT_EXT: VkPipelineCreateFlagBits2KHR = @as(VkPipelineCreateFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1073741824)))));
pub const VK_PIPELINE_CREATE_2_RAY_TRACING_DISPLACEMENT_MICROMAP_BIT_NV: VkPipelineCreateFlagBits2KHR = @as(VkPipelineCreateFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 268435456)))));
pub const VK_PIPELINE_CREATE_2_DESCRIPTOR_BUFFER_BIT_EXT: VkPipelineCreateFlagBits2KHR = @as(VkPipelineCreateFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 536870912)))));
pub const VK_PIPELINE_CREATE_2_CAPTURE_DATA_BIT_KHR: VkPipelineCreateFlagBits2KHR = @as(VkPipelineCreateFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2147483648)))));
pub const VkBufferUsageFlags2KHR = VkFlags64;
pub const VkBufferUsageFlagBits2KHR = VkFlags64;
pub const VK_BUFFER_USAGE_2_TRANSFER_SRC_BIT_KHR: VkBufferUsageFlagBits2KHR = 1;
pub const VK_BUFFER_USAGE_2_TRANSFER_DST_BIT_KHR: VkBufferUsageFlagBits2KHR = 2;
pub const VK_BUFFER_USAGE_2_UNIFORM_TEXEL_BUFFER_BIT_KHR: VkBufferUsageFlagBits2KHR = 4;
pub const VK_BUFFER_USAGE_2_STORAGE_TEXEL_BUFFER_BIT_KHR: VkBufferUsageFlagBits2KHR = 8;
pub const VK_BUFFER_USAGE_2_UNIFORM_BUFFER_BIT_KHR: VkBufferUsageFlagBits2KHR = 16;
pub const VK_BUFFER_USAGE_2_STORAGE_BUFFER_BIT_KHR: VkBufferUsageFlagBits2KHR = 32;
pub const VK_BUFFER_USAGE_2_INDEX_BUFFER_BIT_KHR: VkBufferUsageFlagBits2KHR = 64;
pub const VK_BUFFER_USAGE_2_VERTEX_BUFFER_BIT_KHR: VkBufferUsageFlagBits2KHR = 128;
pub const VK_BUFFER_USAGE_2_INDIRECT_BUFFER_BIT_KHR: VkBufferUsageFlagBits2KHR = @as(VkBufferUsageFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 256)))));
pub const VK_BUFFER_USAGE_2_EXECUTION_GRAPH_SCRATCH_BIT_AMDX: VkBufferUsageFlagBits2KHR = @as(VkBufferUsageFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 33554432)))));
pub const VK_BUFFER_USAGE_2_CONDITIONAL_RENDERING_BIT_EXT: VkBufferUsageFlagBits2KHR = @as(VkBufferUsageFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 512)))));
pub const VK_BUFFER_USAGE_2_SHADER_BINDING_TABLE_BIT_KHR: VkBufferUsageFlagBits2KHR = @as(VkBufferUsageFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1024)))));
pub const VK_BUFFER_USAGE_2_RAY_TRACING_BIT_NV: VkBufferUsageFlagBits2KHR = @as(VkBufferUsageFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1024)))));
pub const VK_BUFFER_USAGE_2_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT: VkBufferUsageFlagBits2KHR = @as(VkBufferUsageFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2048)))));
pub const VK_BUFFER_USAGE_2_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT: VkBufferUsageFlagBits2KHR = @as(VkBufferUsageFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4096)))));
pub const VK_BUFFER_USAGE_2_VIDEO_DECODE_SRC_BIT_KHR: VkBufferUsageFlagBits2KHR = @as(VkBufferUsageFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8192)))));
pub const VK_BUFFER_USAGE_2_VIDEO_DECODE_DST_BIT_KHR: VkBufferUsageFlagBits2KHR = @as(VkBufferUsageFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 16384)))));
pub const VK_BUFFER_USAGE_2_VIDEO_ENCODE_DST_BIT_KHR: VkBufferUsageFlagBits2KHR = @as(VkBufferUsageFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 32768)))));
pub const VK_BUFFER_USAGE_2_VIDEO_ENCODE_SRC_BIT_KHR: VkBufferUsageFlagBits2KHR = @as(VkBufferUsageFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 65536)))));
pub const VK_BUFFER_USAGE_2_SHADER_DEVICE_ADDRESS_BIT_KHR: VkBufferUsageFlagBits2KHR = @as(VkBufferUsageFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 131072)))));
pub const VK_BUFFER_USAGE_2_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR: VkBufferUsageFlagBits2KHR = @as(VkBufferUsageFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 524288)))));
pub const VK_BUFFER_USAGE_2_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR: VkBufferUsageFlagBits2KHR = @as(VkBufferUsageFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 1048576)))));
pub const VK_BUFFER_USAGE_2_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT: VkBufferUsageFlagBits2KHR = @as(VkBufferUsageFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 2097152)))));
pub const VK_BUFFER_USAGE_2_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT: VkBufferUsageFlagBits2KHR = @as(VkBufferUsageFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 4194304)))));
pub const VK_BUFFER_USAGE_2_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT: VkBufferUsageFlagBits2KHR = @as(VkBufferUsageFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 67108864)))));
pub const VK_BUFFER_USAGE_2_MICROMAP_BUILD_INPUT_READ_ONLY_BIT_EXT: VkBufferUsageFlagBits2KHR = @as(VkBufferUsageFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 8388608)))));
pub const VK_BUFFER_USAGE_2_MICROMAP_STORAGE_BIT_EXT: VkBufferUsageFlagBits2KHR = @as(VkBufferUsageFlagBits2KHR, @bitCast(@as(c_ulong, @truncate(@as(c_ulonglong, 16777216)))));
pub const struct_VkPhysicalDeviceMaintenance5FeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maintenance5: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceMaintenance5FeaturesKHR = struct_VkPhysicalDeviceMaintenance5FeaturesKHR;
pub const struct_VkPhysicalDeviceMaintenance5PropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    earlyFragmentMultisampleCoverageAfterSampleCounting: VkBool32 = @import("std").mem.zeroes(VkBool32),
    earlyFragmentSampleMaskTestBeforeSampleCounting: VkBool32 = @import("std").mem.zeroes(VkBool32),
    depthStencilSwizzleOneSupport: VkBool32 = @import("std").mem.zeroes(VkBool32),
    polygonModePointSize: VkBool32 = @import("std").mem.zeroes(VkBool32),
    nonStrictSinglePixelWideLinesUseParallelogram: VkBool32 = @import("std").mem.zeroes(VkBool32),
    nonStrictWideLinesUseParallelogram: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceMaintenance5PropertiesKHR = struct_VkPhysicalDeviceMaintenance5PropertiesKHR;
pub const struct_VkRenderingAreaInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    viewMask: u32 = @import("std").mem.zeroes(u32),
    colorAttachmentCount: u32 = @import("std").mem.zeroes(u32),
    pColorAttachmentFormats: [*c]const VkFormat = @import("std").mem.zeroes([*c]const VkFormat),
    depthAttachmentFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
    stencilAttachmentFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
};
pub const VkRenderingAreaInfoKHR = struct_VkRenderingAreaInfoKHR;
pub const struct_VkImageSubresource2KHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    imageSubresource: VkImageSubresource = @import("std").mem.zeroes(VkImageSubresource),
};
pub const VkImageSubresource2KHR = struct_VkImageSubresource2KHR;
pub const struct_VkDeviceImageSubresourceInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pCreateInfo: [*c]const VkImageCreateInfo = @import("std").mem.zeroes([*c]const VkImageCreateInfo),
    pSubresource: [*c]const VkImageSubresource2KHR = @import("std").mem.zeroes([*c]const VkImageSubresource2KHR),
};
pub const VkDeviceImageSubresourceInfoKHR = struct_VkDeviceImageSubresourceInfoKHR;
pub const struct_VkSubresourceLayout2KHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    subresourceLayout: VkSubresourceLayout = @import("std").mem.zeroes(VkSubresourceLayout),
};
pub const VkSubresourceLayout2KHR = struct_VkSubresourceLayout2KHR;
pub const struct_VkPipelineCreateFlags2CreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineCreateFlags2KHR = @import("std").mem.zeroes(VkPipelineCreateFlags2KHR),
};
pub const VkPipelineCreateFlags2CreateInfoKHR = struct_VkPipelineCreateFlags2CreateInfoKHR;
pub const struct_VkBufferUsageFlags2CreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    usage: VkBufferUsageFlags2KHR = @import("std").mem.zeroes(VkBufferUsageFlags2KHR),
};
pub const VkBufferUsageFlags2CreateInfoKHR = struct_VkBufferUsageFlags2CreateInfoKHR;
pub const PFN_vkCmdBindIndexBuffer2KHR = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, VkDeviceSize, VkIndexType) callconv(.C) void;
pub const PFN_vkGetRenderingAreaGranularityKHR = ?*const fn (VkDevice, [*c]const VkRenderingAreaInfoKHR, [*c]VkExtent2D) callconv(.C) void;
pub const PFN_vkGetDeviceImageSubresourceLayoutKHR = ?*const fn (VkDevice, [*c]const VkDeviceImageSubresourceInfoKHR, [*c]VkSubresourceLayout2KHR) callconv(.C) void;
pub const PFN_vkGetImageSubresourceLayout2KHR = ?*const fn (VkDevice, VkImage, [*c]const VkImageSubresource2KHR, [*c]VkSubresourceLayout2KHR) callconv(.C) void;
pub extern fn vkCmdBindIndexBuffer2KHR(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, size: VkDeviceSize, indexType: VkIndexType) void;
pub extern fn vkGetRenderingAreaGranularityKHR(device: VkDevice, pRenderingAreaInfo: [*c]const VkRenderingAreaInfoKHR, pGranularity: [*c]VkExtent2D) void;
pub extern fn vkGetDeviceImageSubresourceLayoutKHR(device: VkDevice, pInfo: [*c]const VkDeviceImageSubresourceInfoKHR, pLayout: [*c]VkSubresourceLayout2KHR) void;
pub extern fn vkGetImageSubresourceLayout2KHR(device: VkDevice, image: VkImage, pSubresource: [*c]const VkImageSubresource2KHR, pLayout: [*c]VkSubresourceLayout2KHR) void;
pub const struct_VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    rayTracingPositionFetch: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR = struct_VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR;
pub const struct_VkPipelineBinaryKHR_T = opaque {};
pub const VkPipelineBinaryKHR = ?*struct_VkPipelineBinaryKHR_T;
pub const struct_VkPhysicalDevicePipelineBinaryFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pipelineBinaries: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevicePipelineBinaryFeaturesKHR = struct_VkPhysicalDevicePipelineBinaryFeaturesKHR;
pub const struct_VkPhysicalDevicePipelineBinaryPropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pipelineBinaryInternalCache: VkBool32 = @import("std").mem.zeroes(VkBool32),
    pipelineBinaryInternalCacheControl: VkBool32 = @import("std").mem.zeroes(VkBool32),
    pipelineBinaryPrefersInternalCache: VkBool32 = @import("std").mem.zeroes(VkBool32),
    pipelineBinaryPrecompiledInternalCache: VkBool32 = @import("std").mem.zeroes(VkBool32),
    pipelineBinaryCompressedData: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevicePipelineBinaryPropertiesKHR = struct_VkPhysicalDevicePipelineBinaryPropertiesKHR;
pub const struct_VkDevicePipelineBinaryInternalCacheControlKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    disableInternalCache: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkDevicePipelineBinaryInternalCacheControlKHR = struct_VkDevicePipelineBinaryInternalCacheControlKHR;
pub const struct_VkPipelineBinaryKeyKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    keySize: u32 = @import("std").mem.zeroes(u32),
    key: [32]u8 = @import("std").mem.zeroes([32]u8),
};
pub const VkPipelineBinaryKeyKHR = struct_VkPipelineBinaryKeyKHR;
pub const struct_VkPipelineBinaryDataKHR = extern struct {
    dataSize: usize = @import("std").mem.zeroes(usize),
    pData: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const VkPipelineBinaryDataKHR = struct_VkPipelineBinaryDataKHR;
pub const struct_VkPipelineBinaryKeysAndDataKHR = extern struct {
    binaryCount: u32 = @import("std").mem.zeroes(u32),
    pPipelineBinaryKeys: [*c]const VkPipelineBinaryKeyKHR = @import("std").mem.zeroes([*c]const VkPipelineBinaryKeyKHR),
    pPipelineBinaryData: [*c]const VkPipelineBinaryDataKHR = @import("std").mem.zeroes([*c]const VkPipelineBinaryDataKHR),
};
pub const VkPipelineBinaryKeysAndDataKHR = struct_VkPipelineBinaryKeysAndDataKHR;
pub const struct_VkPipelineCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const VkPipelineCreateInfoKHR = struct_VkPipelineCreateInfoKHR;
pub const struct_VkPipelineBinaryCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pKeysAndDataInfo: [*c]const VkPipelineBinaryKeysAndDataKHR = @import("std").mem.zeroes([*c]const VkPipelineBinaryKeysAndDataKHR),
    pipeline: VkPipeline = @import("std").mem.zeroes(VkPipeline),
    pPipelineCreateInfo: [*c]const VkPipelineCreateInfoKHR = @import("std").mem.zeroes([*c]const VkPipelineCreateInfoKHR),
};
pub const VkPipelineBinaryCreateInfoKHR = struct_VkPipelineBinaryCreateInfoKHR;
pub const struct_VkPipelineBinaryInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    binaryCount: u32 = @import("std").mem.zeroes(u32),
    pPipelineBinaries: [*c]const VkPipelineBinaryKHR = @import("std").mem.zeroes([*c]const VkPipelineBinaryKHR),
};
pub const VkPipelineBinaryInfoKHR = struct_VkPipelineBinaryInfoKHR;
pub const struct_VkReleaseCapturedPipelineDataInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pipeline: VkPipeline = @import("std").mem.zeroes(VkPipeline),
};
pub const VkReleaseCapturedPipelineDataInfoKHR = struct_VkReleaseCapturedPipelineDataInfoKHR;
pub const struct_VkPipelineBinaryDataInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pipelineBinary: VkPipelineBinaryKHR = @import("std").mem.zeroes(VkPipelineBinaryKHR),
};
pub const VkPipelineBinaryDataInfoKHR = struct_VkPipelineBinaryDataInfoKHR;
pub const struct_VkPipelineBinaryHandlesInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pipelineBinaryCount: u32 = @import("std").mem.zeroes(u32),
    pPipelineBinaries: [*c]VkPipelineBinaryKHR = @import("std").mem.zeroes([*c]VkPipelineBinaryKHR),
};
pub const VkPipelineBinaryHandlesInfoKHR = struct_VkPipelineBinaryHandlesInfoKHR;
pub const PFN_vkCreatePipelineBinariesKHR = ?*const fn (VkDevice, [*c]const VkPipelineBinaryCreateInfoKHR, [*c]const VkAllocationCallbacks, [*c]VkPipelineBinaryHandlesInfoKHR) callconv(.C) VkResult;
pub const PFN_vkDestroyPipelineBinaryKHR = ?*const fn (VkDevice, VkPipelineBinaryKHR, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkGetPipelineKeyKHR = ?*const fn (VkDevice, [*c]const VkPipelineCreateInfoKHR, [*c]VkPipelineBinaryKeyKHR) callconv(.C) VkResult;
pub const PFN_vkGetPipelineBinaryDataKHR = ?*const fn (VkDevice, [*c]const VkPipelineBinaryDataInfoKHR, [*c]VkPipelineBinaryKeyKHR, [*c]usize, ?*anyopaque) callconv(.C) VkResult;
pub const PFN_vkReleaseCapturedPipelineDataKHR = ?*const fn (VkDevice, [*c]const VkReleaseCapturedPipelineDataInfoKHR, [*c]const VkAllocationCallbacks) callconv(.C) VkResult;
pub extern fn vkCreatePipelineBinariesKHR(device: VkDevice, pCreateInfo: [*c]const VkPipelineBinaryCreateInfoKHR, pAllocator: [*c]const VkAllocationCallbacks, pBinaries: [*c]VkPipelineBinaryHandlesInfoKHR) VkResult;
pub extern fn vkDestroyPipelineBinaryKHR(device: VkDevice, pipelineBinary: VkPipelineBinaryKHR, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkGetPipelineKeyKHR(device: VkDevice, pPipelineCreateInfo: [*c]const VkPipelineCreateInfoKHR, pPipelineKey: [*c]VkPipelineBinaryKeyKHR) VkResult;
pub extern fn vkGetPipelineBinaryDataKHR(device: VkDevice, pInfo: [*c]const VkPipelineBinaryDataInfoKHR, pPipelineBinaryKey: [*c]VkPipelineBinaryKeyKHR, pPipelineBinaryDataSize: [*c]usize, pPipelineBinaryData: ?*anyopaque) VkResult;
pub extern fn vkReleaseCapturedPipelineDataKHR(device: VkDevice, pInfo: [*c]const VkReleaseCapturedPipelineDataInfoKHR, pAllocator: [*c]const VkAllocationCallbacks) VkResult;
pub const VK_COMPONENT_TYPE_FLOAT16_KHR: c_int = 0;
pub const VK_COMPONENT_TYPE_FLOAT32_KHR: c_int = 1;
pub const VK_COMPONENT_TYPE_FLOAT64_KHR: c_int = 2;
pub const VK_COMPONENT_TYPE_SINT8_KHR: c_int = 3;
pub const VK_COMPONENT_TYPE_SINT16_KHR: c_int = 4;
pub const VK_COMPONENT_TYPE_SINT32_KHR: c_int = 5;
pub const VK_COMPONENT_TYPE_SINT64_KHR: c_int = 6;
pub const VK_COMPONENT_TYPE_UINT8_KHR: c_int = 7;
pub const VK_COMPONENT_TYPE_UINT16_KHR: c_int = 8;
pub const VK_COMPONENT_TYPE_UINT32_KHR: c_int = 9;
pub const VK_COMPONENT_TYPE_UINT64_KHR: c_int = 10;
pub const VK_COMPONENT_TYPE_FLOAT16_NV: c_int = 0;
pub const VK_COMPONENT_TYPE_FLOAT32_NV: c_int = 1;
pub const VK_COMPONENT_TYPE_FLOAT64_NV: c_int = 2;
pub const VK_COMPONENT_TYPE_SINT8_NV: c_int = 3;
pub const VK_COMPONENT_TYPE_SINT16_NV: c_int = 4;
pub const VK_COMPONENT_TYPE_SINT32_NV: c_int = 5;
pub const VK_COMPONENT_TYPE_SINT64_NV: c_int = 6;
pub const VK_COMPONENT_TYPE_UINT8_NV: c_int = 7;
pub const VK_COMPONENT_TYPE_UINT16_NV: c_int = 8;
pub const VK_COMPONENT_TYPE_UINT32_NV: c_int = 9;
pub const VK_COMPONENT_TYPE_UINT64_NV: c_int = 10;
pub const VK_COMPONENT_TYPE_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkComponentTypeKHR = c_uint;
pub const VkComponentTypeKHR = enum_VkComponentTypeKHR;
pub const VK_SCOPE_DEVICE_KHR: c_int = 1;
pub const VK_SCOPE_WORKGROUP_KHR: c_int = 2;
pub const VK_SCOPE_SUBGROUP_KHR: c_int = 3;
pub const VK_SCOPE_QUEUE_FAMILY_KHR: c_int = 5;
pub const VK_SCOPE_DEVICE_NV: c_int = 1;
pub const VK_SCOPE_WORKGROUP_NV: c_int = 2;
pub const VK_SCOPE_SUBGROUP_NV: c_int = 3;
pub const VK_SCOPE_QUEUE_FAMILY_NV: c_int = 5;
pub const VK_SCOPE_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkScopeKHR = c_uint;
pub const VkScopeKHR = enum_VkScopeKHR;
pub const struct_VkCooperativeMatrixPropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    MSize: u32 = @import("std").mem.zeroes(u32),
    NSize: u32 = @import("std").mem.zeroes(u32),
    KSize: u32 = @import("std").mem.zeroes(u32),
    AType: VkComponentTypeKHR = @import("std").mem.zeroes(VkComponentTypeKHR),
    BType: VkComponentTypeKHR = @import("std").mem.zeroes(VkComponentTypeKHR),
    CType: VkComponentTypeKHR = @import("std").mem.zeroes(VkComponentTypeKHR),
    ResultType: VkComponentTypeKHR = @import("std").mem.zeroes(VkComponentTypeKHR),
    saturatingAccumulation: VkBool32 = @import("std").mem.zeroes(VkBool32),
    scope: VkScopeKHR = @import("std").mem.zeroes(VkScopeKHR),
};
pub const VkCooperativeMatrixPropertiesKHR = struct_VkCooperativeMatrixPropertiesKHR;
pub const struct_VkPhysicalDeviceCooperativeMatrixFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    cooperativeMatrix: VkBool32 = @import("std").mem.zeroes(VkBool32),
    cooperativeMatrixRobustBufferAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceCooperativeMatrixFeaturesKHR = struct_VkPhysicalDeviceCooperativeMatrixFeaturesKHR;
pub const struct_VkPhysicalDeviceCooperativeMatrixPropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    cooperativeMatrixSupportedStages: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
};
pub const VkPhysicalDeviceCooperativeMatrixPropertiesKHR = struct_VkPhysicalDeviceCooperativeMatrixPropertiesKHR;
pub const PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkCooperativeMatrixPropertiesKHR) callconv(.C) VkResult;
pub extern fn vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR(physicalDevice: VkPhysicalDevice, pPropertyCount: [*c]u32, pProperties: [*c]VkCooperativeMatrixPropertiesKHR) VkResult;
pub const struct_VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    computeDerivativeGroupQuads: VkBool32 = @import("std").mem.zeroes(VkBool32),
    computeDerivativeGroupLinear: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR = struct_VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR;
pub const struct_VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    meshAndTaskShaderDerivatives: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR = struct_VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR;
pub const STD_VIDEO_AV1_PROFILE_MAIN: c_int = 0;
pub const STD_VIDEO_AV1_PROFILE_HIGH: c_int = 1;
pub const STD_VIDEO_AV1_PROFILE_PROFESSIONAL: c_int = 2;
pub const STD_VIDEO_AV1_PROFILE_INVALID: c_int = 2147483647;
pub const STD_VIDEO_AV1_PROFILE_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoAV1Profile = c_uint;
pub const StdVideoAV1Profile = enum_StdVideoAV1Profile;
pub const STD_VIDEO_AV1_LEVEL_2_0: c_int = 0;
pub const STD_VIDEO_AV1_LEVEL_2_1: c_int = 1;
pub const STD_VIDEO_AV1_LEVEL_2_2: c_int = 2;
pub const STD_VIDEO_AV1_LEVEL_2_3: c_int = 3;
pub const STD_VIDEO_AV1_LEVEL_3_0: c_int = 4;
pub const STD_VIDEO_AV1_LEVEL_3_1: c_int = 5;
pub const STD_VIDEO_AV1_LEVEL_3_2: c_int = 6;
pub const STD_VIDEO_AV1_LEVEL_3_3: c_int = 7;
pub const STD_VIDEO_AV1_LEVEL_4_0: c_int = 8;
pub const STD_VIDEO_AV1_LEVEL_4_1: c_int = 9;
pub const STD_VIDEO_AV1_LEVEL_4_2: c_int = 10;
pub const STD_VIDEO_AV1_LEVEL_4_3: c_int = 11;
pub const STD_VIDEO_AV1_LEVEL_5_0: c_int = 12;
pub const STD_VIDEO_AV1_LEVEL_5_1: c_int = 13;
pub const STD_VIDEO_AV1_LEVEL_5_2: c_int = 14;
pub const STD_VIDEO_AV1_LEVEL_5_3: c_int = 15;
pub const STD_VIDEO_AV1_LEVEL_6_0: c_int = 16;
pub const STD_VIDEO_AV1_LEVEL_6_1: c_int = 17;
pub const STD_VIDEO_AV1_LEVEL_6_2: c_int = 18;
pub const STD_VIDEO_AV1_LEVEL_6_3: c_int = 19;
pub const STD_VIDEO_AV1_LEVEL_7_0: c_int = 20;
pub const STD_VIDEO_AV1_LEVEL_7_1: c_int = 21;
pub const STD_VIDEO_AV1_LEVEL_7_2: c_int = 22;
pub const STD_VIDEO_AV1_LEVEL_7_3: c_int = 23;
pub const STD_VIDEO_AV1_LEVEL_INVALID: c_int = 2147483647;
pub const STD_VIDEO_AV1_LEVEL_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoAV1Level = c_uint;
pub const StdVideoAV1Level = enum_StdVideoAV1Level;
pub const STD_VIDEO_AV1_FRAME_TYPE_KEY: c_int = 0;
pub const STD_VIDEO_AV1_FRAME_TYPE_INTER: c_int = 1;
pub const STD_VIDEO_AV1_FRAME_TYPE_INTRA_ONLY: c_int = 2;
pub const STD_VIDEO_AV1_FRAME_TYPE_SWITCH: c_int = 3;
pub const STD_VIDEO_AV1_FRAME_TYPE_INVALID: c_int = 2147483647;
pub const STD_VIDEO_AV1_FRAME_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoAV1FrameType = c_uint;
pub const StdVideoAV1FrameType = enum_StdVideoAV1FrameType;
pub const STD_VIDEO_AV1_REFERENCE_NAME_INTRA_FRAME: c_int = 0;
pub const STD_VIDEO_AV1_REFERENCE_NAME_LAST_FRAME: c_int = 1;
pub const STD_VIDEO_AV1_REFERENCE_NAME_LAST2_FRAME: c_int = 2;
pub const STD_VIDEO_AV1_REFERENCE_NAME_LAST3_FRAME: c_int = 3;
pub const STD_VIDEO_AV1_REFERENCE_NAME_GOLDEN_FRAME: c_int = 4;
pub const STD_VIDEO_AV1_REFERENCE_NAME_BWDREF_FRAME: c_int = 5;
pub const STD_VIDEO_AV1_REFERENCE_NAME_ALTREF2_FRAME: c_int = 6;
pub const STD_VIDEO_AV1_REFERENCE_NAME_ALTREF_FRAME: c_int = 7;
pub const STD_VIDEO_AV1_REFERENCE_NAME_INVALID: c_int = 2147483647;
pub const STD_VIDEO_AV1_REFERENCE_NAME_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoAV1ReferenceName = c_uint;
pub const StdVideoAV1ReferenceName = enum_StdVideoAV1ReferenceName;
pub const STD_VIDEO_AV1_INTERPOLATION_FILTER_EIGHTTAP: c_int = 0;
pub const STD_VIDEO_AV1_INTERPOLATION_FILTER_EIGHTTAP_SMOOTH: c_int = 1;
pub const STD_VIDEO_AV1_INTERPOLATION_FILTER_EIGHTTAP_SHARP: c_int = 2;
pub const STD_VIDEO_AV1_INTERPOLATION_FILTER_BILINEAR: c_int = 3;
pub const STD_VIDEO_AV1_INTERPOLATION_FILTER_SWITCHABLE: c_int = 4;
pub const STD_VIDEO_AV1_INTERPOLATION_FILTER_INVALID: c_int = 2147483647;
pub const STD_VIDEO_AV1_INTERPOLATION_FILTER_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoAV1InterpolationFilter = c_uint;
pub const StdVideoAV1InterpolationFilter = enum_StdVideoAV1InterpolationFilter;
pub const STD_VIDEO_AV1_TX_MODE_ONLY_4X4: c_int = 0;
pub const STD_VIDEO_AV1_TX_MODE_LARGEST: c_int = 1;
pub const STD_VIDEO_AV1_TX_MODE_SELECT: c_int = 2;
pub const STD_VIDEO_AV1_TX_MODE_INVALID: c_int = 2147483647;
pub const STD_VIDEO_AV1_TX_MODE_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoAV1TxMode = c_uint;
pub const StdVideoAV1TxMode = enum_StdVideoAV1TxMode;
pub const STD_VIDEO_AV1_FRAME_RESTORATION_TYPE_NONE: c_int = 0;
pub const STD_VIDEO_AV1_FRAME_RESTORATION_TYPE_WIENER: c_int = 1;
pub const STD_VIDEO_AV1_FRAME_RESTORATION_TYPE_SGRPROJ: c_int = 2;
pub const STD_VIDEO_AV1_FRAME_RESTORATION_TYPE_SWITCHABLE: c_int = 3;
pub const STD_VIDEO_AV1_FRAME_RESTORATION_TYPE_INVALID: c_int = 2147483647;
pub const STD_VIDEO_AV1_FRAME_RESTORATION_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoAV1FrameRestorationType = c_uint;
pub const StdVideoAV1FrameRestorationType = enum_StdVideoAV1FrameRestorationType;
pub const STD_VIDEO_AV1_COLOR_PRIMARIES_BT_709: c_int = 1;
pub const STD_VIDEO_AV1_COLOR_PRIMARIES_BT_UNSPECIFIED: c_int = 2;
pub const STD_VIDEO_AV1_COLOR_PRIMARIES_BT_470_M: c_int = 4;
pub const STD_VIDEO_AV1_COLOR_PRIMARIES_BT_470_B_G: c_int = 5;
pub const STD_VIDEO_AV1_COLOR_PRIMARIES_BT_601: c_int = 6;
pub const STD_VIDEO_AV1_COLOR_PRIMARIES_SMPTE_240: c_int = 7;
pub const STD_VIDEO_AV1_COLOR_PRIMARIES_GENERIC_FILM: c_int = 8;
pub const STD_VIDEO_AV1_COLOR_PRIMARIES_BT_2020: c_int = 9;
pub const STD_VIDEO_AV1_COLOR_PRIMARIES_XYZ: c_int = 10;
pub const STD_VIDEO_AV1_COLOR_PRIMARIES_SMPTE_431: c_int = 11;
pub const STD_VIDEO_AV1_COLOR_PRIMARIES_SMPTE_432: c_int = 12;
pub const STD_VIDEO_AV1_COLOR_PRIMARIES_EBU_3213: c_int = 22;
pub const STD_VIDEO_AV1_COLOR_PRIMARIES_INVALID: c_int = 2147483647;
pub const STD_VIDEO_AV1_COLOR_PRIMARIES_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoAV1ColorPrimaries = c_uint;
pub const StdVideoAV1ColorPrimaries = enum_StdVideoAV1ColorPrimaries;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_RESERVED_0: c_int = 0;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_709: c_int = 1;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_UNSPECIFIED: c_int = 2;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_RESERVED_3: c_int = 3;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_470_M: c_int = 4;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_470_B_G: c_int = 5;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_601: c_int = 6;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_SMPTE_240: c_int = 7;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_LINEAR: c_int = 8;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_LOG_100: c_int = 9;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_LOG_100_SQRT10: c_int = 10;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_IEC_61966: c_int = 11;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_1361: c_int = 12;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_SRGB: c_int = 13;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_2020_10_BIT: c_int = 14;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_2020_12_BIT: c_int = 15;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_SMPTE_2084: c_int = 16;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_SMPTE_428: c_int = 17;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_HLG: c_int = 18;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_INVALID: c_int = 2147483647;
pub const STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoAV1TransferCharacteristics = c_uint;
pub const StdVideoAV1TransferCharacteristics = enum_StdVideoAV1TransferCharacteristics;
pub const STD_VIDEO_AV1_MATRIX_COEFFICIENTS_IDENTITY: c_int = 0;
pub const STD_VIDEO_AV1_MATRIX_COEFFICIENTS_BT_709: c_int = 1;
pub const STD_VIDEO_AV1_MATRIX_COEFFICIENTS_UNSPECIFIED: c_int = 2;
pub const STD_VIDEO_AV1_MATRIX_COEFFICIENTS_RESERVED_3: c_int = 3;
pub const STD_VIDEO_AV1_MATRIX_COEFFICIENTS_FCC: c_int = 4;
pub const STD_VIDEO_AV1_MATRIX_COEFFICIENTS_BT_470_B_G: c_int = 5;
pub const STD_VIDEO_AV1_MATRIX_COEFFICIENTS_BT_601: c_int = 6;
pub const STD_VIDEO_AV1_MATRIX_COEFFICIENTS_SMPTE_240: c_int = 7;
pub const STD_VIDEO_AV1_MATRIX_COEFFICIENTS_SMPTE_YCGCO: c_int = 8;
pub const STD_VIDEO_AV1_MATRIX_COEFFICIENTS_BT_2020_NCL: c_int = 9;
pub const STD_VIDEO_AV1_MATRIX_COEFFICIENTS_BT_2020_CL: c_int = 10;
pub const STD_VIDEO_AV1_MATRIX_COEFFICIENTS_SMPTE_2085: c_int = 11;
pub const STD_VIDEO_AV1_MATRIX_COEFFICIENTS_CHROMAT_NCL: c_int = 12;
pub const STD_VIDEO_AV1_MATRIX_COEFFICIENTS_CHROMAT_CL: c_int = 13;
pub const STD_VIDEO_AV1_MATRIX_COEFFICIENTS_ICTCP: c_int = 14;
pub const STD_VIDEO_AV1_MATRIX_COEFFICIENTS_INVALID: c_int = 2147483647;
pub const STD_VIDEO_AV1_MATRIX_COEFFICIENTS_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoAV1MatrixCoefficients = c_uint;
pub const StdVideoAV1MatrixCoefficients = enum_StdVideoAV1MatrixCoefficients;
pub const STD_VIDEO_AV1_CHROMA_SAMPLE_POSITION_UNKNOWN: c_int = 0;
pub const STD_VIDEO_AV1_CHROMA_SAMPLE_POSITION_VERTICAL: c_int = 1;
pub const STD_VIDEO_AV1_CHROMA_SAMPLE_POSITION_COLOCATED: c_int = 2;
pub const STD_VIDEO_AV1_CHROMA_SAMPLE_POSITION_RESERVED: c_int = 3;
pub const STD_VIDEO_AV1_CHROMA_SAMPLE_POSITION_INVALID: c_int = 2147483647;
pub const STD_VIDEO_AV1_CHROMA_SAMPLE_POSITION_MAX_ENUM: c_int = 2147483647;
pub const enum_StdVideoAV1ChromaSamplePosition = c_uint;
pub const StdVideoAV1ChromaSamplePosition = enum_StdVideoAV1ChromaSamplePosition;
// /usr/include/vk_video/vulkan_video_codec_av1std.h:203:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoAV1ColorConfigFlags = opaque {};
pub const StdVideoAV1ColorConfigFlags = struct_StdVideoAV1ColorConfigFlags;
pub const struct_StdVideoAV1ColorConfig = extern struct {
    flags: StdVideoAV1ColorConfigFlags = @import("std").mem.zeroes(StdVideoAV1ColorConfigFlags),
    BitDepth: u8 = @import("std").mem.zeroes(u8),
    subsampling_x: u8 = @import("std").mem.zeroes(u8),
    subsampling_y: u8 = @import("std").mem.zeroes(u8),
    reserved1: u8 = @import("std").mem.zeroes(u8),
    color_primaries: StdVideoAV1ColorPrimaries = @import("std").mem.zeroes(StdVideoAV1ColorPrimaries),
    transfer_characteristics: StdVideoAV1TransferCharacteristics = @import("std").mem.zeroes(StdVideoAV1TransferCharacteristics),
    matrix_coefficients: StdVideoAV1MatrixCoefficients = @import("std").mem.zeroes(StdVideoAV1MatrixCoefficients),
    chroma_sample_position: StdVideoAV1ChromaSamplePosition = @import("std").mem.zeroes(StdVideoAV1ChromaSamplePosition),
};
pub const StdVideoAV1ColorConfig = struct_StdVideoAV1ColorConfig;
// /usr/include/vk_video/vulkan_video_codec_av1std.h:223:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoAV1TimingInfoFlags = opaque {};
pub const StdVideoAV1TimingInfoFlags = struct_StdVideoAV1TimingInfoFlags;
pub const struct_StdVideoAV1TimingInfo = extern struct {
    flags: StdVideoAV1TimingInfoFlags = @import("std").mem.zeroes(StdVideoAV1TimingInfoFlags),
    num_units_in_display_tick: u32 = @import("std").mem.zeroes(u32),
    time_scale: u32 = @import("std").mem.zeroes(u32),
    num_ticks_per_picture_minus_1: u32 = @import("std").mem.zeroes(u32),
};
pub const StdVideoAV1TimingInfo = struct_StdVideoAV1TimingInfo;
// /usr/include/vk_video/vulkan_video_codec_av1std.h:235:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoAV1LoopFilterFlags = opaque {};
pub const StdVideoAV1LoopFilterFlags = struct_StdVideoAV1LoopFilterFlags;
pub const struct_StdVideoAV1LoopFilter = extern struct {
    flags: StdVideoAV1LoopFilterFlags = @import("std").mem.zeroes(StdVideoAV1LoopFilterFlags),
    loop_filter_level: [4]u8 = @import("std").mem.zeroes([4]u8),
    loop_filter_sharpness: u8 = @import("std").mem.zeroes(u8),
    update_ref_delta: u8 = @import("std").mem.zeroes(u8),
    loop_filter_ref_deltas: [8]i8 = @import("std").mem.zeroes([8]i8),
    update_mode_delta: u8 = @import("std").mem.zeroes(u8),
    loop_filter_mode_deltas: [2]i8 = @import("std").mem.zeroes([2]i8),
};
pub const StdVideoAV1LoopFilter = struct_StdVideoAV1LoopFilter;
// /usr/include/vk_video/vulkan_video_codec_av1std.h:251:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoAV1QuantizationFlags = opaque {};
pub const StdVideoAV1QuantizationFlags = struct_StdVideoAV1QuantizationFlags;
pub const struct_StdVideoAV1Quantization = extern struct {
    flags: StdVideoAV1QuantizationFlags = @import("std").mem.zeroes(StdVideoAV1QuantizationFlags),
    base_q_idx: u8 = @import("std").mem.zeroes(u8),
    DeltaQYDc: i8 = @import("std").mem.zeroes(i8),
    DeltaQUDc: i8 = @import("std").mem.zeroes(i8),
    DeltaQUAc: i8 = @import("std").mem.zeroes(i8),
    DeltaQVDc: i8 = @import("std").mem.zeroes(i8),
    DeltaQVAc: i8 = @import("std").mem.zeroes(i8),
    qm_y: u8 = @import("std").mem.zeroes(u8),
    qm_u: u8 = @import("std").mem.zeroes(u8),
    qm_v: u8 = @import("std").mem.zeroes(u8),
};
pub const StdVideoAV1Quantization = struct_StdVideoAV1Quantization;
pub const struct_StdVideoAV1Segmentation = extern struct {
    FeatureEnabled: [8]u8 = @import("std").mem.zeroes([8]u8),
    FeatureData: [8][8]i16 = @import("std").mem.zeroes([8][8]i16),
};
pub const StdVideoAV1Segmentation = struct_StdVideoAV1Segmentation;
// /usr/include/vk_video/vulkan_video_codec_av1std.h:275:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoAV1TileInfoFlags = opaque {};
pub const StdVideoAV1TileInfoFlags = struct_StdVideoAV1TileInfoFlags;
pub const struct_StdVideoAV1TileInfo = extern struct {
    flags: StdVideoAV1TileInfoFlags = @import("std").mem.zeroes(StdVideoAV1TileInfoFlags),
    TileCols: u8 = @import("std").mem.zeroes(u8),
    TileRows: u8 = @import("std").mem.zeroes(u8),
    context_update_tile_id: u16 = @import("std").mem.zeroes(u16),
    tile_size_bytes_minus_1: u8 = @import("std").mem.zeroes(u8),
    reserved1: [7]u8 = @import("std").mem.zeroes([7]u8),
    pMiColStarts: [*c]const u16 = @import("std").mem.zeroes([*c]const u16),
    pMiRowStarts: [*c]const u16 = @import("std").mem.zeroes([*c]const u16),
    pWidthInSbsMinus1: [*c]const u16 = @import("std").mem.zeroes([*c]const u16),
    pHeightInSbsMinus1: [*c]const u16 = @import("std").mem.zeroes([*c]const u16),
};
pub const StdVideoAV1TileInfo = struct_StdVideoAV1TileInfo;
pub const struct_StdVideoAV1CDEF = extern struct {
    cdef_damping_minus_3: u8 = @import("std").mem.zeroes(u8),
    cdef_bits: u8 = @import("std").mem.zeroes(u8),
    cdef_y_pri_strength: [8]u8 = @import("std").mem.zeroes([8]u8),
    cdef_y_sec_strength: [8]u8 = @import("std").mem.zeroes([8]u8),
    cdef_uv_pri_strength: [8]u8 = @import("std").mem.zeroes([8]u8),
    cdef_uv_sec_strength: [8]u8 = @import("std").mem.zeroes([8]u8),
};
pub const StdVideoAV1CDEF = struct_StdVideoAV1CDEF;
pub const struct_StdVideoAV1LoopRestoration = extern struct {
    FrameRestorationType: [3]StdVideoAV1FrameRestorationType = @import("std").mem.zeroes([3]StdVideoAV1FrameRestorationType),
    LoopRestorationSize: [3]u16 = @import("std").mem.zeroes([3]u16),
};
pub const StdVideoAV1LoopRestoration = struct_StdVideoAV1LoopRestoration;
pub const struct_StdVideoAV1GlobalMotion = extern struct {
    GmType: [8]u8 = @import("std").mem.zeroes([8]u8),
    gm_params: [8][6]i32 = @import("std").mem.zeroes([8][6]i32),
};
pub const StdVideoAV1GlobalMotion = struct_StdVideoAV1GlobalMotion;
// /usr/include/vk_video/vulkan_video_codec_av1std.h:312:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoAV1FilmGrainFlags = opaque {};
pub const StdVideoAV1FilmGrainFlags = struct_StdVideoAV1FilmGrainFlags;
pub const struct_StdVideoAV1FilmGrain = extern struct {
    flags: StdVideoAV1FilmGrainFlags = @import("std").mem.zeroes(StdVideoAV1FilmGrainFlags),
    grain_scaling_minus_8: u8 = @import("std").mem.zeroes(u8),
    ar_coeff_lag: u8 = @import("std").mem.zeroes(u8),
    ar_coeff_shift_minus_6: u8 = @import("std").mem.zeroes(u8),
    grain_scale_shift: u8 = @import("std").mem.zeroes(u8),
    grain_seed: u16 = @import("std").mem.zeroes(u16),
    film_grain_params_ref_idx: u8 = @import("std").mem.zeroes(u8),
    num_y_points: u8 = @import("std").mem.zeroes(u8),
    point_y_value: [14]u8 = @import("std").mem.zeroes([14]u8),
    point_y_scaling: [14]u8 = @import("std").mem.zeroes([14]u8),
    num_cb_points: u8 = @import("std").mem.zeroes(u8),
    point_cb_value: [10]u8 = @import("std").mem.zeroes([10]u8),
    point_cb_scaling: [10]u8 = @import("std").mem.zeroes([10]u8),
    num_cr_points: u8 = @import("std").mem.zeroes(u8),
    point_cr_value: [10]u8 = @import("std").mem.zeroes([10]u8),
    point_cr_scaling: [10]u8 = @import("std").mem.zeroes([10]u8),
    ar_coeffs_y_plus_128: [24]i8 = @import("std").mem.zeroes([24]i8),
    ar_coeffs_cb_plus_128: [25]i8 = @import("std").mem.zeroes([25]i8),
    ar_coeffs_cr_plus_128: [25]i8 = @import("std").mem.zeroes([25]i8),
    cb_mult: u8 = @import("std").mem.zeroes(u8),
    cb_luma_mult: u8 = @import("std").mem.zeroes(u8),
    cb_offset: u16 = @import("std").mem.zeroes(u16),
    cr_mult: u8 = @import("std").mem.zeroes(u8),
    cr_luma_mult: u8 = @import("std").mem.zeroes(u8),
    cr_offset: u16 = @import("std").mem.zeroes(u16),
};
pub const StdVideoAV1FilmGrain = struct_StdVideoAV1FilmGrain;
// /usr/include/vk_video/vulkan_video_codec_av1std.h:348:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoAV1SequenceHeaderFlags = opaque {};
pub const StdVideoAV1SequenceHeaderFlags = struct_StdVideoAV1SequenceHeaderFlags;
pub const struct_StdVideoAV1SequenceHeader = extern struct {
    flags: StdVideoAV1SequenceHeaderFlags = @import("std").mem.zeroes(StdVideoAV1SequenceHeaderFlags),
    seq_profile: StdVideoAV1Profile = @import("std").mem.zeroes(StdVideoAV1Profile),
    frame_width_bits_minus_1: u8 = @import("std").mem.zeroes(u8),
    frame_height_bits_minus_1: u8 = @import("std").mem.zeroes(u8),
    max_frame_width_minus_1: u16 = @import("std").mem.zeroes(u16),
    max_frame_height_minus_1: u16 = @import("std").mem.zeroes(u16),
    delta_frame_id_length_minus_2: u8 = @import("std").mem.zeroes(u8),
    additional_frame_id_length_minus_1: u8 = @import("std").mem.zeroes(u8),
    order_hint_bits_minus_1: u8 = @import("std").mem.zeroes(u8),
    seq_force_integer_mv: u8 = @import("std").mem.zeroes(u8),
    seq_force_screen_content_tools: u8 = @import("std").mem.zeroes(u8),
    reserved1: [5]u8 = @import("std").mem.zeroes([5]u8),
    pColorConfig: ?*const StdVideoAV1ColorConfig = @import("std").mem.zeroes(?*const StdVideoAV1ColorConfig),
    pTimingInfo: ?*const StdVideoAV1TimingInfo = @import("std").mem.zeroes(?*const StdVideoAV1TimingInfo),
};
pub const StdVideoAV1SequenceHeader = struct_StdVideoAV1SequenceHeader;
// /usr/include/vk_video/vulkan_video_codec_av1std_decode.h:31:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoDecodeAV1PictureInfoFlags = opaque {};
pub const StdVideoDecodeAV1PictureInfoFlags = struct_StdVideoDecodeAV1PictureInfoFlags;
pub const struct_StdVideoDecodeAV1PictureInfo = extern struct {
    flags: StdVideoDecodeAV1PictureInfoFlags = @import("std").mem.zeroes(StdVideoDecodeAV1PictureInfoFlags),
    frame_type: StdVideoAV1FrameType = @import("std").mem.zeroes(StdVideoAV1FrameType),
    current_frame_id: u32 = @import("std").mem.zeroes(u32),
    OrderHint: u8 = @import("std").mem.zeroes(u8),
    primary_ref_frame: u8 = @import("std").mem.zeroes(u8),
    refresh_frame_flags: u8 = @import("std").mem.zeroes(u8),
    reserved1: u8 = @import("std").mem.zeroes(u8),
    interpolation_filter: StdVideoAV1InterpolationFilter = @import("std").mem.zeroes(StdVideoAV1InterpolationFilter),
    TxMode: StdVideoAV1TxMode = @import("std").mem.zeroes(StdVideoAV1TxMode),
    delta_q_res: u8 = @import("std").mem.zeroes(u8),
    delta_lf_res: u8 = @import("std").mem.zeroes(u8),
    SkipModeFrame: [2]u8 = @import("std").mem.zeroes([2]u8),
    coded_denom: u8 = @import("std").mem.zeroes(u8),
    reserved2: [3]u8 = @import("std").mem.zeroes([3]u8),
    OrderHints: [8]u8 = @import("std").mem.zeroes([8]u8),
    expectedFrameId: [8]u32 = @import("std").mem.zeroes([8]u32),
    pTileInfo: ?*const StdVideoAV1TileInfo = @import("std").mem.zeroes(?*const StdVideoAV1TileInfo),
    pQuantization: ?*const StdVideoAV1Quantization = @import("std").mem.zeroes(?*const StdVideoAV1Quantization),
    pSegmentation: [*c]const StdVideoAV1Segmentation = @import("std").mem.zeroes([*c]const StdVideoAV1Segmentation),
    pLoopFilter: ?*const StdVideoAV1LoopFilter = @import("std").mem.zeroes(?*const StdVideoAV1LoopFilter),
    pCDEF: [*c]const StdVideoAV1CDEF = @import("std").mem.zeroes([*c]const StdVideoAV1CDEF),
    pLoopRestoration: [*c]const StdVideoAV1LoopRestoration = @import("std").mem.zeroes([*c]const StdVideoAV1LoopRestoration),
    pGlobalMotion: [*c]const StdVideoAV1GlobalMotion = @import("std").mem.zeroes([*c]const StdVideoAV1GlobalMotion),
    pFilmGrain: ?*const StdVideoAV1FilmGrain = @import("std").mem.zeroes(?*const StdVideoAV1FilmGrain),
};
pub const StdVideoDecodeAV1PictureInfo = struct_StdVideoDecodeAV1PictureInfo;
// /usr/include/vk_video/vulkan_video_codec_av1std_decode.h:91:17: warning: struct demoted to opaque type - has bitfield
pub const struct_StdVideoDecodeAV1ReferenceInfoFlags = opaque {};
pub const StdVideoDecodeAV1ReferenceInfoFlags = struct_StdVideoDecodeAV1ReferenceInfoFlags;
pub const struct_StdVideoDecodeAV1ReferenceInfo = extern struct {
    flags: StdVideoDecodeAV1ReferenceInfoFlags = @import("std").mem.zeroes(StdVideoDecodeAV1ReferenceInfoFlags),
    frame_type: u8 = @import("std").mem.zeroes(u8),
    RefFrameSignBias: u8 = @import("std").mem.zeroes(u8),
    OrderHint: u8 = @import("std").mem.zeroes(u8),
    SavedOrderHints: [8]u8 = @import("std").mem.zeroes([8]u8),
};
pub const StdVideoDecodeAV1ReferenceInfo = struct_StdVideoDecodeAV1ReferenceInfo;
pub const struct_VkVideoDecodeAV1ProfileInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stdProfile: StdVideoAV1Profile = @import("std").mem.zeroes(StdVideoAV1Profile),
    filmGrainSupport: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkVideoDecodeAV1ProfileInfoKHR = struct_VkVideoDecodeAV1ProfileInfoKHR;
pub const struct_VkVideoDecodeAV1CapabilitiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxLevel: StdVideoAV1Level = @import("std").mem.zeroes(StdVideoAV1Level),
};
pub const VkVideoDecodeAV1CapabilitiesKHR = struct_VkVideoDecodeAV1CapabilitiesKHR;
pub const struct_VkVideoDecodeAV1SessionParametersCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pStdSequenceHeader: ?*const StdVideoAV1SequenceHeader = @import("std").mem.zeroes(?*const StdVideoAV1SequenceHeader),
};
pub const VkVideoDecodeAV1SessionParametersCreateInfoKHR = struct_VkVideoDecodeAV1SessionParametersCreateInfoKHR;
pub const struct_VkVideoDecodeAV1PictureInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pStdPictureInfo: ?*const StdVideoDecodeAV1PictureInfo = @import("std").mem.zeroes(?*const StdVideoDecodeAV1PictureInfo),
    referenceNameSlotIndices: [7]i32 = @import("std").mem.zeroes([7]i32),
    frameHeaderOffset: u32 = @import("std").mem.zeroes(u32),
    tileCount: u32 = @import("std").mem.zeroes(u32),
    pTileOffsets: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    pTileSizes: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkVideoDecodeAV1PictureInfoKHR = struct_VkVideoDecodeAV1PictureInfoKHR;
pub const struct_VkVideoDecodeAV1DpbSlotInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pStdReferenceInfo: ?*const StdVideoDecodeAV1ReferenceInfo = @import("std").mem.zeroes(?*const StdVideoDecodeAV1ReferenceInfo),
};
pub const VkVideoDecodeAV1DpbSlotInfoKHR = struct_VkVideoDecodeAV1DpbSlotInfoKHR;
pub const struct_VkPhysicalDeviceVideoMaintenance1FeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    videoMaintenance1: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceVideoMaintenance1FeaturesKHR = struct_VkPhysicalDeviceVideoMaintenance1FeaturesKHR;
pub const struct_VkVideoInlineQueryInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    queryPool: VkQueryPool = @import("std").mem.zeroes(VkQueryPool),
    firstQuery: u32 = @import("std").mem.zeroes(u32),
    queryCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVideoInlineQueryInfoKHR = struct_VkVideoInlineQueryInfoKHR;
pub const struct_VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxVertexAttribDivisor: u32 = @import("std").mem.zeroes(u32),
    supportsNonZeroFirstInstance: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR = struct_VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR;
pub const struct_VkVertexInputBindingDivisorDescriptionKHR = extern struct {
    binding: u32 = @import("std").mem.zeroes(u32),
    divisor: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVertexInputBindingDivisorDescriptionKHR = struct_VkVertexInputBindingDivisorDescriptionKHR;
pub const struct_VkPipelineVertexInputDivisorStateCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    vertexBindingDivisorCount: u32 = @import("std").mem.zeroes(u32),
    pVertexBindingDivisors: [*c]const VkVertexInputBindingDivisorDescriptionKHR = @import("std").mem.zeroes([*c]const VkVertexInputBindingDivisorDescriptionKHR),
};
pub const VkPipelineVertexInputDivisorStateCreateInfoKHR = struct_VkPipelineVertexInputDivisorStateCreateInfoKHR;
pub const struct_VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    vertexAttributeInstanceRateDivisor: VkBool32 = @import("std").mem.zeroes(VkBool32),
    vertexAttributeInstanceRateZeroDivisor: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR = struct_VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR;
pub const struct_VkPhysicalDeviceShaderFloatControls2FeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderFloatControls2: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderFloatControls2FeaturesKHR = struct_VkPhysicalDeviceShaderFloatControls2FeaturesKHR;
pub const struct_VkPhysicalDeviceIndexTypeUint8FeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    indexTypeUint8: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceIndexTypeUint8FeaturesKHR = struct_VkPhysicalDeviceIndexTypeUint8FeaturesKHR;
pub const VK_LINE_RASTERIZATION_MODE_DEFAULT_KHR: c_int = 0;
pub const VK_LINE_RASTERIZATION_MODE_RECTANGULAR_KHR: c_int = 1;
pub const VK_LINE_RASTERIZATION_MODE_BRESENHAM_KHR: c_int = 2;
pub const VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_KHR: c_int = 3;
pub const VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT: c_int = 0;
pub const VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT: c_int = 1;
pub const VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT: c_int = 2;
pub const VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT: c_int = 3;
pub const VK_LINE_RASTERIZATION_MODE_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkLineRasterizationModeKHR = c_uint;
pub const VkLineRasterizationModeKHR = enum_VkLineRasterizationModeKHR;
pub const struct_VkPhysicalDeviceLineRasterizationFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    rectangularLines: VkBool32 = @import("std").mem.zeroes(VkBool32),
    bresenhamLines: VkBool32 = @import("std").mem.zeroes(VkBool32),
    smoothLines: VkBool32 = @import("std").mem.zeroes(VkBool32),
    stippledRectangularLines: VkBool32 = @import("std").mem.zeroes(VkBool32),
    stippledBresenhamLines: VkBool32 = @import("std").mem.zeroes(VkBool32),
    stippledSmoothLines: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceLineRasterizationFeaturesKHR = struct_VkPhysicalDeviceLineRasterizationFeaturesKHR;
pub const struct_VkPhysicalDeviceLineRasterizationPropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    lineSubPixelPrecisionBits: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceLineRasterizationPropertiesKHR = struct_VkPhysicalDeviceLineRasterizationPropertiesKHR;
pub const struct_VkPipelineRasterizationLineStateCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    lineRasterizationMode: VkLineRasterizationModeKHR = @import("std").mem.zeroes(VkLineRasterizationModeKHR),
    stippledLineEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    lineStippleFactor: u32 = @import("std").mem.zeroes(u32),
    lineStipplePattern: u16 = @import("std").mem.zeroes(u16),
};
pub const VkPipelineRasterizationLineStateCreateInfoKHR = struct_VkPipelineRasterizationLineStateCreateInfoKHR;
pub const PFN_vkCmdSetLineStippleKHR = ?*const fn (VkCommandBuffer, u32, u16) callconv(.C) void;
pub extern fn vkCmdSetLineStippleKHR(commandBuffer: VkCommandBuffer, lineStippleFactor: u32, lineStipplePattern: u16) void;
pub const VK_TIME_DOMAIN_DEVICE_KHR: c_int = 0;
pub const VK_TIME_DOMAIN_CLOCK_MONOTONIC_KHR: c_int = 1;
pub const VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_KHR: c_int = 2;
pub const VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_KHR: c_int = 3;
pub const VK_TIME_DOMAIN_DEVICE_EXT: c_int = 0;
pub const VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT: c_int = 1;
pub const VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT: c_int = 2;
pub const VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT: c_int = 3;
pub const VK_TIME_DOMAIN_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkTimeDomainKHR = c_uint;
pub const VkTimeDomainKHR = enum_VkTimeDomainKHR;
pub const struct_VkCalibratedTimestampInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    timeDomain: VkTimeDomainKHR = @import("std").mem.zeroes(VkTimeDomainKHR),
};
pub const VkCalibratedTimestampInfoKHR = struct_VkCalibratedTimestampInfoKHR;
pub const PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsKHR = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkTimeDomainKHR) callconv(.C) VkResult;
pub const PFN_vkGetCalibratedTimestampsKHR = ?*const fn (VkDevice, u32, [*c]const VkCalibratedTimestampInfoKHR, [*c]u64, [*c]u64) callconv(.C) VkResult;
pub extern fn vkGetPhysicalDeviceCalibrateableTimeDomainsKHR(physicalDevice: VkPhysicalDevice, pTimeDomainCount: [*c]u32, pTimeDomains: [*c]VkTimeDomainKHR) VkResult;
pub extern fn vkGetCalibratedTimestampsKHR(device: VkDevice, timestampCount: u32, pTimestampInfos: [*c]const VkCalibratedTimestampInfoKHR, pTimestamps: [*c]u64, pMaxDeviation: [*c]u64) VkResult;
pub const struct_VkPhysicalDeviceShaderExpectAssumeFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderExpectAssume: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderExpectAssumeFeaturesKHR = struct_VkPhysicalDeviceShaderExpectAssumeFeaturesKHR;
pub const struct_VkPhysicalDeviceMaintenance6FeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maintenance6: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceMaintenance6FeaturesKHR = struct_VkPhysicalDeviceMaintenance6FeaturesKHR;
pub const struct_VkPhysicalDeviceMaintenance6PropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    blockTexelViewCompatibleMultipleLayers: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxCombinedImageSamplerDescriptorCount: u32 = @import("std").mem.zeroes(u32),
    fragmentShadingRateClampCombinerInputs: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceMaintenance6PropertiesKHR = struct_VkPhysicalDeviceMaintenance6PropertiesKHR;
pub const struct_VkBindMemoryStatusKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pResult: [*c]VkResult = @import("std").mem.zeroes([*c]VkResult),
};
pub const VkBindMemoryStatusKHR = struct_VkBindMemoryStatusKHR;
pub const struct_VkBindDescriptorSetsInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stageFlags: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    layout: VkPipelineLayout = @import("std").mem.zeroes(VkPipelineLayout),
    firstSet: u32 = @import("std").mem.zeroes(u32),
    descriptorSetCount: u32 = @import("std").mem.zeroes(u32),
    pDescriptorSets: [*c]const VkDescriptorSet = @import("std").mem.zeroes([*c]const VkDescriptorSet),
    dynamicOffsetCount: u32 = @import("std").mem.zeroes(u32),
    pDynamicOffsets: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkBindDescriptorSetsInfoKHR = struct_VkBindDescriptorSetsInfoKHR;
pub const struct_VkPushConstantsInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    layout: VkPipelineLayout = @import("std").mem.zeroes(VkPipelineLayout),
    stageFlags: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    offset: u32 = @import("std").mem.zeroes(u32),
    size: u32 = @import("std").mem.zeroes(u32),
    pValues: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const VkPushConstantsInfoKHR = struct_VkPushConstantsInfoKHR;
pub const struct_VkPushDescriptorSetInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stageFlags: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    layout: VkPipelineLayout = @import("std").mem.zeroes(VkPipelineLayout),
    set: u32 = @import("std").mem.zeroes(u32),
    descriptorWriteCount: u32 = @import("std").mem.zeroes(u32),
    pDescriptorWrites: [*c]const VkWriteDescriptorSet = @import("std").mem.zeroes([*c]const VkWriteDescriptorSet),
};
pub const VkPushDescriptorSetInfoKHR = struct_VkPushDescriptorSetInfoKHR;
pub const struct_VkPushDescriptorSetWithTemplateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    descriptorUpdateTemplate: VkDescriptorUpdateTemplate = @import("std").mem.zeroes(VkDescriptorUpdateTemplate),
    layout: VkPipelineLayout = @import("std").mem.zeroes(VkPipelineLayout),
    set: u32 = @import("std").mem.zeroes(u32),
    pData: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const VkPushDescriptorSetWithTemplateInfoKHR = struct_VkPushDescriptorSetWithTemplateInfoKHR;
pub const struct_VkSetDescriptorBufferOffsetsInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stageFlags: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    layout: VkPipelineLayout = @import("std").mem.zeroes(VkPipelineLayout),
    firstSet: u32 = @import("std").mem.zeroes(u32),
    setCount: u32 = @import("std").mem.zeroes(u32),
    pBufferIndices: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    pOffsets: [*c]const VkDeviceSize = @import("std").mem.zeroes([*c]const VkDeviceSize),
};
pub const VkSetDescriptorBufferOffsetsInfoEXT = struct_VkSetDescriptorBufferOffsetsInfoEXT;
pub const struct_VkBindDescriptorBufferEmbeddedSamplersInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stageFlags: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    layout: VkPipelineLayout = @import("std").mem.zeroes(VkPipelineLayout),
    set: u32 = @import("std").mem.zeroes(u32),
};
pub const VkBindDescriptorBufferEmbeddedSamplersInfoEXT = struct_VkBindDescriptorBufferEmbeddedSamplersInfoEXT;
pub const PFN_vkCmdBindDescriptorSets2KHR = ?*const fn (VkCommandBuffer, [*c]const VkBindDescriptorSetsInfoKHR) callconv(.C) void;
pub const PFN_vkCmdPushConstants2KHR = ?*const fn (VkCommandBuffer, [*c]const VkPushConstantsInfoKHR) callconv(.C) void;
pub const PFN_vkCmdPushDescriptorSet2KHR = ?*const fn (VkCommandBuffer, [*c]const VkPushDescriptorSetInfoKHR) callconv(.C) void;
pub const PFN_vkCmdPushDescriptorSetWithTemplate2KHR = ?*const fn (VkCommandBuffer, [*c]const VkPushDescriptorSetWithTemplateInfoKHR) callconv(.C) void;
pub const PFN_vkCmdSetDescriptorBufferOffsets2EXT = ?*const fn (VkCommandBuffer, [*c]const VkSetDescriptorBufferOffsetsInfoEXT) callconv(.C) void;
pub const PFN_vkCmdBindDescriptorBufferEmbeddedSamplers2EXT = ?*const fn (VkCommandBuffer, [*c]const VkBindDescriptorBufferEmbeddedSamplersInfoEXT) callconv(.C) void;
pub extern fn vkCmdBindDescriptorSets2KHR(commandBuffer: VkCommandBuffer, pBindDescriptorSetsInfo: [*c]const VkBindDescriptorSetsInfoKHR) void;
pub extern fn vkCmdPushConstants2KHR(commandBuffer: VkCommandBuffer, pPushConstantsInfo: [*c]const VkPushConstantsInfoKHR) void;
pub extern fn vkCmdPushDescriptorSet2KHR(commandBuffer: VkCommandBuffer, pPushDescriptorSetInfo: [*c]const VkPushDescriptorSetInfoKHR) void;
pub extern fn vkCmdPushDescriptorSetWithTemplate2KHR(commandBuffer: VkCommandBuffer, pPushDescriptorSetWithTemplateInfo: [*c]const VkPushDescriptorSetWithTemplateInfoKHR) void;
pub extern fn vkCmdSetDescriptorBufferOffsets2EXT(commandBuffer: VkCommandBuffer, pSetDescriptorBufferOffsetsInfo: [*c]const VkSetDescriptorBufferOffsetsInfoEXT) void;
pub extern fn vkCmdBindDescriptorBufferEmbeddedSamplers2EXT(commandBuffer: VkCommandBuffer, pBindDescriptorBufferEmbeddedSamplersInfo: [*c]const VkBindDescriptorBufferEmbeddedSamplersInfoEXT) void;
pub const struct_VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderRelaxedExtendedInstruction: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR = struct_VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR;
pub const VK_PHYSICAL_DEVICE_LAYERED_API_VULKAN_KHR: c_int = 0;
pub const VK_PHYSICAL_DEVICE_LAYERED_API_D3D12_KHR: c_int = 1;
pub const VK_PHYSICAL_DEVICE_LAYERED_API_METAL_KHR: c_int = 2;
pub const VK_PHYSICAL_DEVICE_LAYERED_API_OPENGL_KHR: c_int = 3;
pub const VK_PHYSICAL_DEVICE_LAYERED_API_OPENGLES_KHR: c_int = 4;
pub const VK_PHYSICAL_DEVICE_LAYERED_API_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkPhysicalDeviceLayeredApiKHR = c_uint;
pub const VkPhysicalDeviceLayeredApiKHR = enum_VkPhysicalDeviceLayeredApiKHR;
pub const struct_VkPhysicalDeviceMaintenance7FeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maintenance7: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceMaintenance7FeaturesKHR = struct_VkPhysicalDeviceMaintenance7FeaturesKHR;
pub const struct_VkPhysicalDeviceMaintenance7PropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    robustFragmentShadingRateAttachmentAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    separateDepthStencilAttachmentAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxDescriptorSetTotalUniformBuffersDynamic: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetTotalStorageBuffersDynamic: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetTotalBuffersDynamic: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindTotalUniformBuffersDynamic: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindTotalStorageBuffersDynamic: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindTotalBuffersDynamic: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceMaintenance7PropertiesKHR = struct_VkPhysicalDeviceMaintenance7PropertiesKHR;
pub const struct_VkPhysicalDeviceLayeredApiPropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    vendorID: u32 = @import("std").mem.zeroes(u32),
    deviceID: u32 = @import("std").mem.zeroes(u32),
    layeredAPI: VkPhysicalDeviceLayeredApiKHR = @import("std").mem.zeroes(VkPhysicalDeviceLayeredApiKHR),
    deviceName: [256]u8 = @import("std").mem.zeroes([256]u8),
};
pub const VkPhysicalDeviceLayeredApiPropertiesKHR = struct_VkPhysicalDeviceLayeredApiPropertiesKHR;
pub const struct_VkPhysicalDeviceLayeredApiPropertiesListKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    layeredApiCount: u32 = @import("std").mem.zeroes(u32),
    pLayeredApis: [*c]VkPhysicalDeviceLayeredApiPropertiesKHR = @import("std").mem.zeroes([*c]VkPhysicalDeviceLayeredApiPropertiesKHR),
};
pub const VkPhysicalDeviceLayeredApiPropertiesListKHR = struct_VkPhysicalDeviceLayeredApiPropertiesListKHR;
pub const struct_VkPhysicalDeviceLayeredApiVulkanPropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    properties: VkPhysicalDeviceProperties2 = @import("std").mem.zeroes(VkPhysicalDeviceProperties2),
};
pub const VkPhysicalDeviceLayeredApiVulkanPropertiesKHR = struct_VkPhysicalDeviceLayeredApiVulkanPropertiesKHR;
pub const struct_VkDebugReportCallbackEXT_T = opaque {};
pub const VkDebugReportCallbackEXT = ?*struct_VkDebugReportCallbackEXT_T;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT: c_int = 0;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT: c_int = 1;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT: c_int = 2;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT: c_int = 3;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT: c_int = 4;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT: c_int = 5;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT: c_int = 6;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT: c_int = 7;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT: c_int = 8;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT: c_int = 9;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT: c_int = 10;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT: c_int = 11;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT: c_int = 12;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT: c_int = 13;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT: c_int = 14;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT: c_int = 15;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT: c_int = 16;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT: c_int = 17;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT: c_int = 18;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT: c_int = 19;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT: c_int = 20;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT: c_int = 21;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT: c_int = 22;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT: c_int = 23;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT: c_int = 24;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT: c_int = 25;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT: c_int = 26;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT: c_int = 27;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT: c_int = 28;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT: c_int = 29;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT: c_int = 30;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT: c_int = 33;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT: c_int = 1000156000;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT: c_int = 1000085000;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_CU_MODULE_NVX_EXT: c_int = 1000029000;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_CU_FUNCTION_NVX_EXT: c_int = 1000029001;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT: c_int = 1000150000;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT: c_int = 1000165000;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_CUDA_MODULE_NV_EXT: c_int = 1000307000;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_CUDA_FUNCTION_NV_EXT: c_int = 1000307001;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA_EXT: c_int = 1000366000;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT: c_int = 28;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT: c_int = 33;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT: c_int = 1000085000;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT: c_int = 1000156000;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkDebugReportObjectTypeEXT = c_uint;
pub const VkDebugReportObjectTypeEXT = enum_VkDebugReportObjectTypeEXT;
pub const VK_DEBUG_REPORT_INFORMATION_BIT_EXT: c_int = 1;
pub const VK_DEBUG_REPORT_WARNING_BIT_EXT: c_int = 2;
pub const VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT: c_int = 4;
pub const VK_DEBUG_REPORT_ERROR_BIT_EXT: c_int = 8;
pub const VK_DEBUG_REPORT_DEBUG_BIT_EXT: c_int = 16;
pub const VK_DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkDebugReportFlagBitsEXT = c_uint;
pub const VkDebugReportFlagBitsEXT = enum_VkDebugReportFlagBitsEXT;
pub const VkDebugReportFlagsEXT = VkFlags;
pub const PFN_vkDebugReportCallbackEXT = ?*const fn (VkDebugReportFlagsEXT, VkDebugReportObjectTypeEXT, u64, usize, i32, [*c]const u8, [*c]const u8, ?*anyopaque) callconv(.C) VkBool32;
pub const struct_VkDebugReportCallbackCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkDebugReportFlagsEXT = @import("std").mem.zeroes(VkDebugReportFlagsEXT),
    pfnCallback: PFN_vkDebugReportCallbackEXT = @import("std").mem.zeroes(PFN_vkDebugReportCallbackEXT),
    pUserData: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const VkDebugReportCallbackCreateInfoEXT = struct_VkDebugReportCallbackCreateInfoEXT;
pub const PFN_vkCreateDebugReportCallbackEXT = ?*const fn (VkInstance, [*c]const VkDebugReportCallbackCreateInfoEXT, [*c]const VkAllocationCallbacks, [*c]VkDebugReportCallbackEXT) callconv(.C) VkResult;
pub const PFN_vkDestroyDebugReportCallbackEXT = ?*const fn (VkInstance, VkDebugReportCallbackEXT, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkDebugReportMessageEXT = ?*const fn (VkInstance, VkDebugReportFlagsEXT, VkDebugReportObjectTypeEXT, u64, usize, i32, [*c]const u8, [*c]const u8) callconv(.C) void;
pub extern fn vkCreateDebugReportCallbackEXT(instance: VkInstance, pCreateInfo: [*c]const VkDebugReportCallbackCreateInfoEXT, pAllocator: [*c]const VkAllocationCallbacks, pCallback: [*c]VkDebugReportCallbackEXT) VkResult;
pub extern fn vkDestroyDebugReportCallbackEXT(instance: VkInstance, callback: VkDebugReportCallbackEXT, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkDebugReportMessageEXT(instance: VkInstance, flags: VkDebugReportFlagsEXT, objectType: VkDebugReportObjectTypeEXT, object: u64, location: usize, messageCode: i32, pLayerPrefix: [*c]const u8, pMessage: [*c]const u8) void;
pub const VK_RASTERIZATION_ORDER_STRICT_AMD: c_int = 0;
pub const VK_RASTERIZATION_ORDER_RELAXED_AMD: c_int = 1;
pub const VK_RASTERIZATION_ORDER_MAX_ENUM_AMD: c_int = 2147483647;
pub const enum_VkRasterizationOrderAMD = c_uint;
pub const VkRasterizationOrderAMD = enum_VkRasterizationOrderAMD;
pub const struct_VkPipelineRasterizationStateRasterizationOrderAMD = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    rasterizationOrder: VkRasterizationOrderAMD = @import("std").mem.zeroes(VkRasterizationOrderAMD),
};
pub const VkPipelineRasterizationStateRasterizationOrderAMD = struct_VkPipelineRasterizationStateRasterizationOrderAMD;
pub const struct_VkDebugMarkerObjectNameInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    objectType: VkDebugReportObjectTypeEXT = @import("std").mem.zeroes(VkDebugReportObjectTypeEXT),
    object: u64 = @import("std").mem.zeroes(u64),
    pObjectName: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
};
pub const VkDebugMarkerObjectNameInfoEXT = struct_VkDebugMarkerObjectNameInfoEXT;
pub const struct_VkDebugMarkerObjectTagInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    objectType: VkDebugReportObjectTypeEXT = @import("std").mem.zeroes(VkDebugReportObjectTypeEXT),
    object: u64 = @import("std").mem.zeroes(u64),
    tagName: u64 = @import("std").mem.zeroes(u64),
    tagSize: usize = @import("std").mem.zeroes(usize),
    pTag: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const VkDebugMarkerObjectTagInfoEXT = struct_VkDebugMarkerObjectTagInfoEXT;
pub const struct_VkDebugMarkerMarkerInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pMarkerName: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    color: [4]f32 = @import("std").mem.zeroes([4]f32),
};
pub const VkDebugMarkerMarkerInfoEXT = struct_VkDebugMarkerMarkerInfoEXT;
pub const PFN_vkDebugMarkerSetObjectTagEXT = ?*const fn (VkDevice, [*c]const VkDebugMarkerObjectTagInfoEXT) callconv(.C) VkResult;
pub const PFN_vkDebugMarkerSetObjectNameEXT = ?*const fn (VkDevice, [*c]const VkDebugMarkerObjectNameInfoEXT) callconv(.C) VkResult;
pub const PFN_vkCmdDebugMarkerBeginEXT = ?*const fn (VkCommandBuffer, [*c]const VkDebugMarkerMarkerInfoEXT) callconv(.C) void;
pub const PFN_vkCmdDebugMarkerEndEXT = ?*const fn (VkCommandBuffer) callconv(.C) void;
pub const PFN_vkCmdDebugMarkerInsertEXT = ?*const fn (VkCommandBuffer, [*c]const VkDebugMarkerMarkerInfoEXT) callconv(.C) void;
pub extern fn vkDebugMarkerSetObjectTagEXT(device: VkDevice, pTagInfo: [*c]const VkDebugMarkerObjectTagInfoEXT) VkResult;
pub extern fn vkDebugMarkerSetObjectNameEXT(device: VkDevice, pNameInfo: [*c]const VkDebugMarkerObjectNameInfoEXT) VkResult;
pub extern fn vkCmdDebugMarkerBeginEXT(commandBuffer: VkCommandBuffer, pMarkerInfo: [*c]const VkDebugMarkerMarkerInfoEXT) void;
pub extern fn vkCmdDebugMarkerEndEXT(commandBuffer: VkCommandBuffer) void;
pub extern fn vkCmdDebugMarkerInsertEXT(commandBuffer: VkCommandBuffer, pMarkerInfo: [*c]const VkDebugMarkerMarkerInfoEXT) void;
pub const struct_VkDedicatedAllocationImageCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    dedicatedAllocation: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkDedicatedAllocationImageCreateInfoNV = struct_VkDedicatedAllocationImageCreateInfoNV;
pub const struct_VkDedicatedAllocationBufferCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    dedicatedAllocation: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkDedicatedAllocationBufferCreateInfoNV = struct_VkDedicatedAllocationBufferCreateInfoNV;
pub const struct_VkDedicatedAllocationMemoryAllocateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    image: VkImage = @import("std").mem.zeroes(VkImage),
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
};
pub const VkDedicatedAllocationMemoryAllocateInfoNV = struct_VkDedicatedAllocationMemoryAllocateInfoNV;
pub const VkPipelineRasterizationStateStreamCreateFlagsEXT = VkFlags;
pub const struct_VkPhysicalDeviceTransformFeedbackFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    transformFeedback: VkBool32 = @import("std").mem.zeroes(VkBool32),
    geometryStreams: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceTransformFeedbackFeaturesEXT = struct_VkPhysicalDeviceTransformFeedbackFeaturesEXT;
pub const struct_VkPhysicalDeviceTransformFeedbackPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxTransformFeedbackStreams: u32 = @import("std").mem.zeroes(u32),
    maxTransformFeedbackBuffers: u32 = @import("std").mem.zeroes(u32),
    maxTransformFeedbackBufferSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    maxTransformFeedbackStreamDataSize: u32 = @import("std").mem.zeroes(u32),
    maxTransformFeedbackBufferDataSize: u32 = @import("std").mem.zeroes(u32),
    maxTransformFeedbackBufferDataStride: u32 = @import("std").mem.zeroes(u32),
    transformFeedbackQueries: VkBool32 = @import("std").mem.zeroes(VkBool32),
    transformFeedbackStreamsLinesTriangles: VkBool32 = @import("std").mem.zeroes(VkBool32),
    transformFeedbackRasterizationStreamSelect: VkBool32 = @import("std").mem.zeroes(VkBool32),
    transformFeedbackDraw: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceTransformFeedbackPropertiesEXT = struct_VkPhysicalDeviceTransformFeedbackPropertiesEXT;
pub const struct_VkPipelineRasterizationStateStreamCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineRasterizationStateStreamCreateFlagsEXT = @import("std").mem.zeroes(VkPipelineRasterizationStateStreamCreateFlagsEXT),
    rasterizationStream: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPipelineRasterizationStateStreamCreateInfoEXT = struct_VkPipelineRasterizationStateStreamCreateInfoEXT;
pub const PFN_vkCmdBindTransformFeedbackBuffersEXT = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkBuffer, [*c]const VkDeviceSize, [*c]const VkDeviceSize) callconv(.C) void;
pub const PFN_vkCmdBeginTransformFeedbackEXT = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkBuffer, [*c]const VkDeviceSize) callconv(.C) void;
pub const PFN_vkCmdEndTransformFeedbackEXT = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkBuffer, [*c]const VkDeviceSize) callconv(.C) void;
pub const PFN_vkCmdBeginQueryIndexedEXT = ?*const fn (VkCommandBuffer, VkQueryPool, u32, VkQueryControlFlags, u32) callconv(.C) void;
pub const PFN_vkCmdEndQueryIndexedEXT = ?*const fn (VkCommandBuffer, VkQueryPool, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawIndirectByteCountEXT = ?*const fn (VkCommandBuffer, u32, u32, VkBuffer, VkDeviceSize, u32, u32) callconv(.C) void;
pub extern fn vkCmdBindTransformFeedbackBuffersEXT(commandBuffer: VkCommandBuffer, firstBinding: u32, bindingCount: u32, pBuffers: [*c]const VkBuffer, pOffsets: [*c]const VkDeviceSize, pSizes: [*c]const VkDeviceSize) void;
pub extern fn vkCmdBeginTransformFeedbackEXT(commandBuffer: VkCommandBuffer, firstCounterBuffer: u32, counterBufferCount: u32, pCounterBuffers: [*c]const VkBuffer, pCounterBufferOffsets: [*c]const VkDeviceSize) void;
pub extern fn vkCmdEndTransformFeedbackEXT(commandBuffer: VkCommandBuffer, firstCounterBuffer: u32, counterBufferCount: u32, pCounterBuffers: [*c]const VkBuffer, pCounterBufferOffsets: [*c]const VkDeviceSize) void;
pub extern fn vkCmdBeginQueryIndexedEXT(commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: u32, flags: VkQueryControlFlags, index: u32) void;
pub extern fn vkCmdEndQueryIndexedEXT(commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: u32, index: u32) void;
pub extern fn vkCmdDrawIndirectByteCountEXT(commandBuffer: VkCommandBuffer, instanceCount: u32, firstInstance: u32, counterBuffer: VkBuffer, counterBufferOffset: VkDeviceSize, counterOffset: u32, vertexStride: u32) void;
pub const struct_VkCuModuleNVX_T = opaque {};
pub const VkCuModuleNVX = ?*struct_VkCuModuleNVX_T;
pub const struct_VkCuFunctionNVX_T = opaque {};
pub const VkCuFunctionNVX = ?*struct_VkCuFunctionNVX_T;
pub const struct_VkCuModuleCreateInfoNVX = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    dataSize: usize = @import("std").mem.zeroes(usize),
    pData: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const VkCuModuleCreateInfoNVX = struct_VkCuModuleCreateInfoNVX;
pub const struct_VkCuFunctionCreateInfoNVX = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    module: VkCuModuleNVX = @import("std").mem.zeroes(VkCuModuleNVX),
    pName: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
};
pub const VkCuFunctionCreateInfoNVX = struct_VkCuFunctionCreateInfoNVX;
pub const struct_VkCuLaunchInfoNVX = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    function: VkCuFunctionNVX = @import("std").mem.zeroes(VkCuFunctionNVX),
    gridDimX: u32 = @import("std").mem.zeroes(u32),
    gridDimY: u32 = @import("std").mem.zeroes(u32),
    gridDimZ: u32 = @import("std").mem.zeroes(u32),
    blockDimX: u32 = @import("std").mem.zeroes(u32),
    blockDimY: u32 = @import("std").mem.zeroes(u32),
    blockDimZ: u32 = @import("std").mem.zeroes(u32),
    sharedMemBytes: u32 = @import("std").mem.zeroes(u32),
    paramCount: usize = @import("std").mem.zeroes(usize),
    pParams: [*c]const ?*const anyopaque = @import("std").mem.zeroes([*c]const ?*const anyopaque),
    extraCount: usize = @import("std").mem.zeroes(usize),
    pExtras: [*c]const ?*const anyopaque = @import("std").mem.zeroes([*c]const ?*const anyopaque),
};
pub const VkCuLaunchInfoNVX = struct_VkCuLaunchInfoNVX;
pub const PFN_vkCreateCuModuleNVX = ?*const fn (VkDevice, [*c]const VkCuModuleCreateInfoNVX, [*c]const VkAllocationCallbacks, [*c]VkCuModuleNVX) callconv(.C) VkResult;
pub const PFN_vkCreateCuFunctionNVX = ?*const fn (VkDevice, [*c]const VkCuFunctionCreateInfoNVX, [*c]const VkAllocationCallbacks, [*c]VkCuFunctionNVX) callconv(.C) VkResult;
pub const PFN_vkDestroyCuModuleNVX = ?*const fn (VkDevice, VkCuModuleNVX, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkDestroyCuFunctionNVX = ?*const fn (VkDevice, VkCuFunctionNVX, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCmdCuLaunchKernelNVX = ?*const fn (VkCommandBuffer, [*c]const VkCuLaunchInfoNVX) callconv(.C) void;
pub extern fn vkCreateCuModuleNVX(device: VkDevice, pCreateInfo: [*c]const VkCuModuleCreateInfoNVX, pAllocator: [*c]const VkAllocationCallbacks, pModule: [*c]VkCuModuleNVX) VkResult;
pub extern fn vkCreateCuFunctionNVX(device: VkDevice, pCreateInfo: [*c]const VkCuFunctionCreateInfoNVX, pAllocator: [*c]const VkAllocationCallbacks, pFunction: [*c]VkCuFunctionNVX) VkResult;
pub extern fn vkDestroyCuModuleNVX(device: VkDevice, module: VkCuModuleNVX, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkDestroyCuFunctionNVX(device: VkDevice, function: VkCuFunctionNVX, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkCmdCuLaunchKernelNVX(commandBuffer: VkCommandBuffer, pLaunchInfo: [*c]const VkCuLaunchInfoNVX) void;
pub const struct_VkImageViewHandleInfoNVX = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    imageView: VkImageView = @import("std").mem.zeroes(VkImageView),
    descriptorType: VkDescriptorType = @import("std").mem.zeroes(VkDescriptorType),
    sampler: VkSampler = @import("std").mem.zeroes(VkSampler),
};
pub const VkImageViewHandleInfoNVX = struct_VkImageViewHandleInfoNVX;
pub const struct_VkImageViewAddressPropertiesNVX = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    deviceAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkImageViewAddressPropertiesNVX = struct_VkImageViewAddressPropertiesNVX;
pub const PFN_vkGetImageViewHandleNVX = ?*const fn (VkDevice, [*c]const VkImageViewHandleInfoNVX) callconv(.C) u32;
pub const PFN_vkGetImageViewAddressNVX = ?*const fn (VkDevice, VkImageView, [*c]VkImageViewAddressPropertiesNVX) callconv(.C) VkResult;
pub extern fn vkGetImageViewHandleNVX(device: VkDevice, pInfo: [*c]const VkImageViewHandleInfoNVX) u32;
pub extern fn vkGetImageViewAddressNVX(device: VkDevice, imageView: VkImageView, pProperties: [*c]VkImageViewAddressPropertiesNVX) VkResult;
pub const PFN_vkCmdDrawIndirectCountAMD = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawIndexedIndirectCountAMD = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, u32, u32) callconv(.C) void;
pub extern fn vkCmdDrawIndirectCountAMD(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: u32, stride: u32) void;
pub extern fn vkCmdDrawIndexedIndirectCountAMD(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: u32, stride: u32) void;
pub const struct_VkTextureLODGatherFormatPropertiesAMD = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    supportsTextureGatherLODBiasAMD: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkTextureLODGatherFormatPropertiesAMD = struct_VkTextureLODGatherFormatPropertiesAMD;
pub const VK_SHADER_INFO_TYPE_STATISTICS_AMD: c_int = 0;
pub const VK_SHADER_INFO_TYPE_BINARY_AMD: c_int = 1;
pub const VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD: c_int = 2;
pub const VK_SHADER_INFO_TYPE_MAX_ENUM_AMD: c_int = 2147483647;
pub const enum_VkShaderInfoTypeAMD = c_uint;
pub const VkShaderInfoTypeAMD = enum_VkShaderInfoTypeAMD;
pub const struct_VkShaderResourceUsageAMD = extern struct {
    numUsedVgprs: u32 = @import("std").mem.zeroes(u32),
    numUsedSgprs: u32 = @import("std").mem.zeroes(u32),
    ldsSizePerLocalWorkGroup: u32 = @import("std").mem.zeroes(u32),
    ldsUsageSizeInBytes: usize = @import("std").mem.zeroes(usize),
    scratchMemUsageInBytes: usize = @import("std").mem.zeroes(usize),
};
pub const VkShaderResourceUsageAMD = struct_VkShaderResourceUsageAMD;
pub const struct_VkShaderStatisticsInfoAMD = extern struct {
    shaderStageMask: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    resourceUsage: VkShaderResourceUsageAMD = @import("std").mem.zeroes(VkShaderResourceUsageAMD),
    numPhysicalVgprs: u32 = @import("std").mem.zeroes(u32),
    numPhysicalSgprs: u32 = @import("std").mem.zeroes(u32),
    numAvailableVgprs: u32 = @import("std").mem.zeroes(u32),
    numAvailableSgprs: u32 = @import("std").mem.zeroes(u32),
    computeWorkGroupSize: [3]u32 = @import("std").mem.zeroes([3]u32),
};
pub const VkShaderStatisticsInfoAMD = struct_VkShaderStatisticsInfoAMD;
pub const PFN_vkGetShaderInfoAMD = ?*const fn (VkDevice, VkPipeline, VkShaderStageFlagBits, VkShaderInfoTypeAMD, [*c]usize, ?*anyopaque) callconv(.C) VkResult;
pub extern fn vkGetShaderInfoAMD(device: VkDevice, pipeline: VkPipeline, shaderStage: VkShaderStageFlagBits, infoType: VkShaderInfoTypeAMD, pInfoSize: [*c]usize, pInfo: ?*anyopaque) VkResult;
pub const struct_VkPhysicalDeviceCornerSampledImageFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    cornerSampledImage: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceCornerSampledImageFeaturesNV = struct_VkPhysicalDeviceCornerSampledImageFeaturesNV;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV: c_int = 1;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV: c_int = 2;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV: c_int = 4;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV: c_int = 8;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkExternalMemoryHandleTypeFlagBitsNV = c_uint;
pub const VkExternalMemoryHandleTypeFlagBitsNV = enum_VkExternalMemoryHandleTypeFlagBitsNV;
pub const VkExternalMemoryHandleTypeFlagsNV = VkFlags;
pub const VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV: c_int = 1;
pub const VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV: c_int = 2;
pub const VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV: c_int = 4;
pub const VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkExternalMemoryFeatureFlagBitsNV = c_uint;
pub const VkExternalMemoryFeatureFlagBitsNV = enum_VkExternalMemoryFeatureFlagBitsNV;
pub const VkExternalMemoryFeatureFlagsNV = VkFlags;
pub const struct_VkExternalImageFormatPropertiesNV = extern struct {
    imageFormatProperties: VkImageFormatProperties = @import("std").mem.zeroes(VkImageFormatProperties),
    externalMemoryFeatures: VkExternalMemoryFeatureFlagsNV = @import("std").mem.zeroes(VkExternalMemoryFeatureFlagsNV),
    exportFromImportedHandleTypes: VkExternalMemoryHandleTypeFlagsNV = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlagsNV),
    compatibleHandleTypes: VkExternalMemoryHandleTypeFlagsNV = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlagsNV),
};
pub const VkExternalImageFormatPropertiesNV = struct_VkExternalImageFormatPropertiesNV;
pub const PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV = ?*const fn (VkPhysicalDevice, VkFormat, VkImageType, VkImageTiling, VkImageUsageFlags, VkImageCreateFlags, VkExternalMemoryHandleTypeFlagsNV, [*c]VkExternalImageFormatPropertiesNV) callconv(.C) VkResult;
pub extern fn vkGetPhysicalDeviceExternalImageFormatPropertiesNV(physicalDevice: VkPhysicalDevice, format: VkFormat, @"type": VkImageType, tiling: VkImageTiling, usage: VkImageUsageFlags, flags: VkImageCreateFlags, externalHandleType: VkExternalMemoryHandleTypeFlagsNV, pExternalImageFormatProperties: [*c]VkExternalImageFormatPropertiesNV) VkResult;
pub const struct_VkExternalMemoryImageCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    handleTypes: VkExternalMemoryHandleTypeFlagsNV = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlagsNV),
};
pub const VkExternalMemoryImageCreateInfoNV = struct_VkExternalMemoryImageCreateInfoNV;
pub const struct_VkExportMemoryAllocateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    handleTypes: VkExternalMemoryHandleTypeFlagsNV = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlagsNV),
};
pub const VkExportMemoryAllocateInfoNV = struct_VkExportMemoryAllocateInfoNV;
pub const VK_VALIDATION_CHECK_ALL_EXT: c_int = 0;
pub const VK_VALIDATION_CHECK_SHADERS_EXT: c_int = 1;
pub const VK_VALIDATION_CHECK_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkValidationCheckEXT = c_uint;
pub const VkValidationCheckEXT = enum_VkValidationCheckEXT;
pub const struct_VkValidationFlagsEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    disabledValidationCheckCount: u32 = @import("std").mem.zeroes(u32),
    pDisabledValidationChecks: [*c]const VkValidationCheckEXT = @import("std").mem.zeroes([*c]const VkValidationCheckEXT),
};
pub const VkValidationFlagsEXT = struct_VkValidationFlagsEXT;
pub const VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT = VkPhysicalDeviceTextureCompressionASTCHDRFeatures;
pub const struct_VkImageViewASTCDecodeModeEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    decodeMode: VkFormat = @import("std").mem.zeroes(VkFormat),
};
pub const VkImageViewASTCDecodeModeEXT = struct_VkImageViewASTCDecodeModeEXT;
pub const struct_VkPhysicalDeviceASTCDecodeFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    decodeModeSharedExponent: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceASTCDecodeFeaturesEXT = struct_VkPhysicalDeviceASTCDecodeFeaturesEXT;
pub const VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT_EXT: c_int = 0;
pub const VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED_EXT: c_int = 1;
pub const VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_EXT: c_int = 2;
pub const VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2_EXT: c_int = 3;
pub const VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkPipelineRobustnessBufferBehaviorEXT = c_uint;
pub const VkPipelineRobustnessBufferBehaviorEXT = enum_VkPipelineRobustnessBufferBehaviorEXT;
pub const VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT_EXT: c_int = 0;
pub const VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED_EXT: c_int = 1;
pub const VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_EXT: c_int = 2;
pub const VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2_EXT: c_int = 3;
pub const VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkPipelineRobustnessImageBehaviorEXT = c_uint;
pub const VkPipelineRobustnessImageBehaviorEXT = enum_VkPipelineRobustnessImageBehaviorEXT;
pub const struct_VkPhysicalDevicePipelineRobustnessFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pipelineRobustness: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevicePipelineRobustnessFeaturesEXT = struct_VkPhysicalDevicePipelineRobustnessFeaturesEXT;
pub const struct_VkPhysicalDevicePipelineRobustnessPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    defaultRobustnessStorageBuffers: VkPipelineRobustnessBufferBehaviorEXT = @import("std").mem.zeroes(VkPipelineRobustnessBufferBehaviorEXT),
    defaultRobustnessUniformBuffers: VkPipelineRobustnessBufferBehaviorEXT = @import("std").mem.zeroes(VkPipelineRobustnessBufferBehaviorEXT),
    defaultRobustnessVertexInputs: VkPipelineRobustnessBufferBehaviorEXT = @import("std").mem.zeroes(VkPipelineRobustnessBufferBehaviorEXT),
    defaultRobustnessImages: VkPipelineRobustnessImageBehaviorEXT = @import("std").mem.zeroes(VkPipelineRobustnessImageBehaviorEXT),
};
pub const VkPhysicalDevicePipelineRobustnessPropertiesEXT = struct_VkPhysicalDevicePipelineRobustnessPropertiesEXT;
pub const struct_VkPipelineRobustnessCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    storageBuffers: VkPipelineRobustnessBufferBehaviorEXT = @import("std").mem.zeroes(VkPipelineRobustnessBufferBehaviorEXT),
    uniformBuffers: VkPipelineRobustnessBufferBehaviorEXT = @import("std").mem.zeroes(VkPipelineRobustnessBufferBehaviorEXT),
    vertexInputs: VkPipelineRobustnessBufferBehaviorEXT = @import("std").mem.zeroes(VkPipelineRobustnessBufferBehaviorEXT),
    images: VkPipelineRobustnessImageBehaviorEXT = @import("std").mem.zeroes(VkPipelineRobustnessImageBehaviorEXT),
};
pub const VkPipelineRobustnessCreateInfoEXT = struct_VkPipelineRobustnessCreateInfoEXT;
pub const VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT: c_int = 1;
pub const VK_CONDITIONAL_RENDERING_FLAG_BITS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkConditionalRenderingFlagBitsEXT = c_uint;
pub const VkConditionalRenderingFlagBitsEXT = enum_VkConditionalRenderingFlagBitsEXT;
pub const VkConditionalRenderingFlagsEXT = VkFlags;
pub const struct_VkConditionalRenderingBeginInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    offset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    flags: VkConditionalRenderingFlagsEXT = @import("std").mem.zeroes(VkConditionalRenderingFlagsEXT),
};
pub const VkConditionalRenderingBeginInfoEXT = struct_VkConditionalRenderingBeginInfoEXT;
pub const struct_VkPhysicalDeviceConditionalRenderingFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    conditionalRendering: VkBool32 = @import("std").mem.zeroes(VkBool32),
    inheritedConditionalRendering: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceConditionalRenderingFeaturesEXT = struct_VkPhysicalDeviceConditionalRenderingFeaturesEXT;
pub const struct_VkCommandBufferInheritanceConditionalRenderingInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    conditionalRenderingEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkCommandBufferInheritanceConditionalRenderingInfoEXT = struct_VkCommandBufferInheritanceConditionalRenderingInfoEXT;
pub const PFN_vkCmdBeginConditionalRenderingEXT = ?*const fn (VkCommandBuffer, [*c]const VkConditionalRenderingBeginInfoEXT) callconv(.C) void;
pub const PFN_vkCmdEndConditionalRenderingEXT = ?*const fn (VkCommandBuffer) callconv(.C) void;
pub extern fn vkCmdBeginConditionalRenderingEXT(commandBuffer: VkCommandBuffer, pConditionalRenderingBegin: [*c]const VkConditionalRenderingBeginInfoEXT) void;
pub extern fn vkCmdEndConditionalRenderingEXT(commandBuffer: VkCommandBuffer) void;
pub const struct_VkViewportWScalingNV = extern struct {
    xcoeff: f32 = @import("std").mem.zeroes(f32),
    ycoeff: f32 = @import("std").mem.zeroes(f32),
};
pub const VkViewportWScalingNV = struct_VkViewportWScalingNV;
pub const struct_VkPipelineViewportWScalingStateCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    viewportWScalingEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    viewportCount: u32 = @import("std").mem.zeroes(u32),
    pViewportWScalings: [*c]const VkViewportWScalingNV = @import("std").mem.zeroes([*c]const VkViewportWScalingNV),
};
pub const VkPipelineViewportWScalingStateCreateInfoNV = struct_VkPipelineViewportWScalingStateCreateInfoNV;
pub const PFN_vkCmdSetViewportWScalingNV = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkViewportWScalingNV) callconv(.C) void;
pub extern fn vkCmdSetViewportWScalingNV(commandBuffer: VkCommandBuffer, firstViewport: u32, viewportCount: u32, pViewportWScalings: [*c]const VkViewportWScalingNV) void;
pub const PFN_vkReleaseDisplayEXT = ?*const fn (VkPhysicalDevice, VkDisplayKHR) callconv(.C) VkResult;
pub extern fn vkReleaseDisplayEXT(physicalDevice: VkPhysicalDevice, display: VkDisplayKHR) VkResult;
pub const VK_SURFACE_COUNTER_VBLANK_BIT_EXT: c_int = 1;
pub const VK_SURFACE_COUNTER_VBLANK_EXT: c_int = 1;
pub const VK_SURFACE_COUNTER_FLAG_BITS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkSurfaceCounterFlagBitsEXT = c_uint;
pub const VkSurfaceCounterFlagBitsEXT = enum_VkSurfaceCounterFlagBitsEXT;
pub const VkSurfaceCounterFlagsEXT = VkFlags;
pub const struct_VkSurfaceCapabilities2EXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    minImageCount: u32 = @import("std").mem.zeroes(u32),
    maxImageCount: u32 = @import("std").mem.zeroes(u32),
    currentExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    minImageExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxImageExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxImageArrayLayers: u32 = @import("std").mem.zeroes(u32),
    supportedTransforms: VkSurfaceTransformFlagsKHR = @import("std").mem.zeroes(VkSurfaceTransformFlagsKHR),
    currentTransform: VkSurfaceTransformFlagBitsKHR = @import("std").mem.zeroes(VkSurfaceTransformFlagBitsKHR),
    supportedCompositeAlpha: VkCompositeAlphaFlagsKHR = @import("std").mem.zeroes(VkCompositeAlphaFlagsKHR),
    supportedUsageFlags: VkImageUsageFlags = @import("std").mem.zeroes(VkImageUsageFlags),
    supportedSurfaceCounters: VkSurfaceCounterFlagsEXT = @import("std").mem.zeroes(VkSurfaceCounterFlagsEXT),
};
pub const VkSurfaceCapabilities2EXT = struct_VkSurfaceCapabilities2EXT;
pub const PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT = ?*const fn (VkPhysicalDevice, VkSurfaceKHR, [*c]VkSurfaceCapabilities2EXT) callconv(.C) VkResult;
pub extern fn vkGetPhysicalDeviceSurfaceCapabilities2EXT(physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pSurfaceCapabilities: [*c]VkSurfaceCapabilities2EXT) VkResult;
pub const VK_DISPLAY_POWER_STATE_OFF_EXT: c_int = 0;
pub const VK_DISPLAY_POWER_STATE_SUSPEND_EXT: c_int = 1;
pub const VK_DISPLAY_POWER_STATE_ON_EXT: c_int = 2;
pub const VK_DISPLAY_POWER_STATE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkDisplayPowerStateEXT = c_uint;
pub const VkDisplayPowerStateEXT = enum_VkDisplayPowerStateEXT;
pub const VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT: c_int = 0;
pub const VK_DEVICE_EVENT_TYPE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkDeviceEventTypeEXT = c_uint;
pub const VkDeviceEventTypeEXT = enum_VkDeviceEventTypeEXT;
pub const VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT: c_int = 0;
pub const VK_DISPLAY_EVENT_TYPE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkDisplayEventTypeEXT = c_uint;
pub const VkDisplayEventTypeEXT = enum_VkDisplayEventTypeEXT;
pub const struct_VkDisplayPowerInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    powerState: VkDisplayPowerStateEXT = @import("std").mem.zeroes(VkDisplayPowerStateEXT),
};
pub const VkDisplayPowerInfoEXT = struct_VkDisplayPowerInfoEXT;
pub const struct_VkDeviceEventInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    deviceEvent: VkDeviceEventTypeEXT = @import("std").mem.zeroes(VkDeviceEventTypeEXT),
};
pub const VkDeviceEventInfoEXT = struct_VkDeviceEventInfoEXT;
pub const struct_VkDisplayEventInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    displayEvent: VkDisplayEventTypeEXT = @import("std").mem.zeroes(VkDisplayEventTypeEXT),
};
pub const VkDisplayEventInfoEXT = struct_VkDisplayEventInfoEXT;
pub const struct_VkSwapchainCounterCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    surfaceCounters: VkSurfaceCounterFlagsEXT = @import("std").mem.zeroes(VkSurfaceCounterFlagsEXT),
};
pub const VkSwapchainCounterCreateInfoEXT = struct_VkSwapchainCounterCreateInfoEXT;
pub const PFN_vkDisplayPowerControlEXT = ?*const fn (VkDevice, VkDisplayKHR, [*c]const VkDisplayPowerInfoEXT) callconv(.C) VkResult;
pub const PFN_vkRegisterDeviceEventEXT = ?*const fn (VkDevice, [*c]const VkDeviceEventInfoEXT, [*c]const VkAllocationCallbacks, [*c]VkFence) callconv(.C) VkResult;
pub const PFN_vkRegisterDisplayEventEXT = ?*const fn (VkDevice, VkDisplayKHR, [*c]const VkDisplayEventInfoEXT, [*c]const VkAllocationCallbacks, [*c]VkFence) callconv(.C) VkResult;
pub const PFN_vkGetSwapchainCounterEXT = ?*const fn (VkDevice, VkSwapchainKHR, VkSurfaceCounterFlagBitsEXT, [*c]u64) callconv(.C) VkResult;
pub extern fn vkDisplayPowerControlEXT(device: VkDevice, display: VkDisplayKHR, pDisplayPowerInfo: [*c]const VkDisplayPowerInfoEXT) VkResult;
pub extern fn vkRegisterDeviceEventEXT(device: VkDevice, pDeviceEventInfo: [*c]const VkDeviceEventInfoEXT, pAllocator: [*c]const VkAllocationCallbacks, pFence: [*c]VkFence) VkResult;
pub extern fn vkRegisterDisplayEventEXT(device: VkDevice, display: VkDisplayKHR, pDisplayEventInfo: [*c]const VkDisplayEventInfoEXT, pAllocator: [*c]const VkAllocationCallbacks, pFence: [*c]VkFence) VkResult;
pub extern fn vkGetSwapchainCounterEXT(device: VkDevice, swapchain: VkSwapchainKHR, counter: VkSurfaceCounterFlagBitsEXT, pCounterValue: [*c]u64) VkResult;
pub const struct_VkRefreshCycleDurationGOOGLE = extern struct {
    refreshDuration: u64 = @import("std").mem.zeroes(u64),
};
pub const VkRefreshCycleDurationGOOGLE = struct_VkRefreshCycleDurationGOOGLE;
pub const struct_VkPastPresentationTimingGOOGLE = extern struct {
    presentID: u32 = @import("std").mem.zeroes(u32),
    desiredPresentTime: u64 = @import("std").mem.zeroes(u64),
    actualPresentTime: u64 = @import("std").mem.zeroes(u64),
    earliestPresentTime: u64 = @import("std").mem.zeroes(u64),
    presentMargin: u64 = @import("std").mem.zeroes(u64),
};
pub const VkPastPresentationTimingGOOGLE = struct_VkPastPresentationTimingGOOGLE;
pub const struct_VkPresentTimeGOOGLE = extern struct {
    presentID: u32 = @import("std").mem.zeroes(u32),
    desiredPresentTime: u64 = @import("std").mem.zeroes(u64),
};
pub const VkPresentTimeGOOGLE = struct_VkPresentTimeGOOGLE;
pub const struct_VkPresentTimesInfoGOOGLE = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    swapchainCount: u32 = @import("std").mem.zeroes(u32),
    pTimes: [*c]const VkPresentTimeGOOGLE = @import("std").mem.zeroes([*c]const VkPresentTimeGOOGLE),
};
pub const VkPresentTimesInfoGOOGLE = struct_VkPresentTimesInfoGOOGLE;
pub const PFN_vkGetRefreshCycleDurationGOOGLE = ?*const fn (VkDevice, VkSwapchainKHR, [*c]VkRefreshCycleDurationGOOGLE) callconv(.C) VkResult;
pub const PFN_vkGetPastPresentationTimingGOOGLE = ?*const fn (VkDevice, VkSwapchainKHR, [*c]u32, [*c]VkPastPresentationTimingGOOGLE) callconv(.C) VkResult;
pub extern fn vkGetRefreshCycleDurationGOOGLE(device: VkDevice, swapchain: VkSwapchainKHR, pDisplayTimingProperties: [*c]VkRefreshCycleDurationGOOGLE) VkResult;
pub extern fn vkGetPastPresentationTimingGOOGLE(device: VkDevice, swapchain: VkSwapchainKHR, pPresentationTimingCount: [*c]u32, pPresentationTimings: [*c]VkPastPresentationTimingGOOGLE) VkResult;
pub const struct_VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    perViewPositionAllComponents: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX = struct_VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX;
pub const VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV: c_int = 0;
pub const VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV: c_int = 1;
pub const VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV: c_int = 2;
pub const VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV: c_int = 3;
pub const VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV: c_int = 4;
pub const VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV: c_int = 5;
pub const VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV: c_int = 6;
pub const VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV: c_int = 7;
pub const VK_VIEWPORT_COORDINATE_SWIZZLE_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkViewportCoordinateSwizzleNV = c_uint;
pub const VkViewportCoordinateSwizzleNV = enum_VkViewportCoordinateSwizzleNV;
pub const VkPipelineViewportSwizzleStateCreateFlagsNV = VkFlags;
pub const struct_VkViewportSwizzleNV = extern struct {
    x: VkViewportCoordinateSwizzleNV = @import("std").mem.zeroes(VkViewportCoordinateSwizzleNV),
    y: VkViewportCoordinateSwizzleNV = @import("std").mem.zeroes(VkViewportCoordinateSwizzleNV),
    z: VkViewportCoordinateSwizzleNV = @import("std").mem.zeroes(VkViewportCoordinateSwizzleNV),
    w: VkViewportCoordinateSwizzleNV = @import("std").mem.zeroes(VkViewportCoordinateSwizzleNV),
};
pub const VkViewportSwizzleNV = struct_VkViewportSwizzleNV;
pub const struct_VkPipelineViewportSwizzleStateCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineViewportSwizzleStateCreateFlagsNV = @import("std").mem.zeroes(VkPipelineViewportSwizzleStateCreateFlagsNV),
    viewportCount: u32 = @import("std").mem.zeroes(u32),
    pViewportSwizzles: [*c]const VkViewportSwizzleNV = @import("std").mem.zeroes([*c]const VkViewportSwizzleNV),
};
pub const VkPipelineViewportSwizzleStateCreateInfoNV = struct_VkPipelineViewportSwizzleStateCreateInfoNV;
pub const VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT: c_int = 0;
pub const VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT: c_int = 1;
pub const VK_DISCARD_RECTANGLE_MODE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkDiscardRectangleModeEXT = c_uint;
pub const VkDiscardRectangleModeEXT = enum_VkDiscardRectangleModeEXT;
pub const VkPipelineDiscardRectangleStateCreateFlagsEXT = VkFlags;
pub const struct_VkPhysicalDeviceDiscardRectanglePropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxDiscardRectangles: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceDiscardRectanglePropertiesEXT = struct_VkPhysicalDeviceDiscardRectanglePropertiesEXT;
pub const struct_VkPipelineDiscardRectangleStateCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineDiscardRectangleStateCreateFlagsEXT = @import("std").mem.zeroes(VkPipelineDiscardRectangleStateCreateFlagsEXT),
    discardRectangleMode: VkDiscardRectangleModeEXT = @import("std").mem.zeroes(VkDiscardRectangleModeEXT),
    discardRectangleCount: u32 = @import("std").mem.zeroes(u32),
    pDiscardRectangles: [*c]const VkRect2D = @import("std").mem.zeroes([*c]const VkRect2D),
};
pub const VkPipelineDiscardRectangleStateCreateInfoEXT = struct_VkPipelineDiscardRectangleStateCreateInfoEXT;
pub const PFN_vkCmdSetDiscardRectangleEXT = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkRect2D) callconv(.C) void;
pub const PFN_vkCmdSetDiscardRectangleEnableEXT = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetDiscardRectangleModeEXT = ?*const fn (VkCommandBuffer, VkDiscardRectangleModeEXT) callconv(.C) void;
pub extern fn vkCmdSetDiscardRectangleEXT(commandBuffer: VkCommandBuffer, firstDiscardRectangle: u32, discardRectangleCount: u32, pDiscardRectangles: [*c]const VkRect2D) void;
pub extern fn vkCmdSetDiscardRectangleEnableEXT(commandBuffer: VkCommandBuffer, discardRectangleEnable: VkBool32) void;
pub extern fn vkCmdSetDiscardRectangleModeEXT(commandBuffer: VkCommandBuffer, discardRectangleMode: VkDiscardRectangleModeEXT) void;
pub const VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT: c_int = 0;
pub const VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT: c_int = 1;
pub const VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT: c_int = 2;
pub const VK_CONSERVATIVE_RASTERIZATION_MODE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkConservativeRasterizationModeEXT = c_uint;
pub const VkConservativeRasterizationModeEXT = enum_VkConservativeRasterizationModeEXT;
pub const VkPipelineRasterizationConservativeStateCreateFlagsEXT = VkFlags;
pub const struct_VkPhysicalDeviceConservativeRasterizationPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    primitiveOverestimationSize: f32 = @import("std").mem.zeroes(f32),
    maxExtraPrimitiveOverestimationSize: f32 = @import("std").mem.zeroes(f32),
    extraPrimitiveOverestimationSizeGranularity: f32 = @import("std").mem.zeroes(f32),
    primitiveUnderestimation: VkBool32 = @import("std").mem.zeroes(VkBool32),
    conservativePointAndLineRasterization: VkBool32 = @import("std").mem.zeroes(VkBool32),
    degenerateTrianglesRasterized: VkBool32 = @import("std").mem.zeroes(VkBool32),
    degenerateLinesRasterized: VkBool32 = @import("std").mem.zeroes(VkBool32),
    fullyCoveredFragmentShaderInputVariable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    conservativeRasterizationPostDepthCoverage: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceConservativeRasterizationPropertiesEXT = struct_VkPhysicalDeviceConservativeRasterizationPropertiesEXT;
pub const struct_VkPipelineRasterizationConservativeStateCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineRasterizationConservativeStateCreateFlagsEXT = @import("std").mem.zeroes(VkPipelineRasterizationConservativeStateCreateFlagsEXT),
    conservativeRasterizationMode: VkConservativeRasterizationModeEXT = @import("std").mem.zeroes(VkConservativeRasterizationModeEXT),
    extraPrimitiveOverestimationSize: f32 = @import("std").mem.zeroes(f32),
};
pub const VkPipelineRasterizationConservativeStateCreateInfoEXT = struct_VkPipelineRasterizationConservativeStateCreateInfoEXT;
pub const VkPipelineRasterizationDepthClipStateCreateFlagsEXT = VkFlags;
pub const struct_VkPhysicalDeviceDepthClipEnableFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    depthClipEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceDepthClipEnableFeaturesEXT = struct_VkPhysicalDeviceDepthClipEnableFeaturesEXT;
pub const struct_VkPipelineRasterizationDepthClipStateCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineRasterizationDepthClipStateCreateFlagsEXT = @import("std").mem.zeroes(VkPipelineRasterizationDepthClipStateCreateFlagsEXT),
    depthClipEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPipelineRasterizationDepthClipStateCreateInfoEXT = struct_VkPipelineRasterizationDepthClipStateCreateInfoEXT;
pub const struct_VkXYColorEXT = extern struct {
    x: f32 = @import("std").mem.zeroes(f32),
    y: f32 = @import("std").mem.zeroes(f32),
};
pub const VkXYColorEXT = struct_VkXYColorEXT;
pub const struct_VkHdrMetadataEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    displayPrimaryRed: VkXYColorEXT = @import("std").mem.zeroes(VkXYColorEXT),
    displayPrimaryGreen: VkXYColorEXT = @import("std").mem.zeroes(VkXYColorEXT),
    displayPrimaryBlue: VkXYColorEXT = @import("std").mem.zeroes(VkXYColorEXT),
    whitePoint: VkXYColorEXT = @import("std").mem.zeroes(VkXYColorEXT),
    maxLuminance: f32 = @import("std").mem.zeroes(f32),
    minLuminance: f32 = @import("std").mem.zeroes(f32),
    maxContentLightLevel: f32 = @import("std").mem.zeroes(f32),
    maxFrameAverageLightLevel: f32 = @import("std").mem.zeroes(f32),
};
pub const VkHdrMetadataEXT = struct_VkHdrMetadataEXT;
pub const PFN_vkSetHdrMetadataEXT = ?*const fn (VkDevice, u32, [*c]const VkSwapchainKHR, [*c]const VkHdrMetadataEXT) callconv(.C) void;
pub extern fn vkSetHdrMetadataEXT(device: VkDevice, swapchainCount: u32, pSwapchains: [*c]const VkSwapchainKHR, pMetadata: [*c]const VkHdrMetadataEXT) void;
pub const struct_VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    relaxedLineRasterization: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG = struct_VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG;
pub const struct_VkDebugUtilsMessengerEXT_T = opaque {};
pub const VkDebugUtilsMessengerEXT = ?*struct_VkDebugUtilsMessengerEXT_T;
pub const VkDebugUtilsMessengerCallbackDataFlagsEXT = VkFlags;
pub const VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT: c_int = 1;
pub const VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT: c_int = 16;
pub const VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT: c_int = 256;
pub const VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT: c_int = 4096;
pub const VK_DEBUG_UTILS_MESSAGE_SEVERITY_FLAG_BITS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkDebugUtilsMessageSeverityFlagBitsEXT = c_uint;
pub const VkDebugUtilsMessageSeverityFlagBitsEXT = enum_VkDebugUtilsMessageSeverityFlagBitsEXT;
pub const VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT: c_int = 1;
pub const VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT: c_int = 2;
pub const VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT: c_int = 4;
pub const VK_DEBUG_UTILS_MESSAGE_TYPE_DEVICE_ADDRESS_BINDING_BIT_EXT: c_int = 8;
pub const VK_DEBUG_UTILS_MESSAGE_TYPE_FLAG_BITS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkDebugUtilsMessageTypeFlagBitsEXT = c_uint;
pub const VkDebugUtilsMessageTypeFlagBitsEXT = enum_VkDebugUtilsMessageTypeFlagBitsEXT;
pub const VkDebugUtilsMessageTypeFlagsEXT = VkFlags;
pub const VkDebugUtilsMessageSeverityFlagsEXT = VkFlags;
pub const VkDebugUtilsMessengerCreateFlagsEXT = VkFlags;
pub const struct_VkDebugUtilsLabelEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pLabelName: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    color: [4]f32 = @import("std").mem.zeroes([4]f32),
};
pub const VkDebugUtilsLabelEXT = struct_VkDebugUtilsLabelEXT;
pub const struct_VkDebugUtilsObjectNameInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    objectType: VkObjectType = @import("std").mem.zeroes(VkObjectType),
    objectHandle: u64 = @import("std").mem.zeroes(u64),
    pObjectName: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
};
pub const VkDebugUtilsObjectNameInfoEXT = struct_VkDebugUtilsObjectNameInfoEXT;
pub const struct_VkDebugUtilsMessengerCallbackDataEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkDebugUtilsMessengerCallbackDataFlagsEXT = @import("std").mem.zeroes(VkDebugUtilsMessengerCallbackDataFlagsEXT),
    pMessageIdName: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    messageIdNumber: i32 = @import("std").mem.zeroes(i32),
    pMessage: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    queueLabelCount: u32 = @import("std").mem.zeroes(u32),
    pQueueLabels: [*c]const VkDebugUtilsLabelEXT = @import("std").mem.zeroes([*c]const VkDebugUtilsLabelEXT),
    cmdBufLabelCount: u32 = @import("std").mem.zeroes(u32),
    pCmdBufLabels: [*c]const VkDebugUtilsLabelEXT = @import("std").mem.zeroes([*c]const VkDebugUtilsLabelEXT),
    objectCount: u32 = @import("std").mem.zeroes(u32),
    pObjects: [*c]const VkDebugUtilsObjectNameInfoEXT = @import("std").mem.zeroes([*c]const VkDebugUtilsObjectNameInfoEXT),
};
pub const VkDebugUtilsMessengerCallbackDataEXT = struct_VkDebugUtilsMessengerCallbackDataEXT;
pub const PFN_vkDebugUtilsMessengerCallbackEXT = ?*const fn (VkDebugUtilsMessageSeverityFlagBitsEXT, VkDebugUtilsMessageTypeFlagsEXT, [*c]const VkDebugUtilsMessengerCallbackDataEXT, ?*anyopaque) callconv(.C) VkBool32;
pub const struct_VkDebugUtilsMessengerCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkDebugUtilsMessengerCreateFlagsEXT = @import("std").mem.zeroes(VkDebugUtilsMessengerCreateFlagsEXT),
    messageSeverity: VkDebugUtilsMessageSeverityFlagsEXT = @import("std").mem.zeroes(VkDebugUtilsMessageSeverityFlagsEXT),
    messageType: VkDebugUtilsMessageTypeFlagsEXT = @import("std").mem.zeroes(VkDebugUtilsMessageTypeFlagsEXT),
    pfnUserCallback: PFN_vkDebugUtilsMessengerCallbackEXT = @import("std").mem.zeroes(PFN_vkDebugUtilsMessengerCallbackEXT),
    pUserData: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const VkDebugUtilsMessengerCreateInfoEXT = struct_VkDebugUtilsMessengerCreateInfoEXT;
pub const struct_VkDebugUtilsObjectTagInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    objectType: VkObjectType = @import("std").mem.zeroes(VkObjectType),
    objectHandle: u64 = @import("std").mem.zeroes(u64),
    tagName: u64 = @import("std").mem.zeroes(u64),
    tagSize: usize = @import("std").mem.zeroes(usize),
    pTag: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const VkDebugUtilsObjectTagInfoEXT = struct_VkDebugUtilsObjectTagInfoEXT;
pub const PFN_vkSetDebugUtilsObjectNameEXT = ?*const fn (VkDevice, [*c]const VkDebugUtilsObjectNameInfoEXT) callconv(.C) VkResult;
pub const PFN_vkSetDebugUtilsObjectTagEXT = ?*const fn (VkDevice, [*c]const VkDebugUtilsObjectTagInfoEXT) callconv(.C) VkResult;
pub const PFN_vkQueueBeginDebugUtilsLabelEXT = ?*const fn (VkQueue, [*c]const VkDebugUtilsLabelEXT) callconv(.C) void;
pub const PFN_vkQueueEndDebugUtilsLabelEXT = ?*const fn (VkQueue) callconv(.C) void;
pub const PFN_vkQueueInsertDebugUtilsLabelEXT = ?*const fn (VkQueue, [*c]const VkDebugUtilsLabelEXT) callconv(.C) void;
pub const PFN_vkCmdBeginDebugUtilsLabelEXT = ?*const fn (VkCommandBuffer, [*c]const VkDebugUtilsLabelEXT) callconv(.C) void;
pub const PFN_vkCmdEndDebugUtilsLabelEXT = ?*const fn (VkCommandBuffer) callconv(.C) void;
pub const PFN_vkCmdInsertDebugUtilsLabelEXT = ?*const fn (VkCommandBuffer, [*c]const VkDebugUtilsLabelEXT) callconv(.C) void;
pub const PFN_vkCreateDebugUtilsMessengerEXT = ?*const fn (VkInstance, [*c]const VkDebugUtilsMessengerCreateInfoEXT, [*c]const VkAllocationCallbacks, [*c]VkDebugUtilsMessengerEXT) callconv(.C) VkResult;
pub const PFN_vkDestroyDebugUtilsMessengerEXT = ?*const fn (VkInstance, VkDebugUtilsMessengerEXT, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkSubmitDebugUtilsMessageEXT = ?*const fn (VkInstance, VkDebugUtilsMessageSeverityFlagBitsEXT, VkDebugUtilsMessageTypeFlagsEXT, [*c]const VkDebugUtilsMessengerCallbackDataEXT) callconv(.C) void;
pub extern fn vkSetDebugUtilsObjectNameEXT(device: VkDevice, pNameInfo: [*c]const VkDebugUtilsObjectNameInfoEXT) VkResult;
pub extern fn vkSetDebugUtilsObjectTagEXT(device: VkDevice, pTagInfo: [*c]const VkDebugUtilsObjectTagInfoEXT) VkResult;
pub extern fn vkQueueBeginDebugUtilsLabelEXT(queue: VkQueue, pLabelInfo: [*c]const VkDebugUtilsLabelEXT) void;
pub extern fn vkQueueEndDebugUtilsLabelEXT(queue: VkQueue) void;
pub extern fn vkQueueInsertDebugUtilsLabelEXT(queue: VkQueue, pLabelInfo: [*c]const VkDebugUtilsLabelEXT) void;
pub extern fn vkCmdBeginDebugUtilsLabelEXT(commandBuffer: VkCommandBuffer, pLabelInfo: [*c]const VkDebugUtilsLabelEXT) void;
pub extern fn vkCmdEndDebugUtilsLabelEXT(commandBuffer: VkCommandBuffer) void;
pub extern fn vkCmdInsertDebugUtilsLabelEXT(commandBuffer: VkCommandBuffer, pLabelInfo: [*c]const VkDebugUtilsLabelEXT) void;
pub extern fn vkCreateDebugUtilsMessengerEXT(instance: VkInstance, pCreateInfo: [*c]const VkDebugUtilsMessengerCreateInfoEXT, pAllocator: [*c]const VkAllocationCallbacks, pMessenger: [*c]VkDebugUtilsMessengerEXT) VkResult;
pub extern fn vkDestroyDebugUtilsMessengerEXT(instance: VkInstance, messenger: VkDebugUtilsMessengerEXT, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkSubmitDebugUtilsMessageEXT(instance: VkInstance, messageSeverity: VkDebugUtilsMessageSeverityFlagBitsEXT, messageTypes: VkDebugUtilsMessageTypeFlagsEXT, pCallbackData: [*c]const VkDebugUtilsMessengerCallbackDataEXT) void;
pub const VkSamplerReductionModeEXT = VkSamplerReductionMode;
pub const VkSamplerReductionModeCreateInfoEXT = VkSamplerReductionModeCreateInfo;
pub const VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT = VkPhysicalDeviceSamplerFilterMinmaxProperties;
pub const VkPhysicalDeviceInlineUniformBlockFeaturesEXT = VkPhysicalDeviceInlineUniformBlockFeatures;
pub const VkPhysicalDeviceInlineUniformBlockPropertiesEXT = VkPhysicalDeviceInlineUniformBlockProperties;
pub const VkWriteDescriptorSetInlineUniformBlockEXT = VkWriteDescriptorSetInlineUniformBlock;
pub const VkDescriptorPoolInlineUniformBlockCreateInfoEXT = VkDescriptorPoolInlineUniformBlockCreateInfo;
pub const struct_VkSampleLocationEXT = extern struct {
    x: f32 = @import("std").mem.zeroes(f32),
    y: f32 = @import("std").mem.zeroes(f32),
};
pub const VkSampleLocationEXT = struct_VkSampleLocationEXT;
pub const struct_VkSampleLocationsInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    sampleLocationsPerPixel: VkSampleCountFlagBits = @import("std").mem.zeroes(VkSampleCountFlagBits),
    sampleLocationGridSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    sampleLocationsCount: u32 = @import("std").mem.zeroes(u32),
    pSampleLocations: [*c]const VkSampleLocationEXT = @import("std").mem.zeroes([*c]const VkSampleLocationEXT),
};
pub const VkSampleLocationsInfoEXT = struct_VkSampleLocationsInfoEXT;
pub const struct_VkAttachmentSampleLocationsEXT = extern struct {
    attachmentIndex: u32 = @import("std").mem.zeroes(u32),
    sampleLocationsInfo: VkSampleLocationsInfoEXT = @import("std").mem.zeroes(VkSampleLocationsInfoEXT),
};
pub const VkAttachmentSampleLocationsEXT = struct_VkAttachmentSampleLocationsEXT;
pub const struct_VkSubpassSampleLocationsEXT = extern struct {
    subpassIndex: u32 = @import("std").mem.zeroes(u32),
    sampleLocationsInfo: VkSampleLocationsInfoEXT = @import("std").mem.zeroes(VkSampleLocationsInfoEXT),
};
pub const VkSubpassSampleLocationsEXT = struct_VkSubpassSampleLocationsEXT;
pub const struct_VkRenderPassSampleLocationsBeginInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    attachmentInitialSampleLocationsCount: u32 = @import("std").mem.zeroes(u32),
    pAttachmentInitialSampleLocations: [*c]const VkAttachmentSampleLocationsEXT = @import("std").mem.zeroes([*c]const VkAttachmentSampleLocationsEXT),
    postSubpassSampleLocationsCount: u32 = @import("std").mem.zeroes(u32),
    pPostSubpassSampleLocations: [*c]const VkSubpassSampleLocationsEXT = @import("std").mem.zeroes([*c]const VkSubpassSampleLocationsEXT),
};
pub const VkRenderPassSampleLocationsBeginInfoEXT = struct_VkRenderPassSampleLocationsBeginInfoEXT;
pub const struct_VkPipelineSampleLocationsStateCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    sampleLocationsEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sampleLocationsInfo: VkSampleLocationsInfoEXT = @import("std").mem.zeroes(VkSampleLocationsInfoEXT),
};
pub const VkPipelineSampleLocationsStateCreateInfoEXT = struct_VkPipelineSampleLocationsStateCreateInfoEXT;
pub const struct_VkPhysicalDeviceSampleLocationsPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    sampleLocationSampleCounts: VkSampleCountFlags = @import("std").mem.zeroes(VkSampleCountFlags),
    maxSampleLocationGridSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    sampleLocationCoordinateRange: [2]f32 = @import("std").mem.zeroes([2]f32),
    sampleLocationSubPixelBits: u32 = @import("std").mem.zeroes(u32),
    variableSampleLocations: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceSampleLocationsPropertiesEXT = struct_VkPhysicalDeviceSampleLocationsPropertiesEXT;
pub const struct_VkMultisamplePropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxSampleLocationGridSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
};
pub const VkMultisamplePropertiesEXT = struct_VkMultisamplePropertiesEXT;
pub const PFN_vkCmdSetSampleLocationsEXT = ?*const fn (VkCommandBuffer, [*c]const VkSampleLocationsInfoEXT) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT = ?*const fn (VkPhysicalDevice, VkSampleCountFlagBits, [*c]VkMultisamplePropertiesEXT) callconv(.C) void;
pub extern fn vkCmdSetSampleLocationsEXT(commandBuffer: VkCommandBuffer, pSampleLocationsInfo: [*c]const VkSampleLocationsInfoEXT) void;
pub extern fn vkGetPhysicalDeviceMultisamplePropertiesEXT(physicalDevice: VkPhysicalDevice, samples: VkSampleCountFlagBits, pMultisampleProperties: [*c]VkMultisamplePropertiesEXT) void;
pub const VK_BLEND_OVERLAP_UNCORRELATED_EXT: c_int = 0;
pub const VK_BLEND_OVERLAP_DISJOINT_EXT: c_int = 1;
pub const VK_BLEND_OVERLAP_CONJOINT_EXT: c_int = 2;
pub const VK_BLEND_OVERLAP_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkBlendOverlapEXT = c_uint;
pub const VkBlendOverlapEXT = enum_VkBlendOverlapEXT;
pub const struct_VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    advancedBlendCoherentOperations: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT = struct_VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT;
pub const struct_VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    advancedBlendMaxColorAttachments: u32 = @import("std").mem.zeroes(u32),
    advancedBlendIndependentBlend: VkBool32 = @import("std").mem.zeroes(VkBool32),
    advancedBlendNonPremultipliedSrcColor: VkBool32 = @import("std").mem.zeroes(VkBool32),
    advancedBlendNonPremultipliedDstColor: VkBool32 = @import("std").mem.zeroes(VkBool32),
    advancedBlendCorrelatedOverlap: VkBool32 = @import("std").mem.zeroes(VkBool32),
    advancedBlendAllOperations: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT = struct_VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT;
pub const struct_VkPipelineColorBlendAdvancedStateCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcPremultiplied: VkBool32 = @import("std").mem.zeroes(VkBool32),
    dstPremultiplied: VkBool32 = @import("std").mem.zeroes(VkBool32),
    blendOverlap: VkBlendOverlapEXT = @import("std").mem.zeroes(VkBlendOverlapEXT),
};
pub const VkPipelineColorBlendAdvancedStateCreateInfoEXT = struct_VkPipelineColorBlendAdvancedStateCreateInfoEXT;
pub const VkPipelineCoverageToColorStateCreateFlagsNV = VkFlags;
pub const struct_VkPipelineCoverageToColorStateCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineCoverageToColorStateCreateFlagsNV = @import("std").mem.zeroes(VkPipelineCoverageToColorStateCreateFlagsNV),
    coverageToColorEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    coverageToColorLocation: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPipelineCoverageToColorStateCreateInfoNV = struct_VkPipelineCoverageToColorStateCreateInfoNV;
pub const VK_COVERAGE_MODULATION_MODE_NONE_NV: c_int = 0;
pub const VK_COVERAGE_MODULATION_MODE_RGB_NV: c_int = 1;
pub const VK_COVERAGE_MODULATION_MODE_ALPHA_NV: c_int = 2;
pub const VK_COVERAGE_MODULATION_MODE_RGBA_NV: c_int = 3;
pub const VK_COVERAGE_MODULATION_MODE_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkCoverageModulationModeNV = c_uint;
pub const VkCoverageModulationModeNV = enum_VkCoverageModulationModeNV;
pub const VkPipelineCoverageModulationStateCreateFlagsNV = VkFlags;
pub const struct_VkPipelineCoverageModulationStateCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineCoverageModulationStateCreateFlagsNV = @import("std").mem.zeroes(VkPipelineCoverageModulationStateCreateFlagsNV),
    coverageModulationMode: VkCoverageModulationModeNV = @import("std").mem.zeroes(VkCoverageModulationModeNV),
    coverageModulationTableEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    coverageModulationTableCount: u32 = @import("std").mem.zeroes(u32),
    pCoverageModulationTable: [*c]const f32 = @import("std").mem.zeroes([*c]const f32),
};
pub const VkPipelineCoverageModulationStateCreateInfoNV = struct_VkPipelineCoverageModulationStateCreateInfoNV;
pub const struct_VkPhysicalDeviceShaderSMBuiltinsPropertiesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderSMCount: u32 = @import("std").mem.zeroes(u32),
    shaderWarpsPerSM: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceShaderSMBuiltinsPropertiesNV = struct_VkPhysicalDeviceShaderSMBuiltinsPropertiesNV;
pub const struct_VkPhysicalDeviceShaderSMBuiltinsFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderSMBuiltins: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderSMBuiltinsFeaturesNV = struct_VkPhysicalDeviceShaderSMBuiltinsFeaturesNV;
pub const struct_VkDrmFormatModifierPropertiesEXT = extern struct {
    drmFormatModifier: u64 = @import("std").mem.zeroes(u64),
    drmFormatModifierPlaneCount: u32 = @import("std").mem.zeroes(u32),
    drmFormatModifierTilingFeatures: VkFormatFeatureFlags = @import("std").mem.zeroes(VkFormatFeatureFlags),
};
pub const VkDrmFormatModifierPropertiesEXT = struct_VkDrmFormatModifierPropertiesEXT;
pub const struct_VkDrmFormatModifierPropertiesListEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    drmFormatModifierCount: u32 = @import("std").mem.zeroes(u32),
    pDrmFormatModifierProperties: [*c]VkDrmFormatModifierPropertiesEXT = @import("std").mem.zeroes([*c]VkDrmFormatModifierPropertiesEXT),
};
pub const VkDrmFormatModifierPropertiesListEXT = struct_VkDrmFormatModifierPropertiesListEXT;
pub const struct_VkPhysicalDeviceImageDrmFormatModifierInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    drmFormatModifier: u64 = @import("std").mem.zeroes(u64),
    sharingMode: VkSharingMode = @import("std").mem.zeroes(VkSharingMode),
    queueFamilyIndexCount: u32 = @import("std").mem.zeroes(u32),
    pQueueFamilyIndices: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkPhysicalDeviceImageDrmFormatModifierInfoEXT = struct_VkPhysicalDeviceImageDrmFormatModifierInfoEXT;
pub const struct_VkImageDrmFormatModifierListCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    drmFormatModifierCount: u32 = @import("std").mem.zeroes(u32),
    pDrmFormatModifiers: [*c]const u64 = @import("std").mem.zeroes([*c]const u64),
};
pub const VkImageDrmFormatModifierListCreateInfoEXT = struct_VkImageDrmFormatModifierListCreateInfoEXT;
pub const struct_VkImageDrmFormatModifierExplicitCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    drmFormatModifier: u64 = @import("std").mem.zeroes(u64),
    drmFormatModifierPlaneCount: u32 = @import("std").mem.zeroes(u32),
    pPlaneLayouts: [*c]const VkSubresourceLayout = @import("std").mem.zeroes([*c]const VkSubresourceLayout),
};
pub const VkImageDrmFormatModifierExplicitCreateInfoEXT = struct_VkImageDrmFormatModifierExplicitCreateInfoEXT;
pub const struct_VkImageDrmFormatModifierPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    drmFormatModifier: u64 = @import("std").mem.zeroes(u64),
};
pub const VkImageDrmFormatModifierPropertiesEXT = struct_VkImageDrmFormatModifierPropertiesEXT;
pub const struct_VkDrmFormatModifierProperties2EXT = extern struct {
    drmFormatModifier: u64 = @import("std").mem.zeroes(u64),
    drmFormatModifierPlaneCount: u32 = @import("std").mem.zeroes(u32),
    drmFormatModifierTilingFeatures: VkFormatFeatureFlags2 = @import("std").mem.zeroes(VkFormatFeatureFlags2),
};
pub const VkDrmFormatModifierProperties2EXT = struct_VkDrmFormatModifierProperties2EXT;
pub const struct_VkDrmFormatModifierPropertiesList2EXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    drmFormatModifierCount: u32 = @import("std").mem.zeroes(u32),
    pDrmFormatModifierProperties: [*c]VkDrmFormatModifierProperties2EXT = @import("std").mem.zeroes([*c]VkDrmFormatModifierProperties2EXT),
};
pub const VkDrmFormatModifierPropertiesList2EXT = struct_VkDrmFormatModifierPropertiesList2EXT;
pub const PFN_vkGetImageDrmFormatModifierPropertiesEXT = ?*const fn (VkDevice, VkImage, [*c]VkImageDrmFormatModifierPropertiesEXT) callconv(.C) VkResult;
pub extern fn vkGetImageDrmFormatModifierPropertiesEXT(device: VkDevice, image: VkImage, pProperties: [*c]VkImageDrmFormatModifierPropertiesEXT) VkResult;
pub const struct_VkValidationCacheEXT_T = opaque {};
pub const VkValidationCacheEXT = ?*struct_VkValidationCacheEXT_T;
pub const VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT: c_int = 1;
pub const VK_VALIDATION_CACHE_HEADER_VERSION_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkValidationCacheHeaderVersionEXT = c_uint;
pub const VkValidationCacheHeaderVersionEXT = enum_VkValidationCacheHeaderVersionEXT;
pub const VkValidationCacheCreateFlagsEXT = VkFlags;
pub const struct_VkValidationCacheCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkValidationCacheCreateFlagsEXT = @import("std").mem.zeroes(VkValidationCacheCreateFlagsEXT),
    initialDataSize: usize = @import("std").mem.zeroes(usize),
    pInitialData: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const VkValidationCacheCreateInfoEXT = struct_VkValidationCacheCreateInfoEXT;
pub const struct_VkShaderModuleValidationCacheCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    validationCache: VkValidationCacheEXT = @import("std").mem.zeroes(VkValidationCacheEXT),
};
pub const VkShaderModuleValidationCacheCreateInfoEXT = struct_VkShaderModuleValidationCacheCreateInfoEXT;
pub const PFN_vkCreateValidationCacheEXT = ?*const fn (VkDevice, [*c]const VkValidationCacheCreateInfoEXT, [*c]const VkAllocationCallbacks, [*c]VkValidationCacheEXT) callconv(.C) VkResult;
pub const PFN_vkDestroyValidationCacheEXT = ?*const fn (VkDevice, VkValidationCacheEXT, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkMergeValidationCachesEXT = ?*const fn (VkDevice, VkValidationCacheEXT, u32, [*c]const VkValidationCacheEXT) callconv(.C) VkResult;
pub const PFN_vkGetValidationCacheDataEXT = ?*const fn (VkDevice, VkValidationCacheEXT, [*c]usize, ?*anyopaque) callconv(.C) VkResult;
pub extern fn vkCreateValidationCacheEXT(device: VkDevice, pCreateInfo: [*c]const VkValidationCacheCreateInfoEXT, pAllocator: [*c]const VkAllocationCallbacks, pValidationCache: [*c]VkValidationCacheEXT) VkResult;
pub extern fn vkDestroyValidationCacheEXT(device: VkDevice, validationCache: VkValidationCacheEXT, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkMergeValidationCachesEXT(device: VkDevice, dstCache: VkValidationCacheEXT, srcCacheCount: u32, pSrcCaches: [*c]const VkValidationCacheEXT) VkResult;
pub extern fn vkGetValidationCacheDataEXT(device: VkDevice, validationCache: VkValidationCacheEXT, pDataSize: [*c]usize, pData: ?*anyopaque) VkResult;
pub const VkDescriptorBindingFlagBitsEXT = VkDescriptorBindingFlagBits;
pub const VkDescriptorBindingFlagsEXT = VkDescriptorBindingFlags;
pub const VkDescriptorSetLayoutBindingFlagsCreateInfoEXT = VkDescriptorSetLayoutBindingFlagsCreateInfo;
pub const VkPhysicalDeviceDescriptorIndexingFeaturesEXT = VkPhysicalDeviceDescriptorIndexingFeatures;
pub const VkPhysicalDeviceDescriptorIndexingPropertiesEXT = VkPhysicalDeviceDescriptorIndexingProperties;
pub const VkDescriptorSetVariableDescriptorCountAllocateInfoEXT = VkDescriptorSetVariableDescriptorCountAllocateInfo;
pub const VkDescriptorSetVariableDescriptorCountLayoutSupportEXT = VkDescriptorSetVariableDescriptorCountLayoutSupport;
pub const VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV: c_int = 0;
pub const VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV: c_int = 1;
pub const VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV: c_int = 2;
pub const VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV: c_int = 3;
pub const VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV: c_int = 4;
pub const VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV: c_int = 5;
pub const VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV: c_int = 6;
pub const VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV: c_int = 7;
pub const VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV: c_int = 8;
pub const VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV: c_int = 9;
pub const VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV: c_int = 10;
pub const VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV: c_int = 11;
pub const VK_SHADING_RATE_PALETTE_ENTRY_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkShadingRatePaletteEntryNV = c_uint;
pub const VkShadingRatePaletteEntryNV = enum_VkShadingRatePaletteEntryNV;
pub const VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV: c_int = 0;
pub const VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV: c_int = 1;
pub const VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV: c_int = 2;
pub const VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV: c_int = 3;
pub const VK_COARSE_SAMPLE_ORDER_TYPE_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkCoarseSampleOrderTypeNV = c_uint;
pub const VkCoarseSampleOrderTypeNV = enum_VkCoarseSampleOrderTypeNV;
pub const struct_VkShadingRatePaletteNV = extern struct {
    shadingRatePaletteEntryCount: u32 = @import("std").mem.zeroes(u32),
    pShadingRatePaletteEntries: [*c]const VkShadingRatePaletteEntryNV = @import("std").mem.zeroes([*c]const VkShadingRatePaletteEntryNV),
};
pub const VkShadingRatePaletteNV = struct_VkShadingRatePaletteNV;
pub const struct_VkPipelineViewportShadingRateImageStateCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    shadingRateImageEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    viewportCount: u32 = @import("std").mem.zeroes(u32),
    pShadingRatePalettes: [*c]const VkShadingRatePaletteNV = @import("std").mem.zeroes([*c]const VkShadingRatePaletteNV),
};
pub const VkPipelineViewportShadingRateImageStateCreateInfoNV = struct_VkPipelineViewportShadingRateImageStateCreateInfoNV;
pub const struct_VkPhysicalDeviceShadingRateImageFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shadingRateImage: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shadingRateCoarseSampleOrder: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShadingRateImageFeaturesNV = struct_VkPhysicalDeviceShadingRateImageFeaturesNV;
pub const struct_VkPhysicalDeviceShadingRateImagePropertiesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shadingRateTexelSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    shadingRatePaletteSize: u32 = @import("std").mem.zeroes(u32),
    shadingRateMaxCoarseSamples: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceShadingRateImagePropertiesNV = struct_VkPhysicalDeviceShadingRateImagePropertiesNV;
pub const struct_VkCoarseSampleLocationNV = extern struct {
    pixelX: u32 = @import("std").mem.zeroes(u32),
    pixelY: u32 = @import("std").mem.zeroes(u32),
    sample: u32 = @import("std").mem.zeroes(u32),
};
pub const VkCoarseSampleLocationNV = struct_VkCoarseSampleLocationNV;
pub const struct_VkCoarseSampleOrderCustomNV = extern struct {
    shadingRate: VkShadingRatePaletteEntryNV = @import("std").mem.zeroes(VkShadingRatePaletteEntryNV),
    sampleCount: u32 = @import("std").mem.zeroes(u32),
    sampleLocationCount: u32 = @import("std").mem.zeroes(u32),
    pSampleLocations: [*c]const VkCoarseSampleLocationNV = @import("std").mem.zeroes([*c]const VkCoarseSampleLocationNV),
};
pub const VkCoarseSampleOrderCustomNV = struct_VkCoarseSampleOrderCustomNV;
pub const struct_VkPipelineViewportCoarseSampleOrderStateCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    sampleOrderType: VkCoarseSampleOrderTypeNV = @import("std").mem.zeroes(VkCoarseSampleOrderTypeNV),
    customSampleOrderCount: u32 = @import("std").mem.zeroes(u32),
    pCustomSampleOrders: [*c]const VkCoarseSampleOrderCustomNV = @import("std").mem.zeroes([*c]const VkCoarseSampleOrderCustomNV),
};
pub const VkPipelineViewportCoarseSampleOrderStateCreateInfoNV = struct_VkPipelineViewportCoarseSampleOrderStateCreateInfoNV;
pub const PFN_vkCmdBindShadingRateImageNV = ?*const fn (VkCommandBuffer, VkImageView, VkImageLayout) callconv(.C) void;
pub const PFN_vkCmdSetViewportShadingRatePaletteNV = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkShadingRatePaletteNV) callconv(.C) void;
pub const PFN_vkCmdSetCoarseSampleOrderNV = ?*const fn (VkCommandBuffer, VkCoarseSampleOrderTypeNV, u32, [*c]const VkCoarseSampleOrderCustomNV) callconv(.C) void;
pub extern fn vkCmdBindShadingRateImageNV(commandBuffer: VkCommandBuffer, imageView: VkImageView, imageLayout: VkImageLayout) void;
pub extern fn vkCmdSetViewportShadingRatePaletteNV(commandBuffer: VkCommandBuffer, firstViewport: u32, viewportCount: u32, pShadingRatePalettes: [*c]const VkShadingRatePaletteNV) void;
pub extern fn vkCmdSetCoarseSampleOrderNV(commandBuffer: VkCommandBuffer, sampleOrderType: VkCoarseSampleOrderTypeNV, customSampleOrderCount: u32, pCustomSampleOrders: [*c]const VkCoarseSampleOrderCustomNV) void;
pub const struct_VkAccelerationStructureNV_T = opaque {};
pub const VkAccelerationStructureNV = ?*struct_VkAccelerationStructureNV_T;
pub const VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR: c_int = 0;
pub const VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR: c_int = 1;
pub const VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR: c_int = 2;
pub const VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV: c_int = 0;
pub const VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV: c_int = 1;
pub const VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV: c_int = 2;
pub const VK_RAY_TRACING_SHADER_GROUP_TYPE_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkRayTracingShaderGroupTypeKHR = c_uint;
pub const VkRayTracingShaderGroupTypeKHR = enum_VkRayTracingShaderGroupTypeKHR;
pub const VkRayTracingShaderGroupTypeNV = VkRayTracingShaderGroupTypeKHR;
pub const VK_GEOMETRY_TYPE_TRIANGLES_KHR: c_int = 0;
pub const VK_GEOMETRY_TYPE_AABBS_KHR: c_int = 1;
pub const VK_GEOMETRY_TYPE_INSTANCES_KHR: c_int = 2;
pub const VK_GEOMETRY_TYPE_TRIANGLES_NV: c_int = 0;
pub const VK_GEOMETRY_TYPE_AABBS_NV: c_int = 1;
pub const VK_GEOMETRY_TYPE_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkGeometryTypeKHR = c_uint;
pub const VkGeometryTypeKHR = enum_VkGeometryTypeKHR;
pub const VkGeometryTypeNV = VkGeometryTypeKHR;
pub const VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR: c_int = 0;
pub const VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR: c_int = 1;
pub const VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR: c_int = 2;
pub const VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV: c_int = 0;
pub const VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV: c_int = 1;
pub const VK_ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkAccelerationStructureTypeKHR = c_uint;
pub const VkAccelerationStructureTypeKHR = enum_VkAccelerationStructureTypeKHR;
pub const VkAccelerationStructureTypeNV = VkAccelerationStructureTypeKHR;
pub const VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR: c_int = 0;
pub const VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR: c_int = 1;
pub const VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR: c_int = 2;
pub const VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR: c_int = 3;
pub const VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV: c_int = 0;
pub const VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV: c_int = 1;
pub const VK_COPY_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkCopyAccelerationStructureModeKHR = c_uint;
pub const VkCopyAccelerationStructureModeKHR = enum_VkCopyAccelerationStructureModeKHR;
pub const VkCopyAccelerationStructureModeNV = VkCopyAccelerationStructureModeKHR;
pub const VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV: c_int = 0;
pub const VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV: c_int = 1;
pub const VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV: c_int = 2;
pub const VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkAccelerationStructureMemoryRequirementsTypeNV = c_uint;
pub const VkAccelerationStructureMemoryRequirementsTypeNV = enum_VkAccelerationStructureMemoryRequirementsTypeNV;
pub const VK_GEOMETRY_OPAQUE_BIT_KHR: c_int = 1;
pub const VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR: c_int = 2;
pub const VK_GEOMETRY_OPAQUE_BIT_NV: c_int = 1;
pub const VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV: c_int = 2;
pub const VK_GEOMETRY_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkGeometryFlagBitsKHR = c_uint;
pub const VkGeometryFlagBitsKHR = enum_VkGeometryFlagBitsKHR;
pub const VkGeometryFlagsKHR = VkFlags;
pub const VkGeometryFlagsNV = VkGeometryFlagsKHR;
pub const VkGeometryFlagBitsNV = VkGeometryFlagBitsKHR;
pub const VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR: c_int = 1;
pub const VK_GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR: c_int = 2;
pub const VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR: c_int = 4;
pub const VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR: c_int = 8;
pub const VK_GEOMETRY_INSTANCE_FORCE_OPACITY_MICROMAP_2_STATE_EXT: c_int = 16;
pub const VK_GEOMETRY_INSTANCE_DISABLE_OPACITY_MICROMAPS_EXT: c_int = 32;
pub const VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR: c_int = 2;
pub const VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV: c_int = 1;
pub const VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV: c_int = 2;
pub const VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV: c_int = 4;
pub const VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV: c_int = 8;
pub const VK_GEOMETRY_INSTANCE_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkGeometryInstanceFlagBitsKHR = c_uint;
pub const VkGeometryInstanceFlagBitsKHR = enum_VkGeometryInstanceFlagBitsKHR;
pub const VkGeometryInstanceFlagsKHR = VkFlags;
pub const VkGeometryInstanceFlagsNV = VkGeometryInstanceFlagsKHR;
pub const VkGeometryInstanceFlagBitsNV = VkGeometryInstanceFlagBitsKHR;
pub const VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR: c_int = 1;
pub const VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR: c_int = 2;
pub const VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR: c_int = 4;
pub const VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR: c_int = 8;
pub const VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR: c_int = 16;
pub const VK_BUILD_ACCELERATION_STRUCTURE_MOTION_BIT_NV: c_int = 32;
pub const VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_UPDATE_EXT: c_int = 64;
pub const VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DISABLE_OPACITY_MICROMAPS_EXT: c_int = 128;
pub const VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_DATA_UPDATE_EXT: c_int = 256;
pub const VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DATA_ACCESS_KHR: c_int = 2048;
pub const VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV: c_int = 1;
pub const VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV: c_int = 2;
pub const VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV: c_int = 4;
pub const VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV: c_int = 8;
pub const VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV: c_int = 16;
pub const VK_BUILD_ACCELERATION_STRUCTURE_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkBuildAccelerationStructureFlagBitsKHR = c_uint;
pub const VkBuildAccelerationStructureFlagBitsKHR = enum_VkBuildAccelerationStructureFlagBitsKHR;
pub const VkBuildAccelerationStructureFlagsKHR = VkFlags;
pub const VkBuildAccelerationStructureFlagsNV = VkBuildAccelerationStructureFlagsKHR;
pub const VkBuildAccelerationStructureFlagBitsNV = VkBuildAccelerationStructureFlagBitsKHR;
pub const struct_VkRayTracingShaderGroupCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    type: VkRayTracingShaderGroupTypeKHR = @import("std").mem.zeroes(VkRayTracingShaderGroupTypeKHR),
    generalShader: u32 = @import("std").mem.zeroes(u32),
    closestHitShader: u32 = @import("std").mem.zeroes(u32),
    anyHitShader: u32 = @import("std").mem.zeroes(u32),
    intersectionShader: u32 = @import("std").mem.zeroes(u32),
};
pub const VkRayTracingShaderGroupCreateInfoNV = struct_VkRayTracingShaderGroupCreateInfoNV;
pub const struct_VkRayTracingPipelineCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineCreateFlags = @import("std").mem.zeroes(VkPipelineCreateFlags),
    stageCount: u32 = @import("std").mem.zeroes(u32),
    pStages: [*c]const VkPipelineShaderStageCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineShaderStageCreateInfo),
    groupCount: u32 = @import("std").mem.zeroes(u32),
    pGroups: [*c]const VkRayTracingShaderGroupCreateInfoNV = @import("std").mem.zeroes([*c]const VkRayTracingShaderGroupCreateInfoNV),
    maxRecursionDepth: u32 = @import("std").mem.zeroes(u32),
    layout: VkPipelineLayout = @import("std").mem.zeroes(VkPipelineLayout),
    basePipelineHandle: VkPipeline = @import("std").mem.zeroes(VkPipeline),
    basePipelineIndex: i32 = @import("std").mem.zeroes(i32),
};
pub const VkRayTracingPipelineCreateInfoNV = struct_VkRayTracingPipelineCreateInfoNV;
pub const struct_VkGeometryTrianglesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    vertexData: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    vertexOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    vertexCount: u32 = @import("std").mem.zeroes(u32),
    vertexStride: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    vertexFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
    indexData: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    indexOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    indexCount: u32 = @import("std").mem.zeroes(u32),
    indexType: VkIndexType = @import("std").mem.zeroes(VkIndexType),
    transformData: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    transformOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkGeometryTrianglesNV = struct_VkGeometryTrianglesNV;
pub const struct_VkGeometryAABBNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    aabbData: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    numAABBs: u32 = @import("std").mem.zeroes(u32),
    stride: u32 = @import("std").mem.zeroes(u32),
    offset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkGeometryAABBNV = struct_VkGeometryAABBNV;
pub const struct_VkGeometryDataNV = extern struct {
    triangles: VkGeometryTrianglesNV = @import("std").mem.zeroes(VkGeometryTrianglesNV),
    aabbs: VkGeometryAABBNV = @import("std").mem.zeroes(VkGeometryAABBNV),
};
pub const VkGeometryDataNV = struct_VkGeometryDataNV;
pub const struct_VkGeometryNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    geometryType: VkGeometryTypeKHR = @import("std").mem.zeroes(VkGeometryTypeKHR),
    geometry: VkGeometryDataNV = @import("std").mem.zeroes(VkGeometryDataNV),
    flags: VkGeometryFlagsKHR = @import("std").mem.zeroes(VkGeometryFlagsKHR),
};
pub const VkGeometryNV = struct_VkGeometryNV;
pub const struct_VkAccelerationStructureInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    type: VkAccelerationStructureTypeNV = @import("std").mem.zeroes(VkAccelerationStructureTypeNV),
    flags: VkBuildAccelerationStructureFlagsNV = @import("std").mem.zeroes(VkBuildAccelerationStructureFlagsNV),
    instanceCount: u32 = @import("std").mem.zeroes(u32),
    geometryCount: u32 = @import("std").mem.zeroes(u32),
    pGeometries: [*c]const VkGeometryNV = @import("std").mem.zeroes([*c]const VkGeometryNV),
};
pub const VkAccelerationStructureInfoNV = struct_VkAccelerationStructureInfoNV;
pub const struct_VkAccelerationStructureCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    compactedSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    info: VkAccelerationStructureInfoNV = @import("std").mem.zeroes(VkAccelerationStructureInfoNV),
};
pub const VkAccelerationStructureCreateInfoNV = struct_VkAccelerationStructureCreateInfoNV;
pub const struct_VkBindAccelerationStructureMemoryInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    accelerationStructure: VkAccelerationStructureNV = @import("std").mem.zeroes(VkAccelerationStructureNV),
    memory: VkDeviceMemory = @import("std").mem.zeroes(VkDeviceMemory),
    memoryOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    deviceIndexCount: u32 = @import("std").mem.zeroes(u32),
    pDeviceIndices: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkBindAccelerationStructureMemoryInfoNV = struct_VkBindAccelerationStructureMemoryInfoNV;
pub const struct_VkWriteDescriptorSetAccelerationStructureNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    accelerationStructureCount: u32 = @import("std").mem.zeroes(u32),
    pAccelerationStructures: [*c]const VkAccelerationStructureNV = @import("std").mem.zeroes([*c]const VkAccelerationStructureNV),
};
pub const VkWriteDescriptorSetAccelerationStructureNV = struct_VkWriteDescriptorSetAccelerationStructureNV;
pub const struct_VkAccelerationStructureMemoryRequirementsInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    type: VkAccelerationStructureMemoryRequirementsTypeNV = @import("std").mem.zeroes(VkAccelerationStructureMemoryRequirementsTypeNV),
    accelerationStructure: VkAccelerationStructureNV = @import("std").mem.zeroes(VkAccelerationStructureNV),
};
pub const VkAccelerationStructureMemoryRequirementsInfoNV = struct_VkAccelerationStructureMemoryRequirementsInfoNV;
pub const struct_VkPhysicalDeviceRayTracingPropertiesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderGroupHandleSize: u32 = @import("std").mem.zeroes(u32),
    maxRecursionDepth: u32 = @import("std").mem.zeroes(u32),
    maxShaderGroupStride: u32 = @import("std").mem.zeroes(u32),
    shaderGroupBaseAlignment: u32 = @import("std").mem.zeroes(u32),
    maxGeometryCount: u64 = @import("std").mem.zeroes(u64),
    maxInstanceCount: u64 = @import("std").mem.zeroes(u64),
    maxTriangleCount: u64 = @import("std").mem.zeroes(u64),
    maxDescriptorSetAccelerationStructures: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceRayTracingPropertiesNV = struct_VkPhysicalDeviceRayTracingPropertiesNV;
pub const struct_VkTransformMatrixKHR = extern struct {
    matrix: [3][4]f32 = @import("std").mem.zeroes([3][4]f32),
};
pub const VkTransformMatrixKHR = struct_VkTransformMatrixKHR;
pub const VkTransformMatrixNV = VkTransformMatrixKHR;
pub const struct_VkAabbPositionsKHR = extern struct {
    minX: f32 = @import("std").mem.zeroes(f32),
    minY: f32 = @import("std").mem.zeroes(f32),
    minZ: f32 = @import("std").mem.zeroes(f32),
    maxX: f32 = @import("std").mem.zeroes(f32),
    maxY: f32 = @import("std").mem.zeroes(f32),
    maxZ: f32 = @import("std").mem.zeroes(f32),
};
pub const VkAabbPositionsKHR = struct_VkAabbPositionsKHR;
pub const VkAabbPositionsNV = VkAabbPositionsKHR;
// /usr/include/vulkan/vulkan_core.h:14070:35: warning: struct demoted to opaque type - has bitfield
pub const struct_VkAccelerationStructureInstanceKHR = opaque {};
pub const VkAccelerationStructureInstanceKHR = struct_VkAccelerationStructureInstanceKHR;
pub const VkAccelerationStructureInstanceNV = VkAccelerationStructureInstanceKHR;
pub const PFN_vkCreateAccelerationStructureNV = ?*const fn (VkDevice, [*c]const VkAccelerationStructureCreateInfoNV, [*c]const VkAllocationCallbacks, [*c]VkAccelerationStructureNV) callconv(.C) VkResult;
pub const PFN_vkDestroyAccelerationStructureNV = ?*const fn (VkDevice, VkAccelerationStructureNV, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkGetAccelerationStructureMemoryRequirementsNV = ?*const fn (VkDevice, [*c]const VkAccelerationStructureMemoryRequirementsInfoNV, [*c]VkMemoryRequirements2KHR) callconv(.C) void;
pub const PFN_vkBindAccelerationStructureMemoryNV = ?*const fn (VkDevice, u32, [*c]const VkBindAccelerationStructureMemoryInfoNV) callconv(.C) VkResult;
pub const PFN_vkCmdBuildAccelerationStructureNV = ?*const fn (VkCommandBuffer, [*c]const VkAccelerationStructureInfoNV, VkBuffer, VkDeviceSize, VkBool32, VkAccelerationStructureNV, VkAccelerationStructureNV, VkBuffer, VkDeviceSize) callconv(.C) void;
pub const PFN_vkCmdCopyAccelerationStructureNV = ?*const fn (VkCommandBuffer, VkAccelerationStructureNV, VkAccelerationStructureNV, VkCopyAccelerationStructureModeKHR) callconv(.C) void;
pub const PFN_vkCmdTraceRaysNV = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, VkDeviceSize, VkBuffer, VkDeviceSize, VkDeviceSize, VkBuffer, VkDeviceSize, VkDeviceSize, u32, u32, u32) callconv(.C) void;
pub const PFN_vkCreateRayTracingPipelinesNV = ?*const fn (VkDevice, VkPipelineCache, u32, [*c]const VkRayTracingPipelineCreateInfoNV, [*c]const VkAllocationCallbacks, [*c]VkPipeline) callconv(.C) VkResult;
pub const PFN_vkGetRayTracingShaderGroupHandlesKHR = ?*const fn (VkDevice, VkPipeline, u32, u32, usize, ?*anyopaque) callconv(.C) VkResult;
pub const PFN_vkGetRayTracingShaderGroupHandlesNV = ?*const fn (VkDevice, VkPipeline, u32, u32, usize, ?*anyopaque) callconv(.C) VkResult;
pub const PFN_vkGetAccelerationStructureHandleNV = ?*const fn (VkDevice, VkAccelerationStructureNV, usize, ?*anyopaque) callconv(.C) VkResult;
pub const PFN_vkCmdWriteAccelerationStructuresPropertiesNV = ?*const fn (VkCommandBuffer, u32, [*c]const VkAccelerationStructureNV, VkQueryType, VkQueryPool, u32) callconv(.C) void;
pub const PFN_vkCompileDeferredNV = ?*const fn (VkDevice, VkPipeline, u32) callconv(.C) VkResult;
pub extern fn vkCreateAccelerationStructureNV(device: VkDevice, pCreateInfo: [*c]const VkAccelerationStructureCreateInfoNV, pAllocator: [*c]const VkAllocationCallbacks, pAccelerationStructure: [*c]VkAccelerationStructureNV) VkResult;
pub extern fn vkDestroyAccelerationStructureNV(device: VkDevice, accelerationStructure: VkAccelerationStructureNV, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkGetAccelerationStructureMemoryRequirementsNV(device: VkDevice, pInfo: [*c]const VkAccelerationStructureMemoryRequirementsInfoNV, pMemoryRequirements: [*c]VkMemoryRequirements2KHR) void;
pub extern fn vkBindAccelerationStructureMemoryNV(device: VkDevice, bindInfoCount: u32, pBindInfos: [*c]const VkBindAccelerationStructureMemoryInfoNV) VkResult;
pub extern fn vkCmdBuildAccelerationStructureNV(commandBuffer: VkCommandBuffer, pInfo: [*c]const VkAccelerationStructureInfoNV, instanceData: VkBuffer, instanceOffset: VkDeviceSize, update: VkBool32, dst: VkAccelerationStructureNV, src: VkAccelerationStructureNV, scratch: VkBuffer, scratchOffset: VkDeviceSize) void;
pub extern fn vkCmdCopyAccelerationStructureNV(commandBuffer: VkCommandBuffer, dst: VkAccelerationStructureNV, src: VkAccelerationStructureNV, mode: VkCopyAccelerationStructureModeKHR) void;
pub extern fn vkCmdTraceRaysNV(commandBuffer: VkCommandBuffer, raygenShaderBindingTableBuffer: VkBuffer, raygenShaderBindingOffset: VkDeviceSize, missShaderBindingTableBuffer: VkBuffer, missShaderBindingOffset: VkDeviceSize, missShaderBindingStride: VkDeviceSize, hitShaderBindingTableBuffer: VkBuffer, hitShaderBindingOffset: VkDeviceSize, hitShaderBindingStride: VkDeviceSize, callableShaderBindingTableBuffer: VkBuffer, callableShaderBindingOffset: VkDeviceSize, callableShaderBindingStride: VkDeviceSize, width: u32, height: u32, depth: u32) void;
pub extern fn vkCreateRayTracingPipelinesNV(device: VkDevice, pipelineCache: VkPipelineCache, createInfoCount: u32, pCreateInfos: [*c]const VkRayTracingPipelineCreateInfoNV, pAllocator: [*c]const VkAllocationCallbacks, pPipelines: [*c]VkPipeline) VkResult;
pub extern fn vkGetRayTracingShaderGroupHandlesKHR(device: VkDevice, pipeline: VkPipeline, firstGroup: u32, groupCount: u32, dataSize: usize, pData: ?*anyopaque) VkResult;
pub extern fn vkGetRayTracingShaderGroupHandlesNV(device: VkDevice, pipeline: VkPipeline, firstGroup: u32, groupCount: u32, dataSize: usize, pData: ?*anyopaque) VkResult;
pub extern fn vkGetAccelerationStructureHandleNV(device: VkDevice, accelerationStructure: VkAccelerationStructureNV, dataSize: usize, pData: ?*anyopaque) VkResult;
pub extern fn vkCmdWriteAccelerationStructuresPropertiesNV(commandBuffer: VkCommandBuffer, accelerationStructureCount: u32, pAccelerationStructures: [*c]const VkAccelerationStructureNV, queryType: VkQueryType, queryPool: VkQueryPool, firstQuery: u32) void;
pub extern fn vkCompileDeferredNV(device: VkDevice, pipeline: VkPipeline, shader: u32) VkResult;
pub const struct_VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    representativeFragmentTest: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV = struct_VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV;
pub const struct_VkPipelineRepresentativeFragmentTestStateCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    representativeFragmentTestEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPipelineRepresentativeFragmentTestStateCreateInfoNV = struct_VkPipelineRepresentativeFragmentTestStateCreateInfoNV;
pub const struct_VkPhysicalDeviceImageViewImageFormatInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    imageViewType: VkImageViewType = @import("std").mem.zeroes(VkImageViewType),
};
pub const VkPhysicalDeviceImageViewImageFormatInfoEXT = struct_VkPhysicalDeviceImageViewImageFormatInfoEXT;
pub const struct_VkFilterCubicImageViewImageFormatPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    filterCubic: VkBool32 = @import("std").mem.zeroes(VkBool32),
    filterCubicMinmax: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkFilterCubicImageViewImageFormatPropertiesEXT = struct_VkFilterCubicImageViewImageFormatPropertiesEXT;
pub const VkQueueGlobalPriorityEXT = VkQueueGlobalPriorityKHR;
pub const VkDeviceQueueGlobalPriorityCreateInfoEXT = VkDeviceQueueGlobalPriorityCreateInfoKHR;
pub const struct_VkImportMemoryHostPointerInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    handleType: VkExternalMemoryHandleTypeFlagBits = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlagBits),
    pHostPointer: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const VkImportMemoryHostPointerInfoEXT = struct_VkImportMemoryHostPointerInfoEXT;
pub const struct_VkMemoryHostPointerPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    memoryTypeBits: u32 = @import("std").mem.zeroes(u32),
};
pub const VkMemoryHostPointerPropertiesEXT = struct_VkMemoryHostPointerPropertiesEXT;
pub const struct_VkPhysicalDeviceExternalMemoryHostPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    minImportedHostPointerAlignment: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkPhysicalDeviceExternalMemoryHostPropertiesEXT = struct_VkPhysicalDeviceExternalMemoryHostPropertiesEXT;
pub const PFN_vkGetMemoryHostPointerPropertiesEXT = ?*const fn (VkDevice, VkExternalMemoryHandleTypeFlagBits, ?*const anyopaque, [*c]VkMemoryHostPointerPropertiesEXT) callconv(.C) VkResult;
pub extern fn vkGetMemoryHostPointerPropertiesEXT(device: VkDevice, handleType: VkExternalMemoryHandleTypeFlagBits, pHostPointer: ?*const anyopaque, pMemoryHostPointerProperties: [*c]VkMemoryHostPointerPropertiesEXT) VkResult;
pub const PFN_vkCmdWriteBufferMarkerAMD = ?*const fn (VkCommandBuffer, VkPipelineStageFlagBits, VkBuffer, VkDeviceSize, u32) callconv(.C) void;
pub extern fn vkCmdWriteBufferMarkerAMD(commandBuffer: VkCommandBuffer, pipelineStage: VkPipelineStageFlagBits, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, marker: u32) void;
pub const VK_PIPELINE_COMPILER_CONTROL_FLAG_BITS_MAX_ENUM_AMD: c_int = 2147483647;
pub const enum_VkPipelineCompilerControlFlagBitsAMD = c_uint;
pub const VkPipelineCompilerControlFlagBitsAMD = enum_VkPipelineCompilerControlFlagBitsAMD;
pub const VkPipelineCompilerControlFlagsAMD = VkFlags;
pub const struct_VkPipelineCompilerControlCreateInfoAMD = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    compilerControlFlags: VkPipelineCompilerControlFlagsAMD = @import("std").mem.zeroes(VkPipelineCompilerControlFlagsAMD),
};
pub const VkPipelineCompilerControlCreateInfoAMD = struct_VkPipelineCompilerControlCreateInfoAMD;
pub const VkTimeDomainEXT = VkTimeDomainKHR;
pub const VkCalibratedTimestampInfoEXT = VkCalibratedTimestampInfoKHR;
pub const PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkTimeDomainKHR) callconv(.C) VkResult;
pub const PFN_vkGetCalibratedTimestampsEXT = ?*const fn (VkDevice, u32, [*c]const VkCalibratedTimestampInfoKHR, [*c]u64, [*c]u64) callconv(.C) VkResult;
pub extern fn vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(physicalDevice: VkPhysicalDevice, pTimeDomainCount: [*c]u32, pTimeDomains: [*c]VkTimeDomainKHR) VkResult;
pub extern fn vkGetCalibratedTimestampsEXT(device: VkDevice, timestampCount: u32, pTimestampInfos: [*c]const VkCalibratedTimestampInfoKHR, pTimestamps: [*c]u64, pMaxDeviation: [*c]u64) VkResult;
pub const struct_VkPhysicalDeviceShaderCorePropertiesAMD = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderEngineCount: u32 = @import("std").mem.zeroes(u32),
    shaderArraysPerEngineCount: u32 = @import("std").mem.zeroes(u32),
    computeUnitsPerShaderArray: u32 = @import("std").mem.zeroes(u32),
    simdPerComputeUnit: u32 = @import("std").mem.zeroes(u32),
    wavefrontsPerSimd: u32 = @import("std").mem.zeroes(u32),
    wavefrontSize: u32 = @import("std").mem.zeroes(u32),
    sgprsPerSimd: u32 = @import("std").mem.zeroes(u32),
    minSgprAllocation: u32 = @import("std").mem.zeroes(u32),
    maxSgprAllocation: u32 = @import("std").mem.zeroes(u32),
    sgprAllocationGranularity: u32 = @import("std").mem.zeroes(u32),
    vgprsPerSimd: u32 = @import("std").mem.zeroes(u32),
    minVgprAllocation: u32 = @import("std").mem.zeroes(u32),
    maxVgprAllocation: u32 = @import("std").mem.zeroes(u32),
    vgprAllocationGranularity: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceShaderCorePropertiesAMD = struct_VkPhysicalDeviceShaderCorePropertiesAMD;
pub const VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD: c_int = 0;
pub const VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD: c_int = 1;
pub const VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD: c_int = 2;
pub const VK_MEMORY_OVERALLOCATION_BEHAVIOR_MAX_ENUM_AMD: c_int = 2147483647;
pub const enum_VkMemoryOverallocationBehaviorAMD = c_uint;
pub const VkMemoryOverallocationBehaviorAMD = enum_VkMemoryOverallocationBehaviorAMD;
pub const struct_VkDeviceMemoryOverallocationCreateInfoAMD = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    overallocationBehavior: VkMemoryOverallocationBehaviorAMD = @import("std").mem.zeroes(VkMemoryOverallocationBehaviorAMD),
};
pub const VkDeviceMemoryOverallocationCreateInfoAMD = struct_VkDeviceMemoryOverallocationCreateInfoAMD;
pub const struct_VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxVertexAttribDivisor: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT = struct_VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT;
pub const VkVertexInputBindingDivisorDescriptionEXT = VkVertexInputBindingDivisorDescriptionKHR;
pub const VkPipelineVertexInputDivisorStateCreateInfoEXT = VkPipelineVertexInputDivisorStateCreateInfoKHR;
pub const VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT = VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR;
pub const VkPipelineCreationFeedbackFlagBitsEXT = VkPipelineCreationFeedbackFlagBits;
pub const VkPipelineCreationFeedbackFlagsEXT = VkPipelineCreationFeedbackFlags;
pub const VkPipelineCreationFeedbackCreateInfoEXT = VkPipelineCreationFeedbackCreateInfo;
pub const VkPipelineCreationFeedbackEXT = VkPipelineCreationFeedback;
pub const VkPhysicalDeviceComputeShaderDerivativesFeaturesNV = VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR;
pub const struct_VkPhysicalDeviceMeshShaderFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    taskShader: VkBool32 = @import("std").mem.zeroes(VkBool32),
    meshShader: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceMeshShaderFeaturesNV = struct_VkPhysicalDeviceMeshShaderFeaturesNV;
pub const struct_VkPhysicalDeviceMeshShaderPropertiesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxDrawMeshTasksCount: u32 = @import("std").mem.zeroes(u32),
    maxTaskWorkGroupInvocations: u32 = @import("std").mem.zeroes(u32),
    maxTaskWorkGroupSize: [3]u32 = @import("std").mem.zeroes([3]u32),
    maxTaskTotalMemorySize: u32 = @import("std").mem.zeroes(u32),
    maxTaskOutputCount: u32 = @import("std").mem.zeroes(u32),
    maxMeshWorkGroupInvocations: u32 = @import("std").mem.zeroes(u32),
    maxMeshWorkGroupSize: [3]u32 = @import("std").mem.zeroes([3]u32),
    maxMeshTotalMemorySize: u32 = @import("std").mem.zeroes(u32),
    maxMeshOutputVertices: u32 = @import("std").mem.zeroes(u32),
    maxMeshOutputPrimitives: u32 = @import("std").mem.zeroes(u32),
    maxMeshMultiviewViewCount: u32 = @import("std").mem.zeroes(u32),
    meshOutputPerVertexGranularity: u32 = @import("std").mem.zeroes(u32),
    meshOutputPerPrimitiveGranularity: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceMeshShaderPropertiesNV = struct_VkPhysicalDeviceMeshShaderPropertiesNV;
pub const struct_VkDrawMeshTasksIndirectCommandNV = extern struct {
    taskCount: u32 = @import("std").mem.zeroes(u32),
    firstTask: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDrawMeshTasksIndirectCommandNV = struct_VkDrawMeshTasksIndirectCommandNV;
pub const PFN_vkCmdDrawMeshTasksNV = ?*const fn (VkCommandBuffer, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawMeshTasksIndirectNV = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawMeshTasksIndirectCountNV = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, u32, u32) callconv(.C) void;
pub extern fn vkCmdDrawMeshTasksNV(commandBuffer: VkCommandBuffer, taskCount: u32, firstTask: u32) void;
pub extern fn vkCmdDrawMeshTasksIndirectNV(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, drawCount: u32, stride: u32) void;
pub extern fn vkCmdDrawMeshTasksIndirectCountNV(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: u32, stride: u32) void;
pub const VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV = VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR;
pub const struct_VkPhysicalDeviceShaderImageFootprintFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    imageFootprint: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderImageFootprintFeaturesNV = struct_VkPhysicalDeviceShaderImageFootprintFeaturesNV;
pub const struct_VkPipelineViewportExclusiveScissorStateCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    exclusiveScissorCount: u32 = @import("std").mem.zeroes(u32),
    pExclusiveScissors: [*c]const VkRect2D = @import("std").mem.zeroes([*c]const VkRect2D),
};
pub const VkPipelineViewportExclusiveScissorStateCreateInfoNV = struct_VkPipelineViewportExclusiveScissorStateCreateInfoNV;
pub const struct_VkPhysicalDeviceExclusiveScissorFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    exclusiveScissor: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceExclusiveScissorFeaturesNV = struct_VkPhysicalDeviceExclusiveScissorFeaturesNV;
pub const PFN_vkCmdSetExclusiveScissorEnableNV = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetExclusiveScissorNV = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkRect2D) callconv(.C) void;
pub extern fn vkCmdSetExclusiveScissorEnableNV(commandBuffer: VkCommandBuffer, firstExclusiveScissor: u32, exclusiveScissorCount: u32, pExclusiveScissorEnables: [*c]const VkBool32) void;
pub extern fn vkCmdSetExclusiveScissorNV(commandBuffer: VkCommandBuffer, firstExclusiveScissor: u32, exclusiveScissorCount: u32, pExclusiveScissors: [*c]const VkRect2D) void;
pub const struct_VkQueueFamilyCheckpointPropertiesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    checkpointExecutionStageMask: VkPipelineStageFlags = @import("std").mem.zeroes(VkPipelineStageFlags),
};
pub const VkQueueFamilyCheckpointPropertiesNV = struct_VkQueueFamilyCheckpointPropertiesNV;
pub const struct_VkCheckpointDataNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    stage: VkPipelineStageFlagBits = @import("std").mem.zeroes(VkPipelineStageFlagBits),
    pCheckpointMarker: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const VkCheckpointDataNV = struct_VkCheckpointDataNV;
pub const PFN_vkCmdSetCheckpointNV = ?*const fn (VkCommandBuffer, ?*const anyopaque) callconv(.C) void;
pub const PFN_vkGetQueueCheckpointDataNV = ?*const fn (VkQueue, [*c]u32, [*c]VkCheckpointDataNV) callconv(.C) void;
pub extern fn vkCmdSetCheckpointNV(commandBuffer: VkCommandBuffer, pCheckpointMarker: ?*const anyopaque) void;
pub extern fn vkGetQueueCheckpointDataNV(queue: VkQueue, pCheckpointDataCount: [*c]u32, pCheckpointData: [*c]VkCheckpointDataNV) void;
pub const struct_VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderIntegerFunctions2: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL = struct_VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL;
pub const struct_VkPerformanceConfigurationINTEL_T = opaque {};
pub const VkPerformanceConfigurationINTEL = ?*struct_VkPerformanceConfigurationINTEL_T;
pub const VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL: c_int = 0;
pub const VK_PERFORMANCE_CONFIGURATION_TYPE_MAX_ENUM_INTEL: c_int = 2147483647;
pub const enum_VkPerformanceConfigurationTypeINTEL = c_uint;
pub const VkPerformanceConfigurationTypeINTEL = enum_VkPerformanceConfigurationTypeINTEL;
pub const VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL: c_int = 0;
pub const VK_QUERY_POOL_SAMPLING_MODE_MAX_ENUM_INTEL: c_int = 2147483647;
pub const enum_VkQueryPoolSamplingModeINTEL = c_uint;
pub const VkQueryPoolSamplingModeINTEL = enum_VkQueryPoolSamplingModeINTEL;
pub const VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL: c_int = 0;
pub const VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL: c_int = 1;
pub const VK_PERFORMANCE_OVERRIDE_TYPE_MAX_ENUM_INTEL: c_int = 2147483647;
pub const enum_VkPerformanceOverrideTypeINTEL = c_uint;
pub const VkPerformanceOverrideTypeINTEL = enum_VkPerformanceOverrideTypeINTEL;
pub const VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL: c_int = 0;
pub const VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL: c_int = 1;
pub const VK_PERFORMANCE_PARAMETER_TYPE_MAX_ENUM_INTEL: c_int = 2147483647;
pub const enum_VkPerformanceParameterTypeINTEL = c_uint;
pub const VkPerformanceParameterTypeINTEL = enum_VkPerformanceParameterTypeINTEL;
pub const VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL: c_int = 0;
pub const VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL: c_int = 1;
pub const VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL: c_int = 2;
pub const VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL: c_int = 3;
pub const VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL: c_int = 4;
pub const VK_PERFORMANCE_VALUE_TYPE_MAX_ENUM_INTEL: c_int = 2147483647;
pub const enum_VkPerformanceValueTypeINTEL = c_uint;
pub const VkPerformanceValueTypeINTEL = enum_VkPerformanceValueTypeINTEL;
pub const union_VkPerformanceValueDataINTEL = extern union {
    value32: u32,
    value64: u64,
    valueFloat: f32,
    valueBool: VkBool32,
    valueString: [*c]const u8,
};
pub const VkPerformanceValueDataINTEL = union_VkPerformanceValueDataINTEL;
pub const struct_VkPerformanceValueINTEL = extern struct {
    type: VkPerformanceValueTypeINTEL = @import("std").mem.zeroes(VkPerformanceValueTypeINTEL),
    data: VkPerformanceValueDataINTEL = @import("std").mem.zeroes(VkPerformanceValueDataINTEL),
};
pub const VkPerformanceValueINTEL = struct_VkPerformanceValueINTEL;
pub const struct_VkInitializePerformanceApiInfoINTEL = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pUserData: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const VkInitializePerformanceApiInfoINTEL = struct_VkInitializePerformanceApiInfoINTEL;
pub const struct_VkQueryPoolPerformanceQueryCreateInfoINTEL = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    performanceCountersSampling: VkQueryPoolSamplingModeINTEL = @import("std").mem.zeroes(VkQueryPoolSamplingModeINTEL),
};
pub const VkQueryPoolPerformanceQueryCreateInfoINTEL = struct_VkQueryPoolPerformanceQueryCreateInfoINTEL;
pub const VkQueryPoolCreateInfoINTEL = VkQueryPoolPerformanceQueryCreateInfoINTEL;
pub const struct_VkPerformanceMarkerInfoINTEL = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    marker: u64 = @import("std").mem.zeroes(u64),
};
pub const VkPerformanceMarkerInfoINTEL = struct_VkPerformanceMarkerInfoINTEL;
pub const struct_VkPerformanceStreamMarkerInfoINTEL = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    marker: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPerformanceStreamMarkerInfoINTEL = struct_VkPerformanceStreamMarkerInfoINTEL;
pub const struct_VkPerformanceOverrideInfoINTEL = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    type: VkPerformanceOverrideTypeINTEL = @import("std").mem.zeroes(VkPerformanceOverrideTypeINTEL),
    enable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    parameter: u64 = @import("std").mem.zeroes(u64),
};
pub const VkPerformanceOverrideInfoINTEL = struct_VkPerformanceOverrideInfoINTEL;
pub const struct_VkPerformanceConfigurationAcquireInfoINTEL = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    type: VkPerformanceConfigurationTypeINTEL = @import("std").mem.zeroes(VkPerformanceConfigurationTypeINTEL),
};
pub const VkPerformanceConfigurationAcquireInfoINTEL = struct_VkPerformanceConfigurationAcquireInfoINTEL;
pub const PFN_vkInitializePerformanceApiINTEL = ?*const fn (VkDevice, [*c]const VkInitializePerformanceApiInfoINTEL) callconv(.C) VkResult;
pub const PFN_vkUninitializePerformanceApiINTEL = ?*const fn (VkDevice) callconv(.C) void;
pub const PFN_vkCmdSetPerformanceMarkerINTEL = ?*const fn (VkCommandBuffer, [*c]const VkPerformanceMarkerInfoINTEL) callconv(.C) VkResult;
pub const PFN_vkCmdSetPerformanceStreamMarkerINTEL = ?*const fn (VkCommandBuffer, [*c]const VkPerformanceStreamMarkerInfoINTEL) callconv(.C) VkResult;
pub const PFN_vkCmdSetPerformanceOverrideINTEL = ?*const fn (VkCommandBuffer, [*c]const VkPerformanceOverrideInfoINTEL) callconv(.C) VkResult;
pub const PFN_vkAcquirePerformanceConfigurationINTEL = ?*const fn (VkDevice, [*c]const VkPerformanceConfigurationAcquireInfoINTEL, [*c]VkPerformanceConfigurationINTEL) callconv(.C) VkResult;
pub const PFN_vkReleasePerformanceConfigurationINTEL = ?*const fn (VkDevice, VkPerformanceConfigurationINTEL) callconv(.C) VkResult;
pub const PFN_vkQueueSetPerformanceConfigurationINTEL = ?*const fn (VkQueue, VkPerformanceConfigurationINTEL) callconv(.C) VkResult;
pub const PFN_vkGetPerformanceParameterINTEL = ?*const fn (VkDevice, VkPerformanceParameterTypeINTEL, [*c]VkPerformanceValueINTEL) callconv(.C) VkResult;
pub extern fn vkInitializePerformanceApiINTEL(device: VkDevice, pInitializeInfo: [*c]const VkInitializePerformanceApiInfoINTEL) VkResult;
pub extern fn vkUninitializePerformanceApiINTEL(device: VkDevice) void;
pub extern fn vkCmdSetPerformanceMarkerINTEL(commandBuffer: VkCommandBuffer, pMarkerInfo: [*c]const VkPerformanceMarkerInfoINTEL) VkResult;
pub extern fn vkCmdSetPerformanceStreamMarkerINTEL(commandBuffer: VkCommandBuffer, pMarkerInfo: [*c]const VkPerformanceStreamMarkerInfoINTEL) VkResult;
pub extern fn vkCmdSetPerformanceOverrideINTEL(commandBuffer: VkCommandBuffer, pOverrideInfo: [*c]const VkPerformanceOverrideInfoINTEL) VkResult;
pub extern fn vkAcquirePerformanceConfigurationINTEL(device: VkDevice, pAcquireInfo: [*c]const VkPerformanceConfigurationAcquireInfoINTEL, pConfiguration: [*c]VkPerformanceConfigurationINTEL) VkResult;
pub extern fn vkReleasePerformanceConfigurationINTEL(device: VkDevice, configuration: VkPerformanceConfigurationINTEL) VkResult;
pub extern fn vkQueueSetPerformanceConfigurationINTEL(queue: VkQueue, configuration: VkPerformanceConfigurationINTEL) VkResult;
pub extern fn vkGetPerformanceParameterINTEL(device: VkDevice, parameter: VkPerformanceParameterTypeINTEL, pValue: [*c]VkPerformanceValueINTEL) VkResult;
pub const struct_VkPhysicalDevicePCIBusInfoPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pciDomain: u32 = @import("std").mem.zeroes(u32),
    pciBus: u32 = @import("std").mem.zeroes(u32),
    pciDevice: u32 = @import("std").mem.zeroes(u32),
    pciFunction: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDevicePCIBusInfoPropertiesEXT = struct_VkPhysicalDevicePCIBusInfoPropertiesEXT;
pub const struct_VkDisplayNativeHdrSurfaceCapabilitiesAMD = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    localDimmingSupport: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkDisplayNativeHdrSurfaceCapabilitiesAMD = struct_VkDisplayNativeHdrSurfaceCapabilitiesAMD;
pub const struct_VkSwapchainDisplayNativeHdrCreateInfoAMD = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    localDimmingEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkSwapchainDisplayNativeHdrCreateInfoAMD = struct_VkSwapchainDisplayNativeHdrCreateInfoAMD;
pub const PFN_vkSetLocalDimmingAMD = ?*const fn (VkDevice, VkSwapchainKHR, VkBool32) callconv(.C) void;
pub extern fn vkSetLocalDimmingAMD(device: VkDevice, swapChain: VkSwapchainKHR, localDimmingEnable: VkBool32) void;
pub const struct_VkPhysicalDeviceFragmentDensityMapFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    fragmentDensityMap: VkBool32 = @import("std").mem.zeroes(VkBool32),
    fragmentDensityMapDynamic: VkBool32 = @import("std").mem.zeroes(VkBool32),
    fragmentDensityMapNonSubsampledImages: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceFragmentDensityMapFeaturesEXT = struct_VkPhysicalDeviceFragmentDensityMapFeaturesEXT;
pub const struct_VkPhysicalDeviceFragmentDensityMapPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    minFragmentDensityTexelSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxFragmentDensityTexelSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    fragmentDensityInvocations: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceFragmentDensityMapPropertiesEXT = struct_VkPhysicalDeviceFragmentDensityMapPropertiesEXT;
pub const struct_VkRenderPassFragmentDensityMapCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    fragmentDensityMapAttachment: VkAttachmentReference = @import("std").mem.zeroes(VkAttachmentReference),
};
pub const VkRenderPassFragmentDensityMapCreateInfoEXT = struct_VkRenderPassFragmentDensityMapCreateInfoEXT;
pub const VkPhysicalDeviceScalarBlockLayoutFeaturesEXT = VkPhysicalDeviceScalarBlockLayoutFeatures;
pub const VkPhysicalDeviceSubgroupSizeControlFeaturesEXT = VkPhysicalDeviceSubgroupSizeControlFeatures;
pub const VkPhysicalDeviceSubgroupSizeControlPropertiesEXT = VkPhysicalDeviceSubgroupSizeControlProperties;
pub const VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT = VkPipelineShaderStageRequiredSubgroupSizeCreateInfo;
pub const VK_SHADER_CORE_PROPERTIES_FLAG_BITS_MAX_ENUM_AMD: c_int = 2147483647;
pub const enum_VkShaderCorePropertiesFlagBitsAMD = c_uint;
pub const VkShaderCorePropertiesFlagBitsAMD = enum_VkShaderCorePropertiesFlagBitsAMD;
pub const VkShaderCorePropertiesFlagsAMD = VkFlags;
pub const struct_VkPhysicalDeviceShaderCoreProperties2AMD = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderCoreFeatures: VkShaderCorePropertiesFlagsAMD = @import("std").mem.zeroes(VkShaderCorePropertiesFlagsAMD),
    activeComputeUnitCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceShaderCoreProperties2AMD = struct_VkPhysicalDeviceShaderCoreProperties2AMD;
pub const struct_VkPhysicalDeviceCoherentMemoryFeaturesAMD = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    deviceCoherentMemory: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceCoherentMemoryFeaturesAMD = struct_VkPhysicalDeviceCoherentMemoryFeaturesAMD;
pub const struct_VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderImageInt64Atomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sparseImageInt64Atomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT = struct_VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT;
pub const struct_VkPhysicalDeviceMemoryBudgetPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    heapBudget: [16]VkDeviceSize = @import("std").mem.zeroes([16]VkDeviceSize),
    heapUsage: [16]VkDeviceSize = @import("std").mem.zeroes([16]VkDeviceSize),
};
pub const VkPhysicalDeviceMemoryBudgetPropertiesEXT = struct_VkPhysicalDeviceMemoryBudgetPropertiesEXT;
pub const struct_VkPhysicalDeviceMemoryPriorityFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    memoryPriority: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceMemoryPriorityFeaturesEXT = struct_VkPhysicalDeviceMemoryPriorityFeaturesEXT;
pub const struct_VkMemoryPriorityAllocateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    priority: f32 = @import("std").mem.zeroes(f32),
};
pub const VkMemoryPriorityAllocateInfoEXT = struct_VkMemoryPriorityAllocateInfoEXT;
pub const struct_VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    dedicatedAllocationImageAliasing: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV = struct_VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV;
pub const struct_VkPhysicalDeviceBufferDeviceAddressFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    bufferDeviceAddress: VkBool32 = @import("std").mem.zeroes(VkBool32),
    bufferDeviceAddressCaptureReplay: VkBool32 = @import("std").mem.zeroes(VkBool32),
    bufferDeviceAddressMultiDevice: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceBufferDeviceAddressFeaturesEXT = struct_VkPhysicalDeviceBufferDeviceAddressFeaturesEXT;
pub const VkPhysicalDeviceBufferAddressFeaturesEXT = VkPhysicalDeviceBufferDeviceAddressFeaturesEXT;
pub const VkBufferDeviceAddressInfoEXT = VkBufferDeviceAddressInfo;
pub const struct_VkBufferDeviceAddressCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    deviceAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
};
pub const VkBufferDeviceAddressCreateInfoEXT = struct_VkBufferDeviceAddressCreateInfoEXT;
pub const PFN_vkGetBufferDeviceAddressEXT = ?*const fn (VkDevice, [*c]const VkBufferDeviceAddressInfo) callconv(.C) VkDeviceAddress;
pub extern fn vkGetBufferDeviceAddressEXT(device: VkDevice, pInfo: [*c]const VkBufferDeviceAddressInfo) VkDeviceAddress;
pub const VkToolPurposeFlagBitsEXT = VkToolPurposeFlagBits;
pub const VkToolPurposeFlagsEXT = VkToolPurposeFlags;
pub const VkPhysicalDeviceToolPropertiesEXT = VkPhysicalDeviceToolProperties;
pub const PFN_vkGetPhysicalDeviceToolPropertiesEXT = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkPhysicalDeviceToolProperties) callconv(.C) VkResult;
pub extern fn vkGetPhysicalDeviceToolPropertiesEXT(physicalDevice: VkPhysicalDevice, pToolCount: [*c]u32, pToolProperties: [*c]VkPhysicalDeviceToolProperties) VkResult;
pub const VkImageStencilUsageCreateInfoEXT = VkImageStencilUsageCreateInfo;
pub const VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT: c_int = 0;
pub const VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT: c_int = 1;
pub const VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT: c_int = 2;
pub const VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT: c_int = 3;
pub const VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT: c_int = 4;
pub const VK_VALIDATION_FEATURE_ENABLE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkValidationFeatureEnableEXT = c_uint;
pub const VkValidationFeatureEnableEXT = enum_VkValidationFeatureEnableEXT;
pub const VK_VALIDATION_FEATURE_DISABLE_ALL_EXT: c_int = 0;
pub const VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT: c_int = 1;
pub const VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT: c_int = 2;
pub const VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT: c_int = 3;
pub const VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT: c_int = 4;
pub const VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT: c_int = 5;
pub const VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT: c_int = 6;
pub const VK_VALIDATION_FEATURE_DISABLE_SHADER_VALIDATION_CACHE_EXT: c_int = 7;
pub const VK_VALIDATION_FEATURE_DISABLE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkValidationFeatureDisableEXT = c_uint;
pub const VkValidationFeatureDisableEXT = enum_VkValidationFeatureDisableEXT;
pub const struct_VkValidationFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    enabledValidationFeatureCount: u32 = @import("std").mem.zeroes(u32),
    pEnabledValidationFeatures: [*c]const VkValidationFeatureEnableEXT = @import("std").mem.zeroes([*c]const VkValidationFeatureEnableEXT),
    disabledValidationFeatureCount: u32 = @import("std").mem.zeroes(u32),
    pDisabledValidationFeatures: [*c]const VkValidationFeatureDisableEXT = @import("std").mem.zeroes([*c]const VkValidationFeatureDisableEXT),
};
pub const VkValidationFeaturesEXT = struct_VkValidationFeaturesEXT;
pub const VkComponentTypeNV = VkComponentTypeKHR;
pub const VkScopeNV = VkScopeKHR;
pub const struct_VkCooperativeMatrixPropertiesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    MSize: u32 = @import("std").mem.zeroes(u32),
    NSize: u32 = @import("std").mem.zeroes(u32),
    KSize: u32 = @import("std").mem.zeroes(u32),
    AType: VkComponentTypeNV = @import("std").mem.zeroes(VkComponentTypeNV),
    BType: VkComponentTypeNV = @import("std").mem.zeroes(VkComponentTypeNV),
    CType: VkComponentTypeNV = @import("std").mem.zeroes(VkComponentTypeNV),
    DType: VkComponentTypeNV = @import("std").mem.zeroes(VkComponentTypeNV),
    scope: VkScopeNV = @import("std").mem.zeroes(VkScopeNV),
};
pub const VkCooperativeMatrixPropertiesNV = struct_VkCooperativeMatrixPropertiesNV;
pub const struct_VkPhysicalDeviceCooperativeMatrixFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    cooperativeMatrix: VkBool32 = @import("std").mem.zeroes(VkBool32),
    cooperativeMatrixRobustBufferAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceCooperativeMatrixFeaturesNV = struct_VkPhysicalDeviceCooperativeMatrixFeaturesNV;
pub const struct_VkPhysicalDeviceCooperativeMatrixPropertiesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    cooperativeMatrixSupportedStages: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
};
pub const VkPhysicalDeviceCooperativeMatrixPropertiesNV = struct_VkPhysicalDeviceCooperativeMatrixPropertiesNV;
pub const PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkCooperativeMatrixPropertiesNV) callconv(.C) VkResult;
pub extern fn vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(physicalDevice: VkPhysicalDevice, pPropertyCount: [*c]u32, pProperties: [*c]VkCooperativeMatrixPropertiesNV) VkResult;
pub const VK_COVERAGE_REDUCTION_MODE_MERGE_NV: c_int = 0;
pub const VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV: c_int = 1;
pub const VK_COVERAGE_REDUCTION_MODE_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkCoverageReductionModeNV = c_uint;
pub const VkCoverageReductionModeNV = enum_VkCoverageReductionModeNV;
pub const VkPipelineCoverageReductionStateCreateFlagsNV = VkFlags;
pub const struct_VkPhysicalDeviceCoverageReductionModeFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    coverageReductionMode: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceCoverageReductionModeFeaturesNV = struct_VkPhysicalDeviceCoverageReductionModeFeaturesNV;
pub const struct_VkPipelineCoverageReductionStateCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineCoverageReductionStateCreateFlagsNV = @import("std").mem.zeroes(VkPipelineCoverageReductionStateCreateFlagsNV),
    coverageReductionMode: VkCoverageReductionModeNV = @import("std").mem.zeroes(VkCoverageReductionModeNV),
};
pub const VkPipelineCoverageReductionStateCreateInfoNV = struct_VkPipelineCoverageReductionStateCreateInfoNV;
pub const struct_VkFramebufferMixedSamplesCombinationNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    coverageReductionMode: VkCoverageReductionModeNV = @import("std").mem.zeroes(VkCoverageReductionModeNV),
    rasterizationSamples: VkSampleCountFlagBits = @import("std").mem.zeroes(VkSampleCountFlagBits),
    depthStencilSamples: VkSampleCountFlags = @import("std").mem.zeroes(VkSampleCountFlags),
    colorSamples: VkSampleCountFlags = @import("std").mem.zeroes(VkSampleCountFlags),
};
pub const VkFramebufferMixedSamplesCombinationNV = struct_VkFramebufferMixedSamplesCombinationNV;
pub const PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkFramebufferMixedSamplesCombinationNV) callconv(.C) VkResult;
pub extern fn vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(physicalDevice: VkPhysicalDevice, pCombinationCount: [*c]u32, pCombinations: [*c]VkFramebufferMixedSamplesCombinationNV) VkResult;
pub const struct_VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    fragmentShaderSampleInterlock: VkBool32 = @import("std").mem.zeroes(VkBool32),
    fragmentShaderPixelInterlock: VkBool32 = @import("std").mem.zeroes(VkBool32),
    fragmentShaderShadingRateInterlock: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT = struct_VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT;
pub const struct_VkPhysicalDeviceYcbcrImageArraysFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    ycbcrImageArrays: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceYcbcrImageArraysFeaturesEXT = struct_VkPhysicalDeviceYcbcrImageArraysFeaturesEXT;
pub const VK_PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXT: c_int = 0;
pub const VK_PROVOKING_VERTEX_MODE_LAST_VERTEX_EXT: c_int = 1;
pub const VK_PROVOKING_VERTEX_MODE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkProvokingVertexModeEXT = c_uint;
pub const VkProvokingVertexModeEXT = enum_VkProvokingVertexModeEXT;
pub const struct_VkPhysicalDeviceProvokingVertexFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    provokingVertexLast: VkBool32 = @import("std").mem.zeroes(VkBool32),
    transformFeedbackPreservesProvokingVertex: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceProvokingVertexFeaturesEXT = struct_VkPhysicalDeviceProvokingVertexFeaturesEXT;
pub const struct_VkPhysicalDeviceProvokingVertexPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    provokingVertexModePerPipeline: VkBool32 = @import("std").mem.zeroes(VkBool32),
    transformFeedbackPreservesTriangleFanProvokingVertex: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceProvokingVertexPropertiesEXT = struct_VkPhysicalDeviceProvokingVertexPropertiesEXT;
pub const struct_VkPipelineRasterizationProvokingVertexStateCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    provokingVertexMode: VkProvokingVertexModeEXT = @import("std").mem.zeroes(VkProvokingVertexModeEXT),
};
pub const VkPipelineRasterizationProvokingVertexStateCreateInfoEXT = struct_VkPipelineRasterizationProvokingVertexStateCreateInfoEXT;
pub const VkHeadlessSurfaceCreateFlagsEXT = VkFlags;
pub const struct_VkHeadlessSurfaceCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkHeadlessSurfaceCreateFlagsEXT = @import("std").mem.zeroes(VkHeadlessSurfaceCreateFlagsEXT),
};
pub const VkHeadlessSurfaceCreateInfoEXT = struct_VkHeadlessSurfaceCreateInfoEXT;
pub const PFN_vkCreateHeadlessSurfaceEXT = ?*const fn (VkInstance, [*c]const VkHeadlessSurfaceCreateInfoEXT, [*c]const VkAllocationCallbacks, [*c]VkSurfaceKHR) callconv(.C) VkResult;
pub extern fn vkCreateHeadlessSurfaceEXT(instance: VkInstance, pCreateInfo: [*c]const VkHeadlessSurfaceCreateInfoEXT, pAllocator: [*c]const VkAllocationCallbacks, pSurface: [*c]VkSurfaceKHR) VkResult;
pub const VkLineRasterizationModeEXT = VkLineRasterizationModeKHR;
pub const VkPhysicalDeviceLineRasterizationFeaturesEXT = VkPhysicalDeviceLineRasterizationFeaturesKHR;
pub const VkPhysicalDeviceLineRasterizationPropertiesEXT = VkPhysicalDeviceLineRasterizationPropertiesKHR;
pub const VkPipelineRasterizationLineStateCreateInfoEXT = VkPipelineRasterizationLineStateCreateInfoKHR;
pub const PFN_vkCmdSetLineStippleEXT = ?*const fn (VkCommandBuffer, u32, u16) callconv(.C) void;
pub extern fn vkCmdSetLineStippleEXT(commandBuffer: VkCommandBuffer, lineStippleFactor: u32, lineStipplePattern: u16) void;
pub const struct_VkPhysicalDeviceShaderAtomicFloatFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderBufferFloat32Atomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderBufferFloat32AtomicAdd: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderBufferFloat64Atomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderBufferFloat64AtomicAdd: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSharedFloat32Atomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSharedFloat32AtomicAdd: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSharedFloat64Atomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSharedFloat64AtomicAdd: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderImageFloat32Atomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderImageFloat32AtomicAdd: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sparseImageFloat32Atomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sparseImageFloat32AtomicAdd: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderAtomicFloatFeaturesEXT = struct_VkPhysicalDeviceShaderAtomicFloatFeaturesEXT;
pub const VkPhysicalDeviceHostQueryResetFeaturesEXT = VkPhysicalDeviceHostQueryResetFeatures;
pub const PFN_vkResetQueryPoolEXT = ?*const fn (VkDevice, VkQueryPool, u32, u32) callconv(.C) void;
pub extern fn vkResetQueryPoolEXT(device: VkDevice, queryPool: VkQueryPool, firstQuery: u32, queryCount: u32) void;
pub const VkPhysicalDeviceIndexTypeUint8FeaturesEXT = VkPhysicalDeviceIndexTypeUint8FeaturesKHR;
pub const struct_VkPhysicalDeviceExtendedDynamicStateFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    extendedDynamicState: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceExtendedDynamicStateFeaturesEXT = struct_VkPhysicalDeviceExtendedDynamicStateFeaturesEXT;
pub const PFN_vkCmdSetCullModeEXT = ?*const fn (VkCommandBuffer, VkCullModeFlags) callconv(.C) void;
pub const PFN_vkCmdSetFrontFaceEXT = ?*const fn (VkCommandBuffer, VkFrontFace) callconv(.C) void;
pub const PFN_vkCmdSetPrimitiveTopologyEXT = ?*const fn (VkCommandBuffer, VkPrimitiveTopology) callconv(.C) void;
pub const PFN_vkCmdSetViewportWithCountEXT = ?*const fn (VkCommandBuffer, u32, [*c]const VkViewport) callconv(.C) void;
pub const PFN_vkCmdSetScissorWithCountEXT = ?*const fn (VkCommandBuffer, u32, [*c]const VkRect2D) callconv(.C) void;
pub const PFN_vkCmdBindVertexBuffers2EXT = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkBuffer, [*c]const VkDeviceSize, [*c]const VkDeviceSize, [*c]const VkDeviceSize) callconv(.C) void;
pub const PFN_vkCmdSetDepthTestEnableEXT = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetDepthWriteEnableEXT = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetDepthCompareOpEXT = ?*const fn (VkCommandBuffer, VkCompareOp) callconv(.C) void;
pub const PFN_vkCmdSetDepthBoundsTestEnableEXT = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetStencilTestEnableEXT = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetStencilOpEXT = ?*const fn (VkCommandBuffer, VkStencilFaceFlags, VkStencilOp, VkStencilOp, VkStencilOp, VkCompareOp) callconv(.C) void;
pub extern fn vkCmdSetCullModeEXT(commandBuffer: VkCommandBuffer, cullMode: VkCullModeFlags) void;
pub extern fn vkCmdSetFrontFaceEXT(commandBuffer: VkCommandBuffer, frontFace: VkFrontFace) void;
pub extern fn vkCmdSetPrimitiveTopologyEXT(commandBuffer: VkCommandBuffer, primitiveTopology: VkPrimitiveTopology) void;
pub extern fn vkCmdSetViewportWithCountEXT(commandBuffer: VkCommandBuffer, viewportCount: u32, pViewports: [*c]const VkViewport) void;
pub extern fn vkCmdSetScissorWithCountEXT(commandBuffer: VkCommandBuffer, scissorCount: u32, pScissors: [*c]const VkRect2D) void;
pub extern fn vkCmdBindVertexBuffers2EXT(commandBuffer: VkCommandBuffer, firstBinding: u32, bindingCount: u32, pBuffers: [*c]const VkBuffer, pOffsets: [*c]const VkDeviceSize, pSizes: [*c]const VkDeviceSize, pStrides: [*c]const VkDeviceSize) void;
pub extern fn vkCmdSetDepthTestEnableEXT(commandBuffer: VkCommandBuffer, depthTestEnable: VkBool32) void;
pub extern fn vkCmdSetDepthWriteEnableEXT(commandBuffer: VkCommandBuffer, depthWriteEnable: VkBool32) void;
pub extern fn vkCmdSetDepthCompareOpEXT(commandBuffer: VkCommandBuffer, depthCompareOp: VkCompareOp) void;
pub extern fn vkCmdSetDepthBoundsTestEnableEXT(commandBuffer: VkCommandBuffer, depthBoundsTestEnable: VkBool32) void;
pub extern fn vkCmdSetStencilTestEnableEXT(commandBuffer: VkCommandBuffer, stencilTestEnable: VkBool32) void;
pub extern fn vkCmdSetStencilOpEXT(commandBuffer: VkCommandBuffer, faceMask: VkStencilFaceFlags, failOp: VkStencilOp, passOp: VkStencilOp, depthFailOp: VkStencilOp, compareOp: VkCompareOp) void;
pub const VK_HOST_IMAGE_COPY_MEMCPY_EXT: c_int = 1;
pub const VK_HOST_IMAGE_COPY_FLAG_BITS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkHostImageCopyFlagBitsEXT = c_uint;
pub const VkHostImageCopyFlagBitsEXT = enum_VkHostImageCopyFlagBitsEXT;
pub const VkHostImageCopyFlagsEXT = VkFlags;
pub const struct_VkPhysicalDeviceHostImageCopyFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    hostImageCopy: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceHostImageCopyFeaturesEXT = struct_VkPhysicalDeviceHostImageCopyFeaturesEXT;
pub const struct_VkPhysicalDeviceHostImageCopyPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    copySrcLayoutCount: u32 = @import("std").mem.zeroes(u32),
    pCopySrcLayouts: [*c]VkImageLayout = @import("std").mem.zeroes([*c]VkImageLayout),
    copyDstLayoutCount: u32 = @import("std").mem.zeroes(u32),
    pCopyDstLayouts: [*c]VkImageLayout = @import("std").mem.zeroes([*c]VkImageLayout),
    optimalTilingLayoutUUID: [16]u8 = @import("std").mem.zeroes([16]u8),
    identicalMemoryTypeRequirements: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceHostImageCopyPropertiesEXT = struct_VkPhysicalDeviceHostImageCopyPropertiesEXT;
pub const struct_VkMemoryToImageCopyEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pHostPointer: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    memoryRowLength: u32 = @import("std").mem.zeroes(u32),
    memoryImageHeight: u32 = @import("std").mem.zeroes(u32),
    imageSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    imageOffset: VkOffset3D = @import("std").mem.zeroes(VkOffset3D),
    imageExtent: VkExtent3D = @import("std").mem.zeroes(VkExtent3D),
};
pub const VkMemoryToImageCopyEXT = struct_VkMemoryToImageCopyEXT;
pub const struct_VkImageToMemoryCopyEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pHostPointer: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    memoryRowLength: u32 = @import("std").mem.zeroes(u32),
    memoryImageHeight: u32 = @import("std").mem.zeroes(u32),
    imageSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    imageOffset: VkOffset3D = @import("std").mem.zeroes(VkOffset3D),
    imageExtent: VkExtent3D = @import("std").mem.zeroes(VkExtent3D),
};
pub const VkImageToMemoryCopyEXT = struct_VkImageToMemoryCopyEXT;
pub const struct_VkCopyMemoryToImageInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkHostImageCopyFlagsEXT = @import("std").mem.zeroes(VkHostImageCopyFlagsEXT),
    dstImage: VkImage = @import("std").mem.zeroes(VkImage),
    dstImageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    regionCount: u32 = @import("std").mem.zeroes(u32),
    pRegions: [*c]const VkMemoryToImageCopyEXT = @import("std").mem.zeroes([*c]const VkMemoryToImageCopyEXT),
};
pub const VkCopyMemoryToImageInfoEXT = struct_VkCopyMemoryToImageInfoEXT;
pub const struct_VkCopyImageToMemoryInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkHostImageCopyFlagsEXT = @import("std").mem.zeroes(VkHostImageCopyFlagsEXT),
    srcImage: VkImage = @import("std").mem.zeroes(VkImage),
    srcImageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    regionCount: u32 = @import("std").mem.zeroes(u32),
    pRegions: [*c]const VkImageToMemoryCopyEXT = @import("std").mem.zeroes([*c]const VkImageToMemoryCopyEXT),
};
pub const VkCopyImageToMemoryInfoEXT = struct_VkCopyImageToMemoryInfoEXT;
pub const struct_VkCopyImageToImageInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkHostImageCopyFlagsEXT = @import("std").mem.zeroes(VkHostImageCopyFlagsEXT),
    srcImage: VkImage = @import("std").mem.zeroes(VkImage),
    srcImageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    dstImage: VkImage = @import("std").mem.zeroes(VkImage),
    dstImageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    regionCount: u32 = @import("std").mem.zeroes(u32),
    pRegions: [*c]const VkImageCopy2 = @import("std").mem.zeroes([*c]const VkImageCopy2),
};
pub const VkCopyImageToImageInfoEXT = struct_VkCopyImageToImageInfoEXT;
pub const struct_VkHostImageLayoutTransitionInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    image: VkImage = @import("std").mem.zeroes(VkImage),
    oldLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    newLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    subresourceRange: VkImageSubresourceRange = @import("std").mem.zeroes(VkImageSubresourceRange),
};
pub const VkHostImageLayoutTransitionInfoEXT = struct_VkHostImageLayoutTransitionInfoEXT;
pub const struct_VkSubresourceHostMemcpySizeEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkSubresourceHostMemcpySizeEXT = struct_VkSubresourceHostMemcpySizeEXT;
pub const struct_VkHostImageCopyDevicePerformanceQueryEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    optimalDeviceAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    identicalMemoryLayout: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkHostImageCopyDevicePerformanceQueryEXT = struct_VkHostImageCopyDevicePerformanceQueryEXT;
pub const VkSubresourceLayout2EXT = VkSubresourceLayout2KHR;
pub const VkImageSubresource2EXT = VkImageSubresource2KHR;
pub const PFN_vkCopyMemoryToImageEXT = ?*const fn (VkDevice, [*c]const VkCopyMemoryToImageInfoEXT) callconv(.C) VkResult;
pub const PFN_vkCopyImageToMemoryEXT = ?*const fn (VkDevice, [*c]const VkCopyImageToMemoryInfoEXT) callconv(.C) VkResult;
pub const PFN_vkCopyImageToImageEXT = ?*const fn (VkDevice, [*c]const VkCopyImageToImageInfoEXT) callconv(.C) VkResult;
pub const PFN_vkTransitionImageLayoutEXT = ?*const fn (VkDevice, u32, [*c]const VkHostImageLayoutTransitionInfoEXT) callconv(.C) VkResult;
pub const PFN_vkGetImageSubresourceLayout2EXT = ?*const fn (VkDevice, VkImage, [*c]const VkImageSubresource2KHR, [*c]VkSubresourceLayout2KHR) callconv(.C) void;
pub extern fn vkCopyMemoryToImageEXT(device: VkDevice, pCopyMemoryToImageInfo: [*c]const VkCopyMemoryToImageInfoEXT) VkResult;
pub extern fn vkCopyImageToMemoryEXT(device: VkDevice, pCopyImageToMemoryInfo: [*c]const VkCopyImageToMemoryInfoEXT) VkResult;
pub extern fn vkCopyImageToImageEXT(device: VkDevice, pCopyImageToImageInfo: [*c]const VkCopyImageToImageInfoEXT) VkResult;
pub extern fn vkTransitionImageLayoutEXT(device: VkDevice, transitionCount: u32, pTransitions: [*c]const VkHostImageLayoutTransitionInfoEXT) VkResult;
pub extern fn vkGetImageSubresourceLayout2EXT(device: VkDevice, image: VkImage, pSubresource: [*c]const VkImageSubresource2KHR, pLayout: [*c]VkSubresourceLayout2KHR) void;
pub const struct_VkPhysicalDeviceMapMemoryPlacedFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    memoryMapPlaced: VkBool32 = @import("std").mem.zeroes(VkBool32),
    memoryMapRangePlaced: VkBool32 = @import("std").mem.zeroes(VkBool32),
    memoryUnmapReserve: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceMapMemoryPlacedFeaturesEXT = struct_VkPhysicalDeviceMapMemoryPlacedFeaturesEXT;
pub const struct_VkPhysicalDeviceMapMemoryPlacedPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    minPlacedMemoryMapAlignment: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkPhysicalDeviceMapMemoryPlacedPropertiesEXT = struct_VkPhysicalDeviceMapMemoryPlacedPropertiesEXT;
pub const struct_VkMemoryMapPlacedInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pPlacedAddress: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const VkMemoryMapPlacedInfoEXT = struct_VkMemoryMapPlacedInfoEXT;
pub const struct_VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderBufferFloat16Atomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderBufferFloat16AtomicAdd: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderBufferFloat16AtomicMinMax: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderBufferFloat32AtomicMinMax: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderBufferFloat64AtomicMinMax: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSharedFloat16Atomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSharedFloat16AtomicAdd: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSharedFloat16AtomicMinMax: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSharedFloat32AtomicMinMax: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSharedFloat64AtomicMinMax: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderImageFloat32AtomicMinMax: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sparseImageFloat32AtomicMinMax: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT = struct_VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT;
pub const VK_PRESENT_SCALING_ONE_TO_ONE_BIT_EXT: c_int = 1;
pub const VK_PRESENT_SCALING_ASPECT_RATIO_STRETCH_BIT_EXT: c_int = 2;
pub const VK_PRESENT_SCALING_STRETCH_BIT_EXT: c_int = 4;
pub const VK_PRESENT_SCALING_FLAG_BITS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkPresentScalingFlagBitsEXT = c_uint;
pub const VkPresentScalingFlagBitsEXT = enum_VkPresentScalingFlagBitsEXT;
pub const VkPresentScalingFlagsEXT = VkFlags;
pub const VK_PRESENT_GRAVITY_MIN_BIT_EXT: c_int = 1;
pub const VK_PRESENT_GRAVITY_MAX_BIT_EXT: c_int = 2;
pub const VK_PRESENT_GRAVITY_CENTERED_BIT_EXT: c_int = 4;
pub const VK_PRESENT_GRAVITY_FLAG_BITS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkPresentGravityFlagBitsEXT = c_uint;
pub const VkPresentGravityFlagBitsEXT = enum_VkPresentGravityFlagBitsEXT;
pub const VkPresentGravityFlagsEXT = VkFlags;
pub const struct_VkSurfacePresentModeEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    presentMode: VkPresentModeKHR = @import("std").mem.zeroes(VkPresentModeKHR),
};
pub const VkSurfacePresentModeEXT = struct_VkSurfacePresentModeEXT;
pub const struct_VkSurfacePresentScalingCapabilitiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    supportedPresentScaling: VkPresentScalingFlagsEXT = @import("std").mem.zeroes(VkPresentScalingFlagsEXT),
    supportedPresentGravityX: VkPresentGravityFlagsEXT = @import("std").mem.zeroes(VkPresentGravityFlagsEXT),
    supportedPresentGravityY: VkPresentGravityFlagsEXT = @import("std").mem.zeroes(VkPresentGravityFlagsEXT),
    minScaledImageExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxScaledImageExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
};
pub const VkSurfacePresentScalingCapabilitiesEXT = struct_VkSurfacePresentScalingCapabilitiesEXT;
pub const struct_VkSurfacePresentModeCompatibilityEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    presentModeCount: u32 = @import("std").mem.zeroes(u32),
    pPresentModes: [*c]VkPresentModeKHR = @import("std").mem.zeroes([*c]VkPresentModeKHR),
};
pub const VkSurfacePresentModeCompatibilityEXT = struct_VkSurfacePresentModeCompatibilityEXT;
pub const struct_VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    swapchainMaintenance1: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT = struct_VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT;
pub const struct_VkSwapchainPresentFenceInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    swapchainCount: u32 = @import("std").mem.zeroes(u32),
    pFences: [*c]const VkFence = @import("std").mem.zeroes([*c]const VkFence),
};
pub const VkSwapchainPresentFenceInfoEXT = struct_VkSwapchainPresentFenceInfoEXT;
pub const struct_VkSwapchainPresentModesCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    presentModeCount: u32 = @import("std").mem.zeroes(u32),
    pPresentModes: [*c]const VkPresentModeKHR = @import("std").mem.zeroes([*c]const VkPresentModeKHR),
};
pub const VkSwapchainPresentModesCreateInfoEXT = struct_VkSwapchainPresentModesCreateInfoEXT;
pub const struct_VkSwapchainPresentModeInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    swapchainCount: u32 = @import("std").mem.zeroes(u32),
    pPresentModes: [*c]const VkPresentModeKHR = @import("std").mem.zeroes([*c]const VkPresentModeKHR),
};
pub const VkSwapchainPresentModeInfoEXT = struct_VkSwapchainPresentModeInfoEXT;
pub const struct_VkSwapchainPresentScalingCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    scalingBehavior: VkPresentScalingFlagsEXT = @import("std").mem.zeroes(VkPresentScalingFlagsEXT),
    presentGravityX: VkPresentGravityFlagsEXT = @import("std").mem.zeroes(VkPresentGravityFlagsEXT),
    presentGravityY: VkPresentGravityFlagsEXT = @import("std").mem.zeroes(VkPresentGravityFlagsEXT),
};
pub const VkSwapchainPresentScalingCreateInfoEXT = struct_VkSwapchainPresentScalingCreateInfoEXT;
pub const struct_VkReleaseSwapchainImagesInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    swapchain: VkSwapchainKHR = @import("std").mem.zeroes(VkSwapchainKHR),
    imageIndexCount: u32 = @import("std").mem.zeroes(u32),
    pImageIndices: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkReleaseSwapchainImagesInfoEXT = struct_VkReleaseSwapchainImagesInfoEXT;
pub const PFN_vkReleaseSwapchainImagesEXT = ?*const fn (VkDevice, [*c]const VkReleaseSwapchainImagesInfoEXT) callconv(.C) VkResult;
pub extern fn vkReleaseSwapchainImagesEXT(device: VkDevice, pReleaseInfo: [*c]const VkReleaseSwapchainImagesInfoEXT) VkResult;
pub const VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT = VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures;
pub const struct_VkIndirectCommandsLayoutNV_T = opaque {};
pub const VkIndirectCommandsLayoutNV = ?*struct_VkIndirectCommandsLayoutNV_T;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV: c_int = 0;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV: c_int = 1;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV: c_int = 2;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV: c_int = 3;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV: c_int = 4;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV: c_int = 5;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV: c_int = 6;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV: c_int = 7;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_NV: c_int = 1000328000;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_PIPELINE_NV: c_int = 1000428003;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_NV: c_int = 1000428004;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkIndirectCommandsTokenTypeNV = c_uint;
pub const VkIndirectCommandsTokenTypeNV = enum_VkIndirectCommandsTokenTypeNV;
pub const VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV: c_int = 1;
pub const VK_INDIRECT_STATE_FLAG_BITS_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkIndirectStateFlagBitsNV = c_uint;
pub const VkIndirectStateFlagBitsNV = enum_VkIndirectStateFlagBitsNV;
pub const VkIndirectStateFlagsNV = VkFlags;
pub const VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV: c_int = 1;
pub const VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV: c_int = 2;
pub const VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV: c_int = 4;
pub const VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkIndirectCommandsLayoutUsageFlagBitsNV = c_uint;
pub const VkIndirectCommandsLayoutUsageFlagBitsNV = enum_VkIndirectCommandsLayoutUsageFlagBitsNV;
pub const VkIndirectCommandsLayoutUsageFlagsNV = VkFlags;
pub const struct_VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxGraphicsShaderGroupCount: u32 = @import("std").mem.zeroes(u32),
    maxIndirectSequenceCount: u32 = @import("std").mem.zeroes(u32),
    maxIndirectCommandsTokenCount: u32 = @import("std").mem.zeroes(u32),
    maxIndirectCommandsStreamCount: u32 = @import("std").mem.zeroes(u32),
    maxIndirectCommandsTokenOffset: u32 = @import("std").mem.zeroes(u32),
    maxIndirectCommandsStreamStride: u32 = @import("std").mem.zeroes(u32),
    minSequencesCountBufferOffsetAlignment: u32 = @import("std").mem.zeroes(u32),
    minSequencesIndexBufferOffsetAlignment: u32 = @import("std").mem.zeroes(u32),
    minIndirectCommandsBufferOffsetAlignment: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV = struct_VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV;
pub const struct_VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    deviceGeneratedCommands: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV = struct_VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV;
pub const struct_VkGraphicsShaderGroupCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stageCount: u32 = @import("std").mem.zeroes(u32),
    pStages: [*c]const VkPipelineShaderStageCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineShaderStageCreateInfo),
    pVertexInputState: [*c]const VkPipelineVertexInputStateCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineVertexInputStateCreateInfo),
    pTessellationState: [*c]const VkPipelineTessellationStateCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineTessellationStateCreateInfo),
};
pub const VkGraphicsShaderGroupCreateInfoNV = struct_VkGraphicsShaderGroupCreateInfoNV;
pub const struct_VkGraphicsPipelineShaderGroupsCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    groupCount: u32 = @import("std").mem.zeroes(u32),
    pGroups: [*c]const VkGraphicsShaderGroupCreateInfoNV = @import("std").mem.zeroes([*c]const VkGraphicsShaderGroupCreateInfoNV),
    pipelineCount: u32 = @import("std").mem.zeroes(u32),
    pPipelines: [*c]const VkPipeline = @import("std").mem.zeroes([*c]const VkPipeline),
};
pub const VkGraphicsPipelineShaderGroupsCreateInfoNV = struct_VkGraphicsPipelineShaderGroupsCreateInfoNV;
pub const struct_VkBindShaderGroupIndirectCommandNV = extern struct {
    groupIndex: u32 = @import("std").mem.zeroes(u32),
};
pub const VkBindShaderGroupIndirectCommandNV = struct_VkBindShaderGroupIndirectCommandNV;
pub const struct_VkBindIndexBufferIndirectCommandNV = extern struct {
    bufferAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    size: u32 = @import("std").mem.zeroes(u32),
    indexType: VkIndexType = @import("std").mem.zeroes(VkIndexType),
};
pub const VkBindIndexBufferIndirectCommandNV = struct_VkBindIndexBufferIndirectCommandNV;
pub const struct_VkBindVertexBufferIndirectCommandNV = extern struct {
    bufferAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    size: u32 = @import("std").mem.zeroes(u32),
    stride: u32 = @import("std").mem.zeroes(u32),
};
pub const VkBindVertexBufferIndirectCommandNV = struct_VkBindVertexBufferIndirectCommandNV;
pub const struct_VkSetStateFlagsIndirectCommandNV = extern struct {
    data: u32 = @import("std").mem.zeroes(u32),
};
pub const VkSetStateFlagsIndirectCommandNV = struct_VkSetStateFlagsIndirectCommandNV;
pub const struct_VkIndirectCommandsStreamNV = extern struct {
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    offset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkIndirectCommandsStreamNV = struct_VkIndirectCommandsStreamNV;
pub const struct_VkIndirectCommandsLayoutTokenNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    tokenType: VkIndirectCommandsTokenTypeNV = @import("std").mem.zeroes(VkIndirectCommandsTokenTypeNV),
    stream: u32 = @import("std").mem.zeroes(u32),
    offset: u32 = @import("std").mem.zeroes(u32),
    vertexBindingUnit: u32 = @import("std").mem.zeroes(u32),
    vertexDynamicStride: VkBool32 = @import("std").mem.zeroes(VkBool32),
    pushconstantPipelineLayout: VkPipelineLayout = @import("std").mem.zeroes(VkPipelineLayout),
    pushconstantShaderStageFlags: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    pushconstantOffset: u32 = @import("std").mem.zeroes(u32),
    pushconstantSize: u32 = @import("std").mem.zeroes(u32),
    indirectStateFlags: VkIndirectStateFlagsNV = @import("std").mem.zeroes(VkIndirectStateFlagsNV),
    indexTypeCount: u32 = @import("std").mem.zeroes(u32),
    pIndexTypes: [*c]const VkIndexType = @import("std").mem.zeroes([*c]const VkIndexType),
    pIndexTypeValues: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkIndirectCommandsLayoutTokenNV = struct_VkIndirectCommandsLayoutTokenNV;
pub const struct_VkIndirectCommandsLayoutCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkIndirectCommandsLayoutUsageFlagsNV = @import("std").mem.zeroes(VkIndirectCommandsLayoutUsageFlagsNV),
    pipelineBindPoint: VkPipelineBindPoint = @import("std").mem.zeroes(VkPipelineBindPoint),
    tokenCount: u32 = @import("std").mem.zeroes(u32),
    pTokens: [*c]const VkIndirectCommandsLayoutTokenNV = @import("std").mem.zeroes([*c]const VkIndirectCommandsLayoutTokenNV),
    streamCount: u32 = @import("std").mem.zeroes(u32),
    pStreamStrides: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
};
pub const VkIndirectCommandsLayoutCreateInfoNV = struct_VkIndirectCommandsLayoutCreateInfoNV;
pub const struct_VkGeneratedCommandsInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pipelineBindPoint: VkPipelineBindPoint = @import("std").mem.zeroes(VkPipelineBindPoint),
    pipeline: VkPipeline = @import("std").mem.zeroes(VkPipeline),
    indirectCommandsLayout: VkIndirectCommandsLayoutNV = @import("std").mem.zeroes(VkIndirectCommandsLayoutNV),
    streamCount: u32 = @import("std").mem.zeroes(u32),
    pStreams: [*c]const VkIndirectCommandsStreamNV = @import("std").mem.zeroes([*c]const VkIndirectCommandsStreamNV),
    sequencesCount: u32 = @import("std").mem.zeroes(u32),
    preprocessBuffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    preprocessOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    preprocessSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    sequencesCountBuffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    sequencesCountOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    sequencesIndexBuffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    sequencesIndexOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkGeneratedCommandsInfoNV = struct_VkGeneratedCommandsInfoNV;
pub const struct_VkGeneratedCommandsMemoryRequirementsInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pipelineBindPoint: VkPipelineBindPoint = @import("std").mem.zeroes(VkPipelineBindPoint),
    pipeline: VkPipeline = @import("std").mem.zeroes(VkPipeline),
    indirectCommandsLayout: VkIndirectCommandsLayoutNV = @import("std").mem.zeroes(VkIndirectCommandsLayoutNV),
    maxSequencesCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkGeneratedCommandsMemoryRequirementsInfoNV = struct_VkGeneratedCommandsMemoryRequirementsInfoNV;
pub const PFN_vkGetGeneratedCommandsMemoryRequirementsNV = ?*const fn (VkDevice, [*c]const VkGeneratedCommandsMemoryRequirementsInfoNV, [*c]VkMemoryRequirements2) callconv(.C) void;
pub const PFN_vkCmdPreprocessGeneratedCommandsNV = ?*const fn (VkCommandBuffer, [*c]const VkGeneratedCommandsInfoNV) callconv(.C) void;
pub const PFN_vkCmdExecuteGeneratedCommandsNV = ?*const fn (VkCommandBuffer, VkBool32, [*c]const VkGeneratedCommandsInfoNV) callconv(.C) void;
pub const PFN_vkCmdBindPipelineShaderGroupNV = ?*const fn (VkCommandBuffer, VkPipelineBindPoint, VkPipeline, u32) callconv(.C) void;
pub const PFN_vkCreateIndirectCommandsLayoutNV = ?*const fn (VkDevice, [*c]const VkIndirectCommandsLayoutCreateInfoNV, [*c]const VkAllocationCallbacks, [*c]VkIndirectCommandsLayoutNV) callconv(.C) VkResult;
pub const PFN_vkDestroyIndirectCommandsLayoutNV = ?*const fn (VkDevice, VkIndirectCommandsLayoutNV, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub extern fn vkGetGeneratedCommandsMemoryRequirementsNV(device: VkDevice, pInfo: [*c]const VkGeneratedCommandsMemoryRequirementsInfoNV, pMemoryRequirements: [*c]VkMemoryRequirements2) void;
pub extern fn vkCmdPreprocessGeneratedCommandsNV(commandBuffer: VkCommandBuffer, pGeneratedCommandsInfo: [*c]const VkGeneratedCommandsInfoNV) void;
pub extern fn vkCmdExecuteGeneratedCommandsNV(commandBuffer: VkCommandBuffer, isPreprocessed: VkBool32, pGeneratedCommandsInfo: [*c]const VkGeneratedCommandsInfoNV) void;
pub extern fn vkCmdBindPipelineShaderGroupNV(commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, pipeline: VkPipeline, groupIndex: u32) void;
pub extern fn vkCreateIndirectCommandsLayoutNV(device: VkDevice, pCreateInfo: [*c]const VkIndirectCommandsLayoutCreateInfoNV, pAllocator: [*c]const VkAllocationCallbacks, pIndirectCommandsLayout: [*c]VkIndirectCommandsLayoutNV) VkResult;
pub extern fn vkDestroyIndirectCommandsLayoutNV(device: VkDevice, indirectCommandsLayout: VkIndirectCommandsLayoutNV, pAllocator: [*c]const VkAllocationCallbacks) void;
pub const struct_VkPhysicalDeviceInheritedViewportScissorFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    inheritedViewportScissor2D: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceInheritedViewportScissorFeaturesNV = struct_VkPhysicalDeviceInheritedViewportScissorFeaturesNV;
pub const struct_VkCommandBufferInheritanceViewportScissorInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    viewportScissor2D: VkBool32 = @import("std").mem.zeroes(VkBool32),
    viewportDepthCount: u32 = @import("std").mem.zeroes(u32),
    pViewportDepths: [*c]const VkViewport = @import("std").mem.zeroes([*c]const VkViewport),
};
pub const VkCommandBufferInheritanceViewportScissorInfoNV = struct_VkCommandBufferInheritanceViewportScissorInfoNV;
pub const struct_VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    texelBufferAlignment: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT = struct_VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT;
pub const VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT = VkPhysicalDeviceTexelBufferAlignmentProperties;
pub const struct_VkRenderPassTransformBeginInfoQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    transform: VkSurfaceTransformFlagBitsKHR = @import("std").mem.zeroes(VkSurfaceTransformFlagBitsKHR),
};
pub const VkRenderPassTransformBeginInfoQCOM = struct_VkRenderPassTransformBeginInfoQCOM;
pub const struct_VkCommandBufferInheritanceRenderPassTransformInfoQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    transform: VkSurfaceTransformFlagBitsKHR = @import("std").mem.zeroes(VkSurfaceTransformFlagBitsKHR),
    renderArea: VkRect2D = @import("std").mem.zeroes(VkRect2D),
};
pub const VkCommandBufferInheritanceRenderPassTransformInfoQCOM = struct_VkCommandBufferInheritanceRenderPassTransformInfoQCOM;
pub const VK_DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORMAT_EXT: c_int = 0;
pub const VK_DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORCE_UNORM_EXT: c_int = 1;
pub const VK_DEPTH_BIAS_REPRESENTATION_FLOAT_EXT: c_int = 2;
pub const VK_DEPTH_BIAS_REPRESENTATION_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkDepthBiasRepresentationEXT = c_uint;
pub const VkDepthBiasRepresentationEXT = enum_VkDepthBiasRepresentationEXT;
pub const struct_VkPhysicalDeviceDepthBiasControlFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    depthBiasControl: VkBool32 = @import("std").mem.zeroes(VkBool32),
    leastRepresentableValueForceUnormRepresentation: VkBool32 = @import("std").mem.zeroes(VkBool32),
    floatRepresentation: VkBool32 = @import("std").mem.zeroes(VkBool32),
    depthBiasExact: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceDepthBiasControlFeaturesEXT = struct_VkPhysicalDeviceDepthBiasControlFeaturesEXT;
pub const struct_VkDepthBiasInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    depthBiasConstantFactor: f32 = @import("std").mem.zeroes(f32),
    depthBiasClamp: f32 = @import("std").mem.zeroes(f32),
    depthBiasSlopeFactor: f32 = @import("std").mem.zeroes(f32),
};
pub const VkDepthBiasInfoEXT = struct_VkDepthBiasInfoEXT;
pub const struct_VkDepthBiasRepresentationInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    depthBiasRepresentation: VkDepthBiasRepresentationEXT = @import("std").mem.zeroes(VkDepthBiasRepresentationEXT),
    depthBiasExact: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkDepthBiasRepresentationInfoEXT = struct_VkDepthBiasRepresentationInfoEXT;
pub const PFN_vkCmdSetDepthBias2EXT = ?*const fn (VkCommandBuffer, [*c]const VkDepthBiasInfoEXT) callconv(.C) void;
pub extern fn vkCmdSetDepthBias2EXT(commandBuffer: VkCommandBuffer, pDepthBiasInfo: [*c]const VkDepthBiasInfoEXT) void;
pub const VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT: c_int = 0;
pub const VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT: c_int = 1;
pub const VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT: c_int = 2;
pub const VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT: c_int = 3;
pub const VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT: c_int = 4;
pub const VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkDeviceMemoryReportEventTypeEXT = c_uint;
pub const VkDeviceMemoryReportEventTypeEXT = enum_VkDeviceMemoryReportEventTypeEXT;
pub const VkDeviceMemoryReportFlagsEXT = VkFlags;
pub const struct_VkPhysicalDeviceDeviceMemoryReportFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    deviceMemoryReport: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceDeviceMemoryReportFeaturesEXT = struct_VkPhysicalDeviceDeviceMemoryReportFeaturesEXT;
pub const struct_VkDeviceMemoryReportCallbackDataEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    flags: VkDeviceMemoryReportFlagsEXT = @import("std").mem.zeroes(VkDeviceMemoryReportFlagsEXT),
    type: VkDeviceMemoryReportEventTypeEXT = @import("std").mem.zeroes(VkDeviceMemoryReportEventTypeEXT),
    memoryObjectId: u64 = @import("std").mem.zeroes(u64),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    objectType: VkObjectType = @import("std").mem.zeroes(VkObjectType),
    objectHandle: u64 = @import("std").mem.zeroes(u64),
    heapIndex: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDeviceMemoryReportCallbackDataEXT = struct_VkDeviceMemoryReportCallbackDataEXT;
pub const PFN_vkDeviceMemoryReportCallbackEXT = ?*const fn ([*c]const VkDeviceMemoryReportCallbackDataEXT, ?*anyopaque) callconv(.C) void;
pub const struct_VkDeviceDeviceMemoryReportCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkDeviceMemoryReportFlagsEXT = @import("std").mem.zeroes(VkDeviceMemoryReportFlagsEXT),
    pfnUserCallback: PFN_vkDeviceMemoryReportCallbackEXT = @import("std").mem.zeroes(PFN_vkDeviceMemoryReportCallbackEXT),
    pUserData: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const VkDeviceDeviceMemoryReportCreateInfoEXT = struct_VkDeviceDeviceMemoryReportCreateInfoEXT;
pub const PFN_vkAcquireDrmDisplayEXT = ?*const fn (VkPhysicalDevice, i32, VkDisplayKHR) callconv(.C) VkResult;
pub const PFN_vkGetDrmDisplayEXT = ?*const fn (VkPhysicalDevice, i32, u32, [*c]VkDisplayKHR) callconv(.C) VkResult;
pub extern fn vkAcquireDrmDisplayEXT(physicalDevice: VkPhysicalDevice, drmFd: i32, display: VkDisplayKHR) VkResult;
pub extern fn vkGetDrmDisplayEXT(physicalDevice: VkPhysicalDevice, drmFd: i32, connectorId: u32, display: [*c]VkDisplayKHR) VkResult;
pub const struct_VkPhysicalDeviceRobustness2FeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    robustBufferAccess2: VkBool32 = @import("std").mem.zeroes(VkBool32),
    robustImageAccess2: VkBool32 = @import("std").mem.zeroes(VkBool32),
    nullDescriptor: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceRobustness2FeaturesEXT = struct_VkPhysicalDeviceRobustness2FeaturesEXT;
pub const struct_VkPhysicalDeviceRobustness2PropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    robustStorageBufferAccessSizeAlignment: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    robustUniformBufferAccessSizeAlignment: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkPhysicalDeviceRobustness2PropertiesEXT = struct_VkPhysicalDeviceRobustness2PropertiesEXT;
pub const struct_VkSamplerCustomBorderColorCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    customBorderColor: VkClearColorValue = @import("std").mem.zeroes(VkClearColorValue),
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
};
pub const VkSamplerCustomBorderColorCreateInfoEXT = struct_VkSamplerCustomBorderColorCreateInfoEXT;
pub const struct_VkPhysicalDeviceCustomBorderColorPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxCustomBorderColorSamplers: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceCustomBorderColorPropertiesEXT = struct_VkPhysicalDeviceCustomBorderColorPropertiesEXT;
pub const struct_VkPhysicalDeviceCustomBorderColorFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    customBorderColors: VkBool32 = @import("std").mem.zeroes(VkBool32),
    customBorderColorWithoutFormat: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceCustomBorderColorFeaturesEXT = struct_VkPhysicalDeviceCustomBorderColorFeaturesEXT;
pub const struct_VkPhysicalDevicePresentBarrierFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    presentBarrier: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevicePresentBarrierFeaturesNV = struct_VkPhysicalDevicePresentBarrierFeaturesNV;
pub const struct_VkSurfaceCapabilitiesPresentBarrierNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    presentBarrierSupported: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkSurfaceCapabilitiesPresentBarrierNV = struct_VkSurfaceCapabilitiesPresentBarrierNV;
pub const struct_VkSwapchainPresentBarrierCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    presentBarrierEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkSwapchainPresentBarrierCreateInfoNV = struct_VkSwapchainPresentBarrierCreateInfoNV;
pub const VkPrivateDataSlotEXT = VkPrivateDataSlot;
pub const VkPrivateDataSlotCreateFlagsEXT = VkPrivateDataSlotCreateFlags;
pub const VkPhysicalDevicePrivateDataFeaturesEXT = VkPhysicalDevicePrivateDataFeatures;
pub const VkDevicePrivateDataCreateInfoEXT = VkDevicePrivateDataCreateInfo;
pub const VkPrivateDataSlotCreateInfoEXT = VkPrivateDataSlotCreateInfo;
pub const PFN_vkCreatePrivateDataSlotEXT = ?*const fn (VkDevice, [*c]const VkPrivateDataSlotCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkPrivateDataSlot) callconv(.C) VkResult;
pub const PFN_vkDestroyPrivateDataSlotEXT = ?*const fn (VkDevice, VkPrivateDataSlot, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkSetPrivateDataEXT = ?*const fn (VkDevice, VkObjectType, u64, VkPrivateDataSlot, u64) callconv(.C) VkResult;
pub const PFN_vkGetPrivateDataEXT = ?*const fn (VkDevice, VkObjectType, u64, VkPrivateDataSlot, [*c]u64) callconv(.C) void;
pub extern fn vkCreatePrivateDataSlotEXT(device: VkDevice, pCreateInfo: [*c]const VkPrivateDataSlotCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pPrivateDataSlot: [*c]VkPrivateDataSlot) VkResult;
pub extern fn vkDestroyPrivateDataSlotEXT(device: VkDevice, privateDataSlot: VkPrivateDataSlot, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkSetPrivateDataEXT(device: VkDevice, objectType: VkObjectType, objectHandle: u64, privateDataSlot: VkPrivateDataSlot, data: u64) VkResult;
pub extern fn vkGetPrivateDataEXT(device: VkDevice, objectType: VkObjectType, objectHandle: u64, privateDataSlot: VkPrivateDataSlot, pData: [*c]u64) void;
pub const VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT = VkPhysicalDevicePipelineCreationCacheControlFeatures;
pub const VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV: c_int = 1;
pub const VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV: c_int = 2;
pub const VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV: c_int = 4;
pub const VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_ERROR_REPORTING_BIT_NV: c_int = 8;
pub const VK_DEVICE_DIAGNOSTICS_CONFIG_FLAG_BITS_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkDeviceDiagnosticsConfigFlagBitsNV = c_uint;
pub const VkDeviceDiagnosticsConfigFlagBitsNV = enum_VkDeviceDiagnosticsConfigFlagBitsNV;
pub const VkDeviceDiagnosticsConfigFlagsNV = VkFlags;
pub const struct_VkPhysicalDeviceDiagnosticsConfigFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    diagnosticsConfig: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceDiagnosticsConfigFeaturesNV = struct_VkPhysicalDeviceDiagnosticsConfigFeaturesNV;
pub const struct_VkDeviceDiagnosticsConfigCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkDeviceDiagnosticsConfigFlagsNV = @import("std").mem.zeroes(VkDeviceDiagnosticsConfigFlagsNV),
};
pub const VkDeviceDiagnosticsConfigCreateInfoNV = struct_VkDeviceDiagnosticsConfigCreateInfoNV;
pub const struct_VkCudaModuleNV_T = opaque {};
pub const VkCudaModuleNV = ?*struct_VkCudaModuleNV_T;
pub const struct_VkCudaFunctionNV_T = opaque {};
pub const VkCudaFunctionNV = ?*struct_VkCudaFunctionNV_T;
pub const struct_VkCudaModuleCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    dataSize: usize = @import("std").mem.zeroes(usize),
    pData: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const VkCudaModuleCreateInfoNV = struct_VkCudaModuleCreateInfoNV;
pub const struct_VkCudaFunctionCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    module: VkCudaModuleNV = @import("std").mem.zeroes(VkCudaModuleNV),
    pName: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
};
pub const VkCudaFunctionCreateInfoNV = struct_VkCudaFunctionCreateInfoNV;
pub const struct_VkCudaLaunchInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    function: VkCudaFunctionNV = @import("std").mem.zeroes(VkCudaFunctionNV),
    gridDimX: u32 = @import("std").mem.zeroes(u32),
    gridDimY: u32 = @import("std").mem.zeroes(u32),
    gridDimZ: u32 = @import("std").mem.zeroes(u32),
    blockDimX: u32 = @import("std").mem.zeroes(u32),
    blockDimY: u32 = @import("std").mem.zeroes(u32),
    blockDimZ: u32 = @import("std").mem.zeroes(u32),
    sharedMemBytes: u32 = @import("std").mem.zeroes(u32),
    paramCount: usize = @import("std").mem.zeroes(usize),
    pParams: [*c]const ?*const anyopaque = @import("std").mem.zeroes([*c]const ?*const anyopaque),
    extraCount: usize = @import("std").mem.zeroes(usize),
    pExtras: [*c]const ?*const anyopaque = @import("std").mem.zeroes([*c]const ?*const anyopaque),
};
pub const VkCudaLaunchInfoNV = struct_VkCudaLaunchInfoNV;
pub const struct_VkPhysicalDeviceCudaKernelLaunchFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    cudaKernelLaunchFeatures: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceCudaKernelLaunchFeaturesNV = struct_VkPhysicalDeviceCudaKernelLaunchFeaturesNV;
pub const struct_VkPhysicalDeviceCudaKernelLaunchPropertiesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    computeCapabilityMinor: u32 = @import("std").mem.zeroes(u32),
    computeCapabilityMajor: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceCudaKernelLaunchPropertiesNV = struct_VkPhysicalDeviceCudaKernelLaunchPropertiesNV;
pub const PFN_vkCreateCudaModuleNV = ?*const fn (VkDevice, [*c]const VkCudaModuleCreateInfoNV, [*c]const VkAllocationCallbacks, [*c]VkCudaModuleNV) callconv(.C) VkResult;
pub const PFN_vkGetCudaModuleCacheNV = ?*const fn (VkDevice, VkCudaModuleNV, [*c]usize, ?*anyopaque) callconv(.C) VkResult;
pub const PFN_vkCreateCudaFunctionNV = ?*const fn (VkDevice, [*c]const VkCudaFunctionCreateInfoNV, [*c]const VkAllocationCallbacks, [*c]VkCudaFunctionNV) callconv(.C) VkResult;
pub const PFN_vkDestroyCudaModuleNV = ?*const fn (VkDevice, VkCudaModuleNV, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkDestroyCudaFunctionNV = ?*const fn (VkDevice, VkCudaFunctionNV, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCmdCudaLaunchKernelNV = ?*const fn (VkCommandBuffer, [*c]const VkCudaLaunchInfoNV) callconv(.C) void;
pub extern fn vkCreateCudaModuleNV(device: VkDevice, pCreateInfo: [*c]const VkCudaModuleCreateInfoNV, pAllocator: [*c]const VkAllocationCallbacks, pModule: [*c]VkCudaModuleNV) VkResult;
pub extern fn vkGetCudaModuleCacheNV(device: VkDevice, module: VkCudaModuleNV, pCacheSize: [*c]usize, pCacheData: ?*anyopaque) VkResult;
pub extern fn vkCreateCudaFunctionNV(device: VkDevice, pCreateInfo: [*c]const VkCudaFunctionCreateInfoNV, pAllocator: [*c]const VkAllocationCallbacks, pFunction: [*c]VkCudaFunctionNV) VkResult;
pub extern fn vkDestroyCudaModuleNV(device: VkDevice, module: VkCudaModuleNV, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkDestroyCudaFunctionNV(device: VkDevice, function: VkCudaFunctionNV, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkCmdCudaLaunchKernelNV(commandBuffer: VkCommandBuffer, pLaunchInfo: [*c]const VkCudaLaunchInfoNV) void;
pub const struct_VkQueryLowLatencySupportNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pQueriedLowLatencyData: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const VkQueryLowLatencySupportNV = struct_VkQueryLowLatencySupportNV;
pub const struct_VkAccelerationStructureKHR_T = opaque {};
pub const VkAccelerationStructureKHR = ?*struct_VkAccelerationStructureKHR_T;
pub const struct_VkPhysicalDeviceDescriptorBufferPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    combinedImageSamplerDescriptorSingleArray: VkBool32 = @import("std").mem.zeroes(VkBool32),
    bufferlessPushDescriptors: VkBool32 = @import("std").mem.zeroes(VkBool32),
    allowSamplerImageViewPostSubmitCreation: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBufferOffsetAlignment: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    maxDescriptorBufferBindings: u32 = @import("std").mem.zeroes(u32),
    maxResourceDescriptorBufferBindings: u32 = @import("std").mem.zeroes(u32),
    maxSamplerDescriptorBufferBindings: u32 = @import("std").mem.zeroes(u32),
    maxEmbeddedImmutableSamplerBindings: u32 = @import("std").mem.zeroes(u32),
    maxEmbeddedImmutableSamplers: u32 = @import("std").mem.zeroes(u32),
    bufferCaptureReplayDescriptorDataSize: usize = @import("std").mem.zeroes(usize),
    imageCaptureReplayDescriptorDataSize: usize = @import("std").mem.zeroes(usize),
    imageViewCaptureReplayDescriptorDataSize: usize = @import("std").mem.zeroes(usize),
    samplerCaptureReplayDescriptorDataSize: usize = @import("std").mem.zeroes(usize),
    accelerationStructureCaptureReplayDescriptorDataSize: usize = @import("std").mem.zeroes(usize),
    samplerDescriptorSize: usize = @import("std").mem.zeroes(usize),
    combinedImageSamplerDescriptorSize: usize = @import("std").mem.zeroes(usize),
    sampledImageDescriptorSize: usize = @import("std").mem.zeroes(usize),
    storageImageDescriptorSize: usize = @import("std").mem.zeroes(usize),
    uniformTexelBufferDescriptorSize: usize = @import("std").mem.zeroes(usize),
    robustUniformTexelBufferDescriptorSize: usize = @import("std").mem.zeroes(usize),
    storageTexelBufferDescriptorSize: usize = @import("std").mem.zeroes(usize),
    robustStorageTexelBufferDescriptorSize: usize = @import("std").mem.zeroes(usize),
    uniformBufferDescriptorSize: usize = @import("std").mem.zeroes(usize),
    robustUniformBufferDescriptorSize: usize = @import("std").mem.zeroes(usize),
    storageBufferDescriptorSize: usize = @import("std").mem.zeroes(usize),
    robustStorageBufferDescriptorSize: usize = @import("std").mem.zeroes(usize),
    inputAttachmentDescriptorSize: usize = @import("std").mem.zeroes(usize),
    accelerationStructureDescriptorSize: usize = @import("std").mem.zeroes(usize),
    maxSamplerDescriptorBufferRange: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    maxResourceDescriptorBufferRange: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    samplerDescriptorBufferAddressSpaceSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    resourceDescriptorBufferAddressSpaceSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    descriptorBufferAddressSpaceSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkPhysicalDeviceDescriptorBufferPropertiesEXT = struct_VkPhysicalDeviceDescriptorBufferPropertiesEXT;
pub const struct_VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    combinedImageSamplerDensityMapDescriptorSize: usize = @import("std").mem.zeroes(usize),
};
pub const VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT = struct_VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT;
pub const struct_VkPhysicalDeviceDescriptorBufferFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    descriptorBuffer: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBufferCaptureReplay: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBufferImageLayoutIgnored: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBufferPushDescriptors: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceDescriptorBufferFeaturesEXT = struct_VkPhysicalDeviceDescriptorBufferFeaturesEXT;
pub const struct_VkDescriptorAddressInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    address: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    range: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
};
pub const VkDescriptorAddressInfoEXT = struct_VkDescriptorAddressInfoEXT;
pub const struct_VkDescriptorBufferBindingInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    address: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    usage: VkBufferUsageFlags = @import("std").mem.zeroes(VkBufferUsageFlags),
};
pub const VkDescriptorBufferBindingInfoEXT = struct_VkDescriptorBufferBindingInfoEXT;
pub const struct_VkDescriptorBufferBindingPushDescriptorBufferHandleEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
};
pub const VkDescriptorBufferBindingPushDescriptorBufferHandleEXT = struct_VkDescriptorBufferBindingPushDescriptorBufferHandleEXT;
pub const union_VkDescriptorDataEXT = extern union {
    pSampler: [*c]const VkSampler,
    pCombinedImageSampler: [*c]const VkDescriptorImageInfo,
    pInputAttachmentImage: [*c]const VkDescriptorImageInfo,
    pSampledImage: [*c]const VkDescriptorImageInfo,
    pStorageImage: [*c]const VkDescriptorImageInfo,
    pUniformTexelBuffer: [*c]const VkDescriptorAddressInfoEXT,
    pStorageTexelBuffer: [*c]const VkDescriptorAddressInfoEXT,
    pUniformBuffer: [*c]const VkDescriptorAddressInfoEXT,
    pStorageBuffer: [*c]const VkDescriptorAddressInfoEXT,
    accelerationStructure: VkDeviceAddress,
};
pub const VkDescriptorDataEXT = union_VkDescriptorDataEXT;
pub const struct_VkDescriptorGetInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    type: VkDescriptorType = @import("std").mem.zeroes(VkDescriptorType),
    data: VkDescriptorDataEXT = @import("std").mem.zeroes(VkDescriptorDataEXT),
};
pub const VkDescriptorGetInfoEXT = struct_VkDescriptorGetInfoEXT;
pub const struct_VkBufferCaptureDescriptorDataInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
};
pub const VkBufferCaptureDescriptorDataInfoEXT = struct_VkBufferCaptureDescriptorDataInfoEXT;
pub const struct_VkImageCaptureDescriptorDataInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    image: VkImage = @import("std").mem.zeroes(VkImage),
};
pub const VkImageCaptureDescriptorDataInfoEXT = struct_VkImageCaptureDescriptorDataInfoEXT;
pub const struct_VkImageViewCaptureDescriptorDataInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    imageView: VkImageView = @import("std").mem.zeroes(VkImageView),
};
pub const VkImageViewCaptureDescriptorDataInfoEXT = struct_VkImageViewCaptureDescriptorDataInfoEXT;
pub const struct_VkSamplerCaptureDescriptorDataInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    sampler: VkSampler = @import("std").mem.zeroes(VkSampler),
};
pub const VkSamplerCaptureDescriptorDataInfoEXT = struct_VkSamplerCaptureDescriptorDataInfoEXT;
pub const struct_VkOpaqueCaptureDescriptorDataCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    opaqueCaptureDescriptorData: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const VkOpaqueCaptureDescriptorDataCreateInfoEXT = struct_VkOpaqueCaptureDescriptorDataCreateInfoEXT;
pub const struct_VkAccelerationStructureCaptureDescriptorDataInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    accelerationStructure: VkAccelerationStructureKHR = @import("std").mem.zeroes(VkAccelerationStructureKHR),
    accelerationStructureNV: VkAccelerationStructureNV = @import("std").mem.zeroes(VkAccelerationStructureNV),
};
pub const VkAccelerationStructureCaptureDescriptorDataInfoEXT = struct_VkAccelerationStructureCaptureDescriptorDataInfoEXT;
pub const PFN_vkGetDescriptorSetLayoutSizeEXT = ?*const fn (VkDevice, VkDescriptorSetLayout, [*c]VkDeviceSize) callconv(.C) void;
pub const PFN_vkGetDescriptorSetLayoutBindingOffsetEXT = ?*const fn (VkDevice, VkDescriptorSetLayout, u32, [*c]VkDeviceSize) callconv(.C) void;
pub const PFN_vkGetDescriptorEXT = ?*const fn (VkDevice, [*c]const VkDescriptorGetInfoEXT, usize, ?*anyopaque) callconv(.C) void;
pub const PFN_vkCmdBindDescriptorBuffersEXT = ?*const fn (VkCommandBuffer, u32, [*c]const VkDescriptorBufferBindingInfoEXT) callconv(.C) void;
pub const PFN_vkCmdSetDescriptorBufferOffsetsEXT = ?*const fn (VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, u32, u32, [*c]const u32, [*c]const VkDeviceSize) callconv(.C) void;
pub const PFN_vkCmdBindDescriptorBufferEmbeddedSamplersEXT = ?*const fn (VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, u32) callconv(.C) void;
pub const PFN_vkGetBufferOpaqueCaptureDescriptorDataEXT = ?*const fn (VkDevice, [*c]const VkBufferCaptureDescriptorDataInfoEXT, ?*anyopaque) callconv(.C) VkResult;
pub const PFN_vkGetImageOpaqueCaptureDescriptorDataEXT = ?*const fn (VkDevice, [*c]const VkImageCaptureDescriptorDataInfoEXT, ?*anyopaque) callconv(.C) VkResult;
pub const PFN_vkGetImageViewOpaqueCaptureDescriptorDataEXT = ?*const fn (VkDevice, [*c]const VkImageViewCaptureDescriptorDataInfoEXT, ?*anyopaque) callconv(.C) VkResult;
pub const PFN_vkGetSamplerOpaqueCaptureDescriptorDataEXT = ?*const fn (VkDevice, [*c]const VkSamplerCaptureDescriptorDataInfoEXT, ?*anyopaque) callconv(.C) VkResult;
pub const PFN_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = ?*const fn (VkDevice, [*c]const VkAccelerationStructureCaptureDescriptorDataInfoEXT, ?*anyopaque) callconv(.C) VkResult;
pub extern fn vkGetDescriptorSetLayoutSizeEXT(device: VkDevice, layout: VkDescriptorSetLayout, pLayoutSizeInBytes: [*c]VkDeviceSize) void;
pub extern fn vkGetDescriptorSetLayoutBindingOffsetEXT(device: VkDevice, layout: VkDescriptorSetLayout, binding: u32, pOffset: [*c]VkDeviceSize) void;
pub extern fn vkGetDescriptorEXT(device: VkDevice, pDescriptorInfo: [*c]const VkDescriptorGetInfoEXT, dataSize: usize, pDescriptor: ?*anyopaque) void;
pub extern fn vkCmdBindDescriptorBuffersEXT(commandBuffer: VkCommandBuffer, bufferCount: u32, pBindingInfos: [*c]const VkDescriptorBufferBindingInfoEXT) void;
pub extern fn vkCmdSetDescriptorBufferOffsetsEXT(commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, layout: VkPipelineLayout, firstSet: u32, setCount: u32, pBufferIndices: [*c]const u32, pOffsets: [*c]const VkDeviceSize) void;
pub extern fn vkCmdBindDescriptorBufferEmbeddedSamplersEXT(commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, layout: VkPipelineLayout, set: u32) void;
pub extern fn vkGetBufferOpaqueCaptureDescriptorDataEXT(device: VkDevice, pInfo: [*c]const VkBufferCaptureDescriptorDataInfoEXT, pData: ?*anyopaque) VkResult;
pub extern fn vkGetImageOpaqueCaptureDescriptorDataEXT(device: VkDevice, pInfo: [*c]const VkImageCaptureDescriptorDataInfoEXT, pData: ?*anyopaque) VkResult;
pub extern fn vkGetImageViewOpaqueCaptureDescriptorDataEXT(device: VkDevice, pInfo: [*c]const VkImageViewCaptureDescriptorDataInfoEXT, pData: ?*anyopaque) VkResult;
pub extern fn vkGetSamplerOpaqueCaptureDescriptorDataEXT(device: VkDevice, pInfo: [*c]const VkSamplerCaptureDescriptorDataInfoEXT, pData: ?*anyopaque) VkResult;
pub extern fn vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT(device: VkDevice, pInfo: [*c]const VkAccelerationStructureCaptureDescriptorDataInfoEXT, pData: ?*anyopaque) VkResult;
pub const VK_GRAPHICS_PIPELINE_LIBRARY_VERTEX_INPUT_INTERFACE_BIT_EXT: c_int = 1;
pub const VK_GRAPHICS_PIPELINE_LIBRARY_PRE_RASTERIZATION_SHADERS_BIT_EXT: c_int = 2;
pub const VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_SHADER_BIT_EXT: c_int = 4;
pub const VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_OUTPUT_INTERFACE_BIT_EXT: c_int = 8;
pub const VK_GRAPHICS_PIPELINE_LIBRARY_FLAG_BITS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkGraphicsPipelineLibraryFlagBitsEXT = c_uint;
pub const VkGraphicsPipelineLibraryFlagBitsEXT = enum_VkGraphicsPipelineLibraryFlagBitsEXT;
pub const VkGraphicsPipelineLibraryFlagsEXT = VkFlags;
pub const struct_VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    graphicsPipelineLibrary: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT = struct_VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT;
pub const struct_VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    graphicsPipelineLibraryFastLinking: VkBool32 = @import("std").mem.zeroes(VkBool32),
    graphicsPipelineLibraryIndependentInterpolationDecoration: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT = struct_VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT;
pub const struct_VkGraphicsPipelineLibraryCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkGraphicsPipelineLibraryFlagsEXT = @import("std").mem.zeroes(VkGraphicsPipelineLibraryFlagsEXT),
};
pub const VkGraphicsPipelineLibraryCreateInfoEXT = struct_VkGraphicsPipelineLibraryCreateInfoEXT;
pub const struct_VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderEarlyAndLateFragmentTests: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD = struct_VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD;
pub const VK_FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV: c_int = 0;
pub const VK_FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV: c_int = 1;
pub const VK_FRAGMENT_SHADING_RATE_TYPE_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkFragmentShadingRateTypeNV = c_uint;
pub const VkFragmentShadingRateTypeNV = enum_VkFragmentShadingRateTypeNV;
pub const VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV: c_int = 0;
pub const VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV: c_int = 1;
pub const VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV: c_int = 4;
pub const VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV: c_int = 5;
pub const VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV: c_int = 6;
pub const VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV: c_int = 9;
pub const VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV: c_int = 10;
pub const VK_FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV: c_int = 11;
pub const VK_FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV: c_int = 12;
pub const VK_FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV: c_int = 13;
pub const VK_FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV: c_int = 14;
pub const VK_FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV: c_int = 15;
pub const VK_FRAGMENT_SHADING_RATE_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkFragmentShadingRateNV = c_uint;
pub const VkFragmentShadingRateNV = enum_VkFragmentShadingRateNV;
pub const struct_VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    fragmentShadingRateEnums: VkBool32 = @import("std").mem.zeroes(VkBool32),
    supersampleFragmentShadingRates: VkBool32 = @import("std").mem.zeroes(VkBool32),
    noInvocationFragmentShadingRates: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV = struct_VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV;
pub const struct_VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxFragmentShadingRateInvocationCount: VkSampleCountFlagBits = @import("std").mem.zeroes(VkSampleCountFlagBits),
};
pub const VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV = struct_VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV;
pub const struct_VkPipelineFragmentShadingRateEnumStateCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    shadingRateType: VkFragmentShadingRateTypeNV = @import("std").mem.zeroes(VkFragmentShadingRateTypeNV),
    shadingRate: VkFragmentShadingRateNV = @import("std").mem.zeroes(VkFragmentShadingRateNV),
    combinerOps: [2]VkFragmentShadingRateCombinerOpKHR = @import("std").mem.zeroes([2]VkFragmentShadingRateCombinerOpKHR),
};
pub const VkPipelineFragmentShadingRateEnumStateCreateInfoNV = struct_VkPipelineFragmentShadingRateEnumStateCreateInfoNV;
pub const PFN_vkCmdSetFragmentShadingRateEnumNV = ?*const fn (VkCommandBuffer, VkFragmentShadingRateNV, [*c]const VkFragmentShadingRateCombinerOpKHR) callconv(.C) void;
pub extern fn vkCmdSetFragmentShadingRateEnumNV(commandBuffer: VkCommandBuffer, shadingRate: VkFragmentShadingRateNV, combinerOps: [*c]const VkFragmentShadingRateCombinerOpKHR) void;
pub const VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_STATIC_NV: c_int = 0;
pub const VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MATRIX_MOTION_NV: c_int = 1;
pub const VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_SRT_MOTION_NV: c_int = 2;
pub const VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkAccelerationStructureMotionInstanceTypeNV = c_uint;
pub const VkAccelerationStructureMotionInstanceTypeNV = enum_VkAccelerationStructureMotionInstanceTypeNV;
pub const VkAccelerationStructureMotionInfoFlagsNV = VkFlags;
pub const VkAccelerationStructureMotionInstanceFlagsNV = VkFlags;
pub const union_VkDeviceOrHostAddressConstKHR = extern union {
    deviceAddress: VkDeviceAddress,
    hostAddress: ?*const anyopaque,
};
pub const VkDeviceOrHostAddressConstKHR = union_VkDeviceOrHostAddressConstKHR;
pub const struct_VkAccelerationStructureGeometryMotionTrianglesDataNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    vertexData: VkDeviceOrHostAddressConstKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressConstKHR),
};
pub const VkAccelerationStructureGeometryMotionTrianglesDataNV = struct_VkAccelerationStructureGeometryMotionTrianglesDataNV;
pub const struct_VkAccelerationStructureMotionInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    maxInstances: u32 = @import("std").mem.zeroes(u32),
    flags: VkAccelerationStructureMotionInfoFlagsNV = @import("std").mem.zeroes(VkAccelerationStructureMotionInfoFlagsNV),
};
pub const VkAccelerationStructureMotionInfoNV = struct_VkAccelerationStructureMotionInfoNV;
// /usr/include/vulkan/vulkan_core.h:16613:35: warning: struct demoted to opaque type - has bitfield
pub const struct_VkAccelerationStructureMatrixMotionInstanceNV = opaque {};
pub const VkAccelerationStructureMatrixMotionInstanceNV = struct_VkAccelerationStructureMatrixMotionInstanceNV;
pub const struct_VkSRTDataNV = extern struct {
    sx: f32 = @import("std").mem.zeroes(f32),
    a: f32 = @import("std").mem.zeroes(f32),
    b: f32 = @import("std").mem.zeroes(f32),
    pvx: f32 = @import("std").mem.zeroes(f32),
    sy: f32 = @import("std").mem.zeroes(f32),
    c: f32 = @import("std").mem.zeroes(f32),
    pvy: f32 = @import("std").mem.zeroes(f32),
    sz: f32 = @import("std").mem.zeroes(f32),
    pvz: f32 = @import("std").mem.zeroes(f32),
    qx: f32 = @import("std").mem.zeroes(f32),
    qy: f32 = @import("std").mem.zeroes(f32),
    qz: f32 = @import("std").mem.zeroes(f32),
    qw: f32 = @import("std").mem.zeroes(f32),
    tx: f32 = @import("std").mem.zeroes(f32),
    ty: f32 = @import("std").mem.zeroes(f32),
    tz: f32 = @import("std").mem.zeroes(f32),
};
pub const VkSRTDataNV = struct_VkSRTDataNV;
// /usr/include/vulkan/vulkan_core.h:16642:35: warning: struct demoted to opaque type - has bitfield
pub const struct_VkAccelerationStructureSRTMotionInstanceNV = opaque {};
pub const VkAccelerationStructureSRTMotionInstanceNV = struct_VkAccelerationStructureSRTMotionInstanceNV;
pub const union_VkAccelerationStructureMotionInstanceDataNV = extern union {
    staticInstance: VkAccelerationStructureInstanceKHR,
    matrixMotionInstance: VkAccelerationStructureMatrixMotionInstanceNV,
    srtMotionInstance: VkAccelerationStructureSRTMotionInstanceNV,
};
pub const VkAccelerationStructureMotionInstanceDataNV = union_VkAccelerationStructureMotionInstanceDataNV;
pub const struct_VkAccelerationStructureMotionInstanceNV = extern struct {
    type: VkAccelerationStructureMotionInstanceTypeNV = @import("std").mem.zeroes(VkAccelerationStructureMotionInstanceTypeNV),
    flags: VkAccelerationStructureMotionInstanceFlagsNV = @import("std").mem.zeroes(VkAccelerationStructureMotionInstanceFlagsNV),
    data: VkAccelerationStructureMotionInstanceDataNV = @import("std").mem.zeroes(VkAccelerationStructureMotionInstanceDataNV),
};
pub const VkAccelerationStructureMotionInstanceNV = struct_VkAccelerationStructureMotionInstanceNV;
pub const struct_VkPhysicalDeviceRayTracingMotionBlurFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    rayTracingMotionBlur: VkBool32 = @import("std").mem.zeroes(VkBool32),
    rayTracingMotionBlurPipelineTraceRaysIndirect: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceRayTracingMotionBlurFeaturesNV = struct_VkPhysicalDeviceRayTracingMotionBlurFeaturesNV;
pub const struct_VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    ycbcr2plane444Formats: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT = struct_VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT;
pub const struct_VkPhysicalDeviceFragmentDensityMap2FeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    fragmentDensityMapDeferred: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceFragmentDensityMap2FeaturesEXT = struct_VkPhysicalDeviceFragmentDensityMap2FeaturesEXT;
pub const struct_VkPhysicalDeviceFragmentDensityMap2PropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    subsampledLoads: VkBool32 = @import("std").mem.zeroes(VkBool32),
    subsampledCoarseReconstructionEarlyAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxSubsampledArrayLayers: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetSubsampledSamplers: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceFragmentDensityMap2PropertiesEXT = struct_VkPhysicalDeviceFragmentDensityMap2PropertiesEXT;
pub const struct_VkCopyCommandTransformInfoQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    transform: VkSurfaceTransformFlagBitsKHR = @import("std").mem.zeroes(VkSurfaceTransformFlagBitsKHR),
};
pub const VkCopyCommandTransformInfoQCOM = struct_VkCopyCommandTransformInfoQCOM;
pub const VkPhysicalDeviceImageRobustnessFeaturesEXT = VkPhysicalDeviceImageRobustnessFeatures;
pub const VK_IMAGE_COMPRESSION_DEFAULT_EXT: c_int = 0;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_DEFAULT_EXT: c_int = 1;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_EXPLICIT_EXT: c_int = 2;
pub const VK_IMAGE_COMPRESSION_DISABLED_EXT: c_int = 4;
pub const VK_IMAGE_COMPRESSION_FLAG_BITS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkImageCompressionFlagBitsEXT = c_uint;
pub const VkImageCompressionFlagBitsEXT = enum_VkImageCompressionFlagBitsEXT;
pub const VkImageCompressionFlagsEXT = VkFlags;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_NONE_EXT: c_int = 0;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_1BPC_BIT_EXT: c_int = 1;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_2BPC_BIT_EXT: c_int = 2;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_3BPC_BIT_EXT: c_int = 4;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_4BPC_BIT_EXT: c_int = 8;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_5BPC_BIT_EXT: c_int = 16;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_6BPC_BIT_EXT: c_int = 32;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_7BPC_BIT_EXT: c_int = 64;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_8BPC_BIT_EXT: c_int = 128;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_9BPC_BIT_EXT: c_int = 256;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_10BPC_BIT_EXT: c_int = 512;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_11BPC_BIT_EXT: c_int = 1024;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_12BPC_BIT_EXT: c_int = 2048;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_13BPC_BIT_EXT: c_int = 4096;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_14BPC_BIT_EXT: c_int = 8192;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_15BPC_BIT_EXT: c_int = 16384;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_16BPC_BIT_EXT: c_int = 32768;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_17BPC_BIT_EXT: c_int = 65536;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_18BPC_BIT_EXT: c_int = 131072;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_19BPC_BIT_EXT: c_int = 262144;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_20BPC_BIT_EXT: c_int = 524288;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_21BPC_BIT_EXT: c_int = 1048576;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_22BPC_BIT_EXT: c_int = 2097152;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_23BPC_BIT_EXT: c_int = 4194304;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_24BPC_BIT_EXT: c_int = 8388608;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_FLAG_BITS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkImageCompressionFixedRateFlagBitsEXT = c_uint;
pub const VkImageCompressionFixedRateFlagBitsEXT = enum_VkImageCompressionFixedRateFlagBitsEXT;
pub const VkImageCompressionFixedRateFlagsEXT = VkFlags;
pub const struct_VkPhysicalDeviceImageCompressionControlFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    imageCompressionControl: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceImageCompressionControlFeaturesEXT = struct_VkPhysicalDeviceImageCompressionControlFeaturesEXT;
pub const struct_VkImageCompressionControlEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkImageCompressionFlagsEXT = @import("std").mem.zeroes(VkImageCompressionFlagsEXT),
    compressionControlPlaneCount: u32 = @import("std").mem.zeroes(u32),
    pFixedRateFlags: [*c]VkImageCompressionFixedRateFlagsEXT = @import("std").mem.zeroes([*c]VkImageCompressionFixedRateFlagsEXT),
};
pub const VkImageCompressionControlEXT = struct_VkImageCompressionControlEXT;
pub const struct_VkImageCompressionPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    imageCompressionFlags: VkImageCompressionFlagsEXT = @import("std").mem.zeroes(VkImageCompressionFlagsEXT),
    imageCompressionFixedRateFlags: VkImageCompressionFixedRateFlagsEXT = @import("std").mem.zeroes(VkImageCompressionFixedRateFlagsEXT),
};
pub const VkImageCompressionPropertiesEXT = struct_VkImageCompressionPropertiesEXT;
pub const struct_VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    attachmentFeedbackLoopLayout: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT = struct_VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT;
pub const struct_VkPhysicalDevice4444FormatsFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    formatA4R4G4B4: VkBool32 = @import("std").mem.zeroes(VkBool32),
    formatA4B4G4R4: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevice4444FormatsFeaturesEXT = struct_VkPhysicalDevice4444FormatsFeaturesEXT;
pub const VK_DEVICE_FAULT_ADDRESS_TYPE_NONE_EXT: c_int = 0;
pub const VK_DEVICE_FAULT_ADDRESS_TYPE_READ_INVALID_EXT: c_int = 1;
pub const VK_DEVICE_FAULT_ADDRESS_TYPE_WRITE_INVALID_EXT: c_int = 2;
pub const VK_DEVICE_FAULT_ADDRESS_TYPE_EXECUTE_INVALID_EXT: c_int = 3;
pub const VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_UNKNOWN_EXT: c_int = 4;
pub const VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_INVALID_EXT: c_int = 5;
pub const VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_FAULT_EXT: c_int = 6;
pub const VK_DEVICE_FAULT_ADDRESS_TYPE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkDeviceFaultAddressTypeEXT = c_uint;
pub const VkDeviceFaultAddressTypeEXT = enum_VkDeviceFaultAddressTypeEXT;
pub const VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_ONE_EXT: c_int = 1;
pub const VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkDeviceFaultVendorBinaryHeaderVersionEXT = c_uint;
pub const VkDeviceFaultVendorBinaryHeaderVersionEXT = enum_VkDeviceFaultVendorBinaryHeaderVersionEXT;
pub const struct_VkPhysicalDeviceFaultFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    deviceFault: VkBool32 = @import("std").mem.zeroes(VkBool32),
    deviceFaultVendorBinary: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceFaultFeaturesEXT = struct_VkPhysicalDeviceFaultFeaturesEXT;
pub const struct_VkDeviceFaultCountsEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    addressInfoCount: u32 = @import("std").mem.zeroes(u32),
    vendorInfoCount: u32 = @import("std").mem.zeroes(u32),
    vendorBinarySize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkDeviceFaultCountsEXT = struct_VkDeviceFaultCountsEXT;
pub const struct_VkDeviceFaultAddressInfoEXT = extern struct {
    addressType: VkDeviceFaultAddressTypeEXT = @import("std").mem.zeroes(VkDeviceFaultAddressTypeEXT),
    reportedAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    addressPrecision: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkDeviceFaultAddressInfoEXT = struct_VkDeviceFaultAddressInfoEXT;
pub const struct_VkDeviceFaultVendorInfoEXT = extern struct {
    description: [256]u8 = @import("std").mem.zeroes([256]u8),
    vendorFaultCode: u64 = @import("std").mem.zeroes(u64),
    vendorFaultData: u64 = @import("std").mem.zeroes(u64),
};
pub const VkDeviceFaultVendorInfoEXT = struct_VkDeviceFaultVendorInfoEXT;
pub const struct_VkDeviceFaultInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    description: [256]u8 = @import("std").mem.zeroes([256]u8),
    pAddressInfos: [*c]VkDeviceFaultAddressInfoEXT = @import("std").mem.zeroes([*c]VkDeviceFaultAddressInfoEXT),
    pVendorInfos: [*c]VkDeviceFaultVendorInfoEXT = @import("std").mem.zeroes([*c]VkDeviceFaultVendorInfoEXT),
    pVendorBinaryData: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const VkDeviceFaultInfoEXT = struct_VkDeviceFaultInfoEXT;
pub const struct_VkDeviceFaultVendorBinaryHeaderVersionOneEXT = extern struct {
    headerSize: u32 = @import("std").mem.zeroes(u32),
    headerVersion: VkDeviceFaultVendorBinaryHeaderVersionEXT = @import("std").mem.zeroes(VkDeviceFaultVendorBinaryHeaderVersionEXT),
    vendorID: u32 = @import("std").mem.zeroes(u32),
    deviceID: u32 = @import("std").mem.zeroes(u32),
    driverVersion: u32 = @import("std").mem.zeroes(u32),
    pipelineCacheUUID: [16]u8 = @import("std").mem.zeroes([16]u8),
    applicationNameOffset: u32 = @import("std").mem.zeroes(u32),
    applicationVersion: u32 = @import("std").mem.zeroes(u32),
    engineNameOffset: u32 = @import("std").mem.zeroes(u32),
    engineVersion: u32 = @import("std").mem.zeroes(u32),
    apiVersion: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDeviceFaultVendorBinaryHeaderVersionOneEXT = struct_VkDeviceFaultVendorBinaryHeaderVersionOneEXT;
pub const PFN_vkGetDeviceFaultInfoEXT = ?*const fn (VkDevice, [*c]VkDeviceFaultCountsEXT, [*c]VkDeviceFaultInfoEXT) callconv(.C) VkResult;
pub extern fn vkGetDeviceFaultInfoEXT(device: VkDevice, pFaultCounts: [*c]VkDeviceFaultCountsEXT, pFaultInfo: [*c]VkDeviceFaultInfoEXT) VkResult;
pub const struct_VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    rasterizationOrderColorAttachmentAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    rasterizationOrderDepthAttachmentAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    rasterizationOrderStencilAttachmentAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT = struct_VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT;
pub const VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM = VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT;
pub const struct_VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    formatRgba10x6WithoutYCbCrSampler: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT = struct_VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT;
pub const struct_VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    mutableDescriptorType: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT = struct_VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT;
pub const VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE = VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT;
pub const struct_VkMutableDescriptorTypeListEXT = extern struct {
    descriptorTypeCount: u32 = @import("std").mem.zeroes(u32),
    pDescriptorTypes: [*c]const VkDescriptorType = @import("std").mem.zeroes([*c]const VkDescriptorType),
};
pub const VkMutableDescriptorTypeListEXT = struct_VkMutableDescriptorTypeListEXT;
pub const VkMutableDescriptorTypeListVALVE = VkMutableDescriptorTypeListEXT;
pub const struct_VkMutableDescriptorTypeCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    mutableDescriptorTypeListCount: u32 = @import("std").mem.zeroes(u32),
    pMutableDescriptorTypeLists: [*c]const VkMutableDescriptorTypeListEXT = @import("std").mem.zeroes([*c]const VkMutableDescriptorTypeListEXT),
};
pub const VkMutableDescriptorTypeCreateInfoEXT = struct_VkMutableDescriptorTypeCreateInfoEXT;
pub const VkMutableDescriptorTypeCreateInfoVALVE = VkMutableDescriptorTypeCreateInfoEXT;
pub const struct_VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    vertexInputDynamicState: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT = struct_VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT;
pub const struct_VkVertexInputBindingDescription2EXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    binding: u32 = @import("std").mem.zeroes(u32),
    stride: u32 = @import("std").mem.zeroes(u32),
    inputRate: VkVertexInputRate = @import("std").mem.zeroes(VkVertexInputRate),
    divisor: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVertexInputBindingDescription2EXT = struct_VkVertexInputBindingDescription2EXT;
pub const struct_VkVertexInputAttributeDescription2EXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    location: u32 = @import("std").mem.zeroes(u32),
    binding: u32 = @import("std").mem.zeroes(u32),
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
    offset: u32 = @import("std").mem.zeroes(u32),
};
pub const VkVertexInputAttributeDescription2EXT = struct_VkVertexInputAttributeDescription2EXT;
pub const PFN_vkCmdSetVertexInputEXT = ?*const fn (VkCommandBuffer, u32, [*c]const VkVertexInputBindingDescription2EXT, u32, [*c]const VkVertexInputAttributeDescription2EXT) callconv(.C) void;
pub extern fn vkCmdSetVertexInputEXT(commandBuffer: VkCommandBuffer, vertexBindingDescriptionCount: u32, pVertexBindingDescriptions: [*c]const VkVertexInputBindingDescription2EXT, vertexAttributeDescriptionCount: u32, pVertexAttributeDescriptions: [*c]const VkVertexInputAttributeDescription2EXT) void;
pub const struct_VkPhysicalDeviceDrmPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    hasPrimary: VkBool32 = @import("std").mem.zeroes(VkBool32),
    hasRender: VkBool32 = @import("std").mem.zeroes(VkBool32),
    primaryMajor: i64 = @import("std").mem.zeroes(i64),
    primaryMinor: i64 = @import("std").mem.zeroes(i64),
    renderMajor: i64 = @import("std").mem.zeroes(i64),
    renderMinor: i64 = @import("std").mem.zeroes(i64),
};
pub const VkPhysicalDeviceDrmPropertiesEXT = struct_VkPhysicalDeviceDrmPropertiesEXT;
pub const VK_DEVICE_ADDRESS_BINDING_TYPE_BIND_EXT: c_int = 0;
pub const VK_DEVICE_ADDRESS_BINDING_TYPE_UNBIND_EXT: c_int = 1;
pub const VK_DEVICE_ADDRESS_BINDING_TYPE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkDeviceAddressBindingTypeEXT = c_uint;
pub const VkDeviceAddressBindingTypeEXT = enum_VkDeviceAddressBindingTypeEXT;
pub const VK_DEVICE_ADDRESS_BINDING_INTERNAL_OBJECT_BIT_EXT: c_int = 1;
pub const VK_DEVICE_ADDRESS_BINDING_FLAG_BITS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkDeviceAddressBindingFlagBitsEXT = c_uint;
pub const VkDeviceAddressBindingFlagBitsEXT = enum_VkDeviceAddressBindingFlagBitsEXT;
pub const VkDeviceAddressBindingFlagsEXT = VkFlags;
pub const struct_VkPhysicalDeviceAddressBindingReportFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    reportAddressBinding: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceAddressBindingReportFeaturesEXT = struct_VkPhysicalDeviceAddressBindingReportFeaturesEXT;
pub const struct_VkDeviceAddressBindingCallbackDataEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    flags: VkDeviceAddressBindingFlagsEXT = @import("std").mem.zeroes(VkDeviceAddressBindingFlagsEXT),
    baseAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    bindingType: VkDeviceAddressBindingTypeEXT = @import("std").mem.zeroes(VkDeviceAddressBindingTypeEXT),
};
pub const VkDeviceAddressBindingCallbackDataEXT = struct_VkDeviceAddressBindingCallbackDataEXT;
pub const struct_VkPhysicalDeviceDepthClipControlFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    depthClipControl: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceDepthClipControlFeaturesEXT = struct_VkPhysicalDeviceDepthClipControlFeaturesEXT;
pub const struct_VkPipelineViewportDepthClipControlCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    negativeOneToOne: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPipelineViewportDepthClipControlCreateInfoEXT = struct_VkPipelineViewportDepthClipControlCreateInfoEXT;
pub const struct_VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    primitiveTopologyListRestart: VkBool32 = @import("std").mem.zeroes(VkBool32),
    primitiveTopologyPatchListRestart: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT = struct_VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT;
pub const struct_VkSubpassShadingPipelineCreateInfoHUAWEI = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    renderPass: VkRenderPass = @import("std").mem.zeroes(VkRenderPass),
    subpass: u32 = @import("std").mem.zeroes(u32),
};
pub const VkSubpassShadingPipelineCreateInfoHUAWEI = struct_VkSubpassShadingPipelineCreateInfoHUAWEI;
pub const struct_VkPhysicalDeviceSubpassShadingFeaturesHUAWEI = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    subpassShading: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceSubpassShadingFeaturesHUAWEI = struct_VkPhysicalDeviceSubpassShadingFeaturesHUAWEI;
pub const struct_VkPhysicalDeviceSubpassShadingPropertiesHUAWEI = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxSubpassShadingWorkgroupSizeAspectRatio: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceSubpassShadingPropertiesHUAWEI = struct_VkPhysicalDeviceSubpassShadingPropertiesHUAWEI;
pub const PFN_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = ?*const fn (VkDevice, VkRenderPass, [*c]VkExtent2D) callconv(.C) VkResult;
pub const PFN_vkCmdSubpassShadingHUAWEI = ?*const fn (VkCommandBuffer) callconv(.C) void;
pub extern fn vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(device: VkDevice, renderpass: VkRenderPass, pMaxWorkgroupSize: [*c]VkExtent2D) VkResult;
pub extern fn vkCmdSubpassShadingHUAWEI(commandBuffer: VkCommandBuffer) void;
pub const struct_VkPhysicalDeviceInvocationMaskFeaturesHUAWEI = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    invocationMask: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceInvocationMaskFeaturesHUAWEI = struct_VkPhysicalDeviceInvocationMaskFeaturesHUAWEI;
pub const PFN_vkCmdBindInvocationMaskHUAWEI = ?*const fn (VkCommandBuffer, VkImageView, VkImageLayout) callconv(.C) void;
pub extern fn vkCmdBindInvocationMaskHUAWEI(commandBuffer: VkCommandBuffer, imageView: VkImageView, imageLayout: VkImageLayout) void;
pub const VkRemoteAddressNV = ?*anyopaque;
pub const struct_VkMemoryGetRemoteAddressInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    memory: VkDeviceMemory = @import("std").mem.zeroes(VkDeviceMemory),
    handleType: VkExternalMemoryHandleTypeFlagBits = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlagBits),
};
pub const VkMemoryGetRemoteAddressInfoNV = struct_VkMemoryGetRemoteAddressInfoNV;
pub const struct_VkPhysicalDeviceExternalMemoryRDMAFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    externalMemoryRDMA: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceExternalMemoryRDMAFeaturesNV = struct_VkPhysicalDeviceExternalMemoryRDMAFeaturesNV;
pub const PFN_vkGetMemoryRemoteAddressNV = ?*const fn (VkDevice, [*c]const VkMemoryGetRemoteAddressInfoNV, [*c]VkRemoteAddressNV) callconv(.C) VkResult;
pub extern fn vkGetMemoryRemoteAddressNV(device: VkDevice, pMemoryGetRemoteAddressInfo: [*c]const VkMemoryGetRemoteAddressInfoNV, pAddress: [*c]VkRemoteAddressNV) VkResult;
pub const VkPipelineInfoEXT = VkPipelineInfoKHR;
pub const struct_VkPipelinePropertiesIdentifierEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pipelineIdentifier: [16]u8 = @import("std").mem.zeroes([16]u8),
};
pub const VkPipelinePropertiesIdentifierEXT = struct_VkPipelinePropertiesIdentifierEXT;
pub const struct_VkPhysicalDevicePipelinePropertiesFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pipelinePropertiesIdentifier: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevicePipelinePropertiesFeaturesEXT = struct_VkPhysicalDevicePipelinePropertiesFeaturesEXT;
pub const PFN_vkGetPipelinePropertiesEXT = ?*const fn (VkDevice, [*c]const VkPipelineInfoEXT, [*c]VkBaseOutStructure) callconv(.C) VkResult;
pub extern fn vkGetPipelinePropertiesEXT(device: VkDevice, pPipelineInfo: [*c]const VkPipelineInfoEXT, pPipelineProperties: [*c]VkBaseOutStructure) VkResult;
pub const VK_FRAME_BOUNDARY_FRAME_END_BIT_EXT: c_int = 1;
pub const VK_FRAME_BOUNDARY_FLAG_BITS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkFrameBoundaryFlagBitsEXT = c_uint;
pub const VkFrameBoundaryFlagBitsEXT = enum_VkFrameBoundaryFlagBitsEXT;
pub const VkFrameBoundaryFlagsEXT = VkFlags;
pub const struct_VkPhysicalDeviceFrameBoundaryFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    frameBoundary: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceFrameBoundaryFeaturesEXT = struct_VkPhysicalDeviceFrameBoundaryFeaturesEXT;
pub const struct_VkFrameBoundaryEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkFrameBoundaryFlagsEXT = @import("std").mem.zeroes(VkFrameBoundaryFlagsEXT),
    frameID: u64 = @import("std").mem.zeroes(u64),
    imageCount: u32 = @import("std").mem.zeroes(u32),
    pImages: [*c]const VkImage = @import("std").mem.zeroes([*c]const VkImage),
    bufferCount: u32 = @import("std").mem.zeroes(u32),
    pBuffers: [*c]const VkBuffer = @import("std").mem.zeroes([*c]const VkBuffer),
    tagName: u64 = @import("std").mem.zeroes(u64),
    tagSize: usize = @import("std").mem.zeroes(usize),
    pTag: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const VkFrameBoundaryEXT = struct_VkFrameBoundaryEXT;
pub const struct_VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    multisampledRenderToSingleSampled: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT = struct_VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT;
pub const struct_VkSubpassResolvePerformanceQueryEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    optimal: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkSubpassResolvePerformanceQueryEXT = struct_VkSubpassResolvePerformanceQueryEXT;
pub const struct_VkMultisampledRenderToSingleSampledInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    multisampledRenderToSingleSampledEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    rasterizationSamples: VkSampleCountFlagBits = @import("std").mem.zeroes(VkSampleCountFlagBits),
};
pub const VkMultisampledRenderToSingleSampledInfoEXT = struct_VkMultisampledRenderToSingleSampledInfoEXT;
pub const struct_VkPhysicalDeviceExtendedDynamicState2FeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    extendedDynamicState2: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState2LogicOp: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState2PatchControlPoints: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceExtendedDynamicState2FeaturesEXT = struct_VkPhysicalDeviceExtendedDynamicState2FeaturesEXT;
pub const PFN_vkCmdSetPatchControlPointsEXT = ?*const fn (VkCommandBuffer, u32) callconv(.C) void;
pub const PFN_vkCmdSetRasterizerDiscardEnableEXT = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetDepthBiasEnableEXT = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetLogicOpEXT = ?*const fn (VkCommandBuffer, VkLogicOp) callconv(.C) void;
pub const PFN_vkCmdSetPrimitiveRestartEnableEXT = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub extern fn vkCmdSetPatchControlPointsEXT(commandBuffer: VkCommandBuffer, patchControlPoints: u32) void;
pub extern fn vkCmdSetRasterizerDiscardEnableEXT(commandBuffer: VkCommandBuffer, rasterizerDiscardEnable: VkBool32) void;
pub extern fn vkCmdSetDepthBiasEnableEXT(commandBuffer: VkCommandBuffer, depthBiasEnable: VkBool32) void;
pub extern fn vkCmdSetLogicOpEXT(commandBuffer: VkCommandBuffer, logicOp: VkLogicOp) void;
pub extern fn vkCmdSetPrimitiveRestartEnableEXT(commandBuffer: VkCommandBuffer, primitiveRestartEnable: VkBool32) void;
pub const struct_VkPhysicalDeviceColorWriteEnableFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    colorWriteEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceColorWriteEnableFeaturesEXT = struct_VkPhysicalDeviceColorWriteEnableFeaturesEXT;
pub const struct_VkPipelineColorWriteCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    attachmentCount: u32 = @import("std").mem.zeroes(u32),
    pColorWriteEnables: [*c]const VkBool32 = @import("std").mem.zeroes([*c]const VkBool32),
};
pub const VkPipelineColorWriteCreateInfoEXT = struct_VkPipelineColorWriteCreateInfoEXT;
pub const PFN_vkCmdSetColorWriteEnableEXT = ?*const fn (VkCommandBuffer, u32, [*c]const VkBool32) callconv(.C) void;
pub extern fn vkCmdSetColorWriteEnableEXT(commandBuffer: VkCommandBuffer, attachmentCount: u32, pColorWriteEnables: [*c]const VkBool32) void;
pub const struct_VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    primitivesGeneratedQuery: VkBool32 = @import("std").mem.zeroes(VkBool32),
    primitivesGeneratedQueryWithRasterizerDiscard: VkBool32 = @import("std").mem.zeroes(VkBool32),
    primitivesGeneratedQueryWithNonZeroStreams: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT = struct_VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT;
pub const VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT = VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR;
pub const VkQueueFamilyGlobalPriorityPropertiesEXT = VkQueueFamilyGlobalPriorityPropertiesKHR;
pub const struct_VkPhysicalDeviceImageViewMinLodFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    minLod: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceImageViewMinLodFeaturesEXT = struct_VkPhysicalDeviceImageViewMinLodFeaturesEXT;
pub const struct_VkImageViewMinLodCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    minLod: f32 = @import("std").mem.zeroes(f32),
};
pub const VkImageViewMinLodCreateInfoEXT = struct_VkImageViewMinLodCreateInfoEXT;
pub const struct_VkPhysicalDeviceMultiDrawFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    multiDraw: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceMultiDrawFeaturesEXT = struct_VkPhysicalDeviceMultiDrawFeaturesEXT;
pub const struct_VkPhysicalDeviceMultiDrawPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxMultiDrawCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceMultiDrawPropertiesEXT = struct_VkPhysicalDeviceMultiDrawPropertiesEXT;
pub const struct_VkMultiDrawInfoEXT = extern struct {
    firstVertex: u32 = @import("std").mem.zeroes(u32),
    vertexCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkMultiDrawInfoEXT = struct_VkMultiDrawInfoEXT;
pub const struct_VkMultiDrawIndexedInfoEXT = extern struct {
    firstIndex: u32 = @import("std").mem.zeroes(u32),
    indexCount: u32 = @import("std").mem.zeroes(u32),
    vertexOffset: i32 = @import("std").mem.zeroes(i32),
};
pub const VkMultiDrawIndexedInfoEXT = struct_VkMultiDrawIndexedInfoEXT;
pub const PFN_vkCmdDrawMultiEXT = ?*const fn (VkCommandBuffer, u32, [*c]const VkMultiDrawInfoEXT, u32, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawMultiIndexedEXT = ?*const fn (VkCommandBuffer, u32, [*c]const VkMultiDrawIndexedInfoEXT, u32, u32, u32, [*c]const i32) callconv(.C) void;
pub extern fn vkCmdDrawMultiEXT(commandBuffer: VkCommandBuffer, drawCount: u32, pVertexInfo: [*c]const VkMultiDrawInfoEXT, instanceCount: u32, firstInstance: u32, stride: u32) void;
pub extern fn vkCmdDrawMultiIndexedEXT(commandBuffer: VkCommandBuffer, drawCount: u32, pIndexInfo: [*c]const VkMultiDrawIndexedInfoEXT, instanceCount: u32, firstInstance: u32, stride: u32, pVertexOffset: [*c]const i32) void;
pub const struct_VkPhysicalDeviceImage2DViewOf3DFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    image2DViewOf3D: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sampler2DViewOf3D: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceImage2DViewOf3DFeaturesEXT = struct_VkPhysicalDeviceImage2DViewOf3DFeaturesEXT;
pub const struct_VkPhysicalDeviceShaderTileImageFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderTileImageColorReadAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderTileImageDepthReadAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderTileImageStencilReadAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderTileImageFeaturesEXT = struct_VkPhysicalDeviceShaderTileImageFeaturesEXT;
pub const struct_VkPhysicalDeviceShaderTileImagePropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderTileImageCoherentReadAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderTileImageReadSampleFromPixelRateInvocation: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderTileImageReadFromHelperInvocation: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderTileImagePropertiesEXT = struct_VkPhysicalDeviceShaderTileImagePropertiesEXT;
pub const struct_VkMicromapEXT_T = opaque {};
pub const VkMicromapEXT = ?*struct_VkMicromapEXT_T;
pub const VK_MICROMAP_TYPE_OPACITY_MICROMAP_EXT: c_int = 0;
pub const VK_MICROMAP_TYPE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkMicromapTypeEXT = c_uint;
pub const VkMicromapTypeEXT = enum_VkMicromapTypeEXT;
pub const VK_BUILD_MICROMAP_MODE_BUILD_EXT: c_int = 0;
pub const VK_BUILD_MICROMAP_MODE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkBuildMicromapModeEXT = c_uint;
pub const VkBuildMicromapModeEXT = enum_VkBuildMicromapModeEXT;
pub const VK_COPY_MICROMAP_MODE_CLONE_EXT: c_int = 0;
pub const VK_COPY_MICROMAP_MODE_SERIALIZE_EXT: c_int = 1;
pub const VK_COPY_MICROMAP_MODE_DESERIALIZE_EXT: c_int = 2;
pub const VK_COPY_MICROMAP_MODE_COMPACT_EXT: c_int = 3;
pub const VK_COPY_MICROMAP_MODE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkCopyMicromapModeEXT = c_uint;
pub const VkCopyMicromapModeEXT = enum_VkCopyMicromapModeEXT;
pub const VK_OPACITY_MICROMAP_FORMAT_2_STATE_EXT: c_int = 1;
pub const VK_OPACITY_MICROMAP_FORMAT_4_STATE_EXT: c_int = 2;
pub const VK_OPACITY_MICROMAP_FORMAT_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkOpacityMicromapFormatEXT = c_uint;
pub const VkOpacityMicromapFormatEXT = enum_VkOpacityMicromapFormatEXT;
pub const VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_TRANSPARENT_EXT: c_int = -1;
pub const VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_OPAQUE_EXT: c_int = -2;
pub const VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_TRANSPARENT_EXT: c_int = -3;
pub const VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_OPAQUE_EXT: c_int = -4;
pub const VK_OPACITY_MICROMAP_SPECIAL_INDEX_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkOpacityMicromapSpecialIndexEXT = c_int;
pub const VkOpacityMicromapSpecialIndexEXT = enum_VkOpacityMicromapSpecialIndexEXT;
pub const VK_ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR: c_int = 0;
pub const VK_ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR: c_int = 1;
pub const VK_ACCELERATION_STRUCTURE_COMPATIBILITY_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkAccelerationStructureCompatibilityKHR = c_uint;
pub const VkAccelerationStructureCompatibilityKHR = enum_VkAccelerationStructureCompatibilityKHR;
pub const VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR: c_int = 0;
pub const VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR: c_int = 1;
pub const VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR: c_int = 2;
pub const VK_ACCELERATION_STRUCTURE_BUILD_TYPE_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkAccelerationStructureBuildTypeKHR = c_uint;
pub const VkAccelerationStructureBuildTypeKHR = enum_VkAccelerationStructureBuildTypeKHR;
pub const VK_BUILD_MICROMAP_PREFER_FAST_TRACE_BIT_EXT: c_int = 1;
pub const VK_BUILD_MICROMAP_PREFER_FAST_BUILD_BIT_EXT: c_int = 2;
pub const VK_BUILD_MICROMAP_ALLOW_COMPACTION_BIT_EXT: c_int = 4;
pub const VK_BUILD_MICROMAP_FLAG_BITS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkBuildMicromapFlagBitsEXT = c_uint;
pub const VkBuildMicromapFlagBitsEXT = enum_VkBuildMicromapFlagBitsEXT;
pub const VkBuildMicromapFlagsEXT = VkFlags;
pub const VK_MICROMAP_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT: c_int = 1;
pub const VK_MICROMAP_CREATE_FLAG_BITS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkMicromapCreateFlagBitsEXT = c_uint;
pub const VkMicromapCreateFlagBitsEXT = enum_VkMicromapCreateFlagBitsEXT;
pub const VkMicromapCreateFlagsEXT = VkFlags;
pub const struct_VkMicromapUsageEXT = extern struct {
    count: u32 = @import("std").mem.zeroes(u32),
    subdivisionLevel: u32 = @import("std").mem.zeroes(u32),
    format: u32 = @import("std").mem.zeroes(u32),
};
pub const VkMicromapUsageEXT = struct_VkMicromapUsageEXT;
pub const union_VkDeviceOrHostAddressKHR = extern union {
    deviceAddress: VkDeviceAddress,
    hostAddress: ?*anyopaque,
};
pub const VkDeviceOrHostAddressKHR = union_VkDeviceOrHostAddressKHR;
pub const struct_VkMicromapBuildInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    type: VkMicromapTypeEXT = @import("std").mem.zeroes(VkMicromapTypeEXT),
    flags: VkBuildMicromapFlagsEXT = @import("std").mem.zeroes(VkBuildMicromapFlagsEXT),
    mode: VkBuildMicromapModeEXT = @import("std").mem.zeroes(VkBuildMicromapModeEXT),
    dstMicromap: VkMicromapEXT = @import("std").mem.zeroes(VkMicromapEXT),
    usageCountsCount: u32 = @import("std").mem.zeroes(u32),
    pUsageCounts: [*c]const VkMicromapUsageEXT = @import("std").mem.zeroes([*c]const VkMicromapUsageEXT),
    ppUsageCounts: [*c]const [*c]const VkMicromapUsageEXT = @import("std").mem.zeroes([*c]const [*c]const VkMicromapUsageEXT),
    data: VkDeviceOrHostAddressConstKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressConstKHR),
    scratchData: VkDeviceOrHostAddressKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressKHR),
    triangleArray: VkDeviceOrHostAddressConstKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressConstKHR),
    triangleArrayStride: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkMicromapBuildInfoEXT = struct_VkMicromapBuildInfoEXT;
pub const struct_VkMicromapCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    createFlags: VkMicromapCreateFlagsEXT = @import("std").mem.zeroes(VkMicromapCreateFlagsEXT),
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    offset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    type: VkMicromapTypeEXT = @import("std").mem.zeroes(VkMicromapTypeEXT),
    deviceAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
};
pub const VkMicromapCreateInfoEXT = struct_VkMicromapCreateInfoEXT;
pub const struct_VkPhysicalDeviceOpacityMicromapFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    micromap: VkBool32 = @import("std").mem.zeroes(VkBool32),
    micromapCaptureReplay: VkBool32 = @import("std").mem.zeroes(VkBool32),
    micromapHostCommands: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceOpacityMicromapFeaturesEXT = struct_VkPhysicalDeviceOpacityMicromapFeaturesEXT;
pub const struct_VkPhysicalDeviceOpacityMicromapPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxOpacity2StateSubdivisionLevel: u32 = @import("std").mem.zeroes(u32),
    maxOpacity4StateSubdivisionLevel: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceOpacityMicromapPropertiesEXT = struct_VkPhysicalDeviceOpacityMicromapPropertiesEXT;
pub const struct_VkMicromapVersionInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pVersionData: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
};
pub const VkMicromapVersionInfoEXT = struct_VkMicromapVersionInfoEXT;
pub const struct_VkCopyMicromapToMemoryInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    src: VkMicromapEXT = @import("std").mem.zeroes(VkMicromapEXT),
    dst: VkDeviceOrHostAddressKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressKHR),
    mode: VkCopyMicromapModeEXT = @import("std").mem.zeroes(VkCopyMicromapModeEXT),
};
pub const VkCopyMicromapToMemoryInfoEXT = struct_VkCopyMicromapToMemoryInfoEXT;
pub const struct_VkCopyMemoryToMicromapInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    src: VkDeviceOrHostAddressConstKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressConstKHR),
    dst: VkMicromapEXT = @import("std").mem.zeroes(VkMicromapEXT),
    mode: VkCopyMicromapModeEXT = @import("std").mem.zeroes(VkCopyMicromapModeEXT),
};
pub const VkCopyMemoryToMicromapInfoEXT = struct_VkCopyMemoryToMicromapInfoEXT;
pub const struct_VkCopyMicromapInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    src: VkMicromapEXT = @import("std").mem.zeroes(VkMicromapEXT),
    dst: VkMicromapEXT = @import("std").mem.zeroes(VkMicromapEXT),
    mode: VkCopyMicromapModeEXT = @import("std").mem.zeroes(VkCopyMicromapModeEXT),
};
pub const VkCopyMicromapInfoEXT = struct_VkCopyMicromapInfoEXT;
pub const struct_VkMicromapBuildSizesInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    micromapSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    buildScratchSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    discardable: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkMicromapBuildSizesInfoEXT = struct_VkMicromapBuildSizesInfoEXT;
pub const struct_VkAccelerationStructureTrianglesOpacityMicromapEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    indexType: VkIndexType = @import("std").mem.zeroes(VkIndexType),
    indexBuffer: VkDeviceOrHostAddressConstKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressConstKHR),
    indexStride: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    baseTriangle: u32 = @import("std").mem.zeroes(u32),
    usageCountsCount: u32 = @import("std").mem.zeroes(u32),
    pUsageCounts: [*c]const VkMicromapUsageEXT = @import("std").mem.zeroes([*c]const VkMicromapUsageEXT),
    ppUsageCounts: [*c]const [*c]const VkMicromapUsageEXT = @import("std").mem.zeroes([*c]const [*c]const VkMicromapUsageEXT),
    micromap: VkMicromapEXT = @import("std").mem.zeroes(VkMicromapEXT),
};
pub const VkAccelerationStructureTrianglesOpacityMicromapEXT = struct_VkAccelerationStructureTrianglesOpacityMicromapEXT;
pub const struct_VkMicromapTriangleEXT = extern struct {
    dataOffset: u32 = @import("std").mem.zeroes(u32),
    subdivisionLevel: u16 = @import("std").mem.zeroes(u16),
    format: u16 = @import("std").mem.zeroes(u16),
};
pub const VkMicromapTriangleEXT = struct_VkMicromapTriangleEXT;
pub const PFN_vkCreateMicromapEXT = ?*const fn (VkDevice, [*c]const VkMicromapCreateInfoEXT, [*c]const VkAllocationCallbacks, [*c]VkMicromapEXT) callconv(.C) VkResult;
pub const PFN_vkDestroyMicromapEXT = ?*const fn (VkDevice, VkMicromapEXT, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCmdBuildMicromapsEXT = ?*const fn (VkCommandBuffer, u32, [*c]const VkMicromapBuildInfoEXT) callconv(.C) void;
pub const PFN_vkBuildMicromapsEXT = ?*const fn (VkDevice, VkDeferredOperationKHR, u32, [*c]const VkMicromapBuildInfoEXT) callconv(.C) VkResult;
pub const PFN_vkCopyMicromapEXT = ?*const fn (VkDevice, VkDeferredOperationKHR, [*c]const VkCopyMicromapInfoEXT) callconv(.C) VkResult;
pub const PFN_vkCopyMicromapToMemoryEXT = ?*const fn (VkDevice, VkDeferredOperationKHR, [*c]const VkCopyMicromapToMemoryInfoEXT) callconv(.C) VkResult;
pub const PFN_vkCopyMemoryToMicromapEXT = ?*const fn (VkDevice, VkDeferredOperationKHR, [*c]const VkCopyMemoryToMicromapInfoEXT) callconv(.C) VkResult;
pub const PFN_vkWriteMicromapsPropertiesEXT = ?*const fn (VkDevice, u32, [*c]const VkMicromapEXT, VkQueryType, usize, ?*anyopaque, usize) callconv(.C) VkResult;
pub const PFN_vkCmdCopyMicromapEXT = ?*const fn (VkCommandBuffer, [*c]const VkCopyMicromapInfoEXT) callconv(.C) void;
pub const PFN_vkCmdCopyMicromapToMemoryEXT = ?*const fn (VkCommandBuffer, [*c]const VkCopyMicromapToMemoryInfoEXT) callconv(.C) void;
pub const PFN_vkCmdCopyMemoryToMicromapEXT = ?*const fn (VkCommandBuffer, [*c]const VkCopyMemoryToMicromapInfoEXT) callconv(.C) void;
pub const PFN_vkCmdWriteMicromapsPropertiesEXT = ?*const fn (VkCommandBuffer, u32, [*c]const VkMicromapEXT, VkQueryType, VkQueryPool, u32) callconv(.C) void;
pub const PFN_vkGetDeviceMicromapCompatibilityEXT = ?*const fn (VkDevice, [*c]const VkMicromapVersionInfoEXT, [*c]VkAccelerationStructureCompatibilityKHR) callconv(.C) void;
pub const PFN_vkGetMicromapBuildSizesEXT = ?*const fn (VkDevice, VkAccelerationStructureBuildTypeKHR, [*c]const VkMicromapBuildInfoEXT, [*c]VkMicromapBuildSizesInfoEXT) callconv(.C) void;
pub extern fn vkCreateMicromapEXT(device: VkDevice, pCreateInfo: [*c]const VkMicromapCreateInfoEXT, pAllocator: [*c]const VkAllocationCallbacks, pMicromap: [*c]VkMicromapEXT) VkResult;
pub extern fn vkDestroyMicromapEXT(device: VkDevice, micromap: VkMicromapEXT, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkCmdBuildMicromapsEXT(commandBuffer: VkCommandBuffer, infoCount: u32, pInfos: [*c]const VkMicromapBuildInfoEXT) void;
pub extern fn vkBuildMicromapsEXT(device: VkDevice, deferredOperation: VkDeferredOperationKHR, infoCount: u32, pInfos: [*c]const VkMicromapBuildInfoEXT) VkResult;
pub extern fn vkCopyMicromapEXT(device: VkDevice, deferredOperation: VkDeferredOperationKHR, pInfo: [*c]const VkCopyMicromapInfoEXT) VkResult;
pub extern fn vkCopyMicromapToMemoryEXT(device: VkDevice, deferredOperation: VkDeferredOperationKHR, pInfo: [*c]const VkCopyMicromapToMemoryInfoEXT) VkResult;
pub extern fn vkCopyMemoryToMicromapEXT(device: VkDevice, deferredOperation: VkDeferredOperationKHR, pInfo: [*c]const VkCopyMemoryToMicromapInfoEXT) VkResult;
pub extern fn vkWriteMicromapsPropertiesEXT(device: VkDevice, micromapCount: u32, pMicromaps: [*c]const VkMicromapEXT, queryType: VkQueryType, dataSize: usize, pData: ?*anyopaque, stride: usize) VkResult;
pub extern fn vkCmdCopyMicromapEXT(commandBuffer: VkCommandBuffer, pInfo: [*c]const VkCopyMicromapInfoEXT) void;
pub extern fn vkCmdCopyMicromapToMemoryEXT(commandBuffer: VkCommandBuffer, pInfo: [*c]const VkCopyMicromapToMemoryInfoEXT) void;
pub extern fn vkCmdCopyMemoryToMicromapEXT(commandBuffer: VkCommandBuffer, pInfo: [*c]const VkCopyMemoryToMicromapInfoEXT) void;
pub extern fn vkCmdWriteMicromapsPropertiesEXT(commandBuffer: VkCommandBuffer, micromapCount: u32, pMicromaps: [*c]const VkMicromapEXT, queryType: VkQueryType, queryPool: VkQueryPool, firstQuery: u32) void;
pub extern fn vkGetDeviceMicromapCompatibilityEXT(device: VkDevice, pVersionInfo: [*c]const VkMicromapVersionInfoEXT, pCompatibility: [*c]VkAccelerationStructureCompatibilityKHR) void;
pub extern fn vkGetMicromapBuildSizesEXT(device: VkDevice, buildType: VkAccelerationStructureBuildTypeKHR, pBuildInfo: [*c]const VkMicromapBuildInfoEXT, pSizeInfo: [*c]VkMicromapBuildSizesInfoEXT) void;
pub const struct_VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    clustercullingShader: VkBool32 = @import("std").mem.zeroes(VkBool32),
    multiviewClusterCullingShader: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI = struct_VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI;
pub const struct_VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxWorkGroupCount: [3]u32 = @import("std").mem.zeroes([3]u32),
    maxWorkGroupSize: [3]u32 = @import("std").mem.zeroes([3]u32),
    maxOutputClusterCount: u32 = @import("std").mem.zeroes(u32),
    indirectBufferOffsetAlignment: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI = struct_VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI;
pub const struct_VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    clusterShadingRate: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI = struct_VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI;
pub const PFN_vkCmdDrawClusterHUAWEI = ?*const fn (VkCommandBuffer, u32, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawClusterIndirectHUAWEI = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize) callconv(.C) void;
pub extern fn vkCmdDrawClusterHUAWEI(commandBuffer: VkCommandBuffer, groupCountX: u32, groupCountY: u32, groupCountZ: u32) void;
pub extern fn vkCmdDrawClusterIndirectHUAWEI(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize) void;
pub const struct_VkPhysicalDeviceBorderColorSwizzleFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    borderColorSwizzle: VkBool32 = @import("std").mem.zeroes(VkBool32),
    borderColorSwizzleFromImage: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceBorderColorSwizzleFeaturesEXT = struct_VkPhysicalDeviceBorderColorSwizzleFeaturesEXT;
pub const struct_VkSamplerBorderColorComponentMappingCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    components: VkComponentMapping = @import("std").mem.zeroes(VkComponentMapping),
    srgb: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkSamplerBorderColorComponentMappingCreateInfoEXT = struct_VkSamplerBorderColorComponentMappingCreateInfoEXT;
pub const struct_VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pageableDeviceLocalMemory: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT = struct_VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT;
pub const PFN_vkSetDeviceMemoryPriorityEXT = ?*const fn (VkDevice, VkDeviceMemory, f32) callconv(.C) void;
pub extern fn vkSetDeviceMemoryPriorityEXT(device: VkDevice, memory: VkDeviceMemory, priority: f32) void;
pub const struct_VkPhysicalDeviceShaderCorePropertiesARM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pixelRate: u32 = @import("std").mem.zeroes(u32),
    texelRate: u32 = @import("std").mem.zeroes(u32),
    fmaRate: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceShaderCorePropertiesARM = struct_VkPhysicalDeviceShaderCorePropertiesARM;
pub const VkPhysicalDeviceSchedulingControlsFlagsARM = VkFlags64;
pub const VkPhysicalDeviceSchedulingControlsFlagBitsARM = VkFlags64;
pub const VK_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_SHADER_CORE_COUNT_ARM: VkPhysicalDeviceSchedulingControlsFlagBitsARM = 1;
pub const struct_VkDeviceQueueShaderCoreControlCreateInfoARM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderCoreCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDeviceQueueShaderCoreControlCreateInfoARM = struct_VkDeviceQueueShaderCoreControlCreateInfoARM;
pub const struct_VkPhysicalDeviceSchedulingControlsFeaturesARM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    schedulingControls: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceSchedulingControlsFeaturesARM = struct_VkPhysicalDeviceSchedulingControlsFeaturesARM;
pub const struct_VkPhysicalDeviceSchedulingControlsPropertiesARM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    schedulingControlsFlags: VkPhysicalDeviceSchedulingControlsFlagsARM = @import("std").mem.zeroes(VkPhysicalDeviceSchedulingControlsFlagsARM),
};
pub const VkPhysicalDeviceSchedulingControlsPropertiesARM = struct_VkPhysicalDeviceSchedulingControlsPropertiesARM;
pub const struct_VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    imageSlicedViewOf3D: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT = struct_VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT;
pub const struct_VkImageViewSlicedCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    sliceOffset: u32 = @import("std").mem.zeroes(u32),
    sliceCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkImageViewSlicedCreateInfoEXT = struct_VkImageViewSlicedCreateInfoEXT;
pub const struct_VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    descriptorSetHostMapping: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE = struct_VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE;
pub const struct_VkDescriptorSetBindingReferenceVALVE = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    descriptorSetLayout: VkDescriptorSetLayout = @import("std").mem.zeroes(VkDescriptorSetLayout),
    binding: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDescriptorSetBindingReferenceVALVE = struct_VkDescriptorSetBindingReferenceVALVE;
pub const struct_VkDescriptorSetLayoutHostMappingInfoVALVE = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    descriptorOffset: usize = @import("std").mem.zeroes(usize),
    descriptorSize: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDescriptorSetLayoutHostMappingInfoVALVE = struct_VkDescriptorSetLayoutHostMappingInfoVALVE;
pub const PFN_vkGetDescriptorSetLayoutHostMappingInfoVALVE = ?*const fn (VkDevice, [*c]const VkDescriptorSetBindingReferenceVALVE, [*c]VkDescriptorSetLayoutHostMappingInfoVALVE) callconv(.C) void;
pub const PFN_vkGetDescriptorSetHostMappingVALVE = ?*const fn (VkDevice, VkDescriptorSet, [*c]?*anyopaque) callconv(.C) void;
pub extern fn vkGetDescriptorSetLayoutHostMappingInfoVALVE(device: VkDevice, pBindingReference: [*c]const VkDescriptorSetBindingReferenceVALVE, pHostMapping: [*c]VkDescriptorSetLayoutHostMappingInfoVALVE) void;
pub extern fn vkGetDescriptorSetHostMappingVALVE(device: VkDevice, descriptorSet: VkDescriptorSet, ppData: [*c]?*anyopaque) void;
pub const struct_VkPhysicalDeviceDepthClampZeroOneFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    depthClampZeroOne: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceDepthClampZeroOneFeaturesEXT = struct_VkPhysicalDeviceDepthClampZeroOneFeaturesEXT;
pub const struct_VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    nonSeamlessCubeMap: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT = struct_VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT;
pub const struct_VkPhysicalDeviceRenderPassStripedFeaturesARM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    renderPassStriped: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceRenderPassStripedFeaturesARM = struct_VkPhysicalDeviceRenderPassStripedFeaturesARM;
pub const struct_VkPhysicalDeviceRenderPassStripedPropertiesARM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    renderPassStripeGranularity: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxRenderPassStripes: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceRenderPassStripedPropertiesARM = struct_VkPhysicalDeviceRenderPassStripedPropertiesARM;
pub const struct_VkRenderPassStripeInfoARM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stripeArea: VkRect2D = @import("std").mem.zeroes(VkRect2D),
};
pub const VkRenderPassStripeInfoARM = struct_VkRenderPassStripeInfoARM;
pub const struct_VkRenderPassStripeBeginInfoARM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stripeInfoCount: u32 = @import("std").mem.zeroes(u32),
    pStripeInfos: [*c]const VkRenderPassStripeInfoARM = @import("std").mem.zeroes([*c]const VkRenderPassStripeInfoARM),
};
pub const VkRenderPassStripeBeginInfoARM = struct_VkRenderPassStripeBeginInfoARM;
pub const struct_VkRenderPassStripeSubmitInfoARM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stripeSemaphoreInfoCount: u32 = @import("std").mem.zeroes(u32),
    pStripeSemaphoreInfos: [*c]const VkSemaphoreSubmitInfo = @import("std").mem.zeroes([*c]const VkSemaphoreSubmitInfo),
};
pub const VkRenderPassStripeSubmitInfoARM = struct_VkRenderPassStripeSubmitInfoARM;
pub const struct_VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    fragmentDensityMapOffset: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM = struct_VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM;
pub const struct_VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    fragmentDensityOffsetGranularity: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
};
pub const VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM = struct_VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM;
pub const struct_VkSubpassFragmentDensityMapOffsetEndInfoQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    fragmentDensityOffsetCount: u32 = @import("std").mem.zeroes(u32),
    pFragmentDensityOffsets: [*c]const VkOffset2D = @import("std").mem.zeroes([*c]const VkOffset2D),
};
pub const VkSubpassFragmentDensityMapOffsetEndInfoQCOM = struct_VkSubpassFragmentDensityMapOffsetEndInfoQCOM;
pub const struct_VkCopyMemoryIndirectCommandNV = extern struct {
    srcAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    dstAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkCopyMemoryIndirectCommandNV = struct_VkCopyMemoryIndirectCommandNV;
pub const struct_VkCopyMemoryToImageIndirectCommandNV = extern struct {
    srcAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    bufferRowLength: u32 = @import("std").mem.zeroes(u32),
    bufferImageHeight: u32 = @import("std").mem.zeroes(u32),
    imageSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    imageOffset: VkOffset3D = @import("std").mem.zeroes(VkOffset3D),
    imageExtent: VkExtent3D = @import("std").mem.zeroes(VkExtent3D),
};
pub const VkCopyMemoryToImageIndirectCommandNV = struct_VkCopyMemoryToImageIndirectCommandNV;
pub const struct_VkPhysicalDeviceCopyMemoryIndirectFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    indirectCopy: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceCopyMemoryIndirectFeaturesNV = struct_VkPhysicalDeviceCopyMemoryIndirectFeaturesNV;
pub const struct_VkPhysicalDeviceCopyMemoryIndirectPropertiesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    supportedQueues: VkQueueFlags = @import("std").mem.zeroes(VkQueueFlags),
};
pub const VkPhysicalDeviceCopyMemoryIndirectPropertiesNV = struct_VkPhysicalDeviceCopyMemoryIndirectPropertiesNV;
pub const PFN_vkCmdCopyMemoryIndirectNV = ?*const fn (VkCommandBuffer, VkDeviceAddress, u32, u32) callconv(.C) void;
pub const PFN_vkCmdCopyMemoryToImageIndirectNV = ?*const fn (VkCommandBuffer, VkDeviceAddress, u32, u32, VkImage, VkImageLayout, [*c]const VkImageSubresourceLayers) callconv(.C) void;
pub extern fn vkCmdCopyMemoryIndirectNV(commandBuffer: VkCommandBuffer, copyBufferAddress: VkDeviceAddress, copyCount: u32, stride: u32) void;
pub extern fn vkCmdCopyMemoryToImageIndirectNV(commandBuffer: VkCommandBuffer, copyBufferAddress: VkDeviceAddress, copyCount: u32, stride: u32, dstImage: VkImage, dstImageLayout: VkImageLayout, pImageSubresources: [*c]const VkImageSubresourceLayers) void;
pub const VkMemoryDecompressionMethodFlagBitsNV = VkFlags64;
pub const VK_MEMORY_DECOMPRESSION_METHOD_GDEFLATE_1_0_BIT_NV: VkMemoryDecompressionMethodFlagBitsNV = 1;
pub const VkMemoryDecompressionMethodFlagsNV = VkFlags64;
pub const struct_VkDecompressMemoryRegionNV = extern struct {
    srcAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    dstAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    compressedSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    decompressedSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    decompressionMethod: VkMemoryDecompressionMethodFlagsNV = @import("std").mem.zeroes(VkMemoryDecompressionMethodFlagsNV),
};
pub const VkDecompressMemoryRegionNV = struct_VkDecompressMemoryRegionNV;
pub const struct_VkPhysicalDeviceMemoryDecompressionFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    memoryDecompression: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceMemoryDecompressionFeaturesNV = struct_VkPhysicalDeviceMemoryDecompressionFeaturesNV;
pub const struct_VkPhysicalDeviceMemoryDecompressionPropertiesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    decompressionMethods: VkMemoryDecompressionMethodFlagsNV = @import("std").mem.zeroes(VkMemoryDecompressionMethodFlagsNV),
    maxDecompressionIndirectCount: u64 = @import("std").mem.zeroes(u64),
};
pub const VkPhysicalDeviceMemoryDecompressionPropertiesNV = struct_VkPhysicalDeviceMemoryDecompressionPropertiesNV;
pub const PFN_vkCmdDecompressMemoryNV = ?*const fn (VkCommandBuffer, u32, [*c]const VkDecompressMemoryRegionNV) callconv(.C) void;
pub const PFN_vkCmdDecompressMemoryIndirectCountNV = ?*const fn (VkCommandBuffer, VkDeviceAddress, VkDeviceAddress, u32) callconv(.C) void;
pub extern fn vkCmdDecompressMemoryNV(commandBuffer: VkCommandBuffer, decompressRegionCount: u32, pDecompressMemoryRegions: [*c]const VkDecompressMemoryRegionNV) void;
pub extern fn vkCmdDecompressMemoryIndirectCountNV(commandBuffer: VkCommandBuffer, indirectCommandsAddress: VkDeviceAddress, indirectCommandsCountAddress: VkDeviceAddress, stride: u32) void;
pub const struct_VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    deviceGeneratedCompute: VkBool32 = @import("std").mem.zeroes(VkBool32),
    deviceGeneratedComputePipelines: VkBool32 = @import("std").mem.zeroes(VkBool32),
    deviceGeneratedComputeCaptureReplay: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV = struct_VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV;
pub const struct_VkComputePipelineIndirectBufferInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    deviceAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    pipelineDeviceAddressCaptureReplay: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
};
pub const VkComputePipelineIndirectBufferInfoNV = struct_VkComputePipelineIndirectBufferInfoNV;
pub const struct_VkPipelineIndirectDeviceAddressInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pipelineBindPoint: VkPipelineBindPoint = @import("std").mem.zeroes(VkPipelineBindPoint),
    pipeline: VkPipeline = @import("std").mem.zeroes(VkPipeline),
};
pub const VkPipelineIndirectDeviceAddressInfoNV = struct_VkPipelineIndirectDeviceAddressInfoNV;
pub const struct_VkBindPipelineIndirectCommandNV = extern struct {
    pipelineAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
};
pub const VkBindPipelineIndirectCommandNV = struct_VkBindPipelineIndirectCommandNV;
pub const PFN_vkGetPipelineIndirectMemoryRequirementsNV = ?*const fn (VkDevice, [*c]const VkComputePipelineCreateInfo, [*c]VkMemoryRequirements2) callconv(.C) void;
pub const PFN_vkCmdUpdatePipelineIndirectBufferNV = ?*const fn (VkCommandBuffer, VkPipelineBindPoint, VkPipeline) callconv(.C) void;
pub const PFN_vkGetPipelineIndirectDeviceAddressNV = ?*const fn (VkDevice, [*c]const VkPipelineIndirectDeviceAddressInfoNV) callconv(.C) VkDeviceAddress;
pub extern fn vkGetPipelineIndirectMemoryRequirementsNV(device: VkDevice, pCreateInfo: [*c]const VkComputePipelineCreateInfo, pMemoryRequirements: [*c]VkMemoryRequirements2) void;
pub extern fn vkCmdUpdatePipelineIndirectBufferNV(commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, pipeline: VkPipeline) void;
pub extern fn vkGetPipelineIndirectDeviceAddressNV(device: VkDevice, pInfo: [*c]const VkPipelineIndirectDeviceAddressInfoNV) VkDeviceAddress;
pub const struct_VkPhysicalDeviceLinearColorAttachmentFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    linearColorAttachment: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceLinearColorAttachmentFeaturesNV = struct_VkPhysicalDeviceLinearColorAttachmentFeaturesNV;
pub const struct_VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    imageCompressionControlSwapchain: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT = struct_VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT;
pub const struct_VkImageViewSampleWeightCreateInfoQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    filterCenter: VkOffset2D = @import("std").mem.zeroes(VkOffset2D),
    filterSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    numPhases: u32 = @import("std").mem.zeroes(u32),
};
pub const VkImageViewSampleWeightCreateInfoQCOM = struct_VkImageViewSampleWeightCreateInfoQCOM;
pub const struct_VkPhysicalDeviceImageProcessingFeaturesQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    textureSampleWeighted: VkBool32 = @import("std").mem.zeroes(VkBool32),
    textureBoxFilter: VkBool32 = @import("std").mem.zeroes(VkBool32),
    textureBlockMatch: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceImageProcessingFeaturesQCOM = struct_VkPhysicalDeviceImageProcessingFeaturesQCOM;
pub const struct_VkPhysicalDeviceImageProcessingPropertiesQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxWeightFilterPhases: u32 = @import("std").mem.zeroes(u32),
    maxWeightFilterDimension: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxBlockMatchRegion: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxBoxFilterBlockSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
};
pub const VkPhysicalDeviceImageProcessingPropertiesQCOM = struct_VkPhysicalDeviceImageProcessingPropertiesQCOM;
pub const struct_VkPhysicalDeviceNestedCommandBufferFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    nestedCommandBuffer: VkBool32 = @import("std").mem.zeroes(VkBool32),
    nestedCommandBufferRendering: VkBool32 = @import("std").mem.zeroes(VkBool32),
    nestedCommandBufferSimultaneousUse: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceNestedCommandBufferFeaturesEXT = struct_VkPhysicalDeviceNestedCommandBufferFeaturesEXT;
pub const struct_VkPhysicalDeviceNestedCommandBufferPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxCommandBufferNestingLevel: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceNestedCommandBufferPropertiesEXT = struct_VkPhysicalDeviceNestedCommandBufferPropertiesEXT;
pub const struct_VkExternalMemoryAcquireUnmodifiedEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    acquireUnmodifiedMemory: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkExternalMemoryAcquireUnmodifiedEXT = struct_VkExternalMemoryAcquireUnmodifiedEXT;
pub const struct_VkPhysicalDeviceExtendedDynamicState3FeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    extendedDynamicState3TessellationDomainOrigin: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3DepthClampEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3PolygonMode: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3RasterizationSamples: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3SampleMask: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3AlphaToCoverageEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3AlphaToOneEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3LogicOpEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3ColorBlendEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3ColorBlendEquation: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3ColorWriteMask: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3RasterizationStream: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3ConservativeRasterizationMode: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3ExtraPrimitiveOverestimationSize: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3DepthClipEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3SampleLocationsEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3ColorBlendAdvanced: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3ProvokingVertexMode: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3LineRasterizationMode: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3LineStippleEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3DepthClipNegativeOneToOne: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3ViewportWScalingEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3ViewportSwizzle: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3CoverageToColorEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3CoverageToColorLocation: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3CoverageModulationMode: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3CoverageModulationTableEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3CoverageModulationTable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3CoverageReductionMode: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3RepresentativeFragmentTestEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3ShadingRateImageEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceExtendedDynamicState3FeaturesEXT = struct_VkPhysicalDeviceExtendedDynamicState3FeaturesEXT;
pub const struct_VkPhysicalDeviceExtendedDynamicState3PropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    dynamicPrimitiveTopologyUnrestricted: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceExtendedDynamicState3PropertiesEXT = struct_VkPhysicalDeviceExtendedDynamicState3PropertiesEXT;
pub const struct_VkColorBlendEquationEXT = extern struct {
    srcColorBlendFactor: VkBlendFactor = @import("std").mem.zeroes(VkBlendFactor),
    dstColorBlendFactor: VkBlendFactor = @import("std").mem.zeroes(VkBlendFactor),
    colorBlendOp: VkBlendOp = @import("std").mem.zeroes(VkBlendOp),
    srcAlphaBlendFactor: VkBlendFactor = @import("std").mem.zeroes(VkBlendFactor),
    dstAlphaBlendFactor: VkBlendFactor = @import("std").mem.zeroes(VkBlendFactor),
    alphaBlendOp: VkBlendOp = @import("std").mem.zeroes(VkBlendOp),
};
pub const VkColorBlendEquationEXT = struct_VkColorBlendEquationEXT;
pub const struct_VkColorBlendAdvancedEXT = extern struct {
    advancedBlendOp: VkBlendOp = @import("std").mem.zeroes(VkBlendOp),
    srcPremultiplied: VkBool32 = @import("std").mem.zeroes(VkBool32),
    dstPremultiplied: VkBool32 = @import("std").mem.zeroes(VkBool32),
    blendOverlap: VkBlendOverlapEXT = @import("std").mem.zeroes(VkBlendOverlapEXT),
    clampResults: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkColorBlendAdvancedEXT = struct_VkColorBlendAdvancedEXT;
pub const PFN_vkCmdSetDepthClampEnableEXT = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetPolygonModeEXT = ?*const fn (VkCommandBuffer, VkPolygonMode) callconv(.C) void;
pub const PFN_vkCmdSetRasterizationSamplesEXT = ?*const fn (VkCommandBuffer, VkSampleCountFlagBits) callconv(.C) void;
pub const PFN_vkCmdSetSampleMaskEXT = ?*const fn (VkCommandBuffer, VkSampleCountFlagBits, [*c]const VkSampleMask) callconv(.C) void;
pub const PFN_vkCmdSetAlphaToCoverageEnableEXT = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetAlphaToOneEnableEXT = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetLogicOpEnableEXT = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetColorBlendEnableEXT = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetColorBlendEquationEXT = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkColorBlendEquationEXT) callconv(.C) void;
pub const PFN_vkCmdSetColorWriteMaskEXT = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkColorComponentFlags) callconv(.C) void;
pub const PFN_vkCmdSetTessellationDomainOriginEXT = ?*const fn (VkCommandBuffer, VkTessellationDomainOrigin) callconv(.C) void;
pub const PFN_vkCmdSetRasterizationStreamEXT = ?*const fn (VkCommandBuffer, u32) callconv(.C) void;
pub const PFN_vkCmdSetConservativeRasterizationModeEXT = ?*const fn (VkCommandBuffer, VkConservativeRasterizationModeEXT) callconv(.C) void;
pub const PFN_vkCmdSetExtraPrimitiveOverestimationSizeEXT = ?*const fn (VkCommandBuffer, f32) callconv(.C) void;
pub const PFN_vkCmdSetDepthClipEnableEXT = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetSampleLocationsEnableEXT = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetColorBlendAdvancedEXT = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkColorBlendAdvancedEXT) callconv(.C) void;
pub const PFN_vkCmdSetProvokingVertexModeEXT = ?*const fn (VkCommandBuffer, VkProvokingVertexModeEXT) callconv(.C) void;
pub const PFN_vkCmdSetLineRasterizationModeEXT = ?*const fn (VkCommandBuffer, VkLineRasterizationModeEXT) callconv(.C) void;
pub const PFN_vkCmdSetLineStippleEnableEXT = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetDepthClipNegativeOneToOneEXT = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetViewportWScalingEnableNV = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetViewportSwizzleNV = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkViewportSwizzleNV) callconv(.C) void;
pub const PFN_vkCmdSetCoverageToColorEnableNV = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetCoverageToColorLocationNV = ?*const fn (VkCommandBuffer, u32) callconv(.C) void;
pub const PFN_vkCmdSetCoverageModulationModeNV = ?*const fn (VkCommandBuffer, VkCoverageModulationModeNV) callconv(.C) void;
pub const PFN_vkCmdSetCoverageModulationTableEnableNV = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetCoverageModulationTableNV = ?*const fn (VkCommandBuffer, u32, [*c]const f32) callconv(.C) void;
pub const PFN_vkCmdSetShadingRateImageEnableNV = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetRepresentativeFragmentTestEnableNV = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetCoverageReductionModeNV = ?*const fn (VkCommandBuffer, VkCoverageReductionModeNV) callconv(.C) void;
pub extern fn vkCmdSetDepthClampEnableEXT(commandBuffer: VkCommandBuffer, depthClampEnable: VkBool32) void;
pub extern fn vkCmdSetPolygonModeEXT(commandBuffer: VkCommandBuffer, polygonMode: VkPolygonMode) void;
pub extern fn vkCmdSetRasterizationSamplesEXT(commandBuffer: VkCommandBuffer, rasterizationSamples: VkSampleCountFlagBits) void;
pub extern fn vkCmdSetSampleMaskEXT(commandBuffer: VkCommandBuffer, samples: VkSampleCountFlagBits, pSampleMask: [*c]const VkSampleMask) void;
pub extern fn vkCmdSetAlphaToCoverageEnableEXT(commandBuffer: VkCommandBuffer, alphaToCoverageEnable: VkBool32) void;
pub extern fn vkCmdSetAlphaToOneEnableEXT(commandBuffer: VkCommandBuffer, alphaToOneEnable: VkBool32) void;
pub extern fn vkCmdSetLogicOpEnableEXT(commandBuffer: VkCommandBuffer, logicOpEnable: VkBool32) void;
pub extern fn vkCmdSetColorBlendEnableEXT(commandBuffer: VkCommandBuffer, firstAttachment: u32, attachmentCount: u32, pColorBlendEnables: [*c]const VkBool32) void;
pub extern fn vkCmdSetColorBlendEquationEXT(commandBuffer: VkCommandBuffer, firstAttachment: u32, attachmentCount: u32, pColorBlendEquations: [*c]const VkColorBlendEquationEXT) void;
pub extern fn vkCmdSetColorWriteMaskEXT(commandBuffer: VkCommandBuffer, firstAttachment: u32, attachmentCount: u32, pColorWriteMasks: [*c]const VkColorComponentFlags) void;
pub extern fn vkCmdSetTessellationDomainOriginEXT(commandBuffer: VkCommandBuffer, domainOrigin: VkTessellationDomainOrigin) void;
pub extern fn vkCmdSetRasterizationStreamEXT(commandBuffer: VkCommandBuffer, rasterizationStream: u32) void;
pub extern fn vkCmdSetConservativeRasterizationModeEXT(commandBuffer: VkCommandBuffer, conservativeRasterizationMode: VkConservativeRasterizationModeEXT) void;
pub extern fn vkCmdSetExtraPrimitiveOverestimationSizeEXT(commandBuffer: VkCommandBuffer, extraPrimitiveOverestimationSize: f32) void;
pub extern fn vkCmdSetDepthClipEnableEXT(commandBuffer: VkCommandBuffer, depthClipEnable: VkBool32) void;
pub extern fn vkCmdSetSampleLocationsEnableEXT(commandBuffer: VkCommandBuffer, sampleLocationsEnable: VkBool32) void;
pub extern fn vkCmdSetColorBlendAdvancedEXT(commandBuffer: VkCommandBuffer, firstAttachment: u32, attachmentCount: u32, pColorBlendAdvanced: [*c]const VkColorBlendAdvancedEXT) void;
pub extern fn vkCmdSetProvokingVertexModeEXT(commandBuffer: VkCommandBuffer, provokingVertexMode: VkProvokingVertexModeEXT) void;
pub extern fn vkCmdSetLineRasterizationModeEXT(commandBuffer: VkCommandBuffer, lineRasterizationMode: VkLineRasterizationModeEXT) void;
pub extern fn vkCmdSetLineStippleEnableEXT(commandBuffer: VkCommandBuffer, stippledLineEnable: VkBool32) void;
pub extern fn vkCmdSetDepthClipNegativeOneToOneEXT(commandBuffer: VkCommandBuffer, negativeOneToOne: VkBool32) void;
pub extern fn vkCmdSetViewportWScalingEnableNV(commandBuffer: VkCommandBuffer, viewportWScalingEnable: VkBool32) void;
pub extern fn vkCmdSetViewportSwizzleNV(commandBuffer: VkCommandBuffer, firstViewport: u32, viewportCount: u32, pViewportSwizzles: [*c]const VkViewportSwizzleNV) void;
pub extern fn vkCmdSetCoverageToColorEnableNV(commandBuffer: VkCommandBuffer, coverageToColorEnable: VkBool32) void;
pub extern fn vkCmdSetCoverageToColorLocationNV(commandBuffer: VkCommandBuffer, coverageToColorLocation: u32) void;
pub extern fn vkCmdSetCoverageModulationModeNV(commandBuffer: VkCommandBuffer, coverageModulationMode: VkCoverageModulationModeNV) void;
pub extern fn vkCmdSetCoverageModulationTableEnableNV(commandBuffer: VkCommandBuffer, coverageModulationTableEnable: VkBool32) void;
pub extern fn vkCmdSetCoverageModulationTableNV(commandBuffer: VkCommandBuffer, coverageModulationTableCount: u32, pCoverageModulationTable: [*c]const f32) void;
pub extern fn vkCmdSetShadingRateImageEnableNV(commandBuffer: VkCommandBuffer, shadingRateImageEnable: VkBool32) void;
pub extern fn vkCmdSetRepresentativeFragmentTestEnableNV(commandBuffer: VkCommandBuffer, representativeFragmentTestEnable: VkBool32) void;
pub extern fn vkCmdSetCoverageReductionModeNV(commandBuffer: VkCommandBuffer, coverageReductionMode: VkCoverageReductionModeNV) void;
pub const VK_SUBPASS_MERGE_STATUS_MERGED_EXT: c_int = 0;
pub const VK_SUBPASS_MERGE_STATUS_DISALLOWED_EXT: c_int = 1;
pub const VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SIDE_EFFECTS_EXT: c_int = 2;
pub const VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SAMPLES_MISMATCH_EXT: c_int = 3;
pub const VK_SUBPASS_MERGE_STATUS_NOT_MERGED_VIEWS_MISMATCH_EXT: c_int = 4;
pub const VK_SUBPASS_MERGE_STATUS_NOT_MERGED_ALIASING_EXT: c_int = 5;
pub const VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPENDENCIES_EXT: c_int = 6;
pub const VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INCOMPATIBLE_INPUT_ATTACHMENT_EXT: c_int = 7;
pub const VK_SUBPASS_MERGE_STATUS_NOT_MERGED_TOO_MANY_ATTACHMENTS_EXT: c_int = 8;
pub const VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INSUFFICIENT_STORAGE_EXT: c_int = 9;
pub const VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPTH_STENCIL_COUNT_EXT: c_int = 10;
pub const VK_SUBPASS_MERGE_STATUS_NOT_MERGED_RESOLVE_ATTACHMENT_REUSE_EXT: c_int = 11;
pub const VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SINGLE_SUBPASS_EXT: c_int = 12;
pub const VK_SUBPASS_MERGE_STATUS_NOT_MERGED_UNSPECIFIED_EXT: c_int = 13;
pub const VK_SUBPASS_MERGE_STATUS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkSubpassMergeStatusEXT = c_uint;
pub const VkSubpassMergeStatusEXT = enum_VkSubpassMergeStatusEXT;
pub const struct_VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    subpassMergeFeedback: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT = struct_VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT;
pub const struct_VkRenderPassCreationControlEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    disallowMerging: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkRenderPassCreationControlEXT = struct_VkRenderPassCreationControlEXT;
pub const struct_VkRenderPassCreationFeedbackInfoEXT = extern struct {
    postMergeSubpassCount: u32 = @import("std").mem.zeroes(u32),
};
pub const VkRenderPassCreationFeedbackInfoEXT = struct_VkRenderPassCreationFeedbackInfoEXT;
pub const struct_VkRenderPassCreationFeedbackCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pRenderPassFeedback: [*c]VkRenderPassCreationFeedbackInfoEXT = @import("std").mem.zeroes([*c]VkRenderPassCreationFeedbackInfoEXT),
};
pub const VkRenderPassCreationFeedbackCreateInfoEXT = struct_VkRenderPassCreationFeedbackCreateInfoEXT;
pub const struct_VkRenderPassSubpassFeedbackInfoEXT = extern struct {
    subpassMergeStatus: VkSubpassMergeStatusEXT = @import("std").mem.zeroes(VkSubpassMergeStatusEXT),
    description: [256]u8 = @import("std").mem.zeroes([256]u8),
    postMergeIndex: u32 = @import("std").mem.zeroes(u32),
};
pub const VkRenderPassSubpassFeedbackInfoEXT = struct_VkRenderPassSubpassFeedbackInfoEXT;
pub const struct_VkRenderPassSubpassFeedbackCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pSubpassFeedback: [*c]VkRenderPassSubpassFeedbackInfoEXT = @import("std").mem.zeroes([*c]VkRenderPassSubpassFeedbackInfoEXT),
};
pub const VkRenderPassSubpassFeedbackCreateInfoEXT = struct_VkRenderPassSubpassFeedbackCreateInfoEXT;
pub const VK_DIRECT_DRIVER_LOADING_MODE_EXCLUSIVE_LUNARG: c_int = 0;
pub const VK_DIRECT_DRIVER_LOADING_MODE_INCLUSIVE_LUNARG: c_int = 1;
pub const VK_DIRECT_DRIVER_LOADING_MODE_MAX_ENUM_LUNARG: c_int = 2147483647;
pub const enum_VkDirectDriverLoadingModeLUNARG = c_uint;
pub const VkDirectDriverLoadingModeLUNARG = enum_VkDirectDriverLoadingModeLUNARG;
pub const VkDirectDriverLoadingFlagsLUNARG = VkFlags;
pub const PFN_vkGetInstanceProcAddrLUNARG = ?*const fn (VkInstance, [*c]const u8) callconv(.C) PFN_vkVoidFunction;
pub const struct_VkDirectDriverLoadingInfoLUNARG = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    flags: VkDirectDriverLoadingFlagsLUNARG = @import("std").mem.zeroes(VkDirectDriverLoadingFlagsLUNARG),
    pfnGetInstanceProcAddr: PFN_vkGetInstanceProcAddrLUNARG = @import("std").mem.zeroes(PFN_vkGetInstanceProcAddrLUNARG),
};
pub const VkDirectDriverLoadingInfoLUNARG = struct_VkDirectDriverLoadingInfoLUNARG;
pub const struct_VkDirectDriverLoadingListLUNARG = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    mode: VkDirectDriverLoadingModeLUNARG = @import("std").mem.zeroes(VkDirectDriverLoadingModeLUNARG),
    driverCount: u32 = @import("std").mem.zeroes(u32),
    pDrivers: [*c]const VkDirectDriverLoadingInfoLUNARG = @import("std").mem.zeroes([*c]const VkDirectDriverLoadingInfoLUNARG),
};
pub const VkDirectDriverLoadingListLUNARG = struct_VkDirectDriverLoadingListLUNARG;
pub const struct_VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderModuleIdentifier: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT = struct_VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT;
pub const struct_VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderModuleIdentifierAlgorithmUUID: [16]u8 = @import("std").mem.zeroes([16]u8),
};
pub const VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT = struct_VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT;
pub const struct_VkPipelineShaderStageModuleIdentifierCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    identifierSize: u32 = @import("std").mem.zeroes(u32),
    pIdentifier: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
};
pub const VkPipelineShaderStageModuleIdentifierCreateInfoEXT = struct_VkPipelineShaderStageModuleIdentifierCreateInfoEXT;
pub const struct_VkShaderModuleIdentifierEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    identifierSize: u32 = @import("std").mem.zeroes(u32),
    identifier: [32]u8 = @import("std").mem.zeroes([32]u8),
};
pub const VkShaderModuleIdentifierEXT = struct_VkShaderModuleIdentifierEXT;
pub const PFN_vkGetShaderModuleIdentifierEXT = ?*const fn (VkDevice, VkShaderModule, [*c]VkShaderModuleIdentifierEXT) callconv(.C) void;
pub const PFN_vkGetShaderModuleCreateInfoIdentifierEXT = ?*const fn (VkDevice, [*c]const VkShaderModuleCreateInfo, [*c]VkShaderModuleIdentifierEXT) callconv(.C) void;
pub extern fn vkGetShaderModuleIdentifierEXT(device: VkDevice, shaderModule: VkShaderModule, pIdentifier: [*c]VkShaderModuleIdentifierEXT) void;
pub extern fn vkGetShaderModuleCreateInfoIdentifierEXT(device: VkDevice, pCreateInfo: [*c]const VkShaderModuleCreateInfo, pIdentifier: [*c]VkShaderModuleIdentifierEXT) void;
pub const struct_VkOpticalFlowSessionNV_T = opaque {};
pub const VkOpticalFlowSessionNV = ?*struct_VkOpticalFlowSessionNV_T;
pub const VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_UNKNOWN_NV: c_int = 0;
pub const VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_SLOW_NV: c_int = 1;
pub const VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MEDIUM_NV: c_int = 2;
pub const VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_FAST_NV: c_int = 3;
pub const VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkOpticalFlowPerformanceLevelNV = c_uint;
pub const VkOpticalFlowPerformanceLevelNV = enum_VkOpticalFlowPerformanceLevelNV;
pub const VK_OPTICAL_FLOW_SESSION_BINDING_POINT_UNKNOWN_NV: c_int = 0;
pub const VK_OPTICAL_FLOW_SESSION_BINDING_POINT_INPUT_NV: c_int = 1;
pub const VK_OPTICAL_FLOW_SESSION_BINDING_POINT_REFERENCE_NV: c_int = 2;
pub const VK_OPTICAL_FLOW_SESSION_BINDING_POINT_HINT_NV: c_int = 3;
pub const VK_OPTICAL_FLOW_SESSION_BINDING_POINT_FLOW_VECTOR_NV: c_int = 4;
pub const VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_FLOW_VECTOR_NV: c_int = 5;
pub const VK_OPTICAL_FLOW_SESSION_BINDING_POINT_COST_NV: c_int = 6;
pub const VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_COST_NV: c_int = 7;
pub const VK_OPTICAL_FLOW_SESSION_BINDING_POINT_GLOBAL_FLOW_NV: c_int = 8;
pub const VK_OPTICAL_FLOW_SESSION_BINDING_POINT_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkOpticalFlowSessionBindingPointNV = c_uint;
pub const VkOpticalFlowSessionBindingPointNV = enum_VkOpticalFlowSessionBindingPointNV;
pub const VK_OPTICAL_FLOW_GRID_SIZE_UNKNOWN_NV: c_int = 0;
pub const VK_OPTICAL_FLOW_GRID_SIZE_1X1_BIT_NV: c_int = 1;
pub const VK_OPTICAL_FLOW_GRID_SIZE_2X2_BIT_NV: c_int = 2;
pub const VK_OPTICAL_FLOW_GRID_SIZE_4X4_BIT_NV: c_int = 4;
pub const VK_OPTICAL_FLOW_GRID_SIZE_8X8_BIT_NV: c_int = 8;
pub const VK_OPTICAL_FLOW_GRID_SIZE_FLAG_BITS_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkOpticalFlowGridSizeFlagBitsNV = c_uint;
pub const VkOpticalFlowGridSizeFlagBitsNV = enum_VkOpticalFlowGridSizeFlagBitsNV;
pub const VkOpticalFlowGridSizeFlagsNV = VkFlags;
pub const VK_OPTICAL_FLOW_USAGE_UNKNOWN_NV: c_int = 0;
pub const VK_OPTICAL_FLOW_USAGE_INPUT_BIT_NV: c_int = 1;
pub const VK_OPTICAL_FLOW_USAGE_OUTPUT_BIT_NV: c_int = 2;
pub const VK_OPTICAL_FLOW_USAGE_HINT_BIT_NV: c_int = 4;
pub const VK_OPTICAL_FLOW_USAGE_COST_BIT_NV: c_int = 8;
pub const VK_OPTICAL_FLOW_USAGE_GLOBAL_FLOW_BIT_NV: c_int = 16;
pub const VK_OPTICAL_FLOW_USAGE_FLAG_BITS_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkOpticalFlowUsageFlagBitsNV = c_uint;
pub const VkOpticalFlowUsageFlagBitsNV = enum_VkOpticalFlowUsageFlagBitsNV;
pub const VkOpticalFlowUsageFlagsNV = VkFlags;
pub const VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_HINT_BIT_NV: c_int = 1;
pub const VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_COST_BIT_NV: c_int = 2;
pub const VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_GLOBAL_FLOW_BIT_NV: c_int = 4;
pub const VK_OPTICAL_FLOW_SESSION_CREATE_ALLOW_REGIONS_BIT_NV: c_int = 8;
pub const VK_OPTICAL_FLOW_SESSION_CREATE_BOTH_DIRECTIONS_BIT_NV: c_int = 16;
pub const VK_OPTICAL_FLOW_SESSION_CREATE_FLAG_BITS_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkOpticalFlowSessionCreateFlagBitsNV = c_uint;
pub const VkOpticalFlowSessionCreateFlagBitsNV = enum_VkOpticalFlowSessionCreateFlagBitsNV;
pub const VkOpticalFlowSessionCreateFlagsNV = VkFlags;
pub const VK_OPTICAL_FLOW_EXECUTE_DISABLE_TEMPORAL_HINTS_BIT_NV: c_int = 1;
pub const VK_OPTICAL_FLOW_EXECUTE_FLAG_BITS_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkOpticalFlowExecuteFlagBitsNV = c_uint;
pub const VkOpticalFlowExecuteFlagBitsNV = enum_VkOpticalFlowExecuteFlagBitsNV;
pub const VkOpticalFlowExecuteFlagsNV = VkFlags;
pub const struct_VkPhysicalDeviceOpticalFlowFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    opticalFlow: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceOpticalFlowFeaturesNV = struct_VkPhysicalDeviceOpticalFlowFeaturesNV;
pub const struct_VkPhysicalDeviceOpticalFlowPropertiesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    supportedOutputGridSizes: VkOpticalFlowGridSizeFlagsNV = @import("std").mem.zeroes(VkOpticalFlowGridSizeFlagsNV),
    supportedHintGridSizes: VkOpticalFlowGridSizeFlagsNV = @import("std").mem.zeroes(VkOpticalFlowGridSizeFlagsNV),
    hintSupported: VkBool32 = @import("std").mem.zeroes(VkBool32),
    costSupported: VkBool32 = @import("std").mem.zeroes(VkBool32),
    bidirectionalFlowSupported: VkBool32 = @import("std").mem.zeroes(VkBool32),
    globalFlowSupported: VkBool32 = @import("std").mem.zeroes(VkBool32),
    minWidth: u32 = @import("std").mem.zeroes(u32),
    minHeight: u32 = @import("std").mem.zeroes(u32),
    maxWidth: u32 = @import("std").mem.zeroes(u32),
    maxHeight: u32 = @import("std").mem.zeroes(u32),
    maxNumRegionsOfInterest: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceOpticalFlowPropertiesNV = struct_VkPhysicalDeviceOpticalFlowPropertiesNV;
pub const struct_VkOpticalFlowImageFormatInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    usage: VkOpticalFlowUsageFlagsNV = @import("std").mem.zeroes(VkOpticalFlowUsageFlagsNV),
};
pub const VkOpticalFlowImageFormatInfoNV = struct_VkOpticalFlowImageFormatInfoNV;
pub const struct_VkOpticalFlowImageFormatPropertiesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
};
pub const VkOpticalFlowImageFormatPropertiesNV = struct_VkOpticalFlowImageFormatPropertiesNV;
pub const struct_VkOpticalFlowSessionCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    width: u32 = @import("std").mem.zeroes(u32),
    height: u32 = @import("std").mem.zeroes(u32),
    imageFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
    flowVectorFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
    costFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
    outputGridSize: VkOpticalFlowGridSizeFlagsNV = @import("std").mem.zeroes(VkOpticalFlowGridSizeFlagsNV),
    hintGridSize: VkOpticalFlowGridSizeFlagsNV = @import("std").mem.zeroes(VkOpticalFlowGridSizeFlagsNV),
    performanceLevel: VkOpticalFlowPerformanceLevelNV = @import("std").mem.zeroes(VkOpticalFlowPerformanceLevelNV),
    flags: VkOpticalFlowSessionCreateFlagsNV = @import("std").mem.zeroes(VkOpticalFlowSessionCreateFlagsNV),
};
pub const VkOpticalFlowSessionCreateInfoNV = struct_VkOpticalFlowSessionCreateInfoNV;
pub const struct_VkOpticalFlowSessionCreatePrivateDataInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    id: u32 = @import("std").mem.zeroes(u32),
    size: u32 = @import("std").mem.zeroes(u32),
    pPrivateData: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const VkOpticalFlowSessionCreatePrivateDataInfoNV = struct_VkOpticalFlowSessionCreatePrivateDataInfoNV;
pub const struct_VkOpticalFlowExecuteInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    flags: VkOpticalFlowExecuteFlagsNV = @import("std").mem.zeroes(VkOpticalFlowExecuteFlagsNV),
    regionCount: u32 = @import("std").mem.zeroes(u32),
    pRegions: [*c]const VkRect2D = @import("std").mem.zeroes([*c]const VkRect2D),
};
pub const VkOpticalFlowExecuteInfoNV = struct_VkOpticalFlowExecuteInfoNV;
pub const PFN_vkGetPhysicalDeviceOpticalFlowImageFormatsNV = ?*const fn (VkPhysicalDevice, [*c]const VkOpticalFlowImageFormatInfoNV, [*c]u32, [*c]VkOpticalFlowImageFormatPropertiesNV) callconv(.C) VkResult;
pub const PFN_vkCreateOpticalFlowSessionNV = ?*const fn (VkDevice, [*c]const VkOpticalFlowSessionCreateInfoNV, [*c]const VkAllocationCallbacks, [*c]VkOpticalFlowSessionNV) callconv(.C) VkResult;
pub const PFN_vkDestroyOpticalFlowSessionNV = ?*const fn (VkDevice, VkOpticalFlowSessionNV, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkBindOpticalFlowSessionImageNV = ?*const fn (VkDevice, VkOpticalFlowSessionNV, VkOpticalFlowSessionBindingPointNV, VkImageView, VkImageLayout) callconv(.C) VkResult;
pub const PFN_vkCmdOpticalFlowExecuteNV = ?*const fn (VkCommandBuffer, VkOpticalFlowSessionNV, [*c]const VkOpticalFlowExecuteInfoNV) callconv(.C) void;
pub extern fn vkGetPhysicalDeviceOpticalFlowImageFormatsNV(physicalDevice: VkPhysicalDevice, pOpticalFlowImageFormatInfo: [*c]const VkOpticalFlowImageFormatInfoNV, pFormatCount: [*c]u32, pImageFormatProperties: [*c]VkOpticalFlowImageFormatPropertiesNV) VkResult;
pub extern fn vkCreateOpticalFlowSessionNV(device: VkDevice, pCreateInfo: [*c]const VkOpticalFlowSessionCreateInfoNV, pAllocator: [*c]const VkAllocationCallbacks, pSession: [*c]VkOpticalFlowSessionNV) VkResult;
pub extern fn vkDestroyOpticalFlowSessionNV(device: VkDevice, session: VkOpticalFlowSessionNV, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkBindOpticalFlowSessionImageNV(device: VkDevice, session: VkOpticalFlowSessionNV, bindingPoint: VkOpticalFlowSessionBindingPointNV, view: VkImageView, layout: VkImageLayout) VkResult;
pub extern fn vkCmdOpticalFlowExecuteNV(commandBuffer: VkCommandBuffer, session: VkOpticalFlowSessionNV, pExecuteInfo: [*c]const VkOpticalFlowExecuteInfoNV) void;
pub const struct_VkPhysicalDeviceLegacyDitheringFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    legacyDithering: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceLegacyDitheringFeaturesEXT = struct_VkPhysicalDeviceLegacyDitheringFeaturesEXT;
pub const struct_VkPhysicalDevicePipelineProtectedAccessFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pipelineProtectedAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevicePipelineProtectedAccessFeaturesEXT = struct_VkPhysicalDevicePipelineProtectedAccessFeaturesEXT;
pub const VK_ANTI_LAG_MODE_DRIVER_CONTROL_AMD: c_int = 0;
pub const VK_ANTI_LAG_MODE_ON_AMD: c_int = 1;
pub const VK_ANTI_LAG_MODE_OFF_AMD: c_int = 2;
pub const VK_ANTI_LAG_MODE_MAX_ENUM_AMD: c_int = 2147483647;
pub const enum_VkAntiLagModeAMD = c_uint;
pub const VkAntiLagModeAMD = enum_VkAntiLagModeAMD;
pub const VK_ANTI_LAG_STAGE_INPUT_AMD: c_int = 0;
pub const VK_ANTI_LAG_STAGE_PRESENT_AMD: c_int = 1;
pub const VK_ANTI_LAG_STAGE_MAX_ENUM_AMD: c_int = 2147483647;
pub const enum_VkAntiLagStageAMD = c_uint;
pub const VkAntiLagStageAMD = enum_VkAntiLagStageAMD;
pub const struct_VkPhysicalDeviceAntiLagFeaturesAMD = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    antiLag: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceAntiLagFeaturesAMD = struct_VkPhysicalDeviceAntiLagFeaturesAMD;
pub const struct_VkAntiLagPresentationInfoAMD = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    stage: VkAntiLagStageAMD = @import("std").mem.zeroes(VkAntiLagStageAMD),
    frameIndex: u64 = @import("std").mem.zeroes(u64),
};
pub const VkAntiLagPresentationInfoAMD = struct_VkAntiLagPresentationInfoAMD;
pub const struct_VkAntiLagDataAMD = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    mode: VkAntiLagModeAMD = @import("std").mem.zeroes(VkAntiLagModeAMD),
    maxFPS: u32 = @import("std").mem.zeroes(u32),
    pPresentationInfo: [*c]const VkAntiLagPresentationInfoAMD = @import("std").mem.zeroes([*c]const VkAntiLagPresentationInfoAMD),
};
pub const VkAntiLagDataAMD = struct_VkAntiLagDataAMD;
pub const PFN_vkAntiLagUpdateAMD = ?*const fn (VkDevice, [*c]const VkAntiLagDataAMD) callconv(.C) void;
pub extern fn vkAntiLagUpdateAMD(device: VkDevice, pData: [*c]const VkAntiLagDataAMD) void;
pub const struct_VkShaderEXT_T = opaque {};
pub const VkShaderEXT = ?*struct_VkShaderEXT_T;
pub const VK_SHADER_CODE_TYPE_BINARY_EXT: c_int = 0;
pub const VK_SHADER_CODE_TYPE_SPIRV_EXT: c_int = 1;
pub const VK_SHADER_CODE_TYPE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkShaderCodeTypeEXT = c_uint;
pub const VkShaderCodeTypeEXT = enum_VkShaderCodeTypeEXT;
pub const VK_SHADER_CREATE_LINK_STAGE_BIT_EXT: c_int = 1;
pub const VK_SHADER_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT: c_int = 2;
pub const VK_SHADER_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT: c_int = 4;
pub const VK_SHADER_CREATE_NO_TASK_SHADER_BIT_EXT: c_int = 8;
pub const VK_SHADER_CREATE_DISPATCH_BASE_BIT_EXT: c_int = 16;
pub const VK_SHADER_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_EXT: c_int = 32;
pub const VK_SHADER_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT: c_int = 64;
pub const VK_SHADER_CREATE_FLAG_BITS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkShaderCreateFlagBitsEXT = c_uint;
pub const VkShaderCreateFlagBitsEXT = enum_VkShaderCreateFlagBitsEXT;
pub const VkShaderCreateFlagsEXT = VkFlags;
pub const struct_VkPhysicalDeviceShaderObjectFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderObject: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderObjectFeaturesEXT = struct_VkPhysicalDeviceShaderObjectFeaturesEXT;
pub const struct_VkPhysicalDeviceShaderObjectPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderBinaryUUID: [16]u8 = @import("std").mem.zeroes([16]u8),
    shaderBinaryVersion: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceShaderObjectPropertiesEXT = struct_VkPhysicalDeviceShaderObjectPropertiesEXT;
pub const struct_VkShaderCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkShaderCreateFlagsEXT = @import("std").mem.zeroes(VkShaderCreateFlagsEXT),
    stage: VkShaderStageFlagBits = @import("std").mem.zeroes(VkShaderStageFlagBits),
    nextStage: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    codeType: VkShaderCodeTypeEXT = @import("std").mem.zeroes(VkShaderCodeTypeEXT),
    codeSize: usize = @import("std").mem.zeroes(usize),
    pCode: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pName: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    setLayoutCount: u32 = @import("std").mem.zeroes(u32),
    pSetLayouts: [*c]const VkDescriptorSetLayout = @import("std").mem.zeroes([*c]const VkDescriptorSetLayout),
    pushConstantRangeCount: u32 = @import("std").mem.zeroes(u32),
    pPushConstantRanges: [*c]const VkPushConstantRange = @import("std").mem.zeroes([*c]const VkPushConstantRange),
    pSpecializationInfo: [*c]const VkSpecializationInfo = @import("std").mem.zeroes([*c]const VkSpecializationInfo),
};
pub const VkShaderCreateInfoEXT = struct_VkShaderCreateInfoEXT;
pub const VkShaderRequiredSubgroupSizeCreateInfoEXT = VkPipelineShaderStageRequiredSubgroupSizeCreateInfo;
pub const PFN_vkCreateShadersEXT = ?*const fn (VkDevice, u32, [*c]const VkShaderCreateInfoEXT, [*c]const VkAllocationCallbacks, [*c]VkShaderEXT) callconv(.C) VkResult;
pub const PFN_vkDestroyShaderEXT = ?*const fn (VkDevice, VkShaderEXT, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkGetShaderBinaryDataEXT = ?*const fn (VkDevice, VkShaderEXT, [*c]usize, ?*anyopaque) callconv(.C) VkResult;
pub const PFN_vkCmdBindShadersEXT = ?*const fn (VkCommandBuffer, u32, [*c]const VkShaderStageFlagBits, [*c]const VkShaderEXT) callconv(.C) void;
pub extern fn vkCreateShadersEXT(device: VkDevice, createInfoCount: u32, pCreateInfos: [*c]const VkShaderCreateInfoEXT, pAllocator: [*c]const VkAllocationCallbacks, pShaders: [*c]VkShaderEXT) VkResult;
pub extern fn vkDestroyShaderEXT(device: VkDevice, shader: VkShaderEXT, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkGetShaderBinaryDataEXT(device: VkDevice, shader: VkShaderEXT, pDataSize: [*c]usize, pData: ?*anyopaque) VkResult;
pub extern fn vkCmdBindShadersEXT(commandBuffer: VkCommandBuffer, stageCount: u32, pStages: [*c]const VkShaderStageFlagBits, pShaders: [*c]const VkShaderEXT) void;
pub const struct_VkPhysicalDeviceTilePropertiesFeaturesQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    tileProperties: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceTilePropertiesFeaturesQCOM = struct_VkPhysicalDeviceTilePropertiesFeaturesQCOM;
pub const struct_VkTilePropertiesQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    tileSize: VkExtent3D = @import("std").mem.zeroes(VkExtent3D),
    apronSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    origin: VkOffset2D = @import("std").mem.zeroes(VkOffset2D),
};
pub const VkTilePropertiesQCOM = struct_VkTilePropertiesQCOM;
pub const PFN_vkGetFramebufferTilePropertiesQCOM = ?*const fn (VkDevice, VkFramebuffer, [*c]u32, [*c]VkTilePropertiesQCOM) callconv(.C) VkResult;
pub const PFN_vkGetDynamicRenderingTilePropertiesQCOM = ?*const fn (VkDevice, [*c]const VkRenderingInfo, [*c]VkTilePropertiesQCOM) callconv(.C) VkResult;
pub extern fn vkGetFramebufferTilePropertiesQCOM(device: VkDevice, framebuffer: VkFramebuffer, pPropertiesCount: [*c]u32, pProperties: [*c]VkTilePropertiesQCOM) VkResult;
pub extern fn vkGetDynamicRenderingTilePropertiesQCOM(device: VkDevice, pRenderingInfo: [*c]const VkRenderingInfo, pProperties: [*c]VkTilePropertiesQCOM) VkResult;
pub const struct_VkPhysicalDeviceAmigoProfilingFeaturesSEC = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    amigoProfiling: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceAmigoProfilingFeaturesSEC = struct_VkPhysicalDeviceAmigoProfilingFeaturesSEC;
pub const struct_VkAmigoProfilingSubmitInfoSEC = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    firstDrawTimestamp: u64 = @import("std").mem.zeroes(u64),
    swapBufferTimestamp: u64 = @import("std").mem.zeroes(u64),
};
pub const VkAmigoProfilingSubmitInfoSEC = struct_VkAmigoProfilingSubmitInfoSEC;
pub const struct_VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    multiviewPerViewViewports: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM = struct_VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM;
pub const VK_RAY_TRACING_INVOCATION_REORDER_MODE_NONE_NV: c_int = 0;
pub const VK_RAY_TRACING_INVOCATION_REORDER_MODE_REORDER_NV: c_int = 1;
pub const VK_RAY_TRACING_INVOCATION_REORDER_MODE_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkRayTracingInvocationReorderModeNV = c_uint;
pub const VkRayTracingInvocationReorderModeNV = enum_VkRayTracingInvocationReorderModeNV;
pub const struct_VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    rayTracingInvocationReorderReorderingHint: VkRayTracingInvocationReorderModeNV = @import("std").mem.zeroes(VkRayTracingInvocationReorderModeNV),
};
pub const VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV = struct_VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV;
pub const struct_VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    rayTracingInvocationReorder: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV = struct_VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV;
pub const struct_VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    extendedSparseAddressSpace: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV = struct_VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV;
pub const struct_VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    extendedSparseAddressSpaceSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    extendedSparseImageUsageFlags: VkImageUsageFlags = @import("std").mem.zeroes(VkImageUsageFlags),
    extendedSparseBufferUsageFlags: VkBufferUsageFlags = @import("std").mem.zeroes(VkBufferUsageFlags),
};
pub const VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV = struct_VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV;
pub const struct_VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    legacyVertexAttributes: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT = struct_VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT;
pub const struct_VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    nativeUnalignedPerformance: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT = struct_VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT;
pub const VK_LAYER_SETTING_TYPE_BOOL32_EXT: c_int = 0;
pub const VK_LAYER_SETTING_TYPE_INT32_EXT: c_int = 1;
pub const VK_LAYER_SETTING_TYPE_INT64_EXT: c_int = 2;
pub const VK_LAYER_SETTING_TYPE_UINT32_EXT: c_int = 3;
pub const VK_LAYER_SETTING_TYPE_UINT64_EXT: c_int = 4;
pub const VK_LAYER_SETTING_TYPE_FLOAT32_EXT: c_int = 5;
pub const VK_LAYER_SETTING_TYPE_FLOAT64_EXT: c_int = 6;
pub const VK_LAYER_SETTING_TYPE_STRING_EXT: c_int = 7;
pub const VK_LAYER_SETTING_TYPE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkLayerSettingTypeEXT = c_uint;
pub const VkLayerSettingTypeEXT = enum_VkLayerSettingTypeEXT;
pub const struct_VkLayerSettingEXT = extern struct {
    pLayerName: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    pSettingName: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    type: VkLayerSettingTypeEXT = @import("std").mem.zeroes(VkLayerSettingTypeEXT),
    valueCount: u32 = @import("std").mem.zeroes(u32),
    pValues: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const VkLayerSettingEXT = struct_VkLayerSettingEXT;
pub const struct_VkLayerSettingsCreateInfoEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    settingCount: u32 = @import("std").mem.zeroes(u32),
    pSettings: [*c]const VkLayerSettingEXT = @import("std").mem.zeroes([*c]const VkLayerSettingEXT),
};
pub const VkLayerSettingsCreateInfoEXT = struct_VkLayerSettingsCreateInfoEXT;
pub const struct_VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderCoreBuiltins: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM = struct_VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM;
pub const struct_VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderCoreMask: u64 = @import("std").mem.zeroes(u64),
    shaderCoreCount: u32 = @import("std").mem.zeroes(u32),
    shaderWarpsPerCore: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM = struct_VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM;
pub const struct_VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pipelineLibraryGroupHandles: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT = struct_VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT;
pub const struct_VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    dynamicRenderingUnusedAttachments: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT = struct_VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT;
pub const VK_LATENCY_MARKER_SIMULATION_START_NV: c_int = 0;
pub const VK_LATENCY_MARKER_SIMULATION_END_NV: c_int = 1;
pub const VK_LATENCY_MARKER_RENDERSUBMIT_START_NV: c_int = 2;
pub const VK_LATENCY_MARKER_RENDERSUBMIT_END_NV: c_int = 3;
pub const VK_LATENCY_MARKER_PRESENT_START_NV: c_int = 4;
pub const VK_LATENCY_MARKER_PRESENT_END_NV: c_int = 5;
pub const VK_LATENCY_MARKER_INPUT_SAMPLE_NV: c_int = 6;
pub const VK_LATENCY_MARKER_TRIGGER_FLASH_NV: c_int = 7;
pub const VK_LATENCY_MARKER_OUT_OF_BAND_RENDERSUBMIT_START_NV: c_int = 8;
pub const VK_LATENCY_MARKER_OUT_OF_BAND_RENDERSUBMIT_END_NV: c_int = 9;
pub const VK_LATENCY_MARKER_OUT_OF_BAND_PRESENT_START_NV: c_int = 10;
pub const VK_LATENCY_MARKER_OUT_OF_BAND_PRESENT_END_NV: c_int = 11;
pub const VK_LATENCY_MARKER_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkLatencyMarkerNV = c_uint;
pub const VkLatencyMarkerNV = enum_VkLatencyMarkerNV;
pub const VK_OUT_OF_BAND_QUEUE_TYPE_RENDER_NV: c_int = 0;
pub const VK_OUT_OF_BAND_QUEUE_TYPE_PRESENT_NV: c_int = 1;
pub const VK_OUT_OF_BAND_QUEUE_TYPE_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkOutOfBandQueueTypeNV = c_uint;
pub const VkOutOfBandQueueTypeNV = enum_VkOutOfBandQueueTypeNV;
pub const struct_VkLatencySleepModeInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    lowLatencyMode: VkBool32 = @import("std").mem.zeroes(VkBool32),
    lowLatencyBoost: VkBool32 = @import("std").mem.zeroes(VkBool32),
    minimumIntervalUs: u32 = @import("std").mem.zeroes(u32),
};
pub const VkLatencySleepModeInfoNV = struct_VkLatencySleepModeInfoNV;
pub const struct_VkLatencySleepInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    signalSemaphore: VkSemaphore = @import("std").mem.zeroes(VkSemaphore),
    value: u64 = @import("std").mem.zeroes(u64),
};
pub const VkLatencySleepInfoNV = struct_VkLatencySleepInfoNV;
pub const struct_VkSetLatencyMarkerInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    presentID: u64 = @import("std").mem.zeroes(u64),
    marker: VkLatencyMarkerNV = @import("std").mem.zeroes(VkLatencyMarkerNV),
};
pub const VkSetLatencyMarkerInfoNV = struct_VkSetLatencyMarkerInfoNV;
pub const struct_VkLatencyTimingsFrameReportNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    presentID: u64 = @import("std").mem.zeroes(u64),
    inputSampleTimeUs: u64 = @import("std").mem.zeroes(u64),
    simStartTimeUs: u64 = @import("std").mem.zeroes(u64),
    simEndTimeUs: u64 = @import("std").mem.zeroes(u64),
    renderSubmitStartTimeUs: u64 = @import("std").mem.zeroes(u64),
    renderSubmitEndTimeUs: u64 = @import("std").mem.zeroes(u64),
    presentStartTimeUs: u64 = @import("std").mem.zeroes(u64),
    presentEndTimeUs: u64 = @import("std").mem.zeroes(u64),
    driverStartTimeUs: u64 = @import("std").mem.zeroes(u64),
    driverEndTimeUs: u64 = @import("std").mem.zeroes(u64),
    osRenderQueueStartTimeUs: u64 = @import("std").mem.zeroes(u64),
    osRenderQueueEndTimeUs: u64 = @import("std").mem.zeroes(u64),
    gpuRenderStartTimeUs: u64 = @import("std").mem.zeroes(u64),
    gpuRenderEndTimeUs: u64 = @import("std").mem.zeroes(u64),
};
pub const VkLatencyTimingsFrameReportNV = struct_VkLatencyTimingsFrameReportNV;
pub const struct_VkGetLatencyMarkerInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    timingCount: u32 = @import("std").mem.zeroes(u32),
    pTimings: [*c]VkLatencyTimingsFrameReportNV = @import("std").mem.zeroes([*c]VkLatencyTimingsFrameReportNV),
};
pub const VkGetLatencyMarkerInfoNV = struct_VkGetLatencyMarkerInfoNV;
pub const struct_VkLatencySubmissionPresentIdNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    presentID: u64 = @import("std").mem.zeroes(u64),
};
pub const VkLatencySubmissionPresentIdNV = struct_VkLatencySubmissionPresentIdNV;
pub const struct_VkSwapchainLatencyCreateInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    latencyModeEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkSwapchainLatencyCreateInfoNV = struct_VkSwapchainLatencyCreateInfoNV;
pub const struct_VkOutOfBandQueueTypeInfoNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    queueType: VkOutOfBandQueueTypeNV = @import("std").mem.zeroes(VkOutOfBandQueueTypeNV),
};
pub const VkOutOfBandQueueTypeInfoNV = struct_VkOutOfBandQueueTypeInfoNV;
pub const struct_VkLatencySurfaceCapabilitiesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    presentModeCount: u32 = @import("std").mem.zeroes(u32),
    pPresentModes: [*c]VkPresentModeKHR = @import("std").mem.zeroes([*c]VkPresentModeKHR),
};
pub const VkLatencySurfaceCapabilitiesNV = struct_VkLatencySurfaceCapabilitiesNV;
pub const PFN_vkSetLatencySleepModeNV = ?*const fn (VkDevice, VkSwapchainKHR, [*c]const VkLatencySleepModeInfoNV) callconv(.C) VkResult;
pub const PFN_vkLatencySleepNV = ?*const fn (VkDevice, VkSwapchainKHR, [*c]const VkLatencySleepInfoNV) callconv(.C) VkResult;
pub const PFN_vkSetLatencyMarkerNV = ?*const fn (VkDevice, VkSwapchainKHR, [*c]const VkSetLatencyMarkerInfoNV) callconv(.C) void;
pub const PFN_vkGetLatencyTimingsNV = ?*const fn (VkDevice, VkSwapchainKHR, [*c]VkGetLatencyMarkerInfoNV) callconv(.C) void;
pub const PFN_vkQueueNotifyOutOfBandNV = ?*const fn (VkQueue, [*c]const VkOutOfBandQueueTypeInfoNV) callconv(.C) void;
pub extern fn vkSetLatencySleepModeNV(device: VkDevice, swapchain: VkSwapchainKHR, pSleepModeInfo: [*c]const VkLatencySleepModeInfoNV) VkResult;
pub extern fn vkLatencySleepNV(device: VkDevice, swapchain: VkSwapchainKHR, pSleepInfo: [*c]const VkLatencySleepInfoNV) VkResult;
pub extern fn vkSetLatencyMarkerNV(device: VkDevice, swapchain: VkSwapchainKHR, pLatencyMarkerInfo: [*c]const VkSetLatencyMarkerInfoNV) void;
pub extern fn vkGetLatencyTimingsNV(device: VkDevice, swapchain: VkSwapchainKHR, pLatencyMarkerInfo: [*c]VkGetLatencyMarkerInfoNV) void;
pub extern fn vkQueueNotifyOutOfBandNV(queue: VkQueue, pQueueTypeInfo: [*c]const VkOutOfBandQueueTypeInfoNV) void;
pub const struct_VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    multiviewPerViewRenderAreas: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM = struct_VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM;
pub const struct_VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    perViewRenderAreaCount: u32 = @import("std").mem.zeroes(u32),
    pPerViewRenderAreas: [*c]const VkRect2D = @import("std").mem.zeroes([*c]const VkRect2D),
};
pub const VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM = struct_VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM;
pub const struct_VkPhysicalDevicePerStageDescriptorSetFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    perStageDescriptorSet: VkBool32 = @import("std").mem.zeroes(VkBool32),
    dynamicPipelineLayout: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDevicePerStageDescriptorSetFeaturesNV = struct_VkPhysicalDevicePerStageDescriptorSetFeaturesNV;
pub const VK_BLOCK_MATCH_WINDOW_COMPARE_MODE_MIN_QCOM: c_int = 0;
pub const VK_BLOCK_MATCH_WINDOW_COMPARE_MODE_MAX_QCOM: c_int = 1;
pub const VK_BLOCK_MATCH_WINDOW_COMPARE_MODE_MAX_ENUM_QCOM: c_int = 2147483647;
pub const enum_VkBlockMatchWindowCompareModeQCOM = c_uint;
pub const VkBlockMatchWindowCompareModeQCOM = enum_VkBlockMatchWindowCompareModeQCOM;
pub const struct_VkPhysicalDeviceImageProcessing2FeaturesQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    textureBlockMatch2: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceImageProcessing2FeaturesQCOM = struct_VkPhysicalDeviceImageProcessing2FeaturesQCOM;
pub const struct_VkPhysicalDeviceImageProcessing2PropertiesQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxBlockMatchWindow: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
};
pub const VkPhysicalDeviceImageProcessing2PropertiesQCOM = struct_VkPhysicalDeviceImageProcessing2PropertiesQCOM;
pub const struct_VkSamplerBlockMatchWindowCreateInfoQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    windowExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    windowCompareMode: VkBlockMatchWindowCompareModeQCOM = @import("std").mem.zeroes(VkBlockMatchWindowCompareModeQCOM),
};
pub const VkSamplerBlockMatchWindowCreateInfoQCOM = struct_VkSamplerBlockMatchWindowCreateInfoQCOM;
pub const VK_CUBIC_FILTER_WEIGHTS_CATMULL_ROM_QCOM: c_int = 0;
pub const VK_CUBIC_FILTER_WEIGHTS_ZERO_TANGENT_CARDINAL_QCOM: c_int = 1;
pub const VK_CUBIC_FILTER_WEIGHTS_B_SPLINE_QCOM: c_int = 2;
pub const VK_CUBIC_FILTER_WEIGHTS_MITCHELL_NETRAVALI_QCOM: c_int = 3;
pub const VK_CUBIC_FILTER_WEIGHTS_MAX_ENUM_QCOM: c_int = 2147483647;
pub const enum_VkCubicFilterWeightsQCOM = c_uint;
pub const VkCubicFilterWeightsQCOM = enum_VkCubicFilterWeightsQCOM;
pub const struct_VkPhysicalDeviceCubicWeightsFeaturesQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    selectableCubicWeights: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceCubicWeightsFeaturesQCOM = struct_VkPhysicalDeviceCubicWeightsFeaturesQCOM;
pub const struct_VkSamplerCubicWeightsCreateInfoQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    cubicWeights: VkCubicFilterWeightsQCOM = @import("std").mem.zeroes(VkCubicFilterWeightsQCOM),
};
pub const VkSamplerCubicWeightsCreateInfoQCOM = struct_VkSamplerCubicWeightsCreateInfoQCOM;
pub const struct_VkBlitImageCubicWeightsInfoQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    cubicWeights: VkCubicFilterWeightsQCOM = @import("std").mem.zeroes(VkCubicFilterWeightsQCOM),
};
pub const VkBlitImageCubicWeightsInfoQCOM = struct_VkBlitImageCubicWeightsInfoQCOM;
pub const struct_VkPhysicalDeviceYcbcrDegammaFeaturesQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    ycbcrDegamma: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceYcbcrDegammaFeaturesQCOM = struct_VkPhysicalDeviceYcbcrDegammaFeaturesQCOM;
pub const struct_VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    enableYDegamma: VkBool32 = @import("std").mem.zeroes(VkBool32),
    enableCbCrDegamma: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM = struct_VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM;
pub const struct_VkPhysicalDeviceCubicClampFeaturesQCOM = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    cubicRangeClamp: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceCubicClampFeaturesQCOM = struct_VkPhysicalDeviceCubicClampFeaturesQCOM;
pub const struct_VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    attachmentFeedbackLoopDynamicState: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT = struct_VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT;
pub const PFN_vkCmdSetAttachmentFeedbackLoopEnableEXT = ?*const fn (VkCommandBuffer, VkImageAspectFlags) callconv(.C) void;
pub extern fn vkCmdSetAttachmentFeedbackLoopEnableEXT(commandBuffer: VkCommandBuffer, aspectMask: VkImageAspectFlags) void;
pub const VK_LAYERED_DRIVER_UNDERLYING_API_NONE_MSFT: c_int = 0;
pub const VK_LAYERED_DRIVER_UNDERLYING_API_D3D12_MSFT: c_int = 1;
pub const VK_LAYERED_DRIVER_UNDERLYING_API_MAX_ENUM_MSFT: c_int = 2147483647;
pub const enum_VkLayeredDriverUnderlyingApiMSFT = c_uint;
pub const VkLayeredDriverUnderlyingApiMSFT = enum_VkLayeredDriverUnderlyingApiMSFT;
pub const struct_VkPhysicalDeviceLayeredDriverPropertiesMSFT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    underlyingAPI: VkLayeredDriverUnderlyingApiMSFT = @import("std").mem.zeroes(VkLayeredDriverUnderlyingApiMSFT),
};
pub const VkPhysicalDeviceLayeredDriverPropertiesMSFT = struct_VkPhysicalDeviceLayeredDriverPropertiesMSFT;
pub const struct_VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    descriptorPoolOverallocation: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV = struct_VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV;
pub const struct_VkPhysicalDeviceRawAccessChainsFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderRawAccessChains: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceRawAccessChainsFeaturesNV = struct_VkPhysicalDeviceRawAccessChainsFeaturesNV;
pub const struct_VkPhysicalDeviceCommandBufferInheritanceFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    commandBufferInheritance: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceCommandBufferInheritanceFeaturesNV = struct_VkPhysicalDeviceCommandBufferInheritanceFeaturesNV;
pub const struct_VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderFloat16VectorAtomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV = struct_VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV;
pub const struct_VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderReplicatedComposites: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT = struct_VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT;
pub const struct_VkPhysicalDeviceRayTracingValidationFeaturesNV = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    rayTracingValidation: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceRayTracingValidationFeaturesNV = struct_VkPhysicalDeviceRayTracingValidationFeaturesNV;
pub const struct_VkPhysicalDeviceImageAlignmentControlFeaturesMESA = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    imageAlignmentControl: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceImageAlignmentControlFeaturesMESA = struct_VkPhysicalDeviceImageAlignmentControlFeaturesMESA;
pub const struct_VkPhysicalDeviceImageAlignmentControlPropertiesMESA = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    supportedImageAlignmentMask: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceImageAlignmentControlPropertiesMESA = struct_VkPhysicalDeviceImageAlignmentControlPropertiesMESA;
pub const struct_VkImageAlignmentControlCreateInfoMESA = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    maximumRequestedAlignment: u32 = @import("std").mem.zeroes(u32),
};
pub const VkImageAlignmentControlCreateInfoMESA = struct_VkImageAlignmentControlCreateInfoMESA;
pub const VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR: c_int = 0;
pub const VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR: c_int = 1;
pub const VK_BUILD_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkBuildAccelerationStructureModeKHR = c_uint;
pub const VkBuildAccelerationStructureModeKHR = enum_VkBuildAccelerationStructureModeKHR;
pub const VK_ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR: c_int = 1;
pub const VK_ACCELERATION_STRUCTURE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT: c_int = 8;
pub const VK_ACCELERATION_STRUCTURE_CREATE_MOTION_BIT_NV: c_int = 4;
pub const VK_ACCELERATION_STRUCTURE_CREATE_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkAccelerationStructureCreateFlagBitsKHR = c_uint;
pub const VkAccelerationStructureCreateFlagBitsKHR = enum_VkAccelerationStructureCreateFlagBitsKHR;
pub const VkAccelerationStructureCreateFlagsKHR = VkFlags;
pub const struct_VkAccelerationStructureBuildRangeInfoKHR = extern struct {
    primitiveCount: u32 = @import("std").mem.zeroes(u32),
    primitiveOffset: u32 = @import("std").mem.zeroes(u32),
    firstVertex: u32 = @import("std").mem.zeroes(u32),
    transformOffset: u32 = @import("std").mem.zeroes(u32),
};
pub const VkAccelerationStructureBuildRangeInfoKHR = struct_VkAccelerationStructureBuildRangeInfoKHR;
pub const struct_VkAccelerationStructureGeometryTrianglesDataKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    vertexFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
    vertexData: VkDeviceOrHostAddressConstKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressConstKHR),
    vertexStride: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    maxVertex: u32 = @import("std").mem.zeroes(u32),
    indexType: VkIndexType = @import("std").mem.zeroes(VkIndexType),
    indexData: VkDeviceOrHostAddressConstKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressConstKHR),
    transformData: VkDeviceOrHostAddressConstKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressConstKHR),
};
pub const VkAccelerationStructureGeometryTrianglesDataKHR = struct_VkAccelerationStructureGeometryTrianglesDataKHR;
pub const struct_VkAccelerationStructureGeometryAabbsDataKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    data: VkDeviceOrHostAddressConstKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressConstKHR),
    stride: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkAccelerationStructureGeometryAabbsDataKHR = struct_VkAccelerationStructureGeometryAabbsDataKHR;
pub const struct_VkAccelerationStructureGeometryInstancesDataKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    arrayOfPointers: VkBool32 = @import("std").mem.zeroes(VkBool32),
    data: VkDeviceOrHostAddressConstKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressConstKHR),
};
pub const VkAccelerationStructureGeometryInstancesDataKHR = struct_VkAccelerationStructureGeometryInstancesDataKHR;
pub const union_VkAccelerationStructureGeometryDataKHR = extern union {
    triangles: VkAccelerationStructureGeometryTrianglesDataKHR,
    aabbs: VkAccelerationStructureGeometryAabbsDataKHR,
    instances: VkAccelerationStructureGeometryInstancesDataKHR,
};
pub const VkAccelerationStructureGeometryDataKHR = union_VkAccelerationStructureGeometryDataKHR;
pub const struct_VkAccelerationStructureGeometryKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    geometryType: VkGeometryTypeKHR = @import("std").mem.zeroes(VkGeometryTypeKHR),
    geometry: VkAccelerationStructureGeometryDataKHR = @import("std").mem.zeroes(VkAccelerationStructureGeometryDataKHR),
    flags: VkGeometryFlagsKHR = @import("std").mem.zeroes(VkGeometryFlagsKHR),
};
pub const VkAccelerationStructureGeometryKHR = struct_VkAccelerationStructureGeometryKHR;
pub const struct_VkAccelerationStructureBuildGeometryInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    type: VkAccelerationStructureTypeKHR = @import("std").mem.zeroes(VkAccelerationStructureTypeKHR),
    flags: VkBuildAccelerationStructureFlagsKHR = @import("std").mem.zeroes(VkBuildAccelerationStructureFlagsKHR),
    mode: VkBuildAccelerationStructureModeKHR = @import("std").mem.zeroes(VkBuildAccelerationStructureModeKHR),
    srcAccelerationStructure: VkAccelerationStructureKHR = @import("std").mem.zeroes(VkAccelerationStructureKHR),
    dstAccelerationStructure: VkAccelerationStructureKHR = @import("std").mem.zeroes(VkAccelerationStructureKHR),
    geometryCount: u32 = @import("std").mem.zeroes(u32),
    pGeometries: [*c]const VkAccelerationStructureGeometryKHR = @import("std").mem.zeroes([*c]const VkAccelerationStructureGeometryKHR),
    ppGeometries: [*c]const [*c]const VkAccelerationStructureGeometryKHR = @import("std").mem.zeroes([*c]const [*c]const VkAccelerationStructureGeometryKHR),
    scratchData: VkDeviceOrHostAddressKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressKHR),
};
pub const VkAccelerationStructureBuildGeometryInfoKHR = struct_VkAccelerationStructureBuildGeometryInfoKHR;
pub const struct_VkAccelerationStructureCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    createFlags: VkAccelerationStructureCreateFlagsKHR = @import("std").mem.zeroes(VkAccelerationStructureCreateFlagsKHR),
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    offset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    type: VkAccelerationStructureTypeKHR = @import("std").mem.zeroes(VkAccelerationStructureTypeKHR),
    deviceAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
};
pub const VkAccelerationStructureCreateInfoKHR = struct_VkAccelerationStructureCreateInfoKHR;
pub const struct_VkWriteDescriptorSetAccelerationStructureKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    accelerationStructureCount: u32 = @import("std").mem.zeroes(u32),
    pAccelerationStructures: [*c]const VkAccelerationStructureKHR = @import("std").mem.zeroes([*c]const VkAccelerationStructureKHR),
};
pub const VkWriteDescriptorSetAccelerationStructureKHR = struct_VkWriteDescriptorSetAccelerationStructureKHR;
pub const struct_VkPhysicalDeviceAccelerationStructureFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    accelerationStructure: VkBool32 = @import("std").mem.zeroes(VkBool32),
    accelerationStructureCaptureReplay: VkBool32 = @import("std").mem.zeroes(VkBool32),
    accelerationStructureIndirectBuild: VkBool32 = @import("std").mem.zeroes(VkBool32),
    accelerationStructureHostCommands: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingAccelerationStructureUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceAccelerationStructureFeaturesKHR = struct_VkPhysicalDeviceAccelerationStructureFeaturesKHR;
pub const struct_VkPhysicalDeviceAccelerationStructurePropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxGeometryCount: u64 = @import("std").mem.zeroes(u64),
    maxInstanceCount: u64 = @import("std").mem.zeroes(u64),
    maxPrimitiveCount: u64 = @import("std").mem.zeroes(u64),
    maxPerStageDescriptorAccelerationStructures: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorUpdateAfterBindAccelerationStructures: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetAccelerationStructures: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindAccelerationStructures: u32 = @import("std").mem.zeroes(u32),
    minAccelerationStructureScratchOffsetAlignment: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceAccelerationStructurePropertiesKHR = struct_VkPhysicalDeviceAccelerationStructurePropertiesKHR;
pub const struct_VkAccelerationStructureDeviceAddressInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    accelerationStructure: VkAccelerationStructureKHR = @import("std").mem.zeroes(VkAccelerationStructureKHR),
};
pub const VkAccelerationStructureDeviceAddressInfoKHR = struct_VkAccelerationStructureDeviceAddressInfoKHR;
pub const struct_VkAccelerationStructureVersionInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pVersionData: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
};
pub const VkAccelerationStructureVersionInfoKHR = struct_VkAccelerationStructureVersionInfoKHR;
pub const struct_VkCopyAccelerationStructureToMemoryInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    src: VkAccelerationStructureKHR = @import("std").mem.zeroes(VkAccelerationStructureKHR),
    dst: VkDeviceOrHostAddressKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressKHR),
    mode: VkCopyAccelerationStructureModeKHR = @import("std").mem.zeroes(VkCopyAccelerationStructureModeKHR),
};
pub const VkCopyAccelerationStructureToMemoryInfoKHR = struct_VkCopyAccelerationStructureToMemoryInfoKHR;
pub const struct_VkCopyMemoryToAccelerationStructureInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    src: VkDeviceOrHostAddressConstKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressConstKHR),
    dst: VkAccelerationStructureKHR = @import("std").mem.zeroes(VkAccelerationStructureKHR),
    mode: VkCopyAccelerationStructureModeKHR = @import("std").mem.zeroes(VkCopyAccelerationStructureModeKHR),
};
pub const VkCopyMemoryToAccelerationStructureInfoKHR = struct_VkCopyMemoryToAccelerationStructureInfoKHR;
pub const struct_VkCopyAccelerationStructureInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    src: VkAccelerationStructureKHR = @import("std").mem.zeroes(VkAccelerationStructureKHR),
    dst: VkAccelerationStructureKHR = @import("std").mem.zeroes(VkAccelerationStructureKHR),
    mode: VkCopyAccelerationStructureModeKHR = @import("std").mem.zeroes(VkCopyAccelerationStructureModeKHR),
};
pub const VkCopyAccelerationStructureInfoKHR = struct_VkCopyAccelerationStructureInfoKHR;
pub const struct_VkAccelerationStructureBuildSizesInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    accelerationStructureSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    updateScratchSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    buildScratchSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkAccelerationStructureBuildSizesInfoKHR = struct_VkAccelerationStructureBuildSizesInfoKHR;
pub const PFN_vkCreateAccelerationStructureKHR = ?*const fn (VkDevice, [*c]const VkAccelerationStructureCreateInfoKHR, [*c]const VkAllocationCallbacks, [*c]VkAccelerationStructureKHR) callconv(.C) VkResult;
pub const PFN_vkDestroyAccelerationStructureKHR = ?*const fn (VkDevice, VkAccelerationStructureKHR, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCmdBuildAccelerationStructuresKHR = ?*const fn (VkCommandBuffer, u32, [*c]const VkAccelerationStructureBuildGeometryInfoKHR, [*c]const [*c]const VkAccelerationStructureBuildRangeInfoKHR) callconv(.C) void;
pub const PFN_vkCmdBuildAccelerationStructuresIndirectKHR = ?*const fn (VkCommandBuffer, u32, [*c]const VkAccelerationStructureBuildGeometryInfoKHR, [*c]const VkDeviceAddress, [*c]const u32, [*c]const [*c]const u32) callconv(.C) void;
pub const PFN_vkBuildAccelerationStructuresKHR = ?*const fn (VkDevice, VkDeferredOperationKHR, u32, [*c]const VkAccelerationStructureBuildGeometryInfoKHR, [*c]const [*c]const VkAccelerationStructureBuildRangeInfoKHR) callconv(.C) VkResult;
pub const PFN_vkCopyAccelerationStructureKHR = ?*const fn (VkDevice, VkDeferredOperationKHR, [*c]const VkCopyAccelerationStructureInfoKHR) callconv(.C) VkResult;
pub const PFN_vkCopyAccelerationStructureToMemoryKHR = ?*const fn (VkDevice, VkDeferredOperationKHR, [*c]const VkCopyAccelerationStructureToMemoryInfoKHR) callconv(.C) VkResult;
pub const PFN_vkCopyMemoryToAccelerationStructureKHR = ?*const fn (VkDevice, VkDeferredOperationKHR, [*c]const VkCopyMemoryToAccelerationStructureInfoKHR) callconv(.C) VkResult;
pub const PFN_vkWriteAccelerationStructuresPropertiesKHR = ?*const fn (VkDevice, u32, [*c]const VkAccelerationStructureKHR, VkQueryType, usize, ?*anyopaque, usize) callconv(.C) VkResult;
pub const PFN_vkCmdCopyAccelerationStructureKHR = ?*const fn (VkCommandBuffer, [*c]const VkCopyAccelerationStructureInfoKHR) callconv(.C) void;
pub const PFN_vkCmdCopyAccelerationStructureToMemoryKHR = ?*const fn (VkCommandBuffer, [*c]const VkCopyAccelerationStructureToMemoryInfoKHR) callconv(.C) void;
pub const PFN_vkCmdCopyMemoryToAccelerationStructureKHR = ?*const fn (VkCommandBuffer, [*c]const VkCopyMemoryToAccelerationStructureInfoKHR) callconv(.C) void;
pub const PFN_vkGetAccelerationStructureDeviceAddressKHR = ?*const fn (VkDevice, [*c]const VkAccelerationStructureDeviceAddressInfoKHR) callconv(.C) VkDeviceAddress;
pub const PFN_vkCmdWriteAccelerationStructuresPropertiesKHR = ?*const fn (VkCommandBuffer, u32, [*c]const VkAccelerationStructureKHR, VkQueryType, VkQueryPool, u32) callconv(.C) void;
pub const PFN_vkGetDeviceAccelerationStructureCompatibilityKHR = ?*const fn (VkDevice, [*c]const VkAccelerationStructureVersionInfoKHR, [*c]VkAccelerationStructureCompatibilityKHR) callconv(.C) void;
pub const PFN_vkGetAccelerationStructureBuildSizesKHR = ?*const fn (VkDevice, VkAccelerationStructureBuildTypeKHR, [*c]const VkAccelerationStructureBuildGeometryInfoKHR, [*c]const u32, [*c]VkAccelerationStructureBuildSizesInfoKHR) callconv(.C) void;
pub extern fn vkCreateAccelerationStructureKHR(device: VkDevice, pCreateInfo: [*c]const VkAccelerationStructureCreateInfoKHR, pAllocator: [*c]const VkAllocationCallbacks, pAccelerationStructure: [*c]VkAccelerationStructureKHR) VkResult;
pub extern fn vkDestroyAccelerationStructureKHR(device: VkDevice, accelerationStructure: VkAccelerationStructureKHR, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkCmdBuildAccelerationStructuresKHR(commandBuffer: VkCommandBuffer, infoCount: u32, pInfos: [*c]const VkAccelerationStructureBuildGeometryInfoKHR, ppBuildRangeInfos: [*c]const [*c]const VkAccelerationStructureBuildRangeInfoKHR) void;
pub extern fn vkCmdBuildAccelerationStructuresIndirectKHR(commandBuffer: VkCommandBuffer, infoCount: u32, pInfos: [*c]const VkAccelerationStructureBuildGeometryInfoKHR, pIndirectDeviceAddresses: [*c]const VkDeviceAddress, pIndirectStrides: [*c]const u32, ppMaxPrimitiveCounts: [*c]const [*c]const u32) void;
pub extern fn vkBuildAccelerationStructuresKHR(device: VkDevice, deferredOperation: VkDeferredOperationKHR, infoCount: u32, pInfos: [*c]const VkAccelerationStructureBuildGeometryInfoKHR, ppBuildRangeInfos: [*c]const [*c]const VkAccelerationStructureBuildRangeInfoKHR) VkResult;
pub extern fn vkCopyAccelerationStructureKHR(device: VkDevice, deferredOperation: VkDeferredOperationKHR, pInfo: [*c]const VkCopyAccelerationStructureInfoKHR) VkResult;
pub extern fn vkCopyAccelerationStructureToMemoryKHR(device: VkDevice, deferredOperation: VkDeferredOperationKHR, pInfo: [*c]const VkCopyAccelerationStructureToMemoryInfoKHR) VkResult;
pub extern fn vkCopyMemoryToAccelerationStructureKHR(device: VkDevice, deferredOperation: VkDeferredOperationKHR, pInfo: [*c]const VkCopyMemoryToAccelerationStructureInfoKHR) VkResult;
pub extern fn vkWriteAccelerationStructuresPropertiesKHR(device: VkDevice, accelerationStructureCount: u32, pAccelerationStructures: [*c]const VkAccelerationStructureKHR, queryType: VkQueryType, dataSize: usize, pData: ?*anyopaque, stride: usize) VkResult;
pub extern fn vkCmdCopyAccelerationStructureKHR(commandBuffer: VkCommandBuffer, pInfo: [*c]const VkCopyAccelerationStructureInfoKHR) void;
pub extern fn vkCmdCopyAccelerationStructureToMemoryKHR(commandBuffer: VkCommandBuffer, pInfo: [*c]const VkCopyAccelerationStructureToMemoryInfoKHR) void;
pub extern fn vkCmdCopyMemoryToAccelerationStructureKHR(commandBuffer: VkCommandBuffer, pInfo: [*c]const VkCopyMemoryToAccelerationStructureInfoKHR) void;
pub extern fn vkGetAccelerationStructureDeviceAddressKHR(device: VkDevice, pInfo: [*c]const VkAccelerationStructureDeviceAddressInfoKHR) VkDeviceAddress;
pub extern fn vkCmdWriteAccelerationStructuresPropertiesKHR(commandBuffer: VkCommandBuffer, accelerationStructureCount: u32, pAccelerationStructures: [*c]const VkAccelerationStructureKHR, queryType: VkQueryType, queryPool: VkQueryPool, firstQuery: u32) void;
pub extern fn vkGetDeviceAccelerationStructureCompatibilityKHR(device: VkDevice, pVersionInfo: [*c]const VkAccelerationStructureVersionInfoKHR, pCompatibility: [*c]VkAccelerationStructureCompatibilityKHR) void;
pub extern fn vkGetAccelerationStructureBuildSizesKHR(device: VkDevice, buildType: VkAccelerationStructureBuildTypeKHR, pBuildInfo: [*c]const VkAccelerationStructureBuildGeometryInfoKHR, pMaxPrimitiveCounts: [*c]const u32, pSizeInfo: [*c]VkAccelerationStructureBuildSizesInfoKHR) void;
pub const VK_SHADER_GROUP_SHADER_GENERAL_KHR: c_int = 0;
pub const VK_SHADER_GROUP_SHADER_CLOSEST_HIT_KHR: c_int = 1;
pub const VK_SHADER_GROUP_SHADER_ANY_HIT_KHR: c_int = 2;
pub const VK_SHADER_GROUP_SHADER_INTERSECTION_KHR: c_int = 3;
pub const VK_SHADER_GROUP_SHADER_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkShaderGroupShaderKHR = c_uint;
pub const VkShaderGroupShaderKHR = enum_VkShaderGroupShaderKHR;
pub const struct_VkRayTracingShaderGroupCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    type: VkRayTracingShaderGroupTypeKHR = @import("std").mem.zeroes(VkRayTracingShaderGroupTypeKHR),
    generalShader: u32 = @import("std").mem.zeroes(u32),
    closestHitShader: u32 = @import("std").mem.zeroes(u32),
    anyHitShader: u32 = @import("std").mem.zeroes(u32),
    intersectionShader: u32 = @import("std").mem.zeroes(u32),
    pShaderGroupCaptureReplayHandle: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
};
pub const VkRayTracingShaderGroupCreateInfoKHR = struct_VkRayTracingShaderGroupCreateInfoKHR;
pub const struct_VkRayTracingPipelineInterfaceCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    maxPipelineRayPayloadSize: u32 = @import("std").mem.zeroes(u32),
    maxPipelineRayHitAttributeSize: u32 = @import("std").mem.zeroes(u32),
};
pub const VkRayTracingPipelineInterfaceCreateInfoKHR = struct_VkRayTracingPipelineInterfaceCreateInfoKHR;
pub const struct_VkRayTracingPipelineCreateInfoKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineCreateFlags = @import("std").mem.zeroes(VkPipelineCreateFlags),
    stageCount: u32 = @import("std").mem.zeroes(u32),
    pStages: [*c]const VkPipelineShaderStageCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineShaderStageCreateInfo),
    groupCount: u32 = @import("std").mem.zeroes(u32),
    pGroups: [*c]const VkRayTracingShaderGroupCreateInfoKHR = @import("std").mem.zeroes([*c]const VkRayTracingShaderGroupCreateInfoKHR),
    maxPipelineRayRecursionDepth: u32 = @import("std").mem.zeroes(u32),
    pLibraryInfo: [*c]const VkPipelineLibraryCreateInfoKHR = @import("std").mem.zeroes([*c]const VkPipelineLibraryCreateInfoKHR),
    pLibraryInterface: [*c]const VkRayTracingPipelineInterfaceCreateInfoKHR = @import("std").mem.zeroes([*c]const VkRayTracingPipelineInterfaceCreateInfoKHR),
    pDynamicState: [*c]const VkPipelineDynamicStateCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineDynamicStateCreateInfo),
    layout: VkPipelineLayout = @import("std").mem.zeroes(VkPipelineLayout),
    basePipelineHandle: VkPipeline = @import("std").mem.zeroes(VkPipeline),
    basePipelineIndex: i32 = @import("std").mem.zeroes(i32),
};
pub const VkRayTracingPipelineCreateInfoKHR = struct_VkRayTracingPipelineCreateInfoKHR;
pub const struct_VkPhysicalDeviceRayTracingPipelineFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    rayTracingPipeline: VkBool32 = @import("std").mem.zeroes(VkBool32),
    rayTracingPipelineShaderGroupHandleCaptureReplay: VkBool32 = @import("std").mem.zeroes(VkBool32),
    rayTracingPipelineShaderGroupHandleCaptureReplayMixed: VkBool32 = @import("std").mem.zeroes(VkBool32),
    rayTracingPipelineTraceRaysIndirect: VkBool32 = @import("std").mem.zeroes(VkBool32),
    rayTraversalPrimitiveCulling: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceRayTracingPipelineFeaturesKHR = struct_VkPhysicalDeviceRayTracingPipelineFeaturesKHR;
pub const struct_VkPhysicalDeviceRayTracingPipelinePropertiesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderGroupHandleSize: u32 = @import("std").mem.zeroes(u32),
    maxRayRecursionDepth: u32 = @import("std").mem.zeroes(u32),
    maxShaderGroupStride: u32 = @import("std").mem.zeroes(u32),
    shaderGroupBaseAlignment: u32 = @import("std").mem.zeroes(u32),
    shaderGroupHandleCaptureReplaySize: u32 = @import("std").mem.zeroes(u32),
    maxRayDispatchInvocationCount: u32 = @import("std").mem.zeroes(u32),
    shaderGroupHandleAlignment: u32 = @import("std").mem.zeroes(u32),
    maxRayHitAttributeSize: u32 = @import("std").mem.zeroes(u32),
};
pub const VkPhysicalDeviceRayTracingPipelinePropertiesKHR = struct_VkPhysicalDeviceRayTracingPipelinePropertiesKHR;
pub const struct_VkStridedDeviceAddressRegionKHR = extern struct {
    deviceAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    stride: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
};
pub const VkStridedDeviceAddressRegionKHR = struct_VkStridedDeviceAddressRegionKHR;
pub const struct_VkTraceRaysIndirectCommandKHR = extern struct {
    width: u32 = @import("std").mem.zeroes(u32),
    height: u32 = @import("std").mem.zeroes(u32),
    depth: u32 = @import("std").mem.zeroes(u32),
};
pub const VkTraceRaysIndirectCommandKHR = struct_VkTraceRaysIndirectCommandKHR;
pub const PFN_vkCmdTraceRaysKHR = ?*const fn (VkCommandBuffer, [*c]const VkStridedDeviceAddressRegionKHR, [*c]const VkStridedDeviceAddressRegionKHR, [*c]const VkStridedDeviceAddressRegionKHR, [*c]const VkStridedDeviceAddressRegionKHR, u32, u32, u32) callconv(.C) void;
pub const PFN_vkCreateRayTracingPipelinesKHR = ?*const fn (VkDevice, VkDeferredOperationKHR, VkPipelineCache, u32, [*c]const VkRayTracingPipelineCreateInfoKHR, [*c]const VkAllocationCallbacks, [*c]VkPipeline) callconv(.C) VkResult;
pub const PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = ?*const fn (VkDevice, VkPipeline, u32, u32, usize, ?*anyopaque) callconv(.C) VkResult;
pub const PFN_vkCmdTraceRaysIndirectKHR = ?*const fn (VkCommandBuffer, [*c]const VkStridedDeviceAddressRegionKHR, [*c]const VkStridedDeviceAddressRegionKHR, [*c]const VkStridedDeviceAddressRegionKHR, [*c]const VkStridedDeviceAddressRegionKHR, VkDeviceAddress) callconv(.C) void;
pub const PFN_vkGetRayTracingShaderGroupStackSizeKHR = ?*const fn (VkDevice, VkPipeline, u32, VkShaderGroupShaderKHR) callconv(.C) VkDeviceSize;
pub const PFN_vkCmdSetRayTracingPipelineStackSizeKHR = ?*const fn (VkCommandBuffer, u32) callconv(.C) void;
pub extern fn vkCmdTraceRaysKHR(commandBuffer: VkCommandBuffer, pRaygenShaderBindingTable: [*c]const VkStridedDeviceAddressRegionKHR, pMissShaderBindingTable: [*c]const VkStridedDeviceAddressRegionKHR, pHitShaderBindingTable: [*c]const VkStridedDeviceAddressRegionKHR, pCallableShaderBindingTable: [*c]const VkStridedDeviceAddressRegionKHR, width: u32, height: u32, depth: u32) void;
pub extern fn vkCreateRayTracingPipelinesKHR(device: VkDevice, deferredOperation: VkDeferredOperationKHR, pipelineCache: VkPipelineCache, createInfoCount: u32, pCreateInfos: [*c]const VkRayTracingPipelineCreateInfoKHR, pAllocator: [*c]const VkAllocationCallbacks, pPipelines: [*c]VkPipeline) VkResult;
pub extern fn vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(device: VkDevice, pipeline: VkPipeline, firstGroup: u32, groupCount: u32, dataSize: usize, pData: ?*anyopaque) VkResult;
pub extern fn vkCmdTraceRaysIndirectKHR(commandBuffer: VkCommandBuffer, pRaygenShaderBindingTable: [*c]const VkStridedDeviceAddressRegionKHR, pMissShaderBindingTable: [*c]const VkStridedDeviceAddressRegionKHR, pHitShaderBindingTable: [*c]const VkStridedDeviceAddressRegionKHR, pCallableShaderBindingTable: [*c]const VkStridedDeviceAddressRegionKHR, indirectDeviceAddress: VkDeviceAddress) void;
pub extern fn vkGetRayTracingShaderGroupStackSizeKHR(device: VkDevice, pipeline: VkPipeline, group: u32, groupShader: VkShaderGroupShaderKHR) VkDeviceSize;
pub extern fn vkCmdSetRayTracingPipelineStackSizeKHR(commandBuffer: VkCommandBuffer, pipelineStackSize: u32) void;
pub const struct_VkPhysicalDeviceRayQueryFeaturesKHR = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    rayQuery: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceRayQueryFeaturesKHR = struct_VkPhysicalDeviceRayQueryFeaturesKHR;
pub const struct_VkPhysicalDeviceMeshShaderFeaturesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    taskShader: VkBool32 = @import("std").mem.zeroes(VkBool32),
    meshShader: VkBool32 = @import("std").mem.zeroes(VkBool32),
    multiviewMeshShader: VkBool32 = @import("std").mem.zeroes(VkBool32),
    primitiveFragmentShadingRateMeshShader: VkBool32 = @import("std").mem.zeroes(VkBool32),
    meshShaderQueries: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceMeshShaderFeaturesEXT = struct_VkPhysicalDeviceMeshShaderFeaturesEXT;
pub const struct_VkPhysicalDeviceMeshShaderPropertiesEXT = extern struct {
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxTaskWorkGroupTotalCount: u32 = @import("std").mem.zeroes(u32),
    maxTaskWorkGroupCount: [3]u32 = @import("std").mem.zeroes([3]u32),
    maxTaskWorkGroupInvocations: u32 = @import("std").mem.zeroes(u32),
    maxTaskWorkGroupSize: [3]u32 = @import("std").mem.zeroes([3]u32),
    maxTaskPayloadSize: u32 = @import("std").mem.zeroes(u32),
    maxTaskSharedMemorySize: u32 = @import("std").mem.zeroes(u32),
    maxTaskPayloadAndSharedMemorySize: u32 = @import("std").mem.zeroes(u32),
    maxMeshWorkGroupTotalCount: u32 = @import("std").mem.zeroes(u32),
    maxMeshWorkGroupCount: [3]u32 = @import("std").mem.zeroes([3]u32),
    maxMeshWorkGroupInvocations: u32 = @import("std").mem.zeroes(u32),
    maxMeshWorkGroupSize: [3]u32 = @import("std").mem.zeroes([3]u32),
    maxMeshSharedMemorySize: u32 = @import("std").mem.zeroes(u32),
    maxMeshPayloadAndSharedMemorySize: u32 = @import("std").mem.zeroes(u32),
    maxMeshOutputMemorySize: u32 = @import("std").mem.zeroes(u32),
    maxMeshPayloadAndOutputMemorySize: u32 = @import("std").mem.zeroes(u32),
    maxMeshOutputComponents: u32 = @import("std").mem.zeroes(u32),
    maxMeshOutputVertices: u32 = @import("std").mem.zeroes(u32),
    maxMeshOutputPrimitives: u32 = @import("std").mem.zeroes(u32),
    maxMeshOutputLayers: u32 = @import("std").mem.zeroes(u32),
    maxMeshMultiviewViewCount: u32 = @import("std").mem.zeroes(u32),
    meshOutputPerVertexGranularity: u32 = @import("std").mem.zeroes(u32),
    meshOutputPerPrimitiveGranularity: u32 = @import("std").mem.zeroes(u32),
    maxPreferredTaskWorkGroupInvocations: u32 = @import("std").mem.zeroes(u32),
    maxPreferredMeshWorkGroupInvocations: u32 = @import("std").mem.zeroes(u32),
    prefersLocalInvocationVertexOutput: VkBool32 = @import("std").mem.zeroes(VkBool32),
    prefersLocalInvocationPrimitiveOutput: VkBool32 = @import("std").mem.zeroes(VkBool32),
    prefersCompactVertexOutput: VkBool32 = @import("std").mem.zeroes(VkBool32),
    prefersCompactPrimitiveOutput: VkBool32 = @import("std").mem.zeroes(VkBool32),
};
pub const VkPhysicalDeviceMeshShaderPropertiesEXT = struct_VkPhysicalDeviceMeshShaderPropertiesEXT;
pub const struct_VkDrawMeshTasksIndirectCommandEXT = extern struct {
    groupCountX: u32 = @import("std").mem.zeroes(u32),
    groupCountY: u32 = @import("std").mem.zeroes(u32),
    groupCountZ: u32 = @import("std").mem.zeroes(u32),
};
pub const VkDrawMeshTasksIndirectCommandEXT = struct_VkDrawMeshTasksIndirectCommandEXT;
pub const PFN_vkCmdDrawMeshTasksEXT = ?*const fn (VkCommandBuffer, u32, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawMeshTasksIndirectEXT = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawMeshTasksIndirectCountEXT = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, u32, u32) callconv(.C) void;
pub extern fn vkCmdDrawMeshTasksEXT(commandBuffer: VkCommandBuffer, groupCountX: u32, groupCountY: u32, groupCountZ: u32) void;
pub extern fn vkCmdDrawMeshTasksIndirectEXT(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, drawCount: u32, stride: u32) void;
pub extern fn vkCmdDrawMeshTasksIndirectCountEXT(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: u32, stride: u32) void;
pub const GLenum = c_uint;
pub const GLboolean = u8;
pub const GLbitfield = c_uint;
pub const GLvoid = anyopaque;
pub const GLbyte = i8;
pub const GLshort = c_short;
pub const GLint = c_int;
pub const GLubyte = u8;
pub const GLushort = c_ushort;
pub const GLuint = c_uint;
pub const GLsizei = c_int;
pub const GLfloat = f32;
pub const GLclampf = f32;
pub const GLdouble = f64;
pub const GLclampd = f64;
pub extern fn glClearIndex(c: GLfloat) void;
pub extern fn glClearColor(red: GLclampf, green: GLclampf, blue: GLclampf, alpha: GLclampf) void;
pub extern fn glClear(mask: GLbitfield) void;
pub extern fn glIndexMask(mask: GLuint) void;
pub extern fn glColorMask(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) void;
pub extern fn glAlphaFunc(func: GLenum, ref: GLclampf) void;
pub extern fn glBlendFunc(sfactor: GLenum, dfactor: GLenum) void;
pub extern fn glLogicOp(opcode: GLenum) void;
pub extern fn glCullFace(mode: GLenum) void;
pub extern fn glFrontFace(mode: GLenum) void;
pub extern fn glPointSize(size: GLfloat) void;
pub extern fn glLineWidth(width: GLfloat) void;
pub extern fn glLineStipple(factor: GLint, pattern: GLushort) void;
pub extern fn glPolygonMode(face: GLenum, mode: GLenum) void;
pub extern fn glPolygonOffset(factor: GLfloat, units: GLfloat) void;
pub extern fn glPolygonStipple(mask: [*c]const GLubyte) void;
pub extern fn glGetPolygonStipple(mask: [*c]GLubyte) void;
pub extern fn glEdgeFlag(flag: GLboolean) void;
pub extern fn glEdgeFlagv(flag: [*c]const GLboolean) void;
pub extern fn glScissor(x: GLint, y: GLint, width: GLsizei, height: GLsizei) void;
pub extern fn glClipPlane(plane: GLenum, equation: [*c]const GLdouble) void;
pub extern fn glGetClipPlane(plane: GLenum, equation: [*c]GLdouble) void;
pub extern fn glDrawBuffer(mode: GLenum) void;
pub extern fn glReadBuffer(mode: GLenum) void;
pub extern fn glEnable(cap: GLenum) void;
pub extern fn glDisable(cap: GLenum) void;
pub extern fn glIsEnabled(cap: GLenum) GLboolean;
pub extern fn glEnableClientState(cap: GLenum) void;
pub extern fn glDisableClientState(cap: GLenum) void;
pub extern fn glGetBooleanv(pname: GLenum, params: [*c]GLboolean) void;
pub extern fn glGetDoublev(pname: GLenum, params: [*c]GLdouble) void;
pub extern fn glGetFloatv(pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetIntegerv(pname: GLenum, params: [*c]GLint) void;
pub extern fn glPushAttrib(mask: GLbitfield) void;
pub extern fn glPopAttrib() void;
pub extern fn glPushClientAttrib(mask: GLbitfield) void;
pub extern fn glPopClientAttrib() void;
pub extern fn glRenderMode(mode: GLenum) GLint;
pub extern fn glGetError() GLenum;
pub extern fn glGetString(name: GLenum) [*c]const GLubyte;
pub extern fn glFinish() void;
pub extern fn glFlush() void;
pub extern fn glHint(target: GLenum, mode: GLenum) void;
pub extern fn glClearDepth(depth: GLclampd) void;
pub extern fn glDepthFunc(func: GLenum) void;
pub extern fn glDepthMask(flag: GLboolean) void;
pub extern fn glDepthRange(near_val: GLclampd, far_val: GLclampd) void;
pub extern fn glClearAccum(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) void;
pub extern fn glAccum(op: GLenum, value: GLfloat) void;
pub extern fn glMatrixMode(mode: GLenum) void;
pub extern fn glOrtho(left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, near_val: GLdouble, far_val: GLdouble) void;
pub extern fn glFrustum(left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, near_val: GLdouble, far_val: GLdouble) void;
pub extern fn glViewport(x: GLint, y: GLint, width: GLsizei, height: GLsizei) void;
pub extern fn glPushMatrix() void;
pub extern fn glPopMatrix() void;
pub extern fn glLoadIdentity() void;
pub extern fn glLoadMatrixd(m: [*c]const GLdouble) void;
pub extern fn glLoadMatrixf(m: [*c]const GLfloat) void;
pub extern fn glMultMatrixd(m: [*c]const GLdouble) void;
pub extern fn glMultMatrixf(m: [*c]const GLfloat) void;
pub extern fn glRotated(angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble) void;
pub extern fn glRotatef(angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) void;
pub extern fn glScaled(x: GLdouble, y: GLdouble, z: GLdouble) void;
pub extern fn glScalef(x: GLfloat, y: GLfloat, z: GLfloat) void;
pub extern fn glTranslated(x: GLdouble, y: GLdouble, z: GLdouble) void;
pub extern fn glTranslatef(x: GLfloat, y: GLfloat, z: GLfloat) void;
pub extern fn glIsList(list: GLuint) GLboolean;
pub extern fn glDeleteLists(list: GLuint, range: GLsizei) void;
pub extern fn glGenLists(range: GLsizei) GLuint;
pub extern fn glNewList(list: GLuint, mode: GLenum) void;
pub extern fn glEndList() void;
pub extern fn glCallList(list: GLuint) void;
pub extern fn glCallLists(n: GLsizei, @"type": GLenum, lists: ?*const GLvoid) void;
pub extern fn glListBase(base: GLuint) void;
pub extern fn glBegin(mode: GLenum) void;
pub extern fn glEnd() void;
pub extern fn glVertex2d(x: GLdouble, y: GLdouble) void;
pub extern fn glVertex2f(x: GLfloat, y: GLfloat) void;
pub extern fn glVertex2i(x: GLint, y: GLint) void;
pub extern fn glVertex2s(x: GLshort, y: GLshort) void;
pub extern fn glVertex3d(x: GLdouble, y: GLdouble, z: GLdouble) void;
pub extern fn glVertex3f(x: GLfloat, y: GLfloat, z: GLfloat) void;
pub extern fn glVertex3i(x: GLint, y: GLint, z: GLint) void;
pub extern fn glVertex3s(x: GLshort, y: GLshort, z: GLshort) void;
pub extern fn glVertex4d(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) void;
pub extern fn glVertex4f(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) void;
pub extern fn glVertex4i(x: GLint, y: GLint, z: GLint, w: GLint) void;
pub extern fn glVertex4s(x: GLshort, y: GLshort, z: GLshort, w: GLshort) void;
pub extern fn glVertex2dv(v: [*c]const GLdouble) void;
pub extern fn glVertex2fv(v: [*c]const GLfloat) void;
pub extern fn glVertex2iv(v: [*c]const GLint) void;
pub extern fn glVertex2sv(v: [*c]const GLshort) void;
pub extern fn glVertex3dv(v: [*c]const GLdouble) void;
pub extern fn glVertex3fv(v: [*c]const GLfloat) void;
pub extern fn glVertex3iv(v: [*c]const GLint) void;
pub extern fn glVertex3sv(v: [*c]const GLshort) void;
pub extern fn glVertex4dv(v: [*c]const GLdouble) void;
pub extern fn glVertex4fv(v: [*c]const GLfloat) void;
pub extern fn glVertex4iv(v: [*c]const GLint) void;
pub extern fn glVertex4sv(v: [*c]const GLshort) void;
pub extern fn glNormal3b(nx: GLbyte, ny: GLbyte, nz: GLbyte) void;
pub extern fn glNormal3d(nx: GLdouble, ny: GLdouble, nz: GLdouble) void;
pub extern fn glNormal3f(nx: GLfloat, ny: GLfloat, nz: GLfloat) void;
pub extern fn glNormal3i(nx: GLint, ny: GLint, nz: GLint) void;
pub extern fn glNormal3s(nx: GLshort, ny: GLshort, nz: GLshort) void;
pub extern fn glNormal3bv(v: [*c]const GLbyte) void;
pub extern fn glNormal3dv(v: [*c]const GLdouble) void;
pub extern fn glNormal3fv(v: [*c]const GLfloat) void;
pub extern fn glNormal3iv(v: [*c]const GLint) void;
pub extern fn glNormal3sv(v: [*c]const GLshort) void;
pub extern fn glIndexd(c: GLdouble) void;
pub extern fn glIndexf(c: GLfloat) void;
pub extern fn glIndexi(c: GLint) void;
pub extern fn glIndexs(c: GLshort) void;
pub extern fn glIndexub(c: GLubyte) void;
pub extern fn glIndexdv(c: [*c]const GLdouble) void;
pub extern fn glIndexfv(c: [*c]const GLfloat) void;
pub extern fn glIndexiv(c: [*c]const GLint) void;
pub extern fn glIndexsv(c: [*c]const GLshort) void;
pub extern fn glIndexubv(c: [*c]const GLubyte) void;
pub extern fn glColor3b(red: GLbyte, green: GLbyte, blue: GLbyte) void;
pub extern fn glColor3d(red: GLdouble, green: GLdouble, blue: GLdouble) void;
pub extern fn glColor3f(red: GLfloat, green: GLfloat, blue: GLfloat) void;
pub extern fn glColor3i(red: GLint, green: GLint, blue: GLint) void;
pub extern fn glColor3s(red: GLshort, green: GLshort, blue: GLshort) void;
pub extern fn glColor3ub(red: GLubyte, green: GLubyte, blue: GLubyte) void;
pub extern fn glColor3ui(red: GLuint, green: GLuint, blue: GLuint) void;
pub extern fn glColor3us(red: GLushort, green: GLushort, blue: GLushort) void;
pub extern fn glColor4b(red: GLbyte, green: GLbyte, blue: GLbyte, alpha: GLbyte) void;
pub extern fn glColor4d(red: GLdouble, green: GLdouble, blue: GLdouble, alpha: GLdouble) void;
pub extern fn glColor4f(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) void;
pub extern fn glColor4i(red: GLint, green: GLint, blue: GLint, alpha: GLint) void;
pub extern fn glColor4s(red: GLshort, green: GLshort, blue: GLshort, alpha: GLshort) void;
pub extern fn glColor4ub(red: GLubyte, green: GLubyte, blue: GLubyte, alpha: GLubyte) void;
pub extern fn glColor4ui(red: GLuint, green: GLuint, blue: GLuint, alpha: GLuint) void;
pub extern fn glColor4us(red: GLushort, green: GLushort, blue: GLushort, alpha: GLushort) void;
pub extern fn glColor3bv(v: [*c]const GLbyte) void;
pub extern fn glColor3dv(v: [*c]const GLdouble) void;
pub extern fn glColor3fv(v: [*c]const GLfloat) void;
pub extern fn glColor3iv(v: [*c]const GLint) void;
pub extern fn glColor3sv(v: [*c]const GLshort) void;
pub extern fn glColor3ubv(v: [*c]const GLubyte) void;
pub extern fn glColor3uiv(v: [*c]const GLuint) void;
pub extern fn glColor3usv(v: [*c]const GLushort) void;
pub extern fn glColor4bv(v: [*c]const GLbyte) void;
pub extern fn glColor4dv(v: [*c]const GLdouble) void;
pub extern fn glColor4fv(v: [*c]const GLfloat) void;
pub extern fn glColor4iv(v: [*c]const GLint) void;
pub extern fn glColor4sv(v: [*c]const GLshort) void;
pub extern fn glColor4ubv(v: [*c]const GLubyte) void;
pub extern fn glColor4uiv(v: [*c]const GLuint) void;
pub extern fn glColor4usv(v: [*c]const GLushort) void;
pub extern fn glTexCoord1d(s: GLdouble) void;
pub extern fn glTexCoord1f(s: GLfloat) void;
pub extern fn glTexCoord1i(s: GLint) void;
pub extern fn glTexCoord1s(s: GLshort) void;
pub extern fn glTexCoord2d(s: GLdouble, t: GLdouble) void;
pub extern fn glTexCoord2f(s: GLfloat, t: GLfloat) void;
pub extern fn glTexCoord2i(s: GLint, t: GLint) void;
pub extern fn glTexCoord2s(s: GLshort, t: GLshort) void;
pub extern fn glTexCoord3d(s: GLdouble, t: GLdouble, r: GLdouble) void;
pub extern fn glTexCoord3f(s: GLfloat, t: GLfloat, r: GLfloat) void;
pub extern fn glTexCoord3i(s: GLint, t: GLint, r: GLint) void;
pub extern fn glTexCoord3s(s: GLshort, t: GLshort, r: GLshort) void;
pub extern fn glTexCoord4d(s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) void;
pub extern fn glTexCoord4f(s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) void;
pub extern fn glTexCoord4i(s: GLint, t: GLint, r: GLint, q: GLint) void;
pub extern fn glTexCoord4s(s: GLshort, t: GLshort, r: GLshort, q: GLshort) void;
pub extern fn glTexCoord1dv(v: [*c]const GLdouble) void;
pub extern fn glTexCoord1fv(v: [*c]const GLfloat) void;
pub extern fn glTexCoord1iv(v: [*c]const GLint) void;
pub extern fn glTexCoord1sv(v: [*c]const GLshort) void;
pub extern fn glTexCoord2dv(v: [*c]const GLdouble) void;
pub extern fn glTexCoord2fv(v: [*c]const GLfloat) void;
pub extern fn glTexCoord2iv(v: [*c]const GLint) void;
pub extern fn glTexCoord2sv(v: [*c]const GLshort) void;
pub extern fn glTexCoord3dv(v: [*c]const GLdouble) void;
pub extern fn glTexCoord3fv(v: [*c]const GLfloat) void;
pub extern fn glTexCoord3iv(v: [*c]const GLint) void;
pub extern fn glTexCoord3sv(v: [*c]const GLshort) void;
pub extern fn glTexCoord4dv(v: [*c]const GLdouble) void;
pub extern fn glTexCoord4fv(v: [*c]const GLfloat) void;
pub extern fn glTexCoord4iv(v: [*c]const GLint) void;
pub extern fn glTexCoord4sv(v: [*c]const GLshort) void;
pub extern fn glRasterPos2d(x: GLdouble, y: GLdouble) void;
pub extern fn glRasterPos2f(x: GLfloat, y: GLfloat) void;
pub extern fn glRasterPos2i(x: GLint, y: GLint) void;
pub extern fn glRasterPos2s(x: GLshort, y: GLshort) void;
pub extern fn glRasterPos3d(x: GLdouble, y: GLdouble, z: GLdouble) void;
pub extern fn glRasterPos3f(x: GLfloat, y: GLfloat, z: GLfloat) void;
pub extern fn glRasterPos3i(x: GLint, y: GLint, z: GLint) void;
pub extern fn glRasterPos3s(x: GLshort, y: GLshort, z: GLshort) void;
pub extern fn glRasterPos4d(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) void;
pub extern fn glRasterPos4f(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) void;
pub extern fn glRasterPos4i(x: GLint, y: GLint, z: GLint, w: GLint) void;
pub extern fn glRasterPos4s(x: GLshort, y: GLshort, z: GLshort, w: GLshort) void;
pub extern fn glRasterPos2dv(v: [*c]const GLdouble) void;
pub extern fn glRasterPos2fv(v: [*c]const GLfloat) void;
pub extern fn glRasterPos2iv(v: [*c]const GLint) void;
pub extern fn glRasterPos2sv(v: [*c]const GLshort) void;
pub extern fn glRasterPos3dv(v: [*c]const GLdouble) void;
pub extern fn glRasterPos3fv(v: [*c]const GLfloat) void;
pub extern fn glRasterPos3iv(v: [*c]const GLint) void;
pub extern fn glRasterPos3sv(v: [*c]const GLshort) void;
pub extern fn glRasterPos4dv(v: [*c]const GLdouble) void;
pub extern fn glRasterPos4fv(v: [*c]const GLfloat) void;
pub extern fn glRasterPos4iv(v: [*c]const GLint) void;
pub extern fn glRasterPos4sv(v: [*c]const GLshort) void;
pub extern fn glRectd(x1: GLdouble, y1: GLdouble, x2: GLdouble, y2: GLdouble) void;
pub extern fn glRectf(x1: GLfloat, y1: GLfloat, x2: GLfloat, y2: GLfloat) void;
pub extern fn glRecti(x1: GLint, y1: GLint, x2: GLint, y2: GLint) void;
pub extern fn glRects(x1: GLshort, y1: GLshort, x2: GLshort, y2: GLshort) void;
pub extern fn glRectdv(v1: [*c]const GLdouble, v2: [*c]const GLdouble) void;
pub extern fn glRectfv(v1: [*c]const GLfloat, v2: [*c]const GLfloat) void;
pub extern fn glRectiv(v1: [*c]const GLint, v2: [*c]const GLint) void;
pub extern fn glRectsv(v1: [*c]const GLshort, v2: [*c]const GLshort) void;
pub extern fn glVertexPointer(size: GLint, @"type": GLenum, stride: GLsizei, ptr: ?*const GLvoid) void;
pub extern fn glNormalPointer(@"type": GLenum, stride: GLsizei, ptr: ?*const GLvoid) void;
pub extern fn glColorPointer(size: GLint, @"type": GLenum, stride: GLsizei, ptr: ?*const GLvoid) void;
pub extern fn glIndexPointer(@"type": GLenum, stride: GLsizei, ptr: ?*const GLvoid) void;
pub extern fn glTexCoordPointer(size: GLint, @"type": GLenum, stride: GLsizei, ptr: ?*const GLvoid) void;
pub extern fn glEdgeFlagPointer(stride: GLsizei, ptr: ?*const GLvoid) void;
pub extern fn glGetPointerv(pname: GLenum, params: [*c]?*GLvoid) void;
pub extern fn glArrayElement(i: GLint) void;
pub extern fn glDrawArrays(mode: GLenum, first: GLint, count: GLsizei) void;
pub extern fn glDrawElements(mode: GLenum, count: GLsizei, @"type": GLenum, indices: ?*const GLvoid) void;
pub extern fn glInterleavedArrays(format: GLenum, stride: GLsizei, pointer: ?*const GLvoid) void;
pub extern fn glShadeModel(mode: GLenum) void;
pub extern fn glLightf(light: GLenum, pname: GLenum, param: GLfloat) void;
pub extern fn glLighti(light: GLenum, pname: GLenum, param: GLint) void;
pub extern fn glLightfv(light: GLenum, pname: GLenum, params: [*c]const GLfloat) void;
pub extern fn glLightiv(light: GLenum, pname: GLenum, params: [*c]const GLint) void;
pub extern fn glGetLightfv(light: GLenum, pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetLightiv(light: GLenum, pname: GLenum, params: [*c]GLint) void;
pub extern fn glLightModelf(pname: GLenum, param: GLfloat) void;
pub extern fn glLightModeli(pname: GLenum, param: GLint) void;
pub extern fn glLightModelfv(pname: GLenum, params: [*c]const GLfloat) void;
pub extern fn glLightModeliv(pname: GLenum, params: [*c]const GLint) void;
pub extern fn glMaterialf(face: GLenum, pname: GLenum, param: GLfloat) void;
pub extern fn glMateriali(face: GLenum, pname: GLenum, param: GLint) void;
pub extern fn glMaterialfv(face: GLenum, pname: GLenum, params: [*c]const GLfloat) void;
pub extern fn glMaterialiv(face: GLenum, pname: GLenum, params: [*c]const GLint) void;
pub extern fn glGetMaterialfv(face: GLenum, pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetMaterialiv(face: GLenum, pname: GLenum, params: [*c]GLint) void;
pub extern fn glColorMaterial(face: GLenum, mode: GLenum) void;
pub extern fn glPixelZoom(xfactor: GLfloat, yfactor: GLfloat) void;
pub extern fn glPixelStoref(pname: GLenum, param: GLfloat) void;
pub extern fn glPixelStorei(pname: GLenum, param: GLint) void;
pub extern fn glPixelTransferf(pname: GLenum, param: GLfloat) void;
pub extern fn glPixelTransferi(pname: GLenum, param: GLint) void;
pub extern fn glPixelMapfv(map: GLenum, mapsize: GLsizei, values: [*c]const GLfloat) void;
pub extern fn glPixelMapuiv(map: GLenum, mapsize: GLsizei, values: [*c]const GLuint) void;
pub extern fn glPixelMapusv(map: GLenum, mapsize: GLsizei, values: [*c]const GLushort) void;
pub extern fn glGetPixelMapfv(map: GLenum, values: [*c]GLfloat) void;
pub extern fn glGetPixelMapuiv(map: GLenum, values: [*c]GLuint) void;
pub extern fn glGetPixelMapusv(map: GLenum, values: [*c]GLushort) void;
pub extern fn glBitmap(width: GLsizei, height: GLsizei, xorig: GLfloat, yorig: GLfloat, xmove: GLfloat, ymove: GLfloat, bitmap: [*c]const GLubyte) void;
pub extern fn glReadPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, @"type": GLenum, pixels: ?*GLvoid) void;
pub extern fn glDrawPixels(width: GLsizei, height: GLsizei, format: GLenum, @"type": GLenum, pixels: ?*const GLvoid) void;
pub extern fn glCopyPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, @"type": GLenum) void;
pub extern fn glStencilFunc(func: GLenum, ref: GLint, mask: GLuint) void;
pub extern fn glStencilMask(mask: GLuint) void;
pub extern fn glStencilOp(fail: GLenum, zfail: GLenum, zpass: GLenum) void;
pub extern fn glClearStencil(s: GLint) void;
pub extern fn glTexGend(coord: GLenum, pname: GLenum, param: GLdouble) void;
pub extern fn glTexGenf(coord: GLenum, pname: GLenum, param: GLfloat) void;
pub extern fn glTexGeni(coord: GLenum, pname: GLenum, param: GLint) void;
pub extern fn glTexGendv(coord: GLenum, pname: GLenum, params: [*c]const GLdouble) void;
pub extern fn glTexGenfv(coord: GLenum, pname: GLenum, params: [*c]const GLfloat) void;
pub extern fn glTexGeniv(coord: GLenum, pname: GLenum, params: [*c]const GLint) void;
pub extern fn glGetTexGendv(coord: GLenum, pname: GLenum, params: [*c]GLdouble) void;
pub extern fn glGetTexGenfv(coord: GLenum, pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetTexGeniv(coord: GLenum, pname: GLenum, params: [*c]GLint) void;
pub extern fn glTexEnvf(target: GLenum, pname: GLenum, param: GLfloat) void;
pub extern fn glTexEnvi(target: GLenum, pname: GLenum, param: GLint) void;
pub extern fn glTexEnvfv(target: GLenum, pname: GLenum, params: [*c]const GLfloat) void;
pub extern fn glTexEnviv(target: GLenum, pname: GLenum, params: [*c]const GLint) void;
pub extern fn glGetTexEnvfv(target: GLenum, pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetTexEnviv(target: GLenum, pname: GLenum, params: [*c]GLint) void;
pub extern fn glTexParameterf(target: GLenum, pname: GLenum, param: GLfloat) void;
pub extern fn glTexParameteri(target: GLenum, pname: GLenum, param: GLint) void;
pub extern fn glTexParameterfv(target: GLenum, pname: GLenum, params: [*c]const GLfloat) void;
pub extern fn glTexParameteriv(target: GLenum, pname: GLenum, params: [*c]const GLint) void;
pub extern fn glGetTexParameterfv(target: GLenum, pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetTexParameteriv(target: GLenum, pname: GLenum, params: [*c]GLint) void;
pub extern fn glGetTexLevelParameterfv(target: GLenum, level: GLint, pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetTexLevelParameteriv(target: GLenum, level: GLint, pname: GLenum, params: [*c]GLint) void;
pub extern fn glTexImage1D(target: GLenum, level: GLint, internalFormat: GLint, width: GLsizei, border: GLint, format: GLenum, @"type": GLenum, pixels: ?*const GLvoid) void;
pub extern fn glTexImage2D(target: GLenum, level: GLint, internalFormat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, @"type": GLenum, pixels: ?*const GLvoid) void;
pub extern fn glGetTexImage(target: GLenum, level: GLint, format: GLenum, @"type": GLenum, pixels: ?*GLvoid) void;
pub extern fn glGenTextures(n: GLsizei, textures: [*c]GLuint) void;
pub extern fn glDeleteTextures(n: GLsizei, textures: [*c]const GLuint) void;
pub extern fn glBindTexture(target: GLenum, texture: GLuint) void;
pub extern fn glPrioritizeTextures(n: GLsizei, textures: [*c]const GLuint, priorities: [*c]const GLclampf) void;
pub extern fn glAreTexturesResident(n: GLsizei, textures: [*c]const GLuint, residences: [*c]GLboolean) GLboolean;
pub extern fn glIsTexture(texture: GLuint) GLboolean;
pub extern fn glTexSubImage1D(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, @"type": GLenum, pixels: ?*const GLvoid) void;
pub extern fn glTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, @"type": GLenum, pixels: ?*const GLvoid) void;
pub extern fn glCopyTexImage1D(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) void;
pub extern fn glCopyTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) void;
pub extern fn glCopyTexSubImage1D(target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) void;
pub extern fn glCopyTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) void;
pub extern fn glMap1d(target: GLenum, @"u1": GLdouble, @"u2": GLdouble, stride: GLint, order: GLint, points: [*c]const GLdouble) void;
pub extern fn glMap1f(target: GLenum, @"u1": GLfloat, @"u2": GLfloat, stride: GLint, order: GLint, points: [*c]const GLfloat) void;
pub extern fn glMap2d(target: GLenum, @"u1": GLdouble, @"u2": GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, points: [*c]const GLdouble) void;
pub extern fn glMap2f(target: GLenum, @"u1": GLfloat, @"u2": GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, points: [*c]const GLfloat) void;
pub extern fn glGetMapdv(target: GLenum, query: GLenum, v: [*c]GLdouble) void;
pub extern fn glGetMapfv(target: GLenum, query: GLenum, v: [*c]GLfloat) void;
pub extern fn glGetMapiv(target: GLenum, query: GLenum, v: [*c]GLint) void;
pub extern fn glEvalCoord1d(u: GLdouble) void;
pub extern fn glEvalCoord1f(u: GLfloat) void;
pub extern fn glEvalCoord1dv(u: [*c]const GLdouble) void;
pub extern fn glEvalCoord1fv(u: [*c]const GLfloat) void;
pub extern fn glEvalCoord2d(u: GLdouble, v: GLdouble) void;
pub extern fn glEvalCoord2f(u: GLfloat, v: GLfloat) void;
pub extern fn glEvalCoord2dv(u: [*c]const GLdouble) void;
pub extern fn glEvalCoord2fv(u: [*c]const GLfloat) void;
pub extern fn glMapGrid1d(un: GLint, @"u1": GLdouble, @"u2": GLdouble) void;
pub extern fn glMapGrid1f(un: GLint, @"u1": GLfloat, @"u2": GLfloat) void;
pub extern fn glMapGrid2d(un: GLint, @"u1": GLdouble, @"u2": GLdouble, vn: GLint, v1: GLdouble, v2: GLdouble) void;
pub extern fn glMapGrid2f(un: GLint, @"u1": GLfloat, @"u2": GLfloat, vn: GLint, v1: GLfloat, v2: GLfloat) void;
pub extern fn glEvalPoint1(i: GLint) void;
pub extern fn glEvalPoint2(i: GLint, j: GLint) void;
pub extern fn glEvalMesh1(mode: GLenum, @"i1": GLint, @"i2": GLint) void;
pub extern fn glEvalMesh2(mode: GLenum, @"i1": GLint, @"i2": GLint, j1: GLint, j2: GLint) void;
pub extern fn glFogf(pname: GLenum, param: GLfloat) void;
pub extern fn glFogi(pname: GLenum, param: GLint) void;
pub extern fn glFogfv(pname: GLenum, params: [*c]const GLfloat) void;
pub extern fn glFogiv(pname: GLenum, params: [*c]const GLint) void;
pub extern fn glFeedbackBuffer(size: GLsizei, @"type": GLenum, buffer: [*c]GLfloat) void;
pub extern fn glPassThrough(token: GLfloat) void;
pub extern fn glSelectBuffer(size: GLsizei, buffer: [*c]GLuint) void;
pub extern fn glInitNames() void;
pub extern fn glLoadName(name: GLuint) void;
pub extern fn glPushName(name: GLuint) void;
pub extern fn glPopName() void;
pub extern fn glDrawRangeElements(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, @"type": GLenum, indices: ?*const GLvoid) void;
pub extern fn glTexImage3D(target: GLenum, level: GLint, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, @"type": GLenum, pixels: ?*const GLvoid) void;
pub extern fn glTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, @"type": GLenum, pixels: ?*const GLvoid) void;
pub extern fn glCopyTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) void;
pub const PFNGLDRAWRANGEELEMENTSPROC = ?*const fn (GLenum, GLuint, GLuint, GLsizei, GLenum, ?*const GLvoid) callconv(.C) void;
pub const PFNGLTEXIMAGE3DPROC = ?*const fn (GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const GLvoid) callconv(.C) void;
pub const PFNGLTEXSUBIMAGE3DPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const GLvoid) callconv(.C) void;
pub const PFNGLCOPYTEXSUBIMAGE3DPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub extern fn glColorTable(target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, @"type": GLenum, table: ?*const GLvoid) void;
pub extern fn glColorSubTable(target: GLenum, start: GLsizei, count: GLsizei, format: GLenum, @"type": GLenum, data: ?*const GLvoid) void;
pub extern fn glColorTableParameteriv(target: GLenum, pname: GLenum, params: [*c]const GLint) void;
pub extern fn glColorTableParameterfv(target: GLenum, pname: GLenum, params: [*c]const GLfloat) void;
pub extern fn glCopyColorSubTable(target: GLenum, start: GLsizei, x: GLint, y: GLint, width: GLsizei) void;
pub extern fn glCopyColorTable(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) void;
pub extern fn glGetColorTable(target: GLenum, format: GLenum, @"type": GLenum, table: ?*GLvoid) void;
pub extern fn glGetColorTableParameterfv(target: GLenum, pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetColorTableParameteriv(target: GLenum, pname: GLenum, params: [*c]GLint) void;
pub extern fn glBlendEquation(mode: GLenum) void;
pub extern fn glBlendColor(red: GLclampf, green: GLclampf, blue: GLclampf, alpha: GLclampf) void;
pub extern fn glHistogram(target: GLenum, width: GLsizei, internalformat: GLenum, sink: GLboolean) void;
pub extern fn glResetHistogram(target: GLenum) void;
pub extern fn glGetHistogram(target: GLenum, reset: GLboolean, format: GLenum, @"type": GLenum, values: ?*GLvoid) void;
pub extern fn glGetHistogramParameterfv(target: GLenum, pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetHistogramParameteriv(target: GLenum, pname: GLenum, params: [*c]GLint) void;
pub extern fn glMinmax(target: GLenum, internalformat: GLenum, sink: GLboolean) void;
pub extern fn glResetMinmax(target: GLenum) void;
pub extern fn glGetMinmax(target: GLenum, reset: GLboolean, format: GLenum, types: GLenum, values: ?*GLvoid) void;
pub extern fn glGetMinmaxParameterfv(target: GLenum, pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetMinmaxParameteriv(target: GLenum, pname: GLenum, params: [*c]GLint) void;
pub extern fn glConvolutionFilter1D(target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, @"type": GLenum, image: ?*const GLvoid) void;
pub extern fn glConvolutionFilter2D(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, @"type": GLenum, image: ?*const GLvoid) void;
pub extern fn glConvolutionParameterf(target: GLenum, pname: GLenum, params: GLfloat) void;
pub extern fn glConvolutionParameterfv(target: GLenum, pname: GLenum, params: [*c]const GLfloat) void;
pub extern fn glConvolutionParameteri(target: GLenum, pname: GLenum, params: GLint) void;
pub extern fn glConvolutionParameteriv(target: GLenum, pname: GLenum, params: [*c]const GLint) void;
pub extern fn glCopyConvolutionFilter1D(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) void;
pub extern fn glCopyConvolutionFilter2D(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) void;
pub extern fn glGetConvolutionFilter(target: GLenum, format: GLenum, @"type": GLenum, image: ?*GLvoid) void;
pub extern fn glGetConvolutionParameterfv(target: GLenum, pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetConvolutionParameteriv(target: GLenum, pname: GLenum, params: [*c]GLint) void;
pub extern fn glSeparableFilter2D(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, @"type": GLenum, row: ?*const GLvoid, column: ?*const GLvoid) void;
pub extern fn glGetSeparableFilter(target: GLenum, format: GLenum, @"type": GLenum, row: ?*GLvoid, column: ?*GLvoid, span: ?*GLvoid) void;
pub extern fn glActiveTexture(texture: GLenum) void;
pub extern fn glClientActiveTexture(texture: GLenum) void;
pub extern fn glCompressedTexImage1D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, data: ?*const GLvoid) void;
pub extern fn glCompressedTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: ?*const GLvoid) void;
pub extern fn glCompressedTexImage3D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: ?*const GLvoid) void;
pub extern fn glCompressedTexSubImage1D(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: ?*const GLvoid) void;
pub extern fn glCompressedTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: ?*const GLvoid) void;
pub extern fn glCompressedTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: ?*const GLvoid) void;
pub extern fn glGetCompressedTexImage(target: GLenum, lod: GLint, img: ?*GLvoid) void;
pub extern fn glMultiTexCoord1d(target: GLenum, s: GLdouble) void;
pub extern fn glMultiTexCoord1dv(target: GLenum, v: [*c]const GLdouble) void;
pub extern fn glMultiTexCoord1f(target: GLenum, s: GLfloat) void;
pub extern fn glMultiTexCoord1fv(target: GLenum, v: [*c]const GLfloat) void;
pub extern fn glMultiTexCoord1i(target: GLenum, s: GLint) void;
pub extern fn glMultiTexCoord1iv(target: GLenum, v: [*c]const GLint) void;
pub extern fn glMultiTexCoord1s(target: GLenum, s: GLshort) void;
pub extern fn glMultiTexCoord1sv(target: GLenum, v: [*c]const GLshort) void;
pub extern fn glMultiTexCoord2d(target: GLenum, s: GLdouble, t: GLdouble) void;
pub extern fn glMultiTexCoord2dv(target: GLenum, v: [*c]const GLdouble) void;
pub extern fn glMultiTexCoord2f(target: GLenum, s: GLfloat, t: GLfloat) void;
pub extern fn glMultiTexCoord2fv(target: GLenum, v: [*c]const GLfloat) void;
pub extern fn glMultiTexCoord2i(target: GLenum, s: GLint, t: GLint) void;
pub extern fn glMultiTexCoord2iv(target: GLenum, v: [*c]const GLint) void;
pub extern fn glMultiTexCoord2s(target: GLenum, s: GLshort, t: GLshort) void;
pub extern fn glMultiTexCoord2sv(target: GLenum, v: [*c]const GLshort) void;
pub extern fn glMultiTexCoord3d(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble) void;
pub extern fn glMultiTexCoord3dv(target: GLenum, v: [*c]const GLdouble) void;
pub extern fn glMultiTexCoord3f(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat) void;
pub extern fn glMultiTexCoord3fv(target: GLenum, v: [*c]const GLfloat) void;
pub extern fn glMultiTexCoord3i(target: GLenum, s: GLint, t: GLint, r: GLint) void;
pub extern fn glMultiTexCoord3iv(target: GLenum, v: [*c]const GLint) void;
pub extern fn glMultiTexCoord3s(target: GLenum, s: GLshort, t: GLshort, r: GLshort) void;
pub extern fn glMultiTexCoord3sv(target: GLenum, v: [*c]const GLshort) void;
pub extern fn glMultiTexCoord4d(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) void;
pub extern fn glMultiTexCoord4dv(target: GLenum, v: [*c]const GLdouble) void;
pub extern fn glMultiTexCoord4f(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) void;
pub extern fn glMultiTexCoord4fv(target: GLenum, v: [*c]const GLfloat) void;
pub extern fn glMultiTexCoord4i(target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint) void;
pub extern fn glMultiTexCoord4iv(target: GLenum, v: [*c]const GLint) void;
pub extern fn glMultiTexCoord4s(target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort) void;
pub extern fn glMultiTexCoord4sv(target: GLenum, v: [*c]const GLshort) void;
pub extern fn glLoadTransposeMatrixd(m: [*c]const GLdouble) void;
pub extern fn glLoadTransposeMatrixf(m: [*c]const GLfloat) void;
pub extern fn glMultTransposeMatrixd(m: [*c]const GLdouble) void;
pub extern fn glMultTransposeMatrixf(m: [*c]const GLfloat) void;
pub extern fn glSampleCoverage(value: GLclampf, invert: GLboolean) void;
pub const PFNGLACTIVETEXTUREPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLSAMPLECOVERAGEPROC = ?*const fn (GLclampf, GLboolean) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXIMAGE3DPROC = ?*const fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, ?*const GLvoid) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXIMAGE2DPROC = ?*const fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, ?*const GLvoid) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXIMAGE1DPROC = ?*const fn (GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, ?*const GLvoid) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const GLvoid) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ?*const GLvoid) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC = ?*const fn (GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, ?*const GLvoid) callconv(.C) void;
pub const PFNGLGETCOMPRESSEDTEXIMAGEPROC = ?*const fn (GLenum, GLint, ?*GLvoid) callconv(.C) void;
pub extern fn glActiveTextureARB(texture: GLenum) void;
pub extern fn glClientActiveTextureARB(texture: GLenum) void;
pub extern fn glMultiTexCoord1dARB(target: GLenum, s: GLdouble) void;
pub extern fn glMultiTexCoord1dvARB(target: GLenum, v: [*c]const GLdouble) void;
pub extern fn glMultiTexCoord1fARB(target: GLenum, s: GLfloat) void;
pub extern fn glMultiTexCoord1fvARB(target: GLenum, v: [*c]const GLfloat) void;
pub extern fn glMultiTexCoord1iARB(target: GLenum, s: GLint) void;
pub extern fn glMultiTexCoord1ivARB(target: GLenum, v: [*c]const GLint) void;
pub extern fn glMultiTexCoord1sARB(target: GLenum, s: GLshort) void;
pub extern fn glMultiTexCoord1svARB(target: GLenum, v: [*c]const GLshort) void;
pub extern fn glMultiTexCoord2dARB(target: GLenum, s: GLdouble, t: GLdouble) void;
pub extern fn glMultiTexCoord2dvARB(target: GLenum, v: [*c]const GLdouble) void;
pub extern fn glMultiTexCoord2fARB(target: GLenum, s: GLfloat, t: GLfloat) void;
pub extern fn glMultiTexCoord2fvARB(target: GLenum, v: [*c]const GLfloat) void;
pub extern fn glMultiTexCoord2iARB(target: GLenum, s: GLint, t: GLint) void;
pub extern fn glMultiTexCoord2ivARB(target: GLenum, v: [*c]const GLint) void;
pub extern fn glMultiTexCoord2sARB(target: GLenum, s: GLshort, t: GLshort) void;
pub extern fn glMultiTexCoord2svARB(target: GLenum, v: [*c]const GLshort) void;
pub extern fn glMultiTexCoord3dARB(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble) void;
pub extern fn glMultiTexCoord3dvARB(target: GLenum, v: [*c]const GLdouble) void;
pub extern fn glMultiTexCoord3fARB(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat) void;
pub extern fn glMultiTexCoord3fvARB(target: GLenum, v: [*c]const GLfloat) void;
pub extern fn glMultiTexCoord3iARB(target: GLenum, s: GLint, t: GLint, r: GLint) void;
pub extern fn glMultiTexCoord3ivARB(target: GLenum, v: [*c]const GLint) void;
pub extern fn glMultiTexCoord3sARB(target: GLenum, s: GLshort, t: GLshort, r: GLshort) void;
pub extern fn glMultiTexCoord3svARB(target: GLenum, v: [*c]const GLshort) void;
pub extern fn glMultiTexCoord4dARB(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) void;
pub extern fn glMultiTexCoord4dvARB(target: GLenum, v: [*c]const GLdouble) void;
pub extern fn glMultiTexCoord4fARB(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) void;
pub extern fn glMultiTexCoord4fvARB(target: GLenum, v: [*c]const GLfloat) void;
pub extern fn glMultiTexCoord4iARB(target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint) void;
pub extern fn glMultiTexCoord4ivARB(target: GLenum, v: [*c]const GLint) void;
pub extern fn glMultiTexCoord4sARB(target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort) void;
pub extern fn glMultiTexCoord4svARB(target: GLenum, v: [*c]const GLshort) void;
pub const PFNGLACTIVETEXTUREARBPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLCLIENTACTIVETEXTUREARBPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1DARBPROC = ?*const fn (GLenum, GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1DVARBPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1FARBPROC = ?*const fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1FVARBPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1IARBPROC = ?*const fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1IVARBPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1SARBPROC = ?*const fn (GLenum, GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1SVARBPROC = ?*const fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2DARBPROC = ?*const fn (GLenum, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2DVARBPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2FARBPROC = ?*const fn (GLenum, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2FVARBPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2IARBPROC = ?*const fn (GLenum, GLint, GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2IVARBPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2SARBPROC = ?*const fn (GLenum, GLshort, GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2SVARBPROC = ?*const fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3DARBPROC = ?*const fn (GLenum, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3DVARBPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3FARBPROC = ?*const fn (GLenum, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3FVARBPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3IARBPROC = ?*const fn (GLenum, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3IVARBPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3SARBPROC = ?*const fn (GLenum, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3SVARBPROC = ?*const fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4DARBPROC = ?*const fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4DVARBPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4FARBPROC = ?*const fn (GLenum, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4FVARBPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4IARBPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4IVARBPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4SARBPROC = ?*const fn (GLenum, GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4SVARBPROC = ?*const fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const khronos_int32_t = i32;
pub const khronos_uint32_t = u32;
pub const khronos_int64_t = i64;
pub const khronos_uint64_t = u64;
pub const khronos_int8_t = i8;
pub const khronos_uint8_t = u8;
pub const khronos_int16_t = c_short;
pub const khronos_uint16_t = c_ushort;
pub const khronos_intptr_t = c_long;
pub const khronos_uintptr_t = c_ulong;
pub const khronos_ssize_t = c_long;
pub const khronos_usize_t = c_ulong;
pub const khronos_float_t = f32;
pub const khronos_utime_nanoseconds_t = khronos_uint64_t;
pub const khronos_stime_nanoseconds_t = khronos_int64_t;
pub const KHRONOS_FALSE: c_int = 0;
pub const KHRONOS_TRUE: c_int = 1;
pub const KHRONOS_BOOLEAN_ENUM_FORCE_SIZE: c_int = 2147483647;
pub const khronos_boolean_enum_t = c_uint;
pub const PFNGLBLENDFUNCSEPARATEPROC = ?*const fn (GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLMULTIDRAWARRAYSPROC = ?*const fn (GLenum, [*c]const GLint, [*c]const GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTSPROC = ?*const fn (GLenum, [*c]const GLsizei, GLenum, [*c]const ?*const anyopaque, GLsizei) callconv(.C) void;
pub const PFNGLPOINTPARAMETERFPROC = ?*const fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLPOINTPARAMETERFVPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPOINTPARAMETERIPROC = ?*const fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLPOINTPARAMETERIVPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLFOGCOORDFPROC = ?*const fn (GLfloat) callconv(.C) void;
pub const PFNGLFOGCOORDFVPROC = ?*const fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLFOGCOORDDPROC = ?*const fn (GLdouble) callconv(.C) void;
pub const PFNGLFOGCOORDDVPROC = ?*const fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLFOGCOORDPOINTERPROC = ?*const fn (GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3BPROC = ?*const fn (GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3BVPROC = ?*const fn ([*c]const GLbyte) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3DPROC = ?*const fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3DVPROC = ?*const fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3FPROC = ?*const fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3FVPROC = ?*const fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3IPROC = ?*const fn (GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3IVPROC = ?*const fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3SPROC = ?*const fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3SVPROC = ?*const fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3UBPROC = ?*const fn (GLubyte, GLubyte, GLubyte) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3UBVPROC = ?*const fn ([*c]const GLubyte) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3UIPROC = ?*const fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3UIVPROC = ?*const fn ([*c]const GLuint) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3USPROC = ?*const fn (GLushort, GLushort, GLushort) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3USVPROC = ?*const fn ([*c]const GLushort) callconv(.C) void;
pub const PFNGLSECONDARYCOLORPOINTERPROC = ?*const fn (GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLWINDOWPOS2DPROC = ?*const fn (GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS2DVPROC = ?*const fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS2FPROC = ?*const fn (GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS2FVPROC = ?*const fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS2IPROC = ?*const fn (GLint, GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS2IVPROC = ?*const fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS2SPROC = ?*const fn (GLshort, GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS2SVPROC = ?*const fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS3DPROC = ?*const fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS3DVPROC = ?*const fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS3FPROC = ?*const fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS3FVPROC = ?*const fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS3IPROC = ?*const fn (GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS3IVPROC = ?*const fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS3SPROC = ?*const fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS3SVPROC = ?*const fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLBLENDCOLORPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLBLENDEQUATIONPROC = ?*const fn (GLenum) callconv(.C) void;
pub const GLsizeiptr = khronos_ssize_t;
pub const GLintptr = khronos_intptr_t;
pub const PFNGLGENQUERIESPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLDELETEQUERIESPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLISQUERYPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLBEGINQUERYPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLENDQUERYPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLGETQUERYIVPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETQUERYOBJECTIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETQUERYOBJECTUIVPROC = ?*const fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLBINDBUFFERPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDELETEBUFFERSPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGENBUFFERSPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLISBUFFERPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLBUFFERDATAPROC = ?*const fn (GLenum, GLsizeiptr, ?*const anyopaque, GLenum) callconv(.C) void;
pub const PFNGLBUFFERSUBDATAPROC = ?*const fn (GLenum, GLintptr, GLsizeiptr, ?*const anyopaque) callconv(.C) void;
pub const PFNGLGETBUFFERSUBDATAPROC = ?*const fn (GLenum, GLintptr, GLsizeiptr, ?*anyopaque) callconv(.C) void;
pub const PFNGLMAPBUFFERPROC = ?*const fn (GLenum, GLenum) callconv(.C) ?*anyopaque;
pub const PFNGLUNMAPBUFFERPROC = ?*const fn (GLenum) callconv(.C) GLboolean;
pub const PFNGLGETBUFFERPARAMETERIVPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETBUFFERPOINTERVPROC = ?*const fn (GLenum, GLenum, [*c]?*anyopaque) callconv(.C) void;
pub const GLchar = u8;
pub const PFNGLBLENDEQUATIONSEPARATEPROC = ?*const fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLDRAWBUFFERSPROC = ?*const fn (GLsizei, [*c]const GLenum) callconv(.C) void;
pub const PFNGLSTENCILOPSEPARATEPROC = ?*const fn (GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLSTENCILFUNCSEPARATEPROC = ?*const fn (GLenum, GLenum, GLint, GLuint) callconv(.C) void;
pub const PFNGLSTENCILMASKSEPARATEPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLATTACHSHADERPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLBINDATTRIBLOCATIONPROC = ?*const fn (GLuint, GLuint, [*c]const GLchar) callconv(.C) void;
pub const PFNGLCOMPILESHADERPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLCREATEPROGRAMPROC = ?*const fn () callconv(.C) GLuint;
pub const PFNGLCREATESHADERPROC = ?*const fn (GLenum) callconv(.C) GLuint;
pub const PFNGLDELETEPROGRAMPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLDELETESHADERPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLDETACHSHADERPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLDISABLEVERTEXATTRIBARRAYPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLENABLEVERTEXATTRIBARRAYPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLGETACTIVEATTRIBPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLint, [*c]GLenum, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETACTIVEUNIFORMPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLint, [*c]GLenum, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETATTACHEDSHADERSPROC = ?*const fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETATTRIBLOCATIONPROC = ?*const fn (GLuint, [*c]const GLchar) callconv(.C) GLint;
pub const PFNGLGETPROGRAMIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPROGRAMINFOLOGPROC = ?*const fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETSHADERIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETSHADERINFOLOGPROC = ?*const fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETSHADERSOURCEPROC = ?*const fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETUNIFORMLOCATIONPROC = ?*const fn (GLuint, [*c]const GLchar) callconv(.C) GLint;
pub const PFNGLGETUNIFORMFVPROC = ?*const fn (GLuint, GLint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETUNIFORMIVPROC = ?*const fn (GLuint, GLint, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBDVPROC = ?*const fn (GLuint, GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBFVPROC = ?*const fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBPOINTERVPROC = ?*const fn (GLuint, GLenum, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLISPROGRAMPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISSHADERPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLLINKPROGRAMPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLSHADERSOURCEPROC = ?*const fn (GLuint, GLsizei, [*c]const [*c]const GLchar, [*c]const GLint) callconv(.C) void;
pub const PFNGLUSEPROGRAMPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLUNIFORM1FPROC = ?*const fn (GLint, GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM2FPROC = ?*const fn (GLint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM3FPROC = ?*const fn (GLint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM4FPROC = ?*const fn (GLint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM1IPROC = ?*const fn (GLint, GLint) callconv(.C) void;
pub const PFNGLUNIFORM2IPROC = ?*const fn (GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLUNIFORM3IPROC = ?*const fn (GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLUNIFORM4IPROC = ?*const fn (GLint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLUNIFORM1FVPROC = ?*const fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM2FVPROC = ?*const fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM3FVPROC = ?*const fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM4FVPROC = ?*const fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM1IVPROC = ?*const fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLUNIFORM2IVPROC = ?*const fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLUNIFORM3IVPROC = ?*const fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLUNIFORM4IVPROC = ?*const fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX2FVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX3FVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX4FVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVALIDATEPROGRAMPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1DPROC = ?*const fn (GLuint, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1DVPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1FPROC = ?*const fn (GLuint, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1FVPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1SPROC = ?*const fn (GLuint, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1SVPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2DPROC = ?*const fn (GLuint, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2DVPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2FPROC = ?*const fn (GLuint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2FVPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2SPROC = ?*const fn (GLuint, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2SVPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3DPROC = ?*const fn (GLuint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3DVPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3FPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3FVPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3SPROC = ?*const fn (GLuint, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3SVPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NBVPROC = ?*const fn (GLuint, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NIVPROC = ?*const fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NSVPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NUBPROC = ?*const fn (GLuint, GLubyte, GLubyte, GLubyte, GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NUBVPROC = ?*const fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NUIVPROC = ?*const fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NUSVPROC = ?*const fn (GLuint, [*c]const GLushort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4BVPROC = ?*const fn (GLuint, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4DPROC = ?*const fn (GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4DVPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4FPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4FVPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4IVPROC = ?*const fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4SPROC = ?*const fn (GLuint, GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4SVPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4UBVPROC = ?*const fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4UIVPROC = ?*const fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4USVPROC = ?*const fn (GLuint, [*c]const GLushort) callconv(.C) void;
pub const PFNGLVERTEXATTRIBPOINTERPROC = ?*const fn (GLuint, GLint, GLenum, GLboolean, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX2X3FVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX3X2FVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX2X4FVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX4X2FVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX3X4FVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX4X3FVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const GLhalf = khronos_uint16_t;
pub const PFNGLCOLORMASKIPROC = ?*const fn (GLuint, GLboolean, GLboolean, GLboolean, GLboolean) callconv(.C) void;
pub const PFNGLGETBOOLEANI_VPROC = ?*const fn (GLenum, GLuint, [*c]GLboolean) callconv(.C) void;
pub const PFNGLGETINTEGERI_VPROC = ?*const fn (GLenum, GLuint, [*c]GLint) callconv(.C) void;
pub const PFNGLENABLEIPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDISABLEIPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLISENABLEDIPROC = ?*const fn (GLenum, GLuint) callconv(.C) GLboolean;
pub const PFNGLBEGINTRANSFORMFEEDBACKPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLENDTRANSFORMFEEDBACKPROC = ?*const fn () callconv(.C) void;
pub const PFNGLBINDBUFFERRANGEPROC = ?*const fn (GLenum, GLuint, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLBINDBUFFERBASEPROC = ?*const fn (GLenum, GLuint, GLuint) callconv(.C) void;
pub const PFNGLTRANSFORMFEEDBACKVARYINGSPROC = ?*const fn (GLuint, GLsizei, [*c]const [*c]const GLchar, GLenum) callconv(.C) void;
pub const PFNGLGETTRANSFORMFEEDBACKVARYINGPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLsizei, [*c]GLenum, [*c]GLchar) callconv(.C) void;
pub const PFNGLCLAMPCOLORPROC = ?*const fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLBEGINCONDITIONALRENDERPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLENDCONDITIONALRENDERPROC = ?*const fn () callconv(.C) void;
pub const PFNGLVERTEXATTRIBIPOINTERPROC = ?*const fn (GLuint, GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBIIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBIUIVPROC = ?*const fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI1IPROC = ?*const fn (GLuint, GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI2IPROC = ?*const fn (GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI3IPROC = ?*const fn (GLuint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4IPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI1UIPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI2UIPROC = ?*const fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI3UIPROC = ?*const fn (GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4UIPROC = ?*const fn (GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI1IVPROC = ?*const fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI2IVPROC = ?*const fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI3IVPROC = ?*const fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4IVPROC = ?*const fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI1UIVPROC = ?*const fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI2UIVPROC = ?*const fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI3UIVPROC = ?*const fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4UIVPROC = ?*const fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4BVPROC = ?*const fn (GLuint, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4SVPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4UBVPROC = ?*const fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4USVPROC = ?*const fn (GLuint, [*c]const GLushort) callconv(.C) void;
pub const PFNGLGETUNIFORMUIVPROC = ?*const fn (GLuint, GLint, [*c]GLuint) callconv(.C) void;
pub const PFNGLBINDFRAGDATALOCATIONPROC = ?*const fn (GLuint, GLuint, [*c]const GLchar) callconv(.C) void;
pub const PFNGLGETFRAGDATALOCATIONPROC = ?*const fn (GLuint, [*c]const GLchar) callconv(.C) GLint;
pub const PFNGLUNIFORM1UIPROC = ?*const fn (GLint, GLuint) callconv(.C) void;
pub const PFNGLUNIFORM2UIPROC = ?*const fn (GLint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLUNIFORM3UIPROC = ?*const fn (GLint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLUNIFORM4UIPROC = ?*const fn (GLint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLUNIFORM1UIVPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLUNIFORM2UIVPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLUNIFORM3UIVPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLUNIFORM4UIVPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLTEXPARAMETERIIVPROC = ?*const fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLTEXPARAMETERIUIVPROC = ?*const fn (GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGETTEXPARAMETERIIVPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXPARAMETERIUIVPROC = ?*const fn (GLenum, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLCLEARBUFFERIVPROC = ?*const fn (GLenum, GLint, [*c]const GLint) callconv(.C) void;
pub const PFNGLCLEARBUFFERUIVPROC = ?*const fn (GLenum, GLint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLCLEARBUFFERFVPROC = ?*const fn (GLenum, GLint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCLEARBUFFERFIPROC = ?*const fn (GLenum, GLint, GLfloat, GLint) callconv(.C) void;
pub const PFNGLGETSTRINGIPROC = ?*const fn (GLenum, GLuint) callconv(.C) [*c]const GLubyte;
pub const PFNGLISRENDERBUFFERPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLBINDRENDERBUFFERPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDELETERENDERBUFFERSPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGENRENDERBUFFERSPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLRENDERBUFFERSTORAGEPROC = ?*const fn (GLenum, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLGETRENDERBUFFERPARAMETERIVPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLISFRAMEBUFFERPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLBINDFRAMEBUFFERPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDELETEFRAMEBUFFERSPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGENFRAMEBUFFERSPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLCHECKFRAMEBUFFERSTATUSPROC = ?*const fn (GLenum) callconv(.C) GLenum;
pub const PFNGLFRAMEBUFFERTEXTURE1DPROC = ?*const fn (GLenum, GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURE2DPROC = ?*const fn (GLenum, GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURE3DPROC = ?*const fn (GLenum, GLenum, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERRENDERBUFFERPROC = ?*const fn (GLenum, GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGENERATEMIPMAPPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLBLITFRAMEBUFFERPROC = ?*const fn (GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) callconv(.C) void;
pub const PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURELAYERPROC = ?*const fn (GLenum, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLMAPBUFFERRANGEPROC = ?*const fn (GLenum, GLintptr, GLsizeiptr, GLbitfield) callconv(.C) ?*anyopaque;
pub const PFNGLFLUSHMAPPEDBUFFERRANGEPROC = ?*const fn (GLenum, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLBINDVERTEXARRAYPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLDELETEVERTEXARRAYSPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGENVERTEXARRAYSPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLISVERTEXARRAYPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLDRAWARRAYSINSTANCEDPROC = ?*const fn (GLenum, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLDRAWELEMENTSINSTANCEDPROC = ?*const fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei) callconv(.C) void;
pub const PFNGLTEXBUFFERPROC = ?*const fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLPRIMITIVERESTARTINDEXPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLCOPYBUFFERSUBDATAPROC = ?*const fn (GLenum, GLenum, GLintptr, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLGETUNIFORMINDICESPROC = ?*const fn (GLuint, GLsizei, [*c]const [*c]const GLchar, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETACTIVEUNIFORMSIVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETACTIVEUNIFORMNAMEPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETUNIFORMBLOCKINDEXPROC = ?*const fn (GLuint, [*c]const GLchar) callconv(.C) GLuint;
pub const PFNGLGETACTIVEUNIFORMBLOCKIVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLUNIFORMBLOCKBINDINGPROC = ?*const fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const struct___GLsync = opaque {};
pub const GLsync = ?*struct___GLsync;
pub const GLuint64 = khronos_uint64_t;
pub const GLint64 = khronos_int64_t;
pub const PFNGLDRAWELEMENTSBASEVERTEXPROC = ?*const fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLint) callconv(.C) void;
pub const PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC = ?*const fn (GLenum, GLuint, GLuint, GLsizei, GLenum, ?*const anyopaque, GLint) callconv(.C) void;
pub const PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC = ?*const fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei, GLint) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC = ?*const fn (GLenum, [*c]const GLsizei, GLenum, [*c]const ?*const anyopaque, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROVOKINGVERTEXPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLFENCESYNCPROC = ?*const fn (GLenum, GLbitfield) callconv(.C) GLsync;
pub const PFNGLISSYNCPROC = ?*const fn (GLsync) callconv(.C) GLboolean;
pub const PFNGLDELETESYNCPROC = ?*const fn (GLsync) callconv(.C) void;
pub const PFNGLCLIENTWAITSYNCPROC = ?*const fn (GLsync, GLbitfield, GLuint64) callconv(.C) GLenum;
pub const PFNGLWAITSYNCPROC = ?*const fn (GLsync, GLbitfield, GLuint64) callconv(.C) void;
pub const PFNGLGETINTEGER64VPROC = ?*const fn (GLenum, [*c]GLint64) callconv(.C) void;
pub const PFNGLGETSYNCIVPROC = ?*const fn (GLsync, GLenum, GLsizei, [*c]GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLGETINTEGER64I_VPROC = ?*const fn (GLenum, GLuint, [*c]GLint64) callconv(.C) void;
pub const PFNGLGETBUFFERPARAMETERI64VPROC = ?*const fn (GLenum, GLenum, [*c]GLint64) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTUREPROC = ?*const fn (GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLTEXIMAGE2DMULTISAMPLEPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXIMAGE3DMULTISAMPLEPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLGETMULTISAMPLEFVPROC = ?*const fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLSAMPLEMASKIPROC = ?*const fn (GLuint, GLbitfield) callconv(.C) void;
pub const PFNGLBINDFRAGDATALOCATIONINDEXEDPROC = ?*const fn (GLuint, GLuint, GLuint, [*c]const GLchar) callconv(.C) void;
pub const PFNGLGETFRAGDATAINDEXPROC = ?*const fn (GLuint, [*c]const GLchar) callconv(.C) GLint;
pub const PFNGLGENSAMPLERSPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLDELETESAMPLERSPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLISSAMPLERPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLBINDSAMPLERPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLSAMPLERPARAMETERIPROC = ?*const fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLSAMPLERPARAMETERIVPROC = ?*const fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLSAMPLERPARAMETERFPROC = ?*const fn (GLuint, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLSAMPLERPARAMETERFVPROC = ?*const fn (GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLSAMPLERPARAMETERIIVPROC = ?*const fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLSAMPLERPARAMETERIUIVPROC = ?*const fn (GLuint, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGETSAMPLERPARAMETERIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETSAMPLERPARAMETERIIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETSAMPLERPARAMETERFVPROC = ?*const fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETSAMPLERPARAMETERIUIVPROC = ?*const fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLQUERYCOUNTERPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLGETQUERYOBJECTI64VPROC = ?*const fn (GLuint, GLenum, [*c]GLint64) callconv(.C) void;
pub const PFNGLGETQUERYOBJECTUI64VPROC = ?*const fn (GLuint, GLenum, [*c]GLuint64) callconv(.C) void;
pub const PFNGLVERTEXATTRIBDIVISORPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBP1UIPROC = ?*const fn (GLuint, GLenum, GLboolean, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBP1UIVPROC = ?*const fn (GLuint, GLenum, GLboolean, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBP2UIPROC = ?*const fn (GLuint, GLenum, GLboolean, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBP2UIVPROC = ?*const fn (GLuint, GLenum, GLboolean, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBP3UIPROC = ?*const fn (GLuint, GLenum, GLboolean, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBP3UIVPROC = ?*const fn (GLuint, GLenum, GLboolean, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBP4UIPROC = ?*const fn (GLuint, GLenum, GLboolean, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBP4UIVPROC = ?*const fn (GLuint, GLenum, GLboolean, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXP2UIPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLVERTEXP2UIVPROC = ?*const fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXP3UIPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLVERTEXP3UIVPROC = ?*const fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXP4UIPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLVERTEXP4UIVPROC = ?*const fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLTEXCOORDP1UIPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLTEXCOORDP1UIVPROC = ?*const fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLTEXCOORDP2UIPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLTEXCOORDP2UIVPROC = ?*const fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLTEXCOORDP3UIPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLTEXCOORDP3UIVPROC = ?*const fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLTEXCOORDP4UIPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLTEXCOORDP4UIVPROC = ?*const fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLMULTITEXCOORDP1UIPROC = ?*const fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLMULTITEXCOORDP1UIVPROC = ?*const fn (GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLMULTITEXCOORDP2UIPROC = ?*const fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLMULTITEXCOORDP2UIVPROC = ?*const fn (GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLMULTITEXCOORDP3UIPROC = ?*const fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLMULTITEXCOORDP3UIVPROC = ?*const fn (GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLMULTITEXCOORDP4UIPROC = ?*const fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLMULTITEXCOORDP4UIVPROC = ?*const fn (GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLNORMALP3UIPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLNORMALP3UIVPROC = ?*const fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLCOLORP3UIPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLCOLORP3UIVPROC = ?*const fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLCOLORP4UIPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLCOLORP4UIVPROC = ?*const fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLSECONDARYCOLORP3UIPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLSECONDARYCOLORP3UIVPROC = ?*const fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLMINSAMPLESHADINGPROC = ?*const fn (GLfloat) callconv(.C) void;
pub const PFNGLBLENDEQUATIONIPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLBLENDEQUATIONSEPARATEIPROC = ?*const fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCIPROC = ?*const fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCSEPARATEIPROC = ?*const fn (GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLDRAWARRAYSINDIRECTPROC = ?*const fn (GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLDRAWELEMENTSINDIRECTPROC = ?*const fn (GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLUNIFORM1DPROC = ?*const fn (GLint, GLdouble) callconv(.C) void;
pub const PFNGLUNIFORM2DPROC = ?*const fn (GLint, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLUNIFORM3DPROC = ?*const fn (GLint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLUNIFORM4DPROC = ?*const fn (GLint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLUNIFORM1DVPROC = ?*const fn (GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORM2DVPROC = ?*const fn (GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORM3DVPROC = ?*const fn (GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORM4DVPROC = ?*const fn (GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX2DVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX3DVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX4DVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX2X3DVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX2X4DVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX3X2DVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX3X4DVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX4X2DVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX4X3DVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLGETUNIFORMDVPROC = ?*const fn (GLuint, GLint, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC = ?*const fn (GLuint, GLenum, [*c]const GLchar) callconv(.C) GLint;
pub const PFNGLGETSUBROUTINEINDEXPROC = ?*const fn (GLuint, GLenum, [*c]const GLchar) callconv(.C) GLuint;
pub const PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC = ?*const fn (GLuint, GLenum, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC = ?*const fn (GLuint, GLenum, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETACTIVESUBROUTINENAMEPROC = ?*const fn (GLuint, GLenum, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLUNIFORMSUBROUTINESUIVPROC = ?*const fn (GLenum, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGETUNIFORMSUBROUTINEUIVPROC = ?*const fn (GLenum, GLint, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETPROGRAMSTAGEIVPROC = ?*const fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLPATCHPARAMETERIPROC = ?*const fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLPATCHPARAMETERFVPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLBINDTRANSFORMFEEDBACKPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDELETETRANSFORMFEEDBACKSPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGENTRANSFORMFEEDBACKSPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLISTRANSFORMFEEDBACKPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLPAUSETRANSFORMFEEDBACKPROC = ?*const fn () callconv(.C) void;
pub const PFNGLRESUMETRANSFORMFEEDBACKPROC = ?*const fn () callconv(.C) void;
pub const PFNGLDRAWTRANSFORMFEEDBACKPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC = ?*const fn (GLenum, GLuint, GLuint) callconv(.C) void;
pub const PFNGLBEGINQUERYINDEXEDPROC = ?*const fn (GLenum, GLuint, GLuint) callconv(.C) void;
pub const PFNGLENDQUERYINDEXEDPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLGETQUERYINDEXEDIVPROC = ?*const fn (GLenum, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLRELEASESHADERCOMPILERPROC = ?*const fn () callconv(.C) void;
pub const PFNGLSHADERBINARYPROC = ?*const fn (GLsizei, [*c]const GLuint, GLenum, ?*const anyopaque, GLsizei) callconv(.C) void;
pub const PFNGLGETSHADERPRECISIONFORMATPROC = ?*const fn (GLenum, GLenum, [*c]GLint, [*c]GLint) callconv(.C) void;
pub const PFNGLDEPTHRANGEFPROC = ?*const fn (GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLCLEARDEPTHFPROC = ?*const fn (GLfloat) callconv(.C) void;
pub const PFNGLGETPROGRAMBINARYPROC = ?*const fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLPROGRAMBINARYPROC = ?*const fn (GLuint, GLenum, ?*const anyopaque, GLsizei) callconv(.C) void;
pub const PFNGLPROGRAMPARAMETERIPROC = ?*const fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLUSEPROGRAMSTAGESPROC = ?*const fn (GLuint, GLbitfield, GLuint) callconv(.C) void;
pub const PFNGLACTIVESHADERPROGRAMPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLCREATESHADERPROGRAMVPROC = ?*const fn (GLenum, GLsizei, [*c]const [*c]const GLchar) callconv(.C) GLuint;
pub const PFNGLBINDPROGRAMPIPELINEPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLDELETEPROGRAMPIPELINESPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGENPROGRAMPIPELINESPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLISPROGRAMPIPELINEPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLGETPROGRAMPIPELINEIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1IPROC = ?*const fn (GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1IVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1FPROC = ?*const fn (GLuint, GLint, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1FVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1DPROC = ?*const fn (GLuint, GLint, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1DVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1UIPROC = ?*const fn (GLuint, GLint, GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1UIVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2IPROC = ?*const fn (GLuint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2IVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2FPROC = ?*const fn (GLuint, GLint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2FVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2DPROC = ?*const fn (GLuint, GLint, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2DVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2UIPROC = ?*const fn (GLuint, GLint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2UIVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3IPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3IVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3FPROC = ?*const fn (GLuint, GLint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3FVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3DPROC = ?*const fn (GLuint, GLint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3DVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3UIPROC = ?*const fn (GLuint, GLint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3UIVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4IPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4IVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4FPROC = ?*const fn (GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4FVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4DPROC = ?*const fn (GLuint, GLint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4DVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4UIPROC = ?*const fn (GLuint, GLint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4UIVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2FVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3FVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4FVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2DVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3DVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4DVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVALIDATEPROGRAMPIPELINEPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLGETPROGRAMPIPELINEINFOLOGPROC = ?*const fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL1DPROC = ?*const fn (GLuint, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL2DPROC = ?*const fn (GLuint, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL3DPROC = ?*const fn (GLuint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL4DPROC = ?*const fn (GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL1DVPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL2DVPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL3DVPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL4DVPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBLPOINTERPROC = ?*const fn (GLuint, GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBLDVPROC = ?*const fn (GLuint, GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLVIEWPORTARRAYVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVIEWPORTINDEXEDFPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVIEWPORTINDEXEDFVPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLSCISSORARRAYVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLSCISSORINDEXEDPROC = ?*const fn (GLuint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLSCISSORINDEXEDVPROC = ?*const fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLDEPTHRANGEARRAYVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLDEPTHRANGEINDEXEDPROC = ?*const fn (GLuint, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLGETFLOATI_VPROC = ?*const fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETDOUBLEI_VPROC = ?*const fn (GLenum, GLuint, [*c]GLdouble) callconv(.C) void;
pub const PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC = ?*const fn (GLenum, GLint, GLsizei, GLsizei, GLuint) callconv(.C) void;
pub const PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC = ?*const fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei, GLuint) callconv(.C) void;
pub const PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC = ?*const fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei, GLint, GLuint) callconv(.C) void;
pub const PFNGLGETINTERNALFORMATIVPROC = ?*const fn (GLenum, GLenum, GLenum, GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLBINDIMAGETEXTUREPROC = ?*const fn (GLuint, GLuint, GLint, GLboolean, GLint, GLenum, GLenum) callconv(.C) void;
pub const PFNGLMEMORYBARRIERPROC = ?*const fn (GLbitfield) callconv(.C) void;
pub const PFNGLTEXSTORAGE1DPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei) callconv(.C) void;
pub const PFNGLTEXSTORAGE2DPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLTEXSTORAGE3DPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC = ?*const fn (GLenum, GLuint, GLsizei) callconv(.C) void;
pub const PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC = ?*const fn (GLenum, GLuint, GLuint, GLsizei) callconv(.C) void;
pub const GLDEBUGPROC = ?*const fn (GLenum, GLenum, GLuint, GLenum, GLsizei, [*c]const GLchar, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCLEARBUFFERDATAPROC = ?*const fn (GLenum, GLenum, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCLEARBUFFERSUBDATAPROC = ?*const fn (GLenum, GLenum, GLintptr, GLsizeiptr, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLDISPATCHCOMPUTEPROC = ?*const fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLDISPATCHCOMPUTEINDIRECTPROC = ?*const fn (GLintptr) callconv(.C) void;
pub const PFNGLCOPYIMAGESUBDATAPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLFRAMEBUFFERPARAMETERIPROC = ?*const fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLGETFRAMEBUFFERPARAMETERIVPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETINTERNALFORMATI64VPROC = ?*const fn (GLenum, GLenum, GLenum, GLsizei, [*c]GLint64) callconv(.C) void;
pub const PFNGLINVALIDATETEXSUBIMAGEPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLINVALIDATETEXIMAGEPROC = ?*const fn (GLuint, GLint) callconv(.C) void;
pub const PFNGLINVALIDATEBUFFERSUBDATAPROC = ?*const fn (GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLINVALIDATEBUFFERDATAPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLINVALIDATEFRAMEBUFFERPROC = ?*const fn (GLenum, GLsizei, [*c]const GLenum) callconv(.C) void;
pub const PFNGLINVALIDATESUBFRAMEBUFFERPROC = ?*const fn (GLenum, GLsizei, [*c]const GLenum, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWARRAYSINDIRECTPROC = ?*const fn (GLenum, ?*const anyopaque, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTSINDIRECTPROC = ?*const fn (GLenum, GLenum, ?*const anyopaque, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLGETPROGRAMINTERFACEIVPROC = ?*const fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPROGRAMRESOURCEINDEXPROC = ?*const fn (GLuint, GLenum, [*c]const GLchar) callconv(.C) GLuint;
pub const PFNGLGETPROGRAMRESOURCENAMEPROC = ?*const fn (GLuint, GLenum, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETPROGRAMRESOURCEIVPROC = ?*const fn (GLuint, GLenum, GLuint, GLsizei, [*c]const GLenum, GLsizei, [*c]GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPROGRAMRESOURCELOCATIONPROC = ?*const fn (GLuint, GLenum, [*c]const GLchar) callconv(.C) GLint;
pub const PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC = ?*const fn (GLuint, GLenum, [*c]const GLchar) callconv(.C) GLint;
pub const PFNGLSHADERSTORAGEBLOCKBINDINGPROC = ?*const fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLTEXBUFFERRANGEPROC = ?*const fn (GLenum, GLenum, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLTEXSTORAGE2DMULTISAMPLEPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXSTORAGE3DMULTISAMPLEPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXTUREVIEWPROC = ?*const fn (GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLBINDVERTEXBUFFERPROC = ?*const fn (GLuint, GLuint, GLintptr, GLsizei) callconv(.C) void;
pub const PFNGLVERTEXATTRIBFORMATPROC = ?*const fn (GLuint, GLint, GLenum, GLboolean, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBIFORMATPROC = ?*const fn (GLuint, GLint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBLFORMATPROC = ?*const fn (GLuint, GLint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBBINDINGPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXBINDINGDIVISORPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLDEBUGMESSAGECONTROLPROC = ?*const fn (GLenum, GLenum, GLenum, GLsizei, [*c]const GLuint, GLboolean) callconv(.C) void;
pub const PFNGLDEBUGMESSAGEINSERTPROC = ?*const fn (GLenum, GLenum, GLuint, GLenum, GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLDEBUGMESSAGECALLBACKPROC = ?*const fn (GLDEBUGPROC, ?*const anyopaque) callconv(.C) void;
pub const PFNGLGETDEBUGMESSAGELOGPROC = ?*const fn (GLuint, GLsizei, [*c]GLenum, [*c]GLenum, [*c]GLuint, [*c]GLenum, [*c]GLsizei, [*c]GLchar) callconv(.C) GLuint;
pub const PFNGLPUSHDEBUGGROUPPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLPOPDEBUGGROUPPROC = ?*const fn () callconv(.C) void;
pub const PFNGLOBJECTLABELPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLGETOBJECTLABELPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLOBJECTPTRLABELPROC = ?*const fn (?*const anyopaque, GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLGETOBJECTPTRLABELPROC = ?*const fn (?*const anyopaque, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLBUFFERSTORAGEPROC = ?*const fn (GLenum, GLsizeiptr, ?*const anyopaque, GLbitfield) callconv(.C) void;
pub const PFNGLCLEARTEXIMAGEPROC = ?*const fn (GLuint, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCLEARTEXSUBIMAGEPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLBINDBUFFERSBASEPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLBINDBUFFERSRANGEPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLuint, [*c]const GLintptr, [*c]const GLsizeiptr) callconv(.C) void;
pub const PFNGLBINDTEXTURESPROC = ?*const fn (GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLBINDSAMPLERSPROC = ?*const fn (GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLBINDIMAGETEXTURESPROC = ?*const fn (GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLBINDVERTEXBUFFERSPROC = ?*const fn (GLuint, GLsizei, [*c]const GLuint, [*c]const GLintptr, [*c]const GLsizei) callconv(.C) void;
pub const PFNGLCLIPCONTROLPROC = ?*const fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLCREATETRANSFORMFEEDBACKSPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC = ?*const fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC = ?*const fn (GLuint, GLuint, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLGETTRANSFORMFEEDBACKIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTRANSFORMFEEDBACKI_VPROC = ?*const fn (GLuint, GLenum, GLuint, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTRANSFORMFEEDBACKI64_VPROC = ?*const fn (GLuint, GLenum, GLuint, [*c]GLint64) callconv(.C) void;
pub const PFNGLCREATEBUFFERSPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLNAMEDBUFFERSTORAGEPROC = ?*const fn (GLuint, GLsizeiptr, ?*const anyopaque, GLbitfield) callconv(.C) void;
pub const PFNGLNAMEDBUFFERDATAPROC = ?*const fn (GLuint, GLsizeiptr, ?*const anyopaque, GLenum) callconv(.C) void;
pub const PFNGLNAMEDBUFFERSUBDATAPROC = ?*const fn (GLuint, GLintptr, GLsizeiptr, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOPYNAMEDBUFFERSUBDATAPROC = ?*const fn (GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLCLEARNAMEDBUFFERDATAPROC = ?*const fn (GLuint, GLenum, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCLEARNAMEDBUFFERSUBDATAPROC = ?*const fn (GLuint, GLenum, GLintptr, GLsizeiptr, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLMAPNAMEDBUFFERPROC = ?*const fn (GLuint, GLenum) callconv(.C) ?*anyopaque;
pub const PFNGLMAPNAMEDBUFFERRANGEPROC = ?*const fn (GLuint, GLintptr, GLsizeiptr, GLbitfield) callconv(.C) ?*anyopaque;
pub const PFNGLUNMAPNAMEDBUFFERPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC = ?*const fn (GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLGETNAMEDBUFFERPARAMETERIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNAMEDBUFFERPARAMETERI64VPROC = ?*const fn (GLuint, GLenum, [*c]GLint64) callconv(.C) void;
pub const PFNGLGETNAMEDBUFFERPOINTERVPROC = ?*const fn (GLuint, GLenum, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLGETNAMEDBUFFERSUBDATAPROC = ?*const fn (GLuint, GLintptr, GLsizeiptr, ?*anyopaque) callconv(.C) void;
pub const PFNGLCREATEFRAMEBUFFERSPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC = ?*const fn (GLuint, GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC = ?*const fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTUREPROC = ?*const fn (GLuint, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC = ?*const fn (GLuint, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC = ?*const fn (GLuint, GLsizei, [*c]const GLenum) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC = ?*const fn (GLuint, GLsizei, [*c]const GLenum) callconv(.C) void;
pub const PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC = ?*const fn (GLuint, GLsizei, [*c]const GLenum, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCLEARNAMEDFRAMEBUFFERIVPROC = ?*const fn (GLuint, GLenum, GLint, [*c]const GLint) callconv(.C) void;
pub const PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC = ?*const fn (GLuint, GLenum, GLint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLCLEARNAMEDFRAMEBUFFERFVPROC = ?*const fn (GLuint, GLenum, GLint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCLEARNAMEDFRAMEBUFFERFIPROC = ?*const fn (GLuint, GLenum, GLint, GLfloat, GLint) callconv(.C) void;
pub const PFNGLBLITNAMEDFRAMEBUFFERPROC = ?*const fn (GLuint, GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) callconv(.C) void;
pub const PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC = ?*const fn (GLuint, GLenum) callconv(.C) GLenum;
pub const PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC = ?*const fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLCREATERENDERBUFFERSPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLNAMEDRENDERBUFFERSTORAGEPROC = ?*const fn (GLuint, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC = ?*const fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLCREATETEXTURESPROC = ?*const fn (GLenum, GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLTEXTUREBUFFERPROC = ?*const fn (GLuint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLTEXTUREBUFFERRANGEPROC = ?*const fn (GLuint, GLenum, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLTEXTURESTORAGE1DPROC = ?*const fn (GLuint, GLsizei, GLenum, GLsizei) callconv(.C) void;
pub const PFNGLTEXTURESTORAGE2DPROC = ?*const fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLTEXTURESTORAGE3DPROC = ?*const fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC = ?*const fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC = ?*const fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXTURESUBIMAGE1DPROC = ?*const fn (GLuint, GLint, GLint, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXTURESUBIMAGE2DPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXTURESUBIMAGE3DPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC = ?*const fn (GLuint, GLint, GLint, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOPYTEXTURESUBIMAGE1DPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLCOPYTEXTURESUBIMAGE2DPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCOPYTEXTURESUBIMAGE3DPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERFPROC = ?*const fn (GLuint, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERFVPROC = ?*const fn (GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERIPROC = ?*const fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERIIVPROC = ?*const fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERIUIVPROC = ?*const fn (GLuint, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERIVPROC = ?*const fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLGENERATETEXTUREMIPMAPPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLBINDTEXTUREUNITPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLGETTEXTUREIMAGEPROC = ?*const fn (GLuint, GLint, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC = ?*const fn (GLuint, GLint, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETTEXTURELEVELPARAMETERFVPROC = ?*const fn (GLuint, GLint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETTEXTURELEVELPARAMETERIVPROC = ?*const fn (GLuint, GLint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXTUREPARAMETERFVPROC = ?*const fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETTEXTUREPARAMETERIIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXTUREPARAMETERIUIVPROC = ?*const fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETTEXTUREPARAMETERIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLCREATEVERTEXARRAYSPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLDISABLEVERTEXARRAYATTRIBPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLENABLEVERTEXARRAYATTRIBPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYELEMENTBUFFERPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXBUFFERPROC = ?*const fn (GLuint, GLuint, GLuint, GLintptr, GLsizei) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXBUFFERSPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]const GLuint, [*c]const GLintptr, [*c]const GLsizei) callconv(.C) void;
pub const PFNGLVERTEXARRAYATTRIBBINDINGPROC = ?*const fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYATTRIBFORMATPROC = ?*const fn (GLuint, GLuint, GLint, GLenum, GLboolean, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYATTRIBIFORMATPROC = ?*const fn (GLuint, GLuint, GLint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYATTRIBLFORMATPROC = ?*const fn (GLuint, GLuint, GLint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYBINDINGDIVISORPROC = ?*const fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLGETVERTEXARRAYIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVERTEXARRAYINDEXEDIVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVERTEXARRAYINDEXED64IVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]GLint64) callconv(.C) void;
pub const PFNGLCREATESAMPLERSPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLCREATEPROGRAMPIPELINESPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLCREATEQUERIESPROC = ?*const fn (GLenum, GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETQUERYBUFFEROBJECTI64VPROC = ?*const fn (GLuint, GLuint, GLenum, GLintptr) callconv(.C) void;
pub const PFNGLGETQUERYBUFFEROBJECTIVPROC = ?*const fn (GLuint, GLuint, GLenum, GLintptr) callconv(.C) void;
pub const PFNGLGETQUERYBUFFEROBJECTUI64VPROC = ?*const fn (GLuint, GLuint, GLenum, GLintptr) callconv(.C) void;
pub const PFNGLGETQUERYBUFFEROBJECTUIVPROC = ?*const fn (GLuint, GLuint, GLenum, GLintptr) callconv(.C) void;
pub const PFNGLMEMORYBARRIERBYREGIONPROC = ?*const fn (GLbitfield) callconv(.C) void;
pub const PFNGLGETTEXTURESUBIMAGEPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETGRAPHICSRESETSTATUSPROC = ?*const fn () callconv(.C) GLenum;
pub const PFNGLGETNCOMPRESSEDTEXIMAGEPROC = ?*const fn (GLenum, GLint, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETNTEXIMAGEPROC = ?*const fn (GLenum, GLint, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETNUNIFORMDVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETNUNIFORMFVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETNUNIFORMIVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNUNIFORMUIVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLREADNPIXELSPROC = ?*const fn (GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETNMAPDVPROC = ?*const fn (GLenum, GLenum, GLsizei, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETNMAPFVPROC = ?*const fn (GLenum, GLenum, GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETNMAPIVPROC = ?*const fn (GLenum, GLenum, GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNPIXELMAPFVPROC = ?*const fn (GLenum, GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETNPIXELMAPUIVPROC = ?*const fn (GLenum, GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETNPIXELMAPUSVPROC = ?*const fn (GLenum, GLsizei, [*c]GLushort) callconv(.C) void;
pub const PFNGLGETNPOLYGONSTIPPLEPROC = ?*const fn (GLsizei, [*c]GLubyte) callconv(.C) void;
pub const PFNGLGETNCOLORTABLEPROC = ?*const fn (GLenum, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETNCONVOLUTIONFILTERPROC = ?*const fn (GLenum, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETNSEPARABLEFILTERPROC = ?*const fn (GLenum, GLenum, GLenum, GLsizei, ?*anyopaque, GLsizei, ?*anyopaque, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETNHISTOGRAMPROC = ?*const fn (GLenum, GLboolean, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETNMINMAXPROC = ?*const fn (GLenum, GLboolean, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLTEXTUREBARRIERPROC = ?*const fn () callconv(.C) void;
pub const PFNGLSPECIALIZESHADERPROC = ?*const fn (GLuint, [*c]const GLchar, GLuint, [*c]const GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC = ?*const fn (GLenum, ?*const anyopaque, GLintptr, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC = ?*const fn (GLenum, GLenum, ?*const anyopaque, GLintptr, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLPOLYGONOFFSETCLAMPPROC = ?*const fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPRIMITIVEBOUNDINGBOXARBPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const GLuint64EXT = khronos_uint64_t;
pub const PFNGLGETTEXTUREHANDLEARBPROC = ?*const fn (GLuint) callconv(.C) GLuint64;
pub const PFNGLGETTEXTURESAMPLERHANDLEARBPROC = ?*const fn (GLuint, GLuint) callconv(.C) GLuint64;
pub const PFNGLMAKETEXTUREHANDLERESIDENTARBPROC = ?*const fn (GLuint64) callconv(.C) void;
pub const PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC = ?*const fn (GLuint64) callconv(.C) void;
pub const PFNGLGETIMAGEHANDLEARBPROC = ?*const fn (GLuint, GLint, GLboolean, GLint, GLenum) callconv(.C) GLuint64;
pub const PFNGLMAKEIMAGEHANDLERESIDENTARBPROC = ?*const fn (GLuint64, GLenum) callconv(.C) void;
pub const PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC = ?*const fn (GLuint64) callconv(.C) void;
pub const PFNGLUNIFORMHANDLEUI64ARBPROC = ?*const fn (GLint, GLuint64) callconv(.C) void;
pub const PFNGLUNIFORMHANDLEUI64VARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC = ?*const fn (GLuint, GLint, GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLISTEXTUREHANDLERESIDENTARBPROC = ?*const fn (GLuint64) callconv(.C) GLboolean;
pub const PFNGLISIMAGEHANDLERESIDENTARBPROC = ?*const fn (GLuint64) callconv(.C) GLboolean;
pub const PFNGLVERTEXATTRIBL1UI64ARBPROC = ?*const fn (GLuint, GLuint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL1UI64VARBPROC = ?*const fn (GLuint, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBLUI64VARBPROC = ?*const fn (GLuint, GLenum, [*c]GLuint64EXT) callconv(.C) void;
pub const struct__cl_context = opaque {};
pub const struct__cl_event = opaque {};
pub const PFNGLCREATESYNCFROMCLEVENTARBPROC = ?*const fn (?*struct__cl_context, ?*struct__cl_event, GLbitfield) callconv(.C) GLsync;
pub const PFNGLCLAMPCOLORARBPROC = ?*const fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC = ?*const fn (GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const GLDEBUGPROCARB = ?*const fn (GLenum, GLenum, GLuint, GLenum, GLsizei, [*c]const GLchar, ?*const anyopaque) callconv(.C) void;
pub const PFNGLDEBUGMESSAGECONTROLARBPROC = ?*const fn (GLenum, GLenum, GLenum, GLsizei, [*c]const GLuint, GLboolean) callconv(.C) void;
pub const PFNGLDEBUGMESSAGEINSERTARBPROC = ?*const fn (GLenum, GLenum, GLuint, GLenum, GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLDEBUGMESSAGECALLBACKARBPROC = ?*const fn (GLDEBUGPROCARB, ?*const anyopaque) callconv(.C) void;
pub const PFNGLGETDEBUGMESSAGELOGARBPROC = ?*const fn (GLuint, GLsizei, [*c]GLenum, [*c]GLenum, [*c]GLuint, [*c]GLenum, [*c]GLsizei, [*c]GLchar) callconv(.C) GLuint;
pub const PFNGLDRAWBUFFERSARBPROC = ?*const fn (GLsizei, [*c]const GLenum) callconv(.C) void;
pub const PFNGLBLENDEQUATIONIARBPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLBLENDEQUATIONSEPARATEIARBPROC = ?*const fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCIARBPROC = ?*const fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCSEPARATEIARBPROC = ?*const fn (GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLDRAWARRAYSINSTANCEDARBPROC = ?*const fn (GLenum, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLDRAWELEMENTSINSTANCEDARBPROC = ?*const fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei) callconv(.C) void;
pub const PFNGLPROGRAMSTRINGARBPROC = ?*const fn (GLenum, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLBINDPROGRAMARBPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDELETEPROGRAMSARBPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGENPROGRAMSARBPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETER4DARBPROC = ?*const fn (GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETER4DVARBPROC = ?*const fn (GLenum, GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETER4FARBPROC = ?*const fn (GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETER4FVARBPROC = ?*const fn (GLenum, GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETER4DARBPROC = ?*const fn (GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETER4DVARBPROC = ?*const fn (GLenum, GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETER4FARBPROC = ?*const fn (GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETER4FVARBPROC = ?*const fn (GLenum, GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLGETPROGRAMENVPARAMETERDVARBPROC = ?*const fn (GLenum, GLuint, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETPROGRAMENVPARAMETERFVARBPROC = ?*const fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC = ?*const fn (GLenum, GLuint, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC = ?*const fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPROGRAMIVARBPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPROGRAMSTRINGARBPROC = ?*const fn (GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLISPROGRAMARBPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLPROGRAMPARAMETERIARBPROC = ?*const fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTUREARBPROC = ?*const fn (GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURELAYERARBPROC = ?*const fn (GLenum, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTUREFACEARBPROC = ?*const fn (GLenum, GLenum, GLuint, GLint, GLenum) callconv(.C) void;
pub const PFNGLSPECIALIZESHADERARBPROC = ?*const fn (GLuint, [*c]const GLchar, GLuint, [*c]const GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLUNIFORM1I64ARBPROC = ?*const fn (GLint, GLint64) callconv(.C) void;
pub const PFNGLUNIFORM2I64ARBPROC = ?*const fn (GLint, GLint64, GLint64) callconv(.C) void;
pub const PFNGLUNIFORM3I64ARBPROC = ?*const fn (GLint, GLint64, GLint64, GLint64) callconv(.C) void;
pub const PFNGLUNIFORM4I64ARBPROC = ?*const fn (GLint, GLint64, GLint64, GLint64, GLint64) callconv(.C) void;
pub const PFNGLUNIFORM1I64VARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub const PFNGLUNIFORM2I64VARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub const PFNGLUNIFORM3I64VARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub const PFNGLUNIFORM4I64VARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub const PFNGLUNIFORM1UI64ARBPROC = ?*const fn (GLint, GLuint64) callconv(.C) void;
pub const PFNGLUNIFORM2UI64ARBPROC = ?*const fn (GLint, GLuint64, GLuint64) callconv(.C) void;
pub const PFNGLUNIFORM3UI64ARBPROC = ?*const fn (GLint, GLuint64, GLuint64, GLuint64) callconv(.C) void;
pub const PFNGLUNIFORM4UI64ARBPROC = ?*const fn (GLint, GLuint64, GLuint64, GLuint64, GLuint64) callconv(.C) void;
pub const PFNGLUNIFORM1UI64VARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLUNIFORM2UI64VARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLUNIFORM3UI64VARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLUNIFORM4UI64VARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLGETUNIFORMI64VARBPROC = ?*const fn (GLuint, GLint, [*c]GLint64) callconv(.C) void;
pub const PFNGLGETUNIFORMUI64VARBPROC = ?*const fn (GLuint, GLint, [*c]GLuint64) callconv(.C) void;
pub const PFNGLGETNUNIFORMI64VARBPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]GLint64) callconv(.C) void;
pub const PFNGLGETNUNIFORMUI64VARBPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1I64ARBPROC = ?*const fn (GLuint, GLint, GLint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2I64ARBPROC = ?*const fn (GLuint, GLint, GLint64, GLint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3I64ARBPROC = ?*const fn (GLuint, GLint, GLint64, GLint64, GLint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4I64ARBPROC = ?*const fn (GLuint, GLint, GLint64, GLint64, GLint64, GLint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1I64VARBPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2I64VARBPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3I64VARBPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4I64VARBPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1UI64ARBPROC = ?*const fn (GLuint, GLint, GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2UI64ARBPROC = ?*const fn (GLuint, GLint, GLuint64, GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3UI64ARBPROC = ?*const fn (GLuint, GLint, GLuint64, GLuint64, GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4UI64ARBPROC = ?*const fn (GLuint, GLint, GLuint64, GLuint64, GLuint64, GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1UI64VARBPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2UI64VARBPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3UI64VARBPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4UI64VARBPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const GLhalfARB = khronos_uint16_t;
pub const PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC = ?*const fn (GLenum, ?*const anyopaque, GLintptr, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC = ?*const fn (GLenum, GLenum, ?*const anyopaque, GLintptr, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLVERTEXATTRIBDIVISORARBPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLCURRENTPALETTEMATRIXARBPROC = ?*const fn (GLint) callconv(.C) void;
pub const PFNGLMATRIXINDEXUBVARBPROC = ?*const fn (GLint, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLMATRIXINDEXUSVARBPROC = ?*const fn (GLint, [*c]const GLushort) callconv(.C) void;
pub const PFNGLMATRIXINDEXUIVARBPROC = ?*const fn (GLint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLMATRIXINDEXPOINTERARBPROC = ?*const fn (GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLSAMPLECOVERAGEARBPROC = ?*const fn (GLfloat, GLboolean) callconv(.C) void;
pub const PFNGLGENQUERIESARBPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLDELETEQUERIESARBPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLISQUERYARBPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLBEGINQUERYARBPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLENDQUERYARBPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLGETQUERYIVARBPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETQUERYOBJECTIVARBPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETQUERYOBJECTUIVARBPROC = ?*const fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLMAXSHADERCOMPILERTHREADSARBPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLPOINTPARAMETERFARBPROC = ?*const fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLPOINTPARAMETERFVARBPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLGETGRAPHICSRESETSTATUSARBPROC = ?*const fn () callconv(.C) GLenum;
pub const PFNGLGETNTEXIMAGEARBPROC = ?*const fn (GLenum, GLint, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLREADNPIXELSARBPROC = ?*const fn (GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC = ?*const fn (GLenum, GLint, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETNUNIFORMFVARBPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETNUNIFORMIVARBPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNUNIFORMUIVARBPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETNUNIFORMDVARBPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETNMAPDVARBPROC = ?*const fn (GLenum, GLenum, GLsizei, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETNMAPFVARBPROC = ?*const fn (GLenum, GLenum, GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETNMAPIVARBPROC = ?*const fn (GLenum, GLenum, GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNPIXELMAPFVARBPROC = ?*const fn (GLenum, GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETNPIXELMAPUIVARBPROC = ?*const fn (GLenum, GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETNPIXELMAPUSVARBPROC = ?*const fn (GLenum, GLsizei, [*c]GLushort) callconv(.C) void;
pub const PFNGLGETNPOLYGONSTIPPLEARBPROC = ?*const fn (GLsizei, [*c]GLubyte) callconv(.C) void;
pub const PFNGLGETNCOLORTABLEARBPROC = ?*const fn (GLenum, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETNCONVOLUTIONFILTERARBPROC = ?*const fn (GLenum, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETNSEPARABLEFILTERARBPROC = ?*const fn (GLenum, GLenum, GLenum, GLsizei, ?*anyopaque, GLsizei, ?*anyopaque, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETNHISTOGRAMARBPROC = ?*const fn (GLenum, GLboolean, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETNMINMAXARBPROC = ?*const fn (GLenum, GLboolean, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLEVALUATEDEPTHVALUESARBPROC = ?*const fn () callconv(.C) void;
pub const PFNGLMINSAMPLESHADINGARBPROC = ?*const fn (GLfloat) callconv(.C) void;
pub const GLhandleARB = c_uint;
pub const GLcharARB = u8;
pub const PFNGLDELETEOBJECTARBPROC = ?*const fn (GLhandleARB) callconv(.C) void;
pub const PFNGLGETHANDLEARBPROC = ?*const fn (GLenum) callconv(.C) GLhandleARB;
pub const PFNGLDETACHOBJECTARBPROC = ?*const fn (GLhandleARB, GLhandleARB) callconv(.C) void;
pub const PFNGLCREATESHADEROBJECTARBPROC = ?*const fn (GLenum) callconv(.C) GLhandleARB;
pub const PFNGLSHADERSOURCEARBPROC = ?*const fn (GLhandleARB, GLsizei, [*c][*c]const GLcharARB, [*c]const GLint) callconv(.C) void;
pub const PFNGLCOMPILESHADERARBPROC = ?*const fn (GLhandleARB) callconv(.C) void;
pub const PFNGLCREATEPROGRAMOBJECTARBPROC = ?*const fn () callconv(.C) GLhandleARB;
pub const PFNGLATTACHOBJECTARBPROC = ?*const fn (GLhandleARB, GLhandleARB) callconv(.C) void;
pub const PFNGLLINKPROGRAMARBPROC = ?*const fn (GLhandleARB) callconv(.C) void;
pub const PFNGLUSEPROGRAMOBJECTARBPROC = ?*const fn (GLhandleARB) callconv(.C) void;
pub const PFNGLVALIDATEPROGRAMARBPROC = ?*const fn (GLhandleARB) callconv(.C) void;
pub const PFNGLUNIFORM1FARBPROC = ?*const fn (GLint, GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM2FARBPROC = ?*const fn (GLint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM3FARBPROC = ?*const fn (GLint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM4FARBPROC = ?*const fn (GLint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM1IARBPROC = ?*const fn (GLint, GLint) callconv(.C) void;
pub const PFNGLUNIFORM2IARBPROC = ?*const fn (GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLUNIFORM3IARBPROC = ?*const fn (GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLUNIFORM4IARBPROC = ?*const fn (GLint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLUNIFORM1FVARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM2FVARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM3FVARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM4FVARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM1IVARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLUNIFORM2IVARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLUNIFORM3IVARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLUNIFORM4IVARBPROC = ?*const fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX2FVARBPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX3FVARBPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX4FVARBPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLGETOBJECTPARAMETERFVARBPROC = ?*const fn (GLhandleARB, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETOBJECTPARAMETERIVARBPROC = ?*const fn (GLhandleARB, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETINFOLOGARBPROC = ?*const fn (GLhandleARB, GLsizei, [*c]GLsizei, [*c]GLcharARB) callconv(.C) void;
pub const PFNGLGETATTACHEDOBJECTSARBPROC = ?*const fn (GLhandleARB, GLsizei, [*c]GLsizei, [*c]GLhandleARB) callconv(.C) void;
pub const PFNGLGETUNIFORMLOCATIONARBPROC = ?*const fn (GLhandleARB, [*c]const GLcharARB) callconv(.C) GLint;
pub const PFNGLGETACTIVEUNIFORMARBPROC = ?*const fn (GLhandleARB, GLuint, GLsizei, [*c]GLsizei, [*c]GLint, [*c]GLenum, [*c]GLcharARB) callconv(.C) void;
pub const PFNGLGETUNIFORMFVARBPROC = ?*const fn (GLhandleARB, GLint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETUNIFORMIVARBPROC = ?*const fn (GLhandleARB, GLint, [*c]GLint) callconv(.C) void;
pub const PFNGLGETSHADERSOURCEARBPROC = ?*const fn (GLhandleARB, GLsizei, [*c]GLsizei, [*c]GLcharARB) callconv(.C) void;
pub const PFNGLNAMEDSTRINGARBPROC = ?*const fn (GLenum, GLint, [*c]const GLchar, GLint, [*c]const GLchar) callconv(.C) void;
pub const PFNGLDELETENAMEDSTRINGARBPROC = ?*const fn (GLint, [*c]const GLchar) callconv(.C) void;
pub const PFNGLCOMPILESHADERINCLUDEARBPROC = ?*const fn (GLuint, GLsizei, [*c]const [*c]const GLchar, [*c]const GLint) callconv(.C) void;
pub const PFNGLISNAMEDSTRINGARBPROC = ?*const fn (GLint, [*c]const GLchar) callconv(.C) GLboolean;
pub const PFNGLGETNAMEDSTRINGARBPROC = ?*const fn (GLint, [*c]const GLchar, GLsizei, [*c]GLint, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETNAMEDSTRINGIVARBPROC = ?*const fn (GLint, [*c]const GLchar, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLBUFFERPAGECOMMITMENTARBPROC = ?*const fn (GLenum, GLintptr, GLsizeiptr, GLboolean) callconv(.C) void;
pub const PFNGLNAMEDBUFFERPAGECOMMITMENTEXTPROC = ?*const fn (GLuint, GLintptr, GLsizeiptr, GLboolean) callconv(.C) void;
pub const PFNGLNAMEDBUFFERPAGECOMMITMENTARBPROC = ?*const fn (GLuint, GLintptr, GLsizeiptr, GLboolean) callconv(.C) void;
pub const PFNGLTEXPAGECOMMITMENTARBPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXBUFFERARBPROC = ?*const fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXIMAGE3DARBPROC = ?*const fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXIMAGE2DARBPROC = ?*const fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXIMAGE1DARBPROC = ?*const fn (GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC = ?*const fn (GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLGETCOMPRESSEDTEXIMAGEARBPROC = ?*const fn (GLenum, GLint, ?*anyopaque) callconv(.C) void;
pub const PFNGLLOADTRANSPOSEMATRIXFARBPROC = ?*const fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLLOADTRANSPOSEMATRIXDARBPROC = ?*const fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLMULTTRANSPOSEMATRIXFARBPROC = ?*const fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTTRANSPOSEMATRIXDARBPROC = ?*const fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLWEIGHTBVARBPROC = ?*const fn (GLint, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLWEIGHTSVARBPROC = ?*const fn (GLint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLWEIGHTIVARBPROC = ?*const fn (GLint, [*c]const GLint) callconv(.C) void;
pub const PFNGLWEIGHTFVARBPROC = ?*const fn (GLint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLWEIGHTDVARBPROC = ?*const fn (GLint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLWEIGHTUBVARBPROC = ?*const fn (GLint, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLWEIGHTUSVARBPROC = ?*const fn (GLint, [*c]const GLushort) callconv(.C) void;
pub const PFNGLWEIGHTUIVARBPROC = ?*const fn (GLint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLWEIGHTPOINTERARBPROC = ?*const fn (GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLVERTEXBLENDARBPROC = ?*const fn (GLint) callconv(.C) void;
pub const GLsizeiptrARB = khronos_ssize_t;
pub const GLintptrARB = khronos_intptr_t;
pub const PFNGLBINDBUFFERARBPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDELETEBUFFERSARBPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGENBUFFERSARBPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLISBUFFERARBPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLBUFFERDATAARBPROC = ?*const fn (GLenum, GLsizeiptrARB, ?*const anyopaque, GLenum) callconv(.C) void;
pub const PFNGLBUFFERSUBDATAARBPROC = ?*const fn (GLenum, GLintptrARB, GLsizeiptrARB, ?*const anyopaque) callconv(.C) void;
pub const PFNGLGETBUFFERSUBDATAARBPROC = ?*const fn (GLenum, GLintptrARB, GLsizeiptrARB, ?*anyopaque) callconv(.C) void;
pub const PFNGLMAPBUFFERARBPROC = ?*const fn (GLenum, GLenum) callconv(.C) ?*anyopaque;
pub const PFNGLUNMAPBUFFERARBPROC = ?*const fn (GLenum) callconv(.C) GLboolean;
pub const PFNGLGETBUFFERPARAMETERIVARBPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETBUFFERPOINTERVARBPROC = ?*const fn (GLenum, GLenum, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1DARBPROC = ?*const fn (GLuint, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1DVARBPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1FARBPROC = ?*const fn (GLuint, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1FVARBPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1SARBPROC = ?*const fn (GLuint, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1SVARBPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2DARBPROC = ?*const fn (GLuint, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2DVARBPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2FARBPROC = ?*const fn (GLuint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2FVARBPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2SARBPROC = ?*const fn (GLuint, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2SVARBPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3DARBPROC = ?*const fn (GLuint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3DVARBPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3FARBPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3FVARBPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3SARBPROC = ?*const fn (GLuint, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3SVARBPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NBVARBPROC = ?*const fn (GLuint, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NIVARBPROC = ?*const fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NSVARBPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NUBARBPROC = ?*const fn (GLuint, GLubyte, GLubyte, GLubyte, GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NUBVARBPROC = ?*const fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NUIVARBPROC = ?*const fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NUSVARBPROC = ?*const fn (GLuint, [*c]const GLushort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4BVARBPROC = ?*const fn (GLuint, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4DARBPROC = ?*const fn (GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4DVARBPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4FARBPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4FVARBPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4IVARBPROC = ?*const fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4SARBPROC = ?*const fn (GLuint, GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4SVARBPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4UBVARBPROC = ?*const fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4UIVARBPROC = ?*const fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4USVARBPROC = ?*const fn (GLuint, [*c]const GLushort) callconv(.C) void;
pub const PFNGLVERTEXATTRIBPOINTERARBPROC = ?*const fn (GLuint, GLint, GLenum, GLboolean, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLENABLEVERTEXATTRIBARRAYARBPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLDISABLEVERTEXATTRIBARRAYARBPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBDVARBPROC = ?*const fn (GLuint, GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBFVARBPROC = ?*const fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBIVARBPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBPOINTERVARBPROC = ?*const fn (GLuint, GLenum, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLBINDATTRIBLOCATIONARBPROC = ?*const fn (GLhandleARB, GLuint, [*c]const GLcharARB) callconv(.C) void;
pub const PFNGLGETACTIVEATTRIBARBPROC = ?*const fn (GLhandleARB, GLuint, GLsizei, [*c]GLsizei, [*c]GLint, [*c]GLenum, [*c]GLcharARB) callconv(.C) void;
pub const PFNGLGETATTRIBLOCATIONARBPROC = ?*const fn (GLhandleARB, [*c]const GLcharARB) callconv(.C) GLint;
pub const PFNGLDEPTHRANGEARRAYDVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLDEPTHRANGEINDEXEDDNVPROC = ?*const fn (GLuint, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS2DARBPROC = ?*const fn (GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS2DVARBPROC = ?*const fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS2FARBPROC = ?*const fn (GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS2FVARBPROC = ?*const fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS2IARBPROC = ?*const fn (GLint, GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS2IVARBPROC = ?*const fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS2SARBPROC = ?*const fn (GLshort, GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS2SVARBPROC = ?*const fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS3DARBPROC = ?*const fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS3DVARBPROC = ?*const fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS3FARBPROC = ?*const fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS3FVARBPROC = ?*const fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS3IARBPROC = ?*const fn (GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS3IVARBPROC = ?*const fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS3SARBPROC = ?*const fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS3SVARBPROC = ?*const fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLBLENDBARRIERKHRPROC = ?*const fn () callconv(.C) void;
pub const PFNGLMAXSHADERCOMPILERTHREADSKHRPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1BOESPROC = ?*const fn (GLenum, GLbyte) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1BVOESPROC = ?*const fn (GLenum, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2BOESPROC = ?*const fn (GLenum, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2BVOESPROC = ?*const fn (GLenum, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3BOESPROC = ?*const fn (GLenum, GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3BVOESPROC = ?*const fn (GLenum, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4BOESPROC = ?*const fn (GLenum, GLbyte, GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4BVOESPROC = ?*const fn (GLenum, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLTEXCOORD1BOESPROC = ?*const fn (GLbyte) callconv(.C) void;
pub const PFNGLTEXCOORD1BVOESPROC = ?*const fn ([*c]const GLbyte) callconv(.C) void;
pub const PFNGLTEXCOORD2BOESPROC = ?*const fn (GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLTEXCOORD2BVOESPROC = ?*const fn ([*c]const GLbyte) callconv(.C) void;
pub const PFNGLTEXCOORD3BOESPROC = ?*const fn (GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLTEXCOORD3BVOESPROC = ?*const fn ([*c]const GLbyte) callconv(.C) void;
pub const PFNGLTEXCOORD4BOESPROC = ?*const fn (GLbyte, GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLTEXCOORD4BVOESPROC = ?*const fn ([*c]const GLbyte) callconv(.C) void;
pub const PFNGLVERTEX2BOESPROC = ?*const fn (GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLVERTEX2BVOESPROC = ?*const fn ([*c]const GLbyte) callconv(.C) void;
pub const PFNGLVERTEX3BOESPROC = ?*const fn (GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLVERTEX3BVOESPROC = ?*const fn ([*c]const GLbyte) callconv(.C) void;
pub const PFNGLVERTEX4BOESPROC = ?*const fn (GLbyte, GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLVERTEX4BVOESPROC = ?*const fn ([*c]const GLbyte) callconv(.C) void;
pub const GLfixed = khronos_int32_t;
pub const PFNGLALPHAFUNCXOESPROC = ?*const fn (GLenum, GLfixed) callconv(.C) void;
pub const PFNGLCLEARCOLORXOESPROC = ?*const fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLCLEARDEPTHXOESPROC = ?*const fn (GLfixed) callconv(.C) void;
pub const PFNGLCLIPPLANEXOESPROC = ?*const fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLCOLOR4XOESPROC = ?*const fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLDEPTHRANGEXOESPROC = ?*const fn (GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLFOGXOESPROC = ?*const fn (GLenum, GLfixed) callconv(.C) void;
pub const PFNGLFOGXVOESPROC = ?*const fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLFRUSTUMXOESPROC = ?*const fn (GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLGETCLIPPLANEXOESPROC = ?*const fn (GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETFIXEDVOESPROC = ?*const fn (GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETTEXENVXVOESPROC = ?*const fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETTEXPARAMETERXVOESPROC = ?*const fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLLIGHTMODELXOESPROC = ?*const fn (GLenum, GLfixed) callconv(.C) void;
pub const PFNGLLIGHTMODELXVOESPROC = ?*const fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLLIGHTXOESPROC = ?*const fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub const PFNGLLIGHTXVOESPROC = ?*const fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLLINEWIDTHXOESPROC = ?*const fn (GLfixed) callconv(.C) void;
pub const PFNGLLOADMATRIXXOESPROC = ?*const fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLMATERIALXOESPROC = ?*const fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub const PFNGLMATERIALXVOESPROC = ?*const fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLMULTMATRIXXOESPROC = ?*const fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4XOESPROC = ?*const fn (GLenum, GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLNORMAL3XOESPROC = ?*const fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLORTHOXOESPROC = ?*const fn (GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLPOINTPARAMETERXVOESPROC = ?*const fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLPOINTSIZEXOESPROC = ?*const fn (GLfixed) callconv(.C) void;
pub const PFNGLPOLYGONOFFSETXOESPROC = ?*const fn (GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLROTATEXOESPROC = ?*const fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLSCALEXOESPROC = ?*const fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLTEXENVXOESPROC = ?*const fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub const PFNGLTEXENVXVOESPROC = ?*const fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLTEXPARAMETERXOESPROC = ?*const fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub const PFNGLTEXPARAMETERXVOESPROC = ?*const fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLTRANSLATEXOESPROC = ?*const fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLACCUMXOESPROC = ?*const fn (GLenum, GLfixed) callconv(.C) void;
pub const PFNGLBITMAPXOESPROC = ?*const fn (GLsizei, GLsizei, GLfixed, GLfixed, GLfixed, GLfixed, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLBLENDCOLORXOESPROC = ?*const fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLCLEARACCUMXOESPROC = ?*const fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLCOLOR3XOESPROC = ?*const fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLCOLOR3XVOESPROC = ?*const fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLCOLOR4XVOESPROC = ?*const fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLCONVOLUTIONPARAMETERXOESPROC = ?*const fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub const PFNGLCONVOLUTIONPARAMETERXVOESPROC = ?*const fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLEVALCOORD1XOESPROC = ?*const fn (GLfixed) callconv(.C) void;
pub const PFNGLEVALCOORD1XVOESPROC = ?*const fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLEVALCOORD2XOESPROC = ?*const fn (GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLEVALCOORD2XVOESPROC = ?*const fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLFEEDBACKBUFFERXOESPROC = ?*const fn (GLsizei, GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLGETCONVOLUTIONPARAMETERXVOESPROC = ?*const fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETHISTOGRAMPARAMETERXVOESPROC = ?*const fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETLIGHTXOESPROC = ?*const fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETMAPXVOESPROC = ?*const fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETMATERIALXOESPROC = ?*const fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub const PFNGLGETPIXELMAPXVPROC = ?*const fn (GLenum, GLint, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETTEXGENXVOESPROC = ?*const fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETTEXLEVELPARAMETERXVOESPROC = ?*const fn (GLenum, GLint, GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLINDEXXOESPROC = ?*const fn (GLfixed) callconv(.C) void;
pub const PFNGLINDEXXVOESPROC = ?*const fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLLOADTRANSPOSEMATRIXXOESPROC = ?*const fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLMAP1XOESPROC = ?*const fn (GLenum, GLfixed, GLfixed, GLint, GLint, GLfixed) callconv(.C) void;
pub const PFNGLMAP2XOESPROC = ?*const fn (GLenum, GLfixed, GLfixed, GLint, GLint, GLfixed, GLfixed, GLint, GLint, GLfixed) callconv(.C) void;
pub const PFNGLMAPGRID1XOESPROC = ?*const fn (GLint, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLMAPGRID2XOESPROC = ?*const fn (GLint, GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLMULTTRANSPOSEMATRIXXOESPROC = ?*const fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1XOESPROC = ?*const fn (GLenum, GLfixed) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1XVOESPROC = ?*const fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2XOESPROC = ?*const fn (GLenum, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2XVOESPROC = ?*const fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3XOESPROC = ?*const fn (GLenum, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3XVOESPROC = ?*const fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4XVOESPROC = ?*const fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLNORMAL3XVOESPROC = ?*const fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLPASSTHROUGHXOESPROC = ?*const fn (GLfixed) callconv(.C) void;
pub const PFNGLPIXELMAPXPROC = ?*const fn (GLenum, GLint, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLPIXELSTOREXPROC = ?*const fn (GLenum, GLfixed) callconv(.C) void;
pub const PFNGLPIXELTRANSFERXOESPROC = ?*const fn (GLenum, GLfixed) callconv(.C) void;
pub const PFNGLPIXELZOOMXOESPROC = ?*const fn (GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLPRIORITIZETEXTURESXOESPROC = ?*const fn (GLsizei, [*c]const GLuint, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLRASTERPOS2XOESPROC = ?*const fn (GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLRASTERPOS2XVOESPROC = ?*const fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLRASTERPOS3XOESPROC = ?*const fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLRASTERPOS3XVOESPROC = ?*const fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLRASTERPOS4XOESPROC = ?*const fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLRASTERPOS4XVOESPROC = ?*const fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLRECTXOESPROC = ?*const fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLRECTXVOESPROC = ?*const fn ([*c]const GLfixed, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLTEXCOORD1XOESPROC = ?*const fn (GLfixed) callconv(.C) void;
pub const PFNGLTEXCOORD1XVOESPROC = ?*const fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLTEXCOORD2XOESPROC = ?*const fn (GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLTEXCOORD2XVOESPROC = ?*const fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLTEXCOORD3XOESPROC = ?*const fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLTEXCOORD3XVOESPROC = ?*const fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLTEXCOORD4XOESPROC = ?*const fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLTEXCOORD4XVOESPROC = ?*const fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLTEXGENXOESPROC = ?*const fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub const PFNGLTEXGENXVOESPROC = ?*const fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLVERTEX2XOESPROC = ?*const fn (GLfixed) callconv(.C) void;
pub const PFNGLVERTEX2XVOESPROC = ?*const fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLVERTEX3XOESPROC = ?*const fn (GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLVERTEX3XVOESPROC = ?*const fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLVERTEX4XOESPROC = ?*const fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLVERTEX4XVOESPROC = ?*const fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLQUERYMATRIXXOESPROC = ?*const fn ([*c]GLfixed, [*c]GLint) callconv(.C) GLbitfield;
pub const PFNGLCLEARDEPTHFOESPROC = ?*const fn (GLclampf) callconv(.C) void;
pub const PFNGLCLIPPLANEFOESPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLDEPTHRANGEFOESPROC = ?*const fn (GLclampf, GLclampf) callconv(.C) void;
pub const PFNGLFRUSTUMFOESPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLGETCLIPPLANEFOESPROC = ?*const fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLORTHOFOESPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLTBUFFERMASK3DFXPROC = ?*const fn (GLuint) callconv(.C) void;
pub const GLDEBUGPROCAMD = ?*const fn (GLuint, GLenum, GLenum, GLsizei, [*c]const GLchar, ?*anyopaque) callconv(.C) void;
pub const PFNGLDEBUGMESSAGEENABLEAMDPROC = ?*const fn (GLenum, GLenum, GLsizei, [*c]const GLuint, GLboolean) callconv(.C) void;
pub const PFNGLDEBUGMESSAGEINSERTAMDPROC = ?*const fn (GLenum, GLenum, GLuint, GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLDEBUGMESSAGECALLBACKAMDPROC = ?*const fn (GLDEBUGPROCAMD, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETDEBUGMESSAGELOGAMDPROC = ?*const fn (GLuint, GLsizei, [*c]GLenum, [*c]GLuint, [*c]GLuint, [*c]GLsizei, [*c]GLchar) callconv(.C) GLuint;
pub const PFNGLBLENDFUNCINDEXEDAMDPROC = ?*const fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC = ?*const fn (GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDEQUATIONINDEXEDAMDPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC = ?*const fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub const PFNGLRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC = ?*const fn (GLenum, GLsizei, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC = ?*const fn (GLuint, GLsizei, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLFRAMEBUFFERSAMPLEPOSITIONSFVAMDPROC = ?*const fn (GLenum, GLuint, GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERSAMPLEPOSITIONSFVAMDPROC = ?*const fn (GLuint, GLuint, GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLGETFRAMEBUFFERPARAMETERFVAMDPROC = ?*const fn (GLenum, GLenum, GLuint, GLuint, GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETNAMEDFRAMEBUFFERPARAMETERFVAMDPROC = ?*const fn (GLuint, GLenum, GLuint, GLuint, GLsizei, [*c]GLfloat) callconv(.C) void;
pub const GLint64EXT = khronos_int64_t;
pub const PFNGLUNIFORM1I64NVPROC = ?*const fn (GLint, GLint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM2I64NVPROC = ?*const fn (GLint, GLint64EXT, GLint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM3I64NVPROC = ?*const fn (GLint, GLint64EXT, GLint64EXT, GLint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM4I64NVPROC = ?*const fn (GLint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM1I64VNVPROC = ?*const fn (GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM2I64VNVPROC = ?*const fn (GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM3I64VNVPROC = ?*const fn (GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM4I64VNVPROC = ?*const fn (GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM1UI64NVPROC = ?*const fn (GLint, GLuint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM2UI64NVPROC = ?*const fn (GLint, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM3UI64NVPROC = ?*const fn (GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM4UI64NVPROC = ?*const fn (GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM1UI64VNVPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM2UI64VNVPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM3UI64VNVPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM4UI64VNVPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLGETUNIFORMI64VNVPROC = ?*const fn (GLuint, GLint, [*c]GLint64EXT) callconv(.C) void;
pub const PFNGLGETUNIFORMUI64VNVPROC = ?*const fn (GLuint, GLint, [*c]GLuint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1I64NVPROC = ?*const fn (GLuint, GLint, GLint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2I64NVPROC = ?*const fn (GLuint, GLint, GLint64EXT, GLint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3I64NVPROC = ?*const fn (GLuint, GLint, GLint64EXT, GLint64EXT, GLint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4I64NVPROC = ?*const fn (GLuint, GLint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1I64VNVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2I64VNVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3I64VNVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4I64VNVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1UI64NVPROC = ?*const fn (GLuint, GLint, GLuint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2UI64NVPROC = ?*const fn (GLuint, GLint, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3UI64NVPROC = ?*const fn (GLuint, GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4UI64NVPROC = ?*const fn (GLuint, GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1UI64VNVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2UI64VNVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3UI64VNVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4UI64VNVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBPARAMETERIAMDPROC = ?*const fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC = ?*const fn (GLenum, ?*const anyopaque, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC = ?*const fn (GLenum, GLenum, ?*const anyopaque, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLGENNAMESAMDPROC = ?*const fn (GLenum, GLuint, [*c]GLuint) callconv(.C) void;
pub const PFNGLDELETENAMESAMDPROC = ?*const fn (GLenum, GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLISNAMEAMDPROC = ?*const fn (GLenum, GLuint) callconv(.C) GLboolean;
pub const PFNGLQUERYOBJECTPARAMETERUIAMDPROC = ?*const fn (GLenum, GLuint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLGETPERFMONITORGROUPSAMDPROC = ?*const fn ([*c]GLint, GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETPERFMONITORCOUNTERSAMDPROC = ?*const fn (GLuint, [*c]GLint, [*c]GLint, GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETPERFMONITORGROUPSTRINGAMDPROC = ?*const fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETPERFMONITORCOUNTERINFOAMDPROC = ?*const fn (GLuint, GLuint, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLGENPERFMONITORSAMDPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLDELETEPERFMONITORSAMDPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLSELECTPERFMONITORCOUNTERSAMDPROC = ?*const fn (GLuint, GLboolean, GLuint, GLint, [*c]GLuint) callconv(.C) void;
pub const PFNGLBEGINPERFMONITORAMDPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLENDPERFMONITORAMDPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLGETPERFMONITORCOUNTERDATAAMDPROC = ?*const fn (GLuint, GLenum, GLsizei, [*c]GLuint, [*c]GLint) callconv(.C) void;
pub const PFNGLSETMULTISAMPLEFVAMDPROC = ?*const fn (GLenum, GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXSTORAGESPARSEAMDPROC = ?*const fn (GLenum, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLbitfield) callconv(.C) void;
pub const PFNGLTEXTURESTORAGESPARSEAMDPROC = ?*const fn (GLuint, GLenum, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLbitfield) callconv(.C) void;
pub const PFNGLSTENCILOPVALUEAMDPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLTESSELLATIONFACTORAMDPROC = ?*const fn (GLfloat) callconv(.C) void;
pub const PFNGLTESSELLATIONMODEAMDPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLELEMENTPOINTERAPPLEPROC = ?*const fn (GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLDRAWELEMENTARRAYAPPLEPROC = ?*const fn (GLenum, GLint, GLsizei) callconv(.C) void;
pub const PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC = ?*const fn (GLenum, GLuint, GLuint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC = ?*const fn (GLenum, [*c]const GLint, [*c]const GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC = ?*const fn (GLenum, GLuint, GLuint, [*c]const GLint, [*c]const GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLGENFENCESAPPLEPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLDELETEFENCESAPPLEPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLSETFENCEAPPLEPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLISFENCEAPPLEPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLTESTFENCEAPPLEPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLFINISHFENCEAPPLEPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLTESTOBJECTAPPLEPROC = ?*const fn (GLenum, GLuint) callconv(.C) GLboolean;
pub const PFNGLFINISHOBJECTAPPLEPROC = ?*const fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLBUFFERPARAMETERIAPPLEPROC = ?*const fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC = ?*const fn (GLenum, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLOBJECTPURGEABLEAPPLEPROC = ?*const fn (GLenum, GLuint, GLenum) callconv(.C) GLenum;
pub const PFNGLOBJECTUNPURGEABLEAPPLEPROC = ?*const fn (GLenum, GLuint, GLenum) callconv(.C) GLenum;
pub const PFNGLGETOBJECTPARAMETERIVAPPLEPROC = ?*const fn (GLenum, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLTEXTURERANGEAPPLEPROC = ?*const fn (GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC = ?*const fn (GLenum, GLenum, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLBINDVERTEXARRAYAPPLEPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLDELETEVERTEXARRAYSAPPLEPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGENVERTEXARRAYSAPPLEPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLISVERTEXARRAYAPPLEPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLVERTEXARRAYRANGEAPPLEPROC = ?*const fn (GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC = ?*const fn (GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLVERTEXARRAYPARAMETERIAPPLEPROC = ?*const fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLENABLEVERTEXATTRIBAPPLEPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLDISABLEVERTEXATTRIBAPPLEPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLISVERTEXATTRIBENABLEDAPPLEPROC = ?*const fn (GLuint, GLenum) callconv(.C) GLboolean;
pub const PFNGLMAPVERTEXATTRIB1DAPPLEPROC = ?*const fn (GLuint, GLuint, GLdouble, GLdouble, GLint, GLint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMAPVERTEXATTRIB1FAPPLEPROC = ?*const fn (GLuint, GLuint, GLfloat, GLfloat, GLint, GLint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMAPVERTEXATTRIB2DAPPLEPROC = ?*const fn (GLuint, GLuint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMAPVERTEXATTRIB2FAPPLEPROC = ?*const fn (GLuint, GLuint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLDRAWBUFFERSATIPROC = ?*const fn (GLsizei, [*c]const GLenum) callconv(.C) void;
pub const PFNGLELEMENTPOINTERATIPROC = ?*const fn (GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLDRAWELEMENTARRAYATIPROC = ?*const fn (GLenum, GLsizei) callconv(.C) void;
pub const PFNGLDRAWRANGEELEMENTARRAYATIPROC = ?*const fn (GLenum, GLuint, GLuint, GLsizei) callconv(.C) void;
pub const PFNGLTEXBUMPPARAMETERIVATIPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLTEXBUMPPARAMETERFVATIPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLGETTEXBUMPPARAMETERIVATIPROC = ?*const fn (GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXBUMPPARAMETERFVATIPROC = ?*const fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGENFRAGMENTSHADERSATIPROC = ?*const fn (GLuint) callconv(.C) GLuint;
pub const PFNGLBINDFRAGMENTSHADERATIPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLDELETEFRAGMENTSHADERATIPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLBEGINFRAGMENTSHADERATIPROC = ?*const fn () callconv(.C) void;
pub const PFNGLENDFRAGMENTSHADERATIPROC = ?*const fn () callconv(.C) void;
pub const PFNGLPASSTEXCOORDATIPROC = ?*const fn (GLuint, GLuint, GLenum) callconv(.C) void;
pub const PFNGLSAMPLEMAPATIPROC = ?*const fn (GLuint, GLuint, GLenum) callconv(.C) void;
pub const PFNGLCOLORFRAGMENTOP1ATIPROC = ?*const fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLCOLORFRAGMENTOP2ATIPROC = ?*const fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLCOLORFRAGMENTOP3ATIPROC = ?*const fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLALPHAFRAGMENTOP1ATIPROC = ?*const fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLALPHAFRAGMENTOP2ATIPROC = ?*const fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLALPHAFRAGMENTOP3ATIPROC = ?*const fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLSETFRAGMENTSHADERCONSTANTATIPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMAPOBJECTBUFFERATIPROC = ?*const fn (GLuint) callconv(.C) ?*anyopaque;
pub const PFNGLUNMAPOBJECTBUFFERATIPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLPNTRIANGLESIATIPROC = ?*const fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLPNTRIANGLESFATIPROC = ?*const fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLSTENCILOPSEPARATEATIPROC = ?*const fn (GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLSTENCILFUNCSEPARATEATIPROC = ?*const fn (GLenum, GLenum, GLint, GLuint) callconv(.C) void;
pub const PFNGLNEWOBJECTBUFFERATIPROC = ?*const fn (GLsizei, ?*const anyopaque, GLenum) callconv(.C) GLuint;
pub const PFNGLISOBJECTBUFFERATIPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLUPDATEOBJECTBUFFERATIPROC = ?*const fn (GLuint, GLuint, GLsizei, ?*const anyopaque, GLenum) callconv(.C) void;
pub const PFNGLGETOBJECTBUFFERFVATIPROC = ?*const fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETOBJECTBUFFERIVATIPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLFREEOBJECTBUFFERATIPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLARRAYOBJECTATIPROC = ?*const fn (GLenum, GLint, GLenum, GLsizei, GLuint, GLuint) callconv(.C) void;
pub const PFNGLGETARRAYOBJECTFVATIPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETARRAYOBJECTIVATIPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLVARIANTARRAYOBJECTATIPROC = ?*const fn (GLuint, GLenum, GLsizei, GLuint, GLuint) callconv(.C) void;
pub const PFNGLGETVARIANTARRAYOBJECTFVATIPROC = ?*const fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETVARIANTARRAYOBJECTIVATIPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBARRAYOBJECTATIPROC = ?*const fn (GLuint, GLint, GLenum, GLboolean, GLsizei, GLuint, GLuint) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC = ?*const fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLVERTEXSTREAM1SATIPROC = ?*const fn (GLenum, GLshort) callconv(.C) void;
pub const PFNGLVERTEXSTREAM1SVATIPROC = ?*const fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXSTREAM1IATIPROC = ?*const fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLVERTEXSTREAM1IVATIPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXSTREAM1FATIPROC = ?*const fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXSTREAM1FVATIPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXSTREAM1DATIPROC = ?*const fn (GLenum, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXSTREAM1DVATIPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXSTREAM2SATIPROC = ?*const fn (GLenum, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXSTREAM2SVATIPROC = ?*const fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXSTREAM2IATIPROC = ?*const fn (GLenum, GLint, GLint) callconv(.C) void;
pub const PFNGLVERTEXSTREAM2IVATIPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXSTREAM2FATIPROC = ?*const fn (GLenum, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXSTREAM2FVATIPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXSTREAM2DATIPROC = ?*const fn (GLenum, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXSTREAM2DVATIPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXSTREAM3SATIPROC = ?*const fn (GLenum, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXSTREAM3SVATIPROC = ?*const fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXSTREAM3IATIPROC = ?*const fn (GLenum, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLVERTEXSTREAM3IVATIPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXSTREAM3FATIPROC = ?*const fn (GLenum, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXSTREAM3FVATIPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXSTREAM3DATIPROC = ?*const fn (GLenum, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXSTREAM3DVATIPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXSTREAM4SATIPROC = ?*const fn (GLenum, GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXSTREAM4SVATIPROC = ?*const fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXSTREAM4IATIPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLVERTEXSTREAM4IVATIPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXSTREAM4FATIPROC = ?*const fn (GLenum, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXSTREAM4FVATIPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXSTREAM4DATIPROC = ?*const fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXSTREAM4DVATIPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLNORMALSTREAM3BATIPROC = ?*const fn (GLenum, GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLNORMALSTREAM3BVATIPROC = ?*const fn (GLenum, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLNORMALSTREAM3SATIPROC = ?*const fn (GLenum, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLNORMALSTREAM3SVATIPROC = ?*const fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLNORMALSTREAM3IATIPROC = ?*const fn (GLenum, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLNORMALSTREAM3IVATIPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLNORMALSTREAM3FATIPROC = ?*const fn (GLenum, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLNORMALSTREAM3FVATIPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLNORMALSTREAM3DATIPROC = ?*const fn (GLenum, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLNORMALSTREAM3DVATIPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLVERTEXBLENDENVIATIPROC = ?*const fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLVERTEXBLENDENVFATIPROC = ?*const fn (GLenum, GLfloat) callconv(.C) void;
pub const GLeglImageOES = ?*anyopaque;
pub const PFNGLEGLIMAGETARGETTEXSTORAGEEXTPROC = ?*const fn (GLenum, GLeglImageOES, [*c]const GLint) callconv(.C) void;
pub const PFNGLEGLIMAGETARGETTEXTURESTORAGEEXTPROC = ?*const fn (GLuint, GLeglImageOES, [*c]const GLint) callconv(.C) void;
pub const PFNGLUNIFORMBUFFEREXTPROC = ?*const fn (GLuint, GLint, GLuint) callconv(.C) void;
pub const PFNGLGETUNIFORMBUFFERSIZEEXTPROC = ?*const fn (GLuint, GLint) callconv(.C) GLint;
pub const PFNGLGETUNIFORMOFFSETEXTPROC = ?*const fn (GLuint, GLint) callconv(.C) GLintptr;
pub const PFNGLBLENDCOLOREXTPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLBLENDEQUATIONSEPARATEEXTPROC = ?*const fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCSEPARATEEXTPROC = ?*const fn (GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDEQUATIONEXTPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLCOLORSUBTABLEEXTPROC = ?*const fn (GLenum, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOPYCOLORSUBTABLEEXTPROC = ?*const fn (GLenum, GLsizei, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLLOCKARRAYSEXTPROC = ?*const fn (GLint, GLsizei) callconv(.C) void;
pub const PFNGLUNLOCKARRAYSEXTPROC = ?*const fn () callconv(.C) void;
pub const PFNGLCONVOLUTIONFILTER1DEXTPROC = ?*const fn (GLenum, GLenum, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCONVOLUTIONFILTER2DEXTPROC = ?*const fn (GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCONVOLUTIONPARAMETERFEXTPROC = ?*const fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLCONVOLUTIONPARAMETERFVEXTPROC = ?*const fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCONVOLUTIONPARAMETERIEXTPROC = ?*const fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLCONVOLUTIONPARAMETERIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLGETCONVOLUTIONFILTEREXTPROC = ?*const fn (GLenum, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETSEPARABLEFILTEREXTPROC = ?*const fn (GLenum, GLenum, GLenum, ?*anyopaque, ?*anyopaque, ?*anyopaque) callconv(.C) void;
pub const PFNGLSEPARABLEFILTER2DEXTPROC = ?*const fn (GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTANGENT3BEXTPROC = ?*const fn (GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLTANGENT3BVEXTPROC = ?*const fn ([*c]const GLbyte) callconv(.C) void;
pub const PFNGLTANGENT3DEXTPROC = ?*const fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLTANGENT3DVEXTPROC = ?*const fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLTANGENT3FEXTPROC = ?*const fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLTANGENT3FVEXTPROC = ?*const fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLTANGENT3IEXTPROC = ?*const fn (GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLTANGENT3IVEXTPROC = ?*const fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLTANGENT3SEXTPROC = ?*const fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLTANGENT3SVEXTPROC = ?*const fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLBINORMAL3BEXTPROC = ?*const fn (GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLBINORMAL3BVEXTPROC = ?*const fn ([*c]const GLbyte) callconv(.C) void;
pub const PFNGLBINORMAL3DEXTPROC = ?*const fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLBINORMAL3DVEXTPROC = ?*const fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLBINORMAL3FEXTPROC = ?*const fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLBINORMAL3FVEXTPROC = ?*const fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLBINORMAL3IEXTPROC = ?*const fn (GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLBINORMAL3IVEXTPROC = ?*const fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLBINORMAL3SEXTPROC = ?*const fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLBINORMAL3SVEXTPROC = ?*const fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLTANGENTPOINTEREXTPROC = ?*const fn (GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLBINORMALPOINTEREXTPROC = ?*const fn (GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOPYTEXIMAGE1DEXTPROC = ?*const fn (GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint) callconv(.C) void;
pub const PFNGLCOPYTEXIMAGE2DEXTPROC = ?*const fn (GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint) callconv(.C) void;
pub const PFNGLCOPYTEXSUBIMAGE1DEXTPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLCOPYTEXSUBIMAGE2DEXTPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCOPYTEXSUBIMAGE3DEXTPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCULLPARAMETERDVEXTPROC = ?*const fn (GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLCULLPARAMETERFVEXTPROC = ?*const fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLLABELOBJECTEXTPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLGETOBJECTLABELEXTPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLINSERTEVENTMARKEREXTPROC = ?*const fn (GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLPUSHGROUPMARKEREXTPROC = ?*const fn (GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLPOPGROUPMARKEREXTPROC = ?*const fn () callconv(.C) void;
pub const PFNGLDEPTHBOUNDSEXTPROC = ?*const fn (GLclampd, GLclampd) callconv(.C) void;
pub const PFNGLMATRIXLOADFEXTPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATRIXLOADDEXTPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMATRIXMULTFEXTPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATRIXMULTDEXTPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMATRIXLOADIDENTITYEXTPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLMATRIXROTATEFEXTPROC = ?*const fn (GLenum, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLMATRIXROTATEDEXTPROC = ?*const fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMATRIXSCALEFEXTPROC = ?*const fn (GLenum, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLMATRIXSCALEDEXTPROC = ?*const fn (GLenum, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMATRIXTRANSLATEFEXTPROC = ?*const fn (GLenum, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLMATRIXTRANSLATEDEXTPROC = ?*const fn (GLenum, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMATRIXFRUSTUMEXTPROC = ?*const fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMATRIXORTHOEXTPROC = ?*const fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMATRIXPOPEXTPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLMATRIXPUSHEXTPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLCLIENTATTRIBDEFAULTEXTPROC = ?*const fn (GLbitfield) callconv(.C) void;
pub const PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC = ?*const fn (GLbitfield) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERFEXTPROC = ?*const fn (GLuint, GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERFVEXTPROC = ?*const fn (GLuint, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERIEXTPROC = ?*const fn (GLuint, GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERIVEXTPROC = ?*const fn (GLuint, GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLTEXTUREIMAGE1DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXTUREIMAGE2DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXTURESUBIMAGE1DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXTURESUBIMAGE2DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOPYTEXTUREIMAGE1DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint) callconv(.C) void;
pub const PFNGLCOPYTEXTUREIMAGE2DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint) callconv(.C) void;
pub const PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLGETTEXTUREIMAGEEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETTEXTUREPARAMETERFVEXTPROC = ?*const fn (GLuint, GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETTEXTUREPARAMETERIVEXTPROC = ?*const fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLTEXTUREIMAGE3DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXTURESUBIMAGE3DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLBINDMULTITEXTUREEXTPROC = ?*const fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLMULTITEXCOORDPOINTEREXTPROC = ?*const fn (GLenum, GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLMULTITEXENVFEXTPROC = ?*const fn (GLenum, GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXENVFVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXENVIEXTPROC = ?*const fn (GLenum, GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLMULTITEXENVIVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTITEXGENDEXTPROC = ?*const fn (GLenum, GLenum, GLenum, GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXGENDVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXGENFEXTPROC = ?*const fn (GLenum, GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXGENFVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXGENIEXTPROC = ?*const fn (GLenum, GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLMULTITEXGENIVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLGETMULTITEXENVFVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETMULTITEXENVIVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETMULTITEXGENDVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETMULTITEXGENFVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETMULTITEXGENIVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLMULTITEXPARAMETERIEXTPROC = ?*const fn (GLenum, GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLMULTITEXPARAMETERIVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTITEXPARAMETERFEXTPROC = ?*const fn (GLenum, GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXPARAMETERFVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXIMAGE1DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLMULTITEXIMAGE2DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLMULTITEXSUBIMAGE1DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLMULTITEXSUBIMAGE2DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOPYMULTITEXIMAGE1DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint) callconv(.C) void;
pub const PFNGLCOPYMULTITEXIMAGE2DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint) callconv(.C) void;
pub const PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLGETMULTITEXIMAGEEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETMULTITEXPARAMETERFVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETMULTITEXPARAMETERIVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLMULTITEXIMAGE3DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLMULTITEXSUBIMAGE3DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLENABLECLIENTSTATEINDEXEDEXTPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLGETFLOATINDEXEDVEXTPROC = ?*const fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETDOUBLEINDEXEDVEXTPROC = ?*const fn (GLenum, GLuint, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETPOINTERINDEXEDVEXTPROC = ?*const fn (GLenum, GLuint, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLENABLEINDEXEDEXTPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDISABLEINDEXEDEXTPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLISENABLEDINDEXEDEXTPROC = ?*const fn (GLenum, GLuint) callconv(.C) GLboolean;
pub const PFNGLGETINTEGERINDEXEDVEXTPROC = ?*const fn (GLenum, GLuint, [*c]GLint) callconv(.C) void;
pub const PFNGLGETBOOLEANINDEXEDVEXTPROC = ?*const fn (GLenum, GLuint, [*c]GLboolean) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC = ?*const fn (GLuint, GLenum, GLint, ?*anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC = ?*const fn (GLenum, GLenum, GLint, ?*anyopaque) callconv(.C) void;
pub const PFNGLMATRIXLOADTRANSPOSEFEXTPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATRIXLOADTRANSPOSEDEXTPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMATRIXMULTTRANSPOSEFEXTPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATRIXMULTTRANSPOSEDEXTPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLNAMEDBUFFERDATAEXTPROC = ?*const fn (GLuint, GLsizeiptr, ?*const anyopaque, GLenum) callconv(.C) void;
pub const PFNGLNAMEDBUFFERSUBDATAEXTPROC = ?*const fn (GLuint, GLintptr, GLsizeiptr, ?*const anyopaque) callconv(.C) void;
pub const PFNGLMAPNAMEDBUFFEREXTPROC = ?*const fn (GLuint, GLenum) callconv(.C) ?*anyopaque;
pub const PFNGLUNMAPNAMEDBUFFEREXTPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNAMEDBUFFERPOINTERVEXTPROC = ?*const fn (GLuint, GLenum, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLGETNAMEDBUFFERSUBDATAEXTPROC = ?*const fn (GLuint, GLintptr, GLsizeiptr, ?*anyopaque) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1FEXTPROC = ?*const fn (GLuint, GLint, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2FEXTPROC = ?*const fn (GLuint, GLint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3FEXTPROC = ?*const fn (GLuint, GLint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4FEXTPROC = ?*const fn (GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1IEXTPROC = ?*const fn (GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2IEXTPROC = ?*const fn (GLuint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3IEXTPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4IEXTPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1IVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2IVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3IVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4IVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXTUREBUFFEREXTPROC = ?*const fn (GLuint, GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLMULTITEXBUFFEREXTPROC = ?*const fn (GLenum, GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERIIVEXTPROC = ?*const fn (GLuint, GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERIUIVEXTPROC = ?*const fn (GLuint, GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGETTEXTUREPARAMETERIIVEXTPROC = ?*const fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXTUREPARAMETERIUIVEXTPROC = ?*const fn (GLuint, GLenum, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLMULTITEXPARAMETERIIVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTITEXPARAMETERIUIVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGETMULTITEXPARAMETERIIVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETMULTITEXPARAMETERIUIVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1UIEXTPROC = ?*const fn (GLuint, GLint, GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2UIEXTPROC = ?*const fn (GLuint, GLint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3UIEXTPROC = ?*const fn (GLuint, GLint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4UIEXTPROC = ?*const fn (GLuint, GLint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1UIVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2UIVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3UIVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4UIVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC = ?*const fn (GLuint, GLenum, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC = ?*const fn (GLuint, GLenum, GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC = ?*const fn (GLuint, GLenum, GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC = ?*const fn (GLuint, GLenum, GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC = ?*const fn (GLuint, GLenum, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC = ?*const fn (GLuint, GLenum, GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC = ?*const fn (GLuint, GLenum, GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC = ?*const fn (GLuint, GLenum, GLuint, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC = ?*const fn (GLuint, GLenum, GLuint, [*c]GLuint) callconv(.C) void;
pub const PFNGLENABLECLIENTSTATEIEXTPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDISABLECLIENTSTATEIEXTPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLGETFLOATI_VEXTPROC = ?*const fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETDOUBLEI_VEXTPROC = ?*const fn (GLenum, GLuint, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETPOINTERI_VEXTPROC = ?*const fn (GLenum, GLuint, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMSTRINGEXTPROC = ?*const fn (GLuint, GLenum, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC = ?*const fn (GLuint, GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC = ?*const fn (GLuint, GLenum, GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC = ?*const fn (GLuint, GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC = ?*const fn (GLuint, GLenum, GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC = ?*const fn (GLuint, GLenum, GLuint, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC = ?*const fn (GLuint, GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETNAMEDPROGRAMIVEXTPROC = ?*const fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNAMEDPROGRAMSTRINGEXTPROC = ?*const fn (GLuint, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC = ?*const fn (GLuint, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC = ?*const fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC = ?*const fn (GLuint, GLsizei, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC = ?*const fn (GLuint, GLenum) callconv(.C) GLenum;
pub const PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC = ?*const fn (GLuint, GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC = ?*const fn (GLuint, GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC = ?*const fn (GLuint, GLenum, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC = ?*const fn (GLuint, GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC = ?*const fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGENERATETEXTUREMIPMAPEXTPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLGENERATEMULTITEXMIPMAPEXTPROC = ?*const fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC = ?*const fn (GLuint, GLsizei, [*c]const GLenum) callconv(.C) void;
pub const PFNGLFRAMEBUFFERREADBUFFEREXTPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC = ?*const fn (GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC = ?*const fn (GLuint, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC = ?*const fn (GLuint, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC = ?*const fn (GLuint, GLenum, GLuint, GLint, GLenum) callconv(.C) void;
pub const PFNGLTEXTURERENDERBUFFEREXTPROC = ?*const fn (GLuint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLMULTITEXRENDERBUFFEREXTPROC = ?*const fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC = ?*const fn (GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYCOLOROFFSETEXTPROC = ?*const fn (GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC = ?*const fn (GLuint, GLuint, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYINDEXOFFSETEXTPROC = ?*const fn (GLuint, GLuint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYNORMALOFFSETEXTPROC = ?*const fn (GLuint, GLuint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC = ?*const fn (GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC = ?*const fn (GLuint, GLuint, GLenum, GLint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC = ?*const fn (GLuint, GLuint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC = ?*const fn (GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC = ?*const fn (GLuint, GLuint, GLuint, GLint, GLenum, GLboolean, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC = ?*const fn (GLuint, GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLENABLEVERTEXARRAYEXTPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLDISABLEVERTEXARRAYEXTPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLENABLEVERTEXARRAYATTRIBEXTPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLGETVERTEXARRAYINTEGERVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVERTEXARRAYPOINTERVEXTPROC = ?*const fn (GLuint, GLenum, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLMAPNAMEDBUFFERRANGEEXTPROC = ?*const fn (GLuint, GLintptr, GLsizeiptr, GLbitfield) callconv(.C) ?*anyopaque;
pub const PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC = ?*const fn (GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLNAMEDBUFFERSTORAGEEXTPROC = ?*const fn (GLuint, GLsizeiptr, ?*const anyopaque, GLbitfield) callconv(.C) void;
pub const PFNGLCLEARNAMEDBUFFERDATAEXTPROC = ?*const fn (GLuint, GLenum, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC = ?*const fn (GLuint, GLenum, GLsizeiptr, GLsizeiptr, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC = ?*const fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1DEXTPROC = ?*const fn (GLuint, GLint, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2DEXTPROC = ?*const fn (GLuint, GLint, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3DEXTPROC = ?*const fn (GLuint, GLint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4DEXTPROC = ?*const fn (GLuint, GLint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1DVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2DVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3DVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4DVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLTEXTUREBUFFERRANGEEXTPROC = ?*const fn (GLuint, GLenum, GLenum, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLTEXTURESTORAGE1DEXTPROC = ?*const fn (GLuint, GLenum, GLsizei, GLenum, GLsizei) callconv(.C) void;
pub const PFNGLTEXTURESTORAGE2DEXTPROC = ?*const fn (GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLTEXTURESTORAGE3DEXTPROC = ?*const fn (GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC = ?*const fn (GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC = ?*const fn (GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC = ?*const fn (GLuint, GLuint, GLuint, GLintptr, GLsizei) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC = ?*const fn (GLuint, GLuint, GLint, GLenum, GLboolean, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC = ?*const fn (GLuint, GLuint, GLint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC = ?*const fn (GLuint, GLuint, GLint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC = ?*const fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC = ?*const fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC = ?*const fn (GLuint, GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLTEXTUREPAGECOMMITMENTEXTPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC = ?*const fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLCOLORMASKINDEXEDEXTPROC = ?*const fn (GLuint, GLboolean, GLboolean, GLboolean, GLboolean) callconv(.C) void;
pub const PFNGLDRAWARRAYSINSTANCEDEXTPROC = ?*const fn (GLenum, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLDRAWELEMENTSINSTANCEDEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei) callconv(.C) void;
pub const PFNGLDRAWRANGEELEMENTSEXTPROC = ?*const fn (GLenum, GLuint, GLuint, GLsizei, GLenum, ?*const anyopaque) callconv(.C) void;
pub const GLeglClientBufferEXT = ?*anyopaque;
pub const PFNGLBUFFERSTORAGEEXTERNALEXTPROC = ?*const fn (GLenum, GLintptr, GLsizeiptr, GLeglClientBufferEXT, GLbitfield) callconv(.C) void;
pub const PFNGLNAMEDBUFFERSTORAGEEXTERNALEXTPROC = ?*const fn (GLuint, GLintptr, GLsizeiptr, GLeglClientBufferEXT, GLbitfield) callconv(.C) void;
pub const PFNGLFOGCOORDFEXTPROC = ?*const fn (GLfloat) callconv(.C) void;
pub const PFNGLFOGCOORDFVEXTPROC = ?*const fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLFOGCOORDDEXTPROC = ?*const fn (GLdouble) callconv(.C) void;
pub const PFNGLFOGCOORDDVEXTPROC = ?*const fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLFOGCOORDPOINTEREXTPROC = ?*const fn (GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLBLITFRAMEBUFFEREXTPROC = ?*const fn (GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) callconv(.C) void;
pub const PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLISRENDERBUFFEREXTPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLBINDRENDERBUFFEREXTPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDELETERENDERBUFFERSEXTPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGENRENDERBUFFERSEXTPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLRENDERBUFFERSTORAGEEXTPROC = ?*const fn (GLenum, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLISFRAMEBUFFEREXTPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLBINDFRAMEBUFFEREXTPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDELETEFRAMEBUFFERSEXTPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGENFRAMEBUFFERSEXTPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC = ?*const fn (GLenum) callconv(.C) GLenum;
pub const PFNGLFRAMEBUFFERTEXTURE1DEXTPROC = ?*const fn (GLenum, GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURE2DEXTPROC = ?*const fn (GLenum, GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURE3DEXTPROC = ?*const fn (GLenum, GLenum, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC = ?*const fn (GLenum, GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGENERATEMIPMAPEXTPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLPROGRAMPARAMETERIEXTPROC = ?*const fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETERS4FVEXTPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLGETUNIFORMUIVEXTPROC = ?*const fn (GLuint, GLint, [*c]GLuint) callconv(.C) void;
pub const PFNGLBINDFRAGDATALOCATIONEXTPROC = ?*const fn (GLuint, GLuint, [*c]const GLchar) callconv(.C) void;
pub const PFNGLGETFRAGDATALOCATIONEXTPROC = ?*const fn (GLuint, [*c]const GLchar) callconv(.C) GLint;
pub const PFNGLUNIFORM1UIEXTPROC = ?*const fn (GLint, GLuint) callconv(.C) void;
pub const PFNGLUNIFORM2UIEXTPROC = ?*const fn (GLint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLUNIFORM3UIEXTPROC = ?*const fn (GLint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLUNIFORM4UIEXTPROC = ?*const fn (GLint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLUNIFORM1UIVEXTPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLUNIFORM2UIVEXTPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLUNIFORM3UIVEXTPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLUNIFORM4UIVEXTPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI1IEXTPROC = ?*const fn (GLuint, GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI2IEXTPROC = ?*const fn (GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI3IEXTPROC = ?*const fn (GLuint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4IEXTPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI1UIEXTPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI2UIEXTPROC = ?*const fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI3UIEXTPROC = ?*const fn (GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4UIEXTPROC = ?*const fn (GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI1IVEXTPROC = ?*const fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI2IVEXTPROC = ?*const fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI3IVEXTPROC = ?*const fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4IVEXTPROC = ?*const fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI1UIVEXTPROC = ?*const fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI2UIVEXTPROC = ?*const fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI3UIVEXTPROC = ?*const fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4UIVEXTPROC = ?*const fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4BVEXTPROC = ?*const fn (GLuint, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4SVEXTPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4UBVEXTPROC = ?*const fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4USVEXTPROC = ?*const fn (GLuint, [*c]const GLushort) callconv(.C) void;
pub const PFNGLVERTEXATTRIBIPOINTEREXTPROC = ?*const fn (GLuint, GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBIIVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBIUIVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETHISTOGRAMEXTPROC = ?*const fn (GLenum, GLboolean, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETHISTOGRAMPARAMETERFVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETHISTOGRAMPARAMETERIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETMINMAXEXTPROC = ?*const fn (GLenum, GLboolean, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETMINMAXPARAMETERFVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETMINMAXPARAMETERIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLHISTOGRAMEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, GLboolean) callconv(.C) void;
pub const PFNGLMINMAXEXTPROC = ?*const fn (GLenum, GLenum, GLboolean) callconv(.C) void;
pub const PFNGLRESETHISTOGRAMEXTPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLRESETMINMAXEXTPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLINDEXFUNCEXTPROC = ?*const fn (GLenum, GLclampf) callconv(.C) void;
pub const PFNGLINDEXMATERIALEXTPROC = ?*const fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLAPPLYTEXTUREEXTPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLTEXTURELIGHTEXTPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLTEXTUREMATERIALEXTPROC = ?*const fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLGETUNSIGNEDBYTEVEXTPROC = ?*const fn (GLenum, [*c]GLubyte) callconv(.C) void;
pub const PFNGLGETUNSIGNEDBYTEI_VEXTPROC = ?*const fn (GLenum, GLuint, [*c]GLubyte) callconv(.C) void;
pub const PFNGLDELETEMEMORYOBJECTSEXTPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLISMEMORYOBJECTEXTPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLCREATEMEMORYOBJECTSEXTPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLMEMORYOBJECTPARAMETERIVEXTPROC = ?*const fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLGETMEMORYOBJECTPARAMETERIVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLTEXSTORAGEMEM2DEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXSTORAGEMEM2DMULTISAMPLEEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXSTORAGEMEM3DEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXSTORAGEMEM3DMULTISAMPLEEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLBUFFERSTORAGEMEMEXTPROC = ?*const fn (GLenum, GLsizeiptr, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXTURESTORAGEMEM2DEXTPROC = ?*const fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXTURESTORAGEMEM2DMULTISAMPLEEXTPROC = ?*const fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLboolean, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXTURESTORAGEMEM3DEXTPROC = ?*const fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXTURESTORAGEMEM3DMULTISAMPLEEXTPROC = ?*const fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLNAMEDBUFFERSTORAGEMEMEXTPROC = ?*const fn (GLuint, GLsizeiptr, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXSTORAGEMEM1DEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXTURESTORAGEMEM1DEXTPROC = ?*const fn (GLuint, GLsizei, GLenum, GLsizei, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLIMPORTMEMORYFDEXTPROC = ?*const fn (GLuint, GLuint64, GLenum, GLint) callconv(.C) void;
pub const PFNGLIMPORTMEMORYWIN32HANDLEEXTPROC = ?*const fn (GLuint, GLuint64, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLIMPORTMEMORYWIN32NAMEEXTPROC = ?*const fn (GLuint, GLuint64, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLMULTIDRAWARRAYSEXTPROC = ?*const fn (GLenum, [*c]const GLint, [*c]const GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTSEXTPROC = ?*const fn (GLenum, [*c]const GLsizei, GLenum, [*c]const ?*const anyopaque, GLsizei) callconv(.C) void;
pub const PFNGLSAMPLEMASKEXTPROC = ?*const fn (GLclampf, GLboolean) callconv(.C) void;
pub const PFNGLSAMPLEPATTERNEXTPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLCOLORTABLEEXTPROC = ?*const fn (GLenum, GLenum, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLGETCOLORTABLEEXTPROC = ?*const fn (GLenum, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETCOLORTABLEPARAMETERIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETCOLORTABLEPARAMETERFVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLPIXELTRANSFORMPARAMETERIEXTPROC = ?*const fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLPIXELTRANSFORMPARAMETERFEXTPROC = ?*const fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC = ?*const fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLPOINTPARAMETERFEXTPROC = ?*const fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLPOINTPARAMETERFVEXTPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPOLYGONOFFSETEXTPROC = ?*const fn (GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPOLYGONOFFSETCLAMPEXTPROC = ?*const fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROVOKINGVERTEXEXTPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLRASTERSAMPLESEXTPROC = ?*const fn (GLuint, GLboolean) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3BEXTPROC = ?*const fn (GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3BVEXTPROC = ?*const fn ([*c]const GLbyte) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3DEXTPROC = ?*const fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3DVEXTPROC = ?*const fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3FEXTPROC = ?*const fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3FVEXTPROC = ?*const fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3IEXTPROC = ?*const fn (GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3IVEXTPROC = ?*const fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3SEXTPROC = ?*const fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3SVEXTPROC = ?*const fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3UBEXTPROC = ?*const fn (GLubyte, GLubyte, GLubyte) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3UBVEXTPROC = ?*const fn ([*c]const GLubyte) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3UIEXTPROC = ?*const fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3UIVEXTPROC = ?*const fn ([*c]const GLuint) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3USEXTPROC = ?*const fn (GLushort, GLushort, GLushort) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3USVEXTPROC = ?*const fn ([*c]const GLushort) callconv(.C) void;
pub const PFNGLSECONDARYCOLORPOINTEREXTPROC = ?*const fn (GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLGENSEMAPHORESEXTPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLDELETESEMAPHORESEXTPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLISSEMAPHOREEXTPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLSEMAPHOREPARAMETERUI64VEXTPROC = ?*const fn (GLuint, GLenum, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLGETSEMAPHOREPARAMETERUI64VEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLuint64) callconv(.C) void;
pub const PFNGLWAITSEMAPHOREEXTPROC = ?*const fn (GLuint, GLuint, [*c]const GLuint, GLuint, [*c]const GLuint, [*c]const GLenum) callconv(.C) void;
pub const PFNGLSIGNALSEMAPHOREEXTPROC = ?*const fn (GLuint, GLuint, [*c]const GLuint, GLuint, [*c]const GLuint, [*c]const GLenum) callconv(.C) void;
pub const PFNGLIMPORTSEMAPHOREFDEXTPROC = ?*const fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLIMPORTSEMAPHOREWIN32HANDLEEXTPROC = ?*const fn (GLuint, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLIMPORTSEMAPHOREWIN32NAMEEXTPROC = ?*const fn (GLuint, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLUSESHADERPROGRAMEXTPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLACTIVEPROGRAMEXTPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLCREATESHADERPROGRAMEXTPROC = ?*const fn (GLenum, [*c]const GLchar) callconv(.C) GLuint;
pub const PFNGLFRAMEBUFFERFETCHBARRIEREXTPROC = ?*const fn () callconv(.C) void;
pub const PFNGLBINDIMAGETEXTUREEXTPROC = ?*const fn (GLuint, GLuint, GLint, GLboolean, GLint, GLenum, GLint) callconv(.C) void;
pub const PFNGLMEMORYBARRIEREXTPROC = ?*const fn (GLbitfield) callconv(.C) void;
pub const PFNGLSTENCILCLEARTAGEXTPROC = ?*const fn (GLsizei, GLuint) callconv(.C) void;
pub const PFNGLACTIVESTENCILFACEEXTPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLTEXSUBIMAGE1DEXTPROC = ?*const fn (GLenum, GLint, GLint, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXSUBIMAGE2DEXTPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXIMAGE3DEXTPROC = ?*const fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXSUBIMAGE3DEXTPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC = ?*const fn (GLenum, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLTEXBUFFEREXTPROC = ?*const fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLTEXPARAMETERIIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLTEXPARAMETERIUIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGETTEXPARAMETERIIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXPARAMETERIUIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLCLEARCOLORIIEXTPROC = ?*const fn (GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLCLEARCOLORIUIEXTPROC = ?*const fn (GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLARETEXTURESRESIDENTEXTPROC = ?*const fn (GLsizei, [*c]const GLuint, [*c]GLboolean) callconv(.C) GLboolean;
pub const PFNGLBINDTEXTUREEXTPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDELETETEXTURESEXTPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGENTEXTURESEXTPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLISTEXTUREEXTPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLPRIORITIZETEXTURESEXTPROC = ?*const fn (GLsizei, [*c]const GLuint, [*c]const GLclampf) callconv(.C) void;
pub const PFNGLTEXTURENORMALEXTPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLTEXSTORAGE1DEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei) callconv(.C) void;
pub const PFNGLTEXSTORAGE2DEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLTEXSTORAGE3DEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLGETQUERYOBJECTI64VEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLint64) callconv(.C) void;
pub const PFNGLGETQUERYOBJECTUI64VEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLuint64) callconv(.C) void;
pub const PFNGLBEGINTRANSFORMFEEDBACKEXTPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLENDTRANSFORMFEEDBACKEXTPROC = ?*const fn () callconv(.C) void;
pub const PFNGLBINDBUFFERRANGEEXTPROC = ?*const fn (GLenum, GLuint, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLBINDBUFFEROFFSETEXTPROC = ?*const fn (GLenum, GLuint, GLuint, GLintptr) callconv(.C) void;
pub const PFNGLBINDBUFFERBASEEXTPROC = ?*const fn (GLenum, GLuint, GLuint) callconv(.C) void;
pub const PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC = ?*const fn (GLuint, GLsizei, [*c]const [*c]const GLchar, GLenum) callconv(.C) void;
pub const PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLsizei, [*c]GLenum, [*c]GLchar) callconv(.C) void;
pub const PFNGLARRAYELEMENTEXTPROC = ?*const fn (GLint) callconv(.C) void;
pub const PFNGLCOLORPOINTEREXTPROC = ?*const fn (GLint, GLenum, GLsizei, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLDRAWARRAYSEXTPROC = ?*const fn (GLenum, GLint, GLsizei) callconv(.C) void;
pub const PFNGLEDGEFLAGPOINTEREXTPROC = ?*const fn (GLsizei, GLsizei, [*c]const GLboolean) callconv(.C) void;
pub const PFNGLGETPOINTERVEXTPROC = ?*const fn (GLenum, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLINDEXPOINTEREXTPROC = ?*const fn (GLenum, GLsizei, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLNORMALPOINTEREXTPROC = ?*const fn (GLenum, GLsizei, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXCOORDPOINTEREXTPROC = ?*const fn (GLint, GLenum, GLsizei, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLVERTEXPOINTEREXTPROC = ?*const fn (GLint, GLenum, GLsizei, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL1DEXTPROC = ?*const fn (GLuint, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL2DEXTPROC = ?*const fn (GLuint, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL3DEXTPROC = ?*const fn (GLuint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL4DEXTPROC = ?*const fn (GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL1DVEXTPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL2DVEXTPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL3DVEXTPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL4DVEXTPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBLPOINTEREXTPROC = ?*const fn (GLuint, GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBLDVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLBEGINVERTEXSHADEREXTPROC = ?*const fn () callconv(.C) void;
pub const PFNGLENDVERTEXSHADEREXTPROC = ?*const fn () callconv(.C) void;
pub const PFNGLBINDVERTEXSHADEREXTPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLGENVERTEXSHADERSEXTPROC = ?*const fn (GLuint) callconv(.C) GLuint;
pub const PFNGLDELETEVERTEXSHADEREXTPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLSHADEROP1EXTPROC = ?*const fn (GLenum, GLuint, GLuint) callconv(.C) void;
pub const PFNGLSHADEROP2EXTPROC = ?*const fn (GLenum, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLSHADEROP3EXTPROC = ?*const fn (GLenum, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLSWIZZLEEXTPROC = ?*const fn (GLuint, GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLWRITEMASKEXTPROC = ?*const fn (GLuint, GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLINSERTCOMPONENTEXTPROC = ?*const fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLEXTRACTCOMPONENTEXTPROC = ?*const fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLGENSYMBOLSEXTPROC = ?*const fn (GLenum, GLenum, GLenum, GLuint) callconv(.C) GLuint;
pub const PFNGLSETINVARIANTEXTPROC = ?*const fn (GLuint, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLSETLOCALCONSTANTEXTPROC = ?*const fn (GLuint, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLVARIANTBVEXTPROC = ?*const fn (GLuint, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLVARIANTSVEXTPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVARIANTIVEXTPROC = ?*const fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVARIANTFVEXTPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVARIANTDVEXTPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVARIANTUBVEXTPROC = ?*const fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLVARIANTUSVEXTPROC = ?*const fn (GLuint, [*c]const GLushort) callconv(.C) void;
pub const PFNGLVARIANTUIVEXTPROC = ?*const fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVARIANTPOINTEREXTPROC = ?*const fn (GLuint, GLenum, GLuint, ?*const anyopaque) callconv(.C) void;
pub const PFNGLENABLEVARIANTCLIENTSTATEEXTPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLBINDLIGHTPARAMETEREXTPROC = ?*const fn (GLenum, GLenum) callconv(.C) GLuint;
pub const PFNGLBINDMATERIALPARAMETEREXTPROC = ?*const fn (GLenum, GLenum) callconv(.C) GLuint;
pub const PFNGLBINDTEXGENPARAMETEREXTPROC = ?*const fn (GLenum, GLenum, GLenum) callconv(.C) GLuint;
pub const PFNGLBINDTEXTUREUNITPARAMETEREXTPROC = ?*const fn (GLenum, GLenum) callconv(.C) GLuint;
pub const PFNGLBINDPARAMETEREXTPROC = ?*const fn (GLenum) callconv(.C) GLuint;
pub const PFNGLISVARIANTENABLEDEXTPROC = ?*const fn (GLuint, GLenum) callconv(.C) GLboolean;
pub const PFNGLGETVARIANTBOOLEANVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLboolean) callconv(.C) void;
pub const PFNGLGETVARIANTINTEGERVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVARIANTFLOATVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETVARIANTPOINTERVEXTPROC = ?*const fn (GLuint, GLenum, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLGETINVARIANTBOOLEANVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLboolean) callconv(.C) void;
pub const PFNGLGETINVARIANTINTEGERVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETINVARIANTFLOATVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLboolean) callconv(.C) void;
pub const PFNGLGETLOCALCONSTANTINTEGERVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETLOCALCONSTANTFLOATVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLVERTEXWEIGHTFEXTPROC = ?*const fn (GLfloat) callconv(.C) void;
pub const PFNGLVERTEXWEIGHTFVEXTPROC = ?*const fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXWEIGHTPOINTEREXTPROC = ?*const fn (GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLACQUIREKEYEDMUTEXWIN32EXTPROC = ?*const fn (GLuint, GLuint64, GLuint) callconv(.C) GLboolean;
pub const PFNGLRELEASEKEYEDMUTEXWIN32EXTPROC = ?*const fn (GLuint, GLuint64) callconv(.C) GLboolean;
pub const PFNGLWINDOWRECTANGLESEXTPROC = ?*const fn (GLenum, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLIMPORTSYNCEXTPROC = ?*const fn (GLenum, GLintptr, GLbitfield) callconv(.C) GLsync;
pub const PFNGLFRAMETERMINATORGREMEDYPROC = ?*const fn () callconv(.C) void;
pub const PFNGLSTRINGMARKERGREMEDYPROC = ?*const fn (GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLIMAGETRANSFORMPARAMETERIHPPROC = ?*const fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLIMAGETRANSFORMPARAMETERFHPPROC = ?*const fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLIMAGETRANSFORMPARAMETERIVHPPROC = ?*const fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLIMAGETRANSFORMPARAMETERFVHPPROC = ?*const fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLMULTIMODEDRAWARRAYSIBMPROC = ?*const fn ([*c]const GLenum, [*c]const GLint, [*c]const GLsizei, GLsizei, GLint) callconv(.C) void;
pub const PFNGLMULTIMODEDRAWELEMENTSIBMPROC = ?*const fn ([*c]const GLenum, [*c]const GLsizei, GLenum, [*c]const ?*const anyopaque, GLsizei, GLint) callconv(.C) void;
pub const PFNGLFLUSHSTATICDATAIBMPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLCOLORPOINTERLISTIBMPROC = ?*const fn (GLint, GLenum, GLint, [*c]?*const anyopaque, GLint) callconv(.C) void;
pub const PFNGLSECONDARYCOLORPOINTERLISTIBMPROC = ?*const fn (GLint, GLenum, GLint, [*c]?*const anyopaque, GLint) callconv(.C) void;
pub const PFNGLEDGEFLAGPOINTERLISTIBMPROC = ?*const fn (GLint, [*c][*c]const GLboolean, GLint) callconv(.C) void;
pub const PFNGLFOGCOORDPOINTERLISTIBMPROC = ?*const fn (GLenum, GLint, [*c]?*const anyopaque, GLint) callconv(.C) void;
pub const PFNGLINDEXPOINTERLISTIBMPROC = ?*const fn (GLenum, GLint, [*c]?*const anyopaque, GLint) callconv(.C) void;
pub const PFNGLNORMALPOINTERLISTIBMPROC = ?*const fn (GLenum, GLint, [*c]?*const anyopaque, GLint) callconv(.C) void;
pub const PFNGLTEXCOORDPOINTERLISTIBMPROC = ?*const fn (GLint, GLenum, GLint, [*c]?*const anyopaque, GLint) callconv(.C) void;
pub const PFNGLVERTEXPOINTERLISTIBMPROC = ?*const fn (GLint, GLenum, GLint, [*c]?*const anyopaque, GLint) callconv(.C) void;
pub const PFNGLBLENDFUNCSEPARATEINGRPROC = ?*const fn (GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLAPPLYFRAMEBUFFERATTACHMENTCMAAINTELPROC = ?*const fn () callconv(.C) void;
pub const PFNGLSYNCTEXTUREINTELPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLUNMAPTEXTURE2DINTELPROC = ?*const fn (GLuint, GLint) callconv(.C) void;
pub const PFNGLMAPTEXTURE2DINTELPROC = ?*const fn (GLuint, GLint, GLbitfield, [*c]GLint, [*c]GLenum) callconv(.C) ?*anyopaque;
pub const PFNGLVERTEXPOINTERVINTELPROC = ?*const fn (GLint, GLenum, [*c]?*const anyopaque) callconv(.C) void;
pub const PFNGLNORMALPOINTERVINTELPROC = ?*const fn (GLenum, [*c]?*const anyopaque) callconv(.C) void;
pub const PFNGLCOLORPOINTERVINTELPROC = ?*const fn (GLint, GLenum, [*c]?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXCOORDPOINTERVINTELPROC = ?*const fn (GLint, GLenum, [*c]?*const anyopaque) callconv(.C) void;
pub const PFNGLBEGINPERFQUERYINTELPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLCREATEPERFQUERYINTELPROC = ?*const fn (GLuint, [*c]GLuint) callconv(.C) void;
pub const PFNGLDELETEPERFQUERYINTELPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLENDPERFQUERYINTELPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLGETFIRSTPERFQUERYIDINTELPROC = ?*const fn ([*c]GLuint) callconv(.C) void;
pub const PFNGLGETNEXTPERFQUERYIDINTELPROC = ?*const fn (GLuint, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETPERFCOUNTERINFOINTELPROC = ?*const fn (GLuint, GLuint, GLuint, [*c]GLchar, GLuint, [*c]GLchar, [*c]GLuint, [*c]GLuint, [*c]GLuint, [*c]GLuint, [*c]GLuint64) callconv(.C) void;
pub const PFNGLGETPERFQUERYDATAINTELPROC = ?*const fn (GLuint, GLuint, GLsizei, ?*anyopaque, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETPERFQUERYIDBYNAMEINTELPROC = ?*const fn ([*c]GLchar, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETPERFQUERYINFOINTELPROC = ?*const fn (GLuint, GLuint, [*c]GLchar, [*c]GLuint, [*c]GLuint, [*c]GLuint, [*c]GLuint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERPARAMETERIMESAPROC = ?*const fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLGETFRAMEBUFFERPARAMETERIVMESAPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLRESIZEBUFFERSMESAPROC = ?*const fn () callconv(.C) void;
pub const PFNGLWINDOWPOS2DMESAPROC = ?*const fn (GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS2DVMESAPROC = ?*const fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS2FMESAPROC = ?*const fn (GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS2FVMESAPROC = ?*const fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS2IMESAPROC = ?*const fn (GLint, GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS2IVMESAPROC = ?*const fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS2SMESAPROC = ?*const fn (GLshort, GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS2SVMESAPROC = ?*const fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS3DMESAPROC = ?*const fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS3DVMESAPROC = ?*const fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS3FMESAPROC = ?*const fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS3FVMESAPROC = ?*const fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS3IMESAPROC = ?*const fn (GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS3IVMESAPROC = ?*const fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS3SMESAPROC = ?*const fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS3SVMESAPROC = ?*const fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS4DMESAPROC = ?*const fn (GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS4DVMESAPROC = ?*const fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS4FMESAPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS4FVMESAPROC = ?*const fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS4IMESAPROC = ?*const fn (GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS4IVMESAPROC = ?*const fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS4SMESAPROC = ?*const fn (GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS4SVMESAPROC = ?*const fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLBEGINCONDITIONALRENDERNVXPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLENDCONDITIONALRENDERNVXPROC = ?*const fn () callconv(.C) void;
pub const PFNGLUPLOADGPUMASKNVXPROC = ?*const fn (GLbitfield) callconv(.C) void;
pub const PFNGLMULTICASTVIEWPORTARRAYVNVXPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTICASTVIEWPORTPOSITIONWSCALENVXPROC = ?*const fn (GLuint, GLuint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLMULTICASTSCISSORARRAYVNVXPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLASYNCCOPYBUFFERSUBDATANVXPROC = ?*const fn (GLsizei, [*c]const GLuint, [*c]const GLuint64, GLuint, GLbitfield, GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr, GLsizei, [*c]const GLuint, [*c]const GLuint64) callconv(.C) GLuint;
pub const PFNGLASYNCCOPYIMAGESUBDATANVXPROC = ?*const fn (GLsizei, [*c]const GLuint, [*c]const GLuint64, GLuint, GLbitfield, GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, [*c]const GLuint, [*c]const GLuint64) callconv(.C) GLuint;
pub const PFNGLLGPUNAMEDBUFFERSUBDATANVXPROC = ?*const fn (GLbitfield, GLuint, GLintptr, GLsizeiptr, ?*const anyopaque) callconv(.C) void;
pub const PFNGLLGPUCOPYIMAGESUBDATANVXPROC = ?*const fn (GLuint, GLbitfield, GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLLGPUINTERLOCKNVXPROC = ?*const fn () callconv(.C) void;
pub const PFNGLCREATEPROGRESSFENCENVXPROC = ?*const fn () callconv(.C) GLuint;
pub const PFNGLSIGNALSEMAPHOREUI64NVXPROC = ?*const fn (GLuint, GLsizei, [*c]const GLuint, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLWAITSEMAPHOREUI64NVXPROC = ?*const fn (GLuint, GLsizei, [*c]const GLuint, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLCLIENTWAITSEMAPHOREUI64NVXPROC = ?*const fn (GLsizei, [*c]const GLuint, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLALPHATOCOVERAGEDITHERCONTROLNVPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC = ?*const fn (GLenum, ?*const anyopaque, GLsizei, GLsizei, GLint) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC = ?*const fn (GLenum, GLenum, ?*const anyopaque, GLsizei, GLsizei, GLint) callconv(.C) void;
pub const PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC = ?*const fn (GLenum, ?*const anyopaque, GLsizei, GLsizei, GLsizei, GLint) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC = ?*const fn (GLenum, GLenum, ?*const anyopaque, GLsizei, GLsizei, GLsizei, GLint) callconv(.C) void;
pub const PFNGLGETTEXTUREHANDLENVPROC = ?*const fn (GLuint) callconv(.C) GLuint64;
pub const PFNGLGETTEXTURESAMPLERHANDLENVPROC = ?*const fn (GLuint, GLuint) callconv(.C) GLuint64;
pub const PFNGLMAKETEXTUREHANDLERESIDENTNVPROC = ?*const fn (GLuint64) callconv(.C) void;
pub const PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC = ?*const fn (GLuint64) callconv(.C) void;
pub const PFNGLGETIMAGEHANDLENVPROC = ?*const fn (GLuint, GLint, GLboolean, GLint, GLenum) callconv(.C) GLuint64;
pub const PFNGLMAKEIMAGEHANDLERESIDENTNVPROC = ?*const fn (GLuint64, GLenum) callconv(.C) void;
pub const PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC = ?*const fn (GLuint64) callconv(.C) void;
pub const PFNGLUNIFORMHANDLEUI64NVPROC = ?*const fn (GLint, GLuint64) callconv(.C) void;
pub const PFNGLUNIFORMHANDLEUI64VNVPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC = ?*const fn (GLuint, GLint, GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLISTEXTUREHANDLERESIDENTNVPROC = ?*const fn (GLuint64) callconv(.C) GLboolean;
pub const PFNGLISIMAGEHANDLERESIDENTNVPROC = ?*const fn (GLuint64) callconv(.C) GLboolean;
pub const PFNGLBLENDPARAMETERINVPROC = ?*const fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLBLENDBARRIERNVPROC = ?*const fn () callconv(.C) void;
pub const PFNGLVIEWPORTPOSITIONWSCALENVPROC = ?*const fn (GLuint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLCREATESTATESNVPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLDELETESTATESNVPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLISSTATENVPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLSTATECAPTURENVPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLGETCOMMANDHEADERNVPROC = ?*const fn (GLenum, GLuint) callconv(.C) GLuint;
pub const PFNGLGETSTAGEINDEXNVPROC = ?*const fn (GLenum) callconv(.C) GLushort;
pub const PFNGLDRAWCOMMANDSNVPROC = ?*const fn (GLenum, GLuint, [*c]const GLintptr, [*c]const GLsizei, GLuint) callconv(.C) void;
pub const PFNGLDRAWCOMMANDSADDRESSNVPROC = ?*const fn (GLenum, [*c]const GLuint64, [*c]const GLsizei, GLuint) callconv(.C) void;
pub const PFNGLDRAWCOMMANDSSTATESNVPROC = ?*const fn (GLuint, [*c]const GLintptr, [*c]const GLsizei, [*c]const GLuint, [*c]const GLuint, GLuint) callconv(.C) void;
pub const PFNGLDRAWCOMMANDSSTATESADDRESSNVPROC = ?*const fn ([*c]const GLuint64, [*c]const GLsizei, [*c]const GLuint, [*c]const GLuint, GLuint) callconv(.C) void;
pub const PFNGLCREATECOMMANDLISTSNVPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLDELETECOMMANDLISTSNVPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLISCOMMANDLISTNVPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLLISTDRAWCOMMANDSSTATESCLIENTNVPROC = ?*const fn (GLuint, GLuint, [*c]?*const anyopaque, [*c]const GLsizei, [*c]const GLuint, [*c]const GLuint, GLuint) callconv(.C) void;
pub const PFNGLCOMMANDLISTSEGMENTSNVPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLCOMPILECOMMANDLISTNVPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLCALLCOMMANDLISTNVPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLBEGINCONDITIONALRENDERNVPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLENDCONDITIONALRENDERNVPROC = ?*const fn () callconv(.C) void;
pub const PFNGLSUBPIXELPRECISIONBIASNVPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLCONSERVATIVERASTERPARAMETERFNVPROC = ?*const fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLCONSERVATIVERASTERPARAMETERINVPROC = ?*const fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLCOPYIMAGESUBDATANVPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLDEPTHRANGEDNVPROC = ?*const fn (GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLCLEARDEPTHDNVPROC = ?*const fn (GLdouble) callconv(.C) void;
pub const PFNGLDEPTHBOUNDSDNVPROC = ?*const fn (GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLDRAWTEXTURENVPROC = ?*const fn (GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const GLVULKANPROCNV = ?*const fn () callconv(.C) void;
pub const PFNGLDRAWVKIMAGENVPROC = ?*const fn (GLuint64, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLGETVKPROCADDRNVPROC = ?*const fn ([*c]const GLchar) callconv(.C) GLVULKANPROCNV;
pub const PFNGLWAITVKSEMAPHORENVPROC = ?*const fn (GLuint64) callconv(.C) void;
pub const PFNGLSIGNALVKSEMAPHORENVPROC = ?*const fn (GLuint64) callconv(.C) void;
pub const PFNGLSIGNALVKFENCENVPROC = ?*const fn (GLuint64) callconv(.C) void;
pub const PFNGLMAPCONTROLPOINTSNVPROC = ?*const fn (GLenum, GLuint, GLenum, GLsizei, GLsizei, GLint, GLint, GLboolean, ?*const anyopaque) callconv(.C) void;
pub const PFNGLMAPPARAMETERIVNVPROC = ?*const fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMAPPARAMETERFVNVPROC = ?*const fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLGETMAPCONTROLPOINTSNVPROC = ?*const fn (GLenum, GLuint, GLenum, GLsizei, GLsizei, GLboolean, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETMAPPARAMETERIVNVPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETMAPPARAMETERFVNVPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETMAPATTRIBPARAMETERIVNVPROC = ?*const fn (GLenum, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETMAPATTRIBPARAMETERFVNVPROC = ?*const fn (GLenum, GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLEVALMAPSNVPROC = ?*const fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLGETMULTISAMPLEFVNVPROC = ?*const fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLSAMPLEMASKINDEXEDNVPROC = ?*const fn (GLuint, GLbitfield) callconv(.C) void;
pub const PFNGLTEXRENDERBUFFERNVPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDELETEFENCESNVPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGENFENCESNVPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLISFENCENVPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLTESTFENCENVPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLGETFENCEIVNVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLFINISHFENCENVPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLSETFENCENVPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLFRAGMENTCOVERAGECOLORNVPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLPROGRAMNAMEDPARAMETER4FNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLubyte, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLubyte, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMNAMEDPARAMETER4DNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLubyte, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLubyte, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLubyte, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLubyte, [*c]GLdouble) callconv(.C) void;
pub const PFNGLCOVERAGEMODULATIONTABLENVPROC = ?*const fn (GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLGETCOVERAGEMODULATIONTABLENVPROC = ?*const fn (GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLCOVERAGEMODULATIONNVPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC = ?*const fn (GLenum, GLsizei, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLPROGRAMVERTEXLIMITNVPROC = ?*const fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTUREEXTPROC = ?*const fn (GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC = ?*const fn (GLenum, GLenum, GLuint, GLint, GLenum) callconv(.C) void;
pub const PFNGLRENDERGPUMASKNVPROC = ?*const fn (GLbitfield) callconv(.C) void;
pub const PFNGLMULTICASTBUFFERSUBDATANVPROC = ?*const fn (GLbitfield, GLuint, GLintptr, GLsizeiptr, ?*const anyopaque) callconv(.C) void;
pub const PFNGLMULTICASTCOPYBUFFERSUBDATANVPROC = ?*const fn (GLuint, GLbitfield, GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLMULTICASTCOPYIMAGESUBDATANVPROC = ?*const fn (GLuint, GLbitfield, GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTICASTBLITFRAMEBUFFERNVPROC = ?*const fn (GLuint, GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) callconv(.C) void;
pub const PFNGLMULTICASTFRAMEBUFFERSAMPLELOCATIONSFVNVPROC = ?*const fn (GLuint, GLuint, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTICASTBARRIERNVPROC = ?*const fn () callconv(.C) void;
pub const PFNGLMULTICASTWAITSYNCNVPROC = ?*const fn (GLuint, GLbitfield) callconv(.C) void;
pub const PFNGLMULTICASTGETQUERYOBJECTIVNVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLMULTICASTGETQUERYOBJECTUIVNVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLMULTICASTGETQUERYOBJECTI64VNVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]GLint64) callconv(.C) void;
pub const PFNGLMULTICASTGETQUERYOBJECTUI64VNVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETERI4INVPROC = ?*const fn (GLenum, GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC = ?*const fn (GLenum, GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETERI4UINVPROC = ?*const fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC = ?*const fn (GLenum, GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETERI4INVPROC = ?*const fn (GLenum, GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETERI4IVNVPROC = ?*const fn (GLenum, GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETERSI4IVNVPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETERI4UINVPROC = ?*const fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETERI4UIVNVPROC = ?*const fn (GLenum, GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC = ?*const fn (GLenum, GLuint, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC = ?*const fn (GLenum, GLuint, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETPROGRAMENVPARAMETERIIVNVPROC = ?*const fn (GLenum, GLuint, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC = ?*const fn (GLenum, GLuint, [*c]GLuint) callconv(.C) void;
pub const PFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC = ?*const fn (GLenum, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC = ?*const fn (GLenum, GLuint, [*c]GLuint) callconv(.C) void;
pub const GLhalfNV = c_ushort;
pub const PFNGLVERTEX2HNVPROC = ?*const fn (GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEX2HVNVPROC = ?*const fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEX3HNVPROC = ?*const fn (GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEX3HVNVPROC = ?*const fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEX4HNVPROC = ?*const fn (GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEX4HVNVPROC = ?*const fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLNORMAL3HNVPROC = ?*const fn (GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLNORMAL3HVNVPROC = ?*const fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLCOLOR3HNVPROC = ?*const fn (GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLCOLOR3HVNVPROC = ?*const fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLCOLOR4HNVPROC = ?*const fn (GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLCOLOR4HVNVPROC = ?*const fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLTEXCOORD1HNVPROC = ?*const fn (GLhalfNV) callconv(.C) void;
pub const PFNGLTEXCOORD1HVNVPROC = ?*const fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLTEXCOORD2HNVPROC = ?*const fn (GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLTEXCOORD2HVNVPROC = ?*const fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLTEXCOORD3HNVPROC = ?*const fn (GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLTEXCOORD3HVNVPROC = ?*const fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLTEXCOORD4HNVPROC = ?*const fn (GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLTEXCOORD4HVNVPROC = ?*const fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1HNVPROC = ?*const fn (GLenum, GLhalfNV) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1HVNVPROC = ?*const fn (GLenum, [*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2HNVPROC = ?*const fn (GLenum, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2HVNVPROC = ?*const fn (GLenum, [*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3HNVPROC = ?*const fn (GLenum, GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3HVNVPROC = ?*const fn (GLenum, [*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4HNVPROC = ?*const fn (GLenum, GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4HVNVPROC = ?*const fn (GLenum, [*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLFOGCOORDHNVPROC = ?*const fn (GLhalfNV) callconv(.C) void;
pub const PFNGLFOGCOORDHVNVPROC = ?*const fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3HNVPROC = ?*const fn (GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3HVNVPROC = ?*const fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXWEIGHTHNVPROC = ?*const fn (GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXWEIGHTHVNVPROC = ?*const fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1HNVPROC = ?*const fn (GLuint, GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1HVNVPROC = ?*const fn (GLuint, [*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2HNVPROC = ?*const fn (GLuint, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2HVNVPROC = ?*const fn (GLuint, [*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3HNVPROC = ?*const fn (GLuint, GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3HVNVPROC = ?*const fn (GLuint, [*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4HNVPROC = ?*const fn (GLuint, GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4HVNVPROC = ?*const fn (GLuint, [*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS1HVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS2HVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS3HVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS4HVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLGETINTERNALFORMATSAMPLEIVNVPROC = ?*const fn (GLenum, GLenum, GLsizei, GLenum, GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLGETMEMORYOBJECTDETACHEDRESOURCESUIVNVPROC = ?*const fn (GLuint, GLenum, GLint, GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLRESETMEMORYOBJECTPARAMETERNVPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLTEXATTACHMEMORYNVPROC = ?*const fn (GLenum, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLBUFFERATTACHMEMORYNVPROC = ?*const fn (GLenum, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXTUREATTACHMEMORYNVPROC = ?*const fn (GLuint, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLNAMEDBUFFERATTACHMEMORYNVPROC = ?*const fn (GLuint, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLBUFFERPAGECOMMITMENTMEMNVPROC = ?*const fn (GLenum, GLintptr, GLsizeiptr, GLuint, GLuint64, GLboolean) callconv(.C) void;
pub const PFNGLTEXPAGECOMMITMENTMEMNVPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLuint, GLuint64, GLboolean) callconv(.C) void;
pub const PFNGLNAMEDBUFFERPAGECOMMITMENTMEMNVPROC = ?*const fn (GLuint, GLintptr, GLsizeiptr, GLuint, GLuint64, GLboolean) callconv(.C) void;
pub const PFNGLTEXTUREPAGECOMMITMENTMEMNVPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLuint, GLuint64, GLboolean) callconv(.C) void;
pub const PFNGLDRAWMESHTASKSNVPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLDRAWMESHTASKSINDIRECTNVPROC = ?*const fn (GLintptr) callconv(.C) void;
pub const PFNGLMULTIDRAWMESHTASKSINDIRECTNVPROC = ?*const fn (GLintptr, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWMESHTASKSINDIRECTCOUNTNVPROC = ?*const fn (GLintptr, GLintptr, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLGENOCCLUSIONQUERIESNVPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLDELETEOCCLUSIONQUERIESNVPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLISOCCLUSIONQUERYNVPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLBEGINOCCLUSIONQUERYNVPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLENDOCCLUSIONQUERYNVPROC = ?*const fn () callconv(.C) void;
pub const PFNGLGETOCCLUSIONQUERYIVNVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETOCCLUSIONQUERYUIVNVPROC = ?*const fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC = ?*const fn (GLenum, GLuint, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC = ?*const fn (GLenum, GLuint, GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC = ?*const fn (GLenum, GLuint, GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGENPATHSNVPROC = ?*const fn (GLsizei) callconv(.C) GLuint;
pub const PFNGLDELETEPATHSNVPROC = ?*const fn (GLuint, GLsizei) callconv(.C) void;
pub const PFNGLISPATHNVPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLPATHCOMMANDSNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLubyte, GLsizei, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLPATHCOORDSNVPROC = ?*const fn (GLuint, GLsizei, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLPATHSUBCOMMANDSNVPROC = ?*const fn (GLuint, GLsizei, GLsizei, GLsizei, [*c]const GLubyte, GLsizei, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLPATHSUBCOORDSNVPROC = ?*const fn (GLuint, GLsizei, GLsizei, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLPATHSTRINGNVPROC = ?*const fn (GLuint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLPATHGLYPHSNVPROC = ?*const fn (GLuint, GLenum, ?*const anyopaque, GLbitfield, GLsizei, GLenum, ?*const anyopaque, GLenum, GLuint, GLfloat) callconv(.C) void;
pub const PFNGLPATHGLYPHRANGENVPROC = ?*const fn (GLuint, GLenum, ?*const anyopaque, GLbitfield, GLuint, GLsizei, GLenum, GLuint, GLfloat) callconv(.C) void;
pub const PFNGLWEIGHTPATHSNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCOPYPATHNVPROC = ?*const fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLINTERPOLATEPATHSNVPROC = ?*const fn (GLuint, GLuint, GLuint, GLfloat) callconv(.C) void;
pub const PFNGLTRANSFORMPATHNVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPATHPARAMETERIVNVPROC = ?*const fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLPATHPARAMETERINVPROC = ?*const fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLPATHPARAMETERFVNVPROC = ?*const fn (GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPATHPARAMETERFNVPROC = ?*const fn (GLuint, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLPATHDASHARRAYNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPATHSTENCILFUNCNVPROC = ?*const fn (GLenum, GLint, GLuint) callconv(.C) void;
pub const PFNGLPATHSTENCILDEPTHOFFSETNVPROC = ?*const fn (GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLSTENCILFILLPATHNVPROC = ?*const fn (GLuint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLSTENCILSTROKEPATHNVPROC = ?*const fn (GLuint, GLint, GLuint) callconv(.C) void;
pub const PFNGLSTENCILFILLPATHINSTANCEDNVPROC = ?*const fn (GLsizei, GLenum, ?*const anyopaque, GLuint, GLenum, GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC = ?*const fn (GLsizei, GLenum, ?*const anyopaque, GLuint, GLint, GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPATHCOVERDEPTHFUNCNVPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLCOVERFILLPATHNVPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLCOVERSTROKEPATHNVPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLCOVERFILLPATHINSTANCEDNVPROC = ?*const fn (GLsizei, GLenum, ?*const anyopaque, GLuint, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCOVERSTROKEPATHINSTANCEDNVPROC = ?*const fn (GLsizei, GLenum, ?*const anyopaque, GLuint, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLGETPATHPARAMETERIVNVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPATHPARAMETERFVNVPROC = ?*const fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPATHCOMMANDSNVPROC = ?*const fn (GLuint, [*c]GLubyte) callconv(.C) void;
pub const PFNGLGETPATHCOORDSNVPROC = ?*const fn (GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPATHDASHARRAYNVPROC = ?*const fn (GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPATHMETRICSNVPROC = ?*const fn (GLbitfield, GLsizei, GLenum, ?*const anyopaque, GLuint, GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPATHMETRICRANGENVPROC = ?*const fn (GLbitfield, GLuint, GLsizei, GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPATHSPACINGNVPROC = ?*const fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLuint, GLfloat, GLfloat, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLISPOINTINFILLPATHNVPROC = ?*const fn (GLuint, GLuint, GLfloat, GLfloat) callconv(.C) GLboolean;
pub const PFNGLISPOINTINSTROKEPATHNVPROC = ?*const fn (GLuint, GLfloat, GLfloat) callconv(.C) GLboolean;
pub const PFNGLGETPATHLENGTHNVPROC = ?*const fn (GLuint, GLsizei, GLsizei) callconv(.C) GLfloat;
pub const PFNGLPOINTALONGPATHNVPROC = ?*const fn (GLuint, GLsizei, GLsizei, GLfloat, [*c]GLfloat, [*c]GLfloat, [*c]GLfloat, [*c]GLfloat) callconv(.C) GLboolean;
pub const PFNGLMATRIXLOAD3X2FNVPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATRIXLOAD3X3FNVPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATRIXMULT3X2FNVPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATRIXMULT3X3FNVPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLSTENCILTHENCOVERFILLPATHNVPROC = ?*const fn (GLuint, GLenum, GLuint, GLenum) callconv(.C) void;
pub const PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC = ?*const fn (GLuint, GLint, GLuint, GLenum) callconv(.C) void;
pub const PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC = ?*const fn (GLsizei, GLenum, ?*const anyopaque, GLuint, GLenum, GLuint, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC = ?*const fn (GLsizei, GLenum, ?*const anyopaque, GLuint, GLint, GLuint, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPATHGLYPHINDEXRANGENVPROC = ?*const fn (GLenum, ?*const anyopaque, GLbitfield, GLuint, GLfloat, [*c]GLuint) callconv(.C) GLenum;
pub const PFNGLPATHGLYPHINDEXARRAYNVPROC = ?*const fn (GLuint, GLenum, ?*const anyopaque, GLbitfield, GLuint, GLsizei, GLuint, GLfloat) callconv(.C) GLenum;
pub const PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC = ?*const fn (GLuint, GLenum, GLsizeiptr, ?*const anyopaque, GLsizei, GLuint, GLsizei, GLuint, GLfloat) callconv(.C) GLenum;
pub const PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC = ?*const fn (GLuint, GLint, GLenum, GLint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLGETPROGRAMRESOURCEFVNVPROC = ?*const fn (GLuint, GLenum, GLuint, GLsizei, [*c]const GLenum, GLsizei, [*c]GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLPATHCOLORGENNVPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPATHTEXGENNVPROC = ?*const fn (GLenum, GLenum, GLint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPATHFOGGENNVPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLGETPATHCOLORGENIVNVPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPATHCOLORGENFVNVPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPATHTEXGENIVNVPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPATHTEXGENFVNVPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLPIXELDATARANGENVPROC = ?*const fn (GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLFLUSHPIXELDATARANGENVPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLPOINTPARAMETERINVPROC = ?*const fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLPOINTPARAMETERIVNVPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLPRESENTFRAMEKEYEDNVPROC = ?*const fn (GLuint, GLuint64EXT, GLuint, GLuint, GLenum, GLenum, GLuint, GLuint, GLenum, GLuint, GLuint) callconv(.C) void;
pub const PFNGLPRESENTFRAMEDUALFILLNVPROC = ?*const fn (GLuint, GLuint64EXT, GLuint, GLuint, GLenum, GLenum, GLuint, GLenum, GLuint, GLenum, GLuint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLGETVIDEOIVNVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVIDEOUIVNVPROC = ?*const fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETVIDEOI64VNVPROC = ?*const fn (GLuint, GLenum, [*c]GLint64EXT) callconv(.C) void;
pub const PFNGLGETVIDEOUI64VNVPROC = ?*const fn (GLuint, GLenum, [*c]GLuint64EXT) callconv(.C) void;
pub const PFNGLPRIMITIVERESTARTNVPROC = ?*const fn () callconv(.C) void;
pub const PFNGLPRIMITIVERESTARTINDEXNVPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLQUERYRESOURCENVPROC = ?*const fn (GLenum, GLint, GLuint, [*c]GLint) callconv(.C) GLint;
pub const PFNGLGENQUERYRESOURCETAGNVPROC = ?*const fn (GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLDELETEQUERYRESOURCETAGNVPROC = ?*const fn (GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLQUERYRESOURCETAGNVPROC = ?*const fn (GLint, [*c]const GLchar) callconv(.C) void;
pub const PFNGLCOMBINERPARAMETERFVNVPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCOMBINERPARAMETERFNVPROC = ?*const fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLCOMBINERPARAMETERIVNVPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLCOMBINERPARAMETERINVPROC = ?*const fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLCOMBINERINPUTNVPROC = ?*const fn (GLenum, GLenum, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLCOMBINEROUTPUTNVPROC = ?*const fn (GLenum, GLenum, GLenum, GLenum, GLenum, GLenum, GLenum, GLboolean, GLboolean, GLboolean) callconv(.C) void;
pub const PFNGLFINALCOMBINERINPUTNVPROC = ?*const fn (GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC = ?*const fn (GLenum, GLenum, GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC = ?*const fn (GLenum, GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLCOMBINERSTAGEPARAMETERFVNVPROC = ?*const fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLRESOLVEDEPTHVALUESNVPROC = ?*const fn () callconv(.C) void;
pub const PFNGLSCISSOREXCLUSIVENVPROC = ?*const fn (GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLSCISSOREXCLUSIVEARRAYVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLMAKEBUFFERRESIDENTNVPROC = ?*const fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLMAKEBUFFERNONRESIDENTNVPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLISBUFFERRESIDENTNVPROC = ?*const fn (GLenum) callconv(.C) GLboolean;
pub const PFNGLMAKENAMEDBUFFERRESIDENTNVPROC = ?*const fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLISNAMEDBUFFERRESIDENTNVPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLGETBUFFERPARAMETERUI64VNVPROC = ?*const fn (GLenum, GLenum, [*c]GLuint64EXT) callconv(.C) void;
pub const PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC = ?*const fn (GLuint, GLenum, [*c]GLuint64EXT) callconv(.C) void;
pub const PFNGLGETINTEGERUI64VNVPROC = ?*const fn (GLenum, [*c]GLuint64EXT) callconv(.C) void;
pub const PFNGLUNIFORMUI64NVPROC = ?*const fn (GLint, GLuint64EXT) callconv(.C) void;
pub const PFNGLUNIFORMUI64VNVPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMUI64NVPROC = ?*const fn (GLuint, GLint, GLuint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMUI64VNVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLBINDSHADINGRATEIMAGENVPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLGETSHADINGRATEIMAGEPALETTENVPROC = ?*const fn (GLuint, GLuint, [*c]GLenum) callconv(.C) void;
pub const PFNGLGETSHADINGRATESAMPLELOCATIONIVNVPROC = ?*const fn (GLenum, GLuint, GLuint, [*c]GLint) callconv(.C) void;
pub const PFNGLSHADINGRATEIMAGEBARRIERNVPROC = ?*const fn (GLboolean) callconv(.C) void;
pub const PFNGLSHADINGRATEIMAGEPALETTENVPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]const GLenum) callconv(.C) void;
pub const PFNGLSHADINGRATESAMPLEORDERNVPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLSHADINGRATESAMPLEORDERCUSTOMNVPROC = ?*const fn (GLenum, GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLTEXTUREBARRIERNVPROC = ?*const fn () callconv(.C) void;
pub const PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC = ?*const fn (GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC = ?*const fn (GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC = ?*const fn (GLuint, GLenum, GLsizei, GLint, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC = ?*const fn (GLuint, GLenum, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC = ?*const fn (GLuint, GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC = ?*const fn (GLuint, GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLCREATESEMAPHORESNVPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLSEMAPHOREPARAMETERIVNVPROC = ?*const fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLGETSEMAPHOREPARAMETERIVNVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLBEGINTRANSFORMFEEDBACKNVPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLENDTRANSFORMFEEDBACKNVPROC = ?*const fn () callconv(.C) void;
pub const PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC = ?*const fn (GLsizei, [*c]const GLint, GLenum) callconv(.C) void;
pub const PFNGLBINDBUFFERRANGENVPROC = ?*const fn (GLenum, GLuint, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLBINDBUFFEROFFSETNVPROC = ?*const fn (GLenum, GLuint, GLuint, GLintptr) callconv(.C) void;
pub const PFNGLBINDBUFFERBASENVPROC = ?*const fn (GLenum, GLuint, GLuint) callconv(.C) void;
pub const PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLint, GLenum) callconv(.C) void;
pub const PFNGLACTIVEVARYINGNVPROC = ?*const fn (GLuint, [*c]const GLchar) callconv(.C) void;
pub const PFNGLGETVARYINGLOCATIONNVPROC = ?*const fn (GLuint, [*c]const GLchar) callconv(.C) GLint;
pub const PFNGLGETACTIVEVARYINGNVPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLsizei, [*c]GLenum, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC = ?*const fn (GLuint, GLuint, [*c]GLint) callconv(.C) void;
pub const PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC = ?*const fn (GLsizei, [*c]const GLint, GLsizei, [*c]const GLint, GLenum) callconv(.C) void;
pub const PFNGLBINDTRANSFORMFEEDBACKNVPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDELETETRANSFORMFEEDBACKSNVPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLGENTRANSFORMFEEDBACKSNVPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLISTRANSFORMFEEDBACKNVPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLPAUSETRANSFORMFEEDBACKNVPROC = ?*const fn () callconv(.C) void;
pub const PFNGLRESUMETRANSFORMFEEDBACKNVPROC = ?*const fn () callconv(.C) void;
pub const PFNGLDRAWTRANSFORMFEEDBACKNVPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const GLvdpauSurfaceNV = GLintptr;
pub const PFNGLVDPAUINITNVPROC = ?*const fn (?*const anyopaque, ?*const anyopaque) callconv(.C) void;
pub const PFNGLVDPAUFININVPROC = ?*const fn () callconv(.C) void;
pub const PFNGLVDPAUREGISTERVIDEOSURFACENVPROC = ?*const fn (?*const anyopaque, GLenum, GLsizei, [*c]const GLuint) callconv(.C) GLvdpauSurfaceNV;
pub const PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC = ?*const fn (?*const anyopaque, GLenum, GLsizei, [*c]const GLuint) callconv(.C) GLvdpauSurfaceNV;
pub const PFNGLVDPAUISSURFACENVPROC = ?*const fn (GLvdpauSurfaceNV) callconv(.C) GLboolean;
pub const PFNGLVDPAUUNREGISTERSURFACENVPROC = ?*const fn (GLvdpauSurfaceNV) callconv(.C) void;
pub const PFNGLVDPAUGETSURFACEIVNVPROC = ?*const fn (GLvdpauSurfaceNV, GLenum, GLsizei, [*c]GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLVDPAUSURFACEACCESSNVPROC = ?*const fn (GLvdpauSurfaceNV, GLenum) callconv(.C) void;
pub const PFNGLVDPAUMAPSURFACESNVPROC = ?*const fn (GLsizei, [*c]const GLvdpauSurfaceNV) callconv(.C) void;
pub const PFNGLVDPAUUNMAPSURFACESNVPROC = ?*const fn (GLsizei, [*c]const GLvdpauSurfaceNV) callconv(.C) void;
pub const PFNGLVDPAUREGISTERVIDEOSURFACEWITHPICTURESTRUCTURENVPROC = ?*const fn (?*const anyopaque, GLenum, GLsizei, [*c]const GLuint, GLboolean) callconv(.C) GLvdpauSurfaceNV;
pub const PFNGLFLUSHVERTEXARRAYRANGENVPROC = ?*const fn () callconv(.C) void;
pub const PFNGLVERTEXARRAYRANGENVPROC = ?*const fn (GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL1I64NVPROC = ?*const fn (GLuint, GLint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL2I64NVPROC = ?*const fn (GLuint, GLint64EXT, GLint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL3I64NVPROC = ?*const fn (GLuint, GLint64EXT, GLint64EXT, GLint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL4I64NVPROC = ?*const fn (GLuint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL1I64VNVPROC = ?*const fn (GLuint, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL2I64VNVPROC = ?*const fn (GLuint, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL3I64VNVPROC = ?*const fn (GLuint, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL4I64VNVPROC = ?*const fn (GLuint, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL1UI64NVPROC = ?*const fn (GLuint, GLuint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL2UI64NVPROC = ?*const fn (GLuint, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL3UI64NVPROC = ?*const fn (GLuint, GLuint64EXT, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL4UI64NVPROC = ?*const fn (GLuint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL1UI64VNVPROC = ?*const fn (GLuint, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL2UI64VNVPROC = ?*const fn (GLuint, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL3UI64VNVPROC = ?*const fn (GLuint, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL4UI64VNVPROC = ?*const fn (GLuint, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBLI64VNVPROC = ?*const fn (GLuint, GLenum, [*c]GLint64EXT) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBLUI64VNVPROC = ?*const fn (GLuint, GLenum, [*c]GLuint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBLFORMATNVPROC = ?*const fn (GLuint, GLint, GLenum, GLsizei) callconv(.C) void;
pub const PFNGLBUFFERADDRESSRANGENVPROC = ?*const fn (GLenum, GLuint, GLuint64EXT, GLsizeiptr) callconv(.C) void;
pub const PFNGLVERTEXFORMATNVPROC = ?*const fn (GLint, GLenum, GLsizei) callconv(.C) void;
pub const PFNGLNORMALFORMATNVPROC = ?*const fn (GLenum, GLsizei) callconv(.C) void;
pub const PFNGLCOLORFORMATNVPROC = ?*const fn (GLint, GLenum, GLsizei) callconv(.C) void;
pub const PFNGLINDEXFORMATNVPROC = ?*const fn (GLenum, GLsizei) callconv(.C) void;
pub const PFNGLTEXCOORDFORMATNVPROC = ?*const fn (GLint, GLenum, GLsizei) callconv(.C) void;
pub const PFNGLEDGEFLAGFORMATNVPROC = ?*const fn (GLsizei) callconv(.C) void;
pub const PFNGLSECONDARYCOLORFORMATNVPROC = ?*const fn (GLint, GLenum, GLsizei) callconv(.C) void;
pub const PFNGLFOGCOORDFORMATNVPROC = ?*const fn (GLenum, GLsizei) callconv(.C) void;
pub const PFNGLVERTEXATTRIBFORMATNVPROC = ?*const fn (GLuint, GLint, GLenum, GLboolean, GLsizei) callconv(.C) void;
pub const PFNGLVERTEXATTRIBIFORMATNVPROC = ?*const fn (GLuint, GLint, GLenum, GLsizei) callconv(.C) void;
pub const PFNGLGETINTEGERUI64I_VNVPROC = ?*const fn (GLenum, GLuint, [*c]GLuint64EXT) callconv(.C) void;
pub const PFNGLAREPROGRAMSRESIDENTNVPROC = ?*const fn (GLsizei, [*c]const GLuint, [*c]GLboolean) callconv(.C) GLboolean;
pub const PFNGLBINDPROGRAMNVPROC = ?*const fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDELETEPROGRAMSNVPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLEXECUTEPROGRAMNVPROC = ?*const fn (GLenum, GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLGENPROGRAMSNVPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETPROGRAMPARAMETERDVNVPROC = ?*const fn (GLenum, GLuint, GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETPROGRAMPARAMETERFVNVPROC = ?*const fn (GLenum, GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPROGRAMIVNVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPROGRAMSTRINGNVPROC = ?*const fn (GLuint, GLenum, [*c]GLubyte) callconv(.C) void;
pub const PFNGLGETTRACKMATRIXIVNVPROC = ?*const fn (GLenum, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBDVNVPROC = ?*const fn (GLuint, GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBFVNVPROC = ?*const fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBIVNVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBPOINTERVNVPROC = ?*const fn (GLuint, GLenum, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLISPROGRAMNVPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLLOADPROGRAMNVPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLPROGRAMPARAMETER4DNVPROC = ?*const fn (GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMPARAMETER4DVNVPROC = ?*const fn (GLenum, GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMPARAMETER4FNVPROC = ?*const fn (GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMPARAMETER4FVNVPROC = ?*const fn (GLenum, GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMPARAMETERS4DVNVPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMPARAMETERS4FVNVPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLREQUESTRESIDENTPROGRAMSNVPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLTRACKMATRIXNVPROC = ?*const fn (GLenum, GLuint, GLenum, GLenum) callconv(.C) void;
pub const PFNGLVERTEXATTRIBPOINTERNVPROC = ?*const fn (GLuint, GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1DNVPROC = ?*const fn (GLuint, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1DVNVPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1FNVPROC = ?*const fn (GLuint, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1FVNVPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1SNVPROC = ?*const fn (GLuint, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1SVNVPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2DNVPROC = ?*const fn (GLuint, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2DVNVPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2FNVPROC = ?*const fn (GLuint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2FVNVPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2SNVPROC = ?*const fn (GLuint, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2SVNVPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3DNVPROC = ?*const fn (GLuint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3DVNVPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3FNVPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3FVNVPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3SNVPROC = ?*const fn (GLuint, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3SVNVPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4DNVPROC = ?*const fn (GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4DVNVPROC = ?*const fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4FNVPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4FVNVPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4SNVPROC = ?*const fn (GLuint, GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4SVNVPROC = ?*const fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4UBNVPROC = ?*const fn (GLuint, GLubyte, GLubyte, GLubyte, GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4UBVNVPROC = ?*const fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS1DVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS1FVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS1SVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS2DVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS2FVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS2SVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS3DVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS3FVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS3SVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS4DVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS4FVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS4SVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS4UBVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLBEGINVIDEOCAPTURENVPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC = ?*const fn (GLuint, GLuint, GLenum, GLintptrARB) callconv(.C) void;
pub const PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC = ?*const fn (GLuint, GLuint, GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLENDVIDEOCAPTURENVPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLGETVIDEOCAPTUREIVNVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVIDEOCAPTURESTREAMIVNVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVIDEOCAPTURESTREAMFVNVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETVIDEOCAPTURESTREAMDVNVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLVIDEOCAPTURENVPROC = ?*const fn (GLuint, [*c]GLuint, [*c]GLuint64EXT) callconv(.C) GLenum;
pub const PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVIEWPORTSWIZZLENVPROC = ?*const fn (GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC = ?*const fn (GLenum, GLenum, GLuint, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLHINTPGIPROC = ?*const fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLDETAILTEXFUNCSGISPROC = ?*const fn (GLenum, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLGETDETAILTEXFUNCSGISPROC = ?*const fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLFOGFUNCSGISPROC = ?*const fn (GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLGETFOGFUNCSGISPROC = ?*const fn ([*c]GLfloat) callconv(.C) void;
pub const PFNGLSAMPLEMASKSGISPROC = ?*const fn (GLclampf, GLboolean) callconv(.C) void;
pub const PFNGLSAMPLEPATTERNSGISPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLPIXELTEXGENPARAMETERISGISPROC = ?*const fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLPIXELTEXGENPARAMETERIVSGISPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLPIXELTEXGENPARAMETERFSGISPROC = ?*const fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLPIXELTEXGENPARAMETERFVSGISPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC = ?*const fn (GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC = ?*const fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLPOINTPARAMETERFSGISPROC = ?*const fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLPOINTPARAMETERFVSGISPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLSHARPENTEXFUNCSGISPROC = ?*const fn (GLenum, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLGETSHARPENTEXFUNCSGISPROC = ?*const fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLTEXIMAGE4DSGISPROC = ?*const fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXSUBIMAGE4DSGISPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXTURECOLORMASKSGISPROC = ?*const fn (GLboolean, GLboolean, GLboolean, GLboolean) callconv(.C) void;
pub const PFNGLGETTEXFILTERFUNCSGISPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLTEXFILTERFUNCSGISPROC = ?*const fn (GLenum, GLenum, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLASYNCMARKERSGIXPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLFINISHASYNCSGIXPROC = ?*const fn ([*c]GLuint) callconv(.C) GLint;
pub const PFNGLPOLLASYNCSGIXPROC = ?*const fn ([*c]GLuint) callconv(.C) GLint;
pub const PFNGLGENASYNCMARKERSSGIXPROC = ?*const fn (GLsizei) callconv(.C) GLuint;
pub const PFNGLDELETEASYNCMARKERSSGIXPROC = ?*const fn (GLuint, GLsizei) callconv(.C) void;
pub const PFNGLISASYNCMARKERSGIXPROC = ?*const fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLFLUSHRASTERSGIXPROC = ?*const fn () callconv(.C) void;
pub const PFNGLFRAGMENTCOLORMATERIALSGIXPROC = ?*const fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLFRAGMENTLIGHTFSGIXPROC = ?*const fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLFRAGMENTLIGHTFVSGIXPROC = ?*const fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLFRAGMENTLIGHTISGIXPROC = ?*const fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLFRAGMENTLIGHTIVSGIXPROC = ?*const fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLFRAGMENTLIGHTMODELFSGIXPROC = ?*const fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLFRAGMENTLIGHTMODELFVSGIXPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLFRAGMENTLIGHTMODELISGIXPROC = ?*const fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLFRAGMENTLIGHTMODELIVSGIXPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLFRAGMENTMATERIALFSGIXPROC = ?*const fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLFRAGMENTMATERIALFVSGIXPROC = ?*const fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLFRAGMENTMATERIALISGIXPROC = ?*const fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLFRAGMENTMATERIALIVSGIXPROC = ?*const fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLGETFRAGMENTLIGHTFVSGIXPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETFRAGMENTLIGHTIVSGIXPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETFRAGMENTMATERIALFVSGIXPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETFRAGMENTMATERIALIVSGIXPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLLIGHTENVISGIXPROC = ?*const fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLFRAMEZOOMSGIXPROC = ?*const fn (GLint) callconv(.C) void;
pub const PFNGLIGLOOINTERFACESGIXPROC = ?*const fn (GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLGETINSTRUMENTSSGIXPROC = ?*const fn () callconv(.C) GLint;
pub const PFNGLINSTRUMENTSBUFFERSGIXPROC = ?*const fn (GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLPOLLINSTRUMENTSSGIXPROC = ?*const fn ([*c]GLint) callconv(.C) GLint;
pub const PFNGLREADINSTRUMENTSSGIXPROC = ?*const fn (GLint) callconv(.C) void;
pub const PFNGLSTARTINSTRUMENTSSGIXPROC = ?*const fn () callconv(.C) void;
pub const PFNGLSTOPINSTRUMENTSSGIXPROC = ?*const fn (GLint) callconv(.C) void;
pub const PFNGLGETLISTPARAMETERFVSGIXPROC = ?*const fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETLISTPARAMETERIVSGIXPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLLISTPARAMETERFSGIXPROC = ?*const fn (GLuint, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLLISTPARAMETERFVSGIXPROC = ?*const fn (GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLLISTPARAMETERISGIXPROC = ?*const fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLLISTPARAMETERIVSGIXPROC = ?*const fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLPIXELTEXGENSGIXPROC = ?*const fn (GLenum) callconv(.C) void;
pub const PFNGLDEFORMATIONMAP3DSGIXPROC = ?*const fn (GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLDEFORMATIONMAP3FSGIXPROC = ?*const fn (GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLDEFORMSGIXPROC = ?*const fn (GLbitfield) callconv(.C) void;
pub const PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC = ?*const fn (GLbitfield) callconv(.C) void;
pub const PFNGLREFERENCEPLANESGIXPROC = ?*const fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLSPRITEPARAMETERFSGIXPROC = ?*const fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLSPRITEPARAMETERFVSGIXPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLSPRITEPARAMETERISGIXPROC = ?*const fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLSPRITEPARAMETERIVSGIXPROC = ?*const fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLTAGSAMPLEBUFFERSGIXPROC = ?*const fn () callconv(.C) void;
pub const PFNGLCOLORTABLESGIPROC = ?*const fn (GLenum, GLenum, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOLORTABLEPARAMETERFVSGIPROC = ?*const fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCOLORTABLEPARAMETERIVSGIPROC = ?*const fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLCOPYCOLORTABLESGIPROC = ?*const fn (GLenum, GLenum, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLGETCOLORTABLESGIPROC = ?*const fn (GLenum, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETCOLORTABLEPARAMETERFVSGIPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETCOLORTABLEPARAMETERIVSGIPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLFINISHTEXTURESUNXPROC = ?*const fn () callconv(.C) void;
pub const PFNGLGLOBALALPHAFACTORBSUNPROC = ?*const fn (GLbyte) callconv(.C) void;
pub const PFNGLGLOBALALPHAFACTORSSUNPROC = ?*const fn (GLshort) callconv(.C) void;
pub const PFNGLGLOBALALPHAFACTORISUNPROC = ?*const fn (GLint) callconv(.C) void;
pub const PFNGLGLOBALALPHAFACTORFSUNPROC = ?*const fn (GLfloat) callconv(.C) void;
pub const PFNGLGLOBALALPHAFACTORDSUNPROC = ?*const fn (GLdouble) callconv(.C) void;
pub const PFNGLGLOBALALPHAFACTORUBSUNPROC = ?*const fn (GLubyte) callconv(.C) void;
pub const PFNGLGLOBALALPHAFACTORUSSUNPROC = ?*const fn (GLushort) callconv(.C) void;
pub const PFNGLGLOBALALPHAFACTORUISUNPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLDRAWMESHARRAYSSUNPROC = ?*const fn (GLenum, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUISUNPROC = ?*const fn (GLuint) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUSSUNPROC = ?*const fn (GLushort) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUBSUNPROC = ?*const fn (GLubyte) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUIVSUNPROC = ?*const fn ([*c]const GLuint) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUSVSUNPROC = ?*const fn ([*c]const GLushort) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUBVSUNPROC = ?*const fn ([*c]const GLubyte) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEPOINTERSUNPROC = ?*const fn (GLenum, GLsizei, [*c]?*const anyopaque) callconv(.C) void;
pub const PFNGLCOLOR4UBVERTEX2FSUNPROC = ?*const fn (GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLCOLOR4UBVERTEX2FVSUNPROC = ?*const fn ([*c]const GLubyte, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCOLOR4UBVERTEX3FSUNPROC = ?*const fn (GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLCOLOR4UBVERTEX3FVSUNPROC = ?*const fn ([*c]const GLubyte, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCOLOR3FVERTEX3FSUNPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLCOLOR3FVERTEX3FVSUNPROC = ?*const fn ([*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLNORMAL3FVERTEX3FSUNPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLNORMAL3FVERTEX3FVSUNPROC = ?*const fn ([*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC = ?*const fn ([*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FVERTEX3FSUNPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FVERTEX3FVSUNPROC = ?*const fn ([*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD4FVERTEX4FSUNPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD4FVERTEX4FVSUNPROC = ?*const fn ([*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC = ?*const fn (GLfloat, GLfloat, GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC = ?*const fn ([*c]const GLfloat, [*c]const GLubyte, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC = ?*const fn ([*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC = ?*const fn ([*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC = ?*const fn ([*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC = ?*const fn ([*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC = ?*const fn ([*c]const GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC = ?*const fn (GLuint, GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC = ?*const fn ([*c]const GLuint, [*c]const GLubyte, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC = ?*const fn ([*c]const GLuint, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC = ?*const fn ([*c]const GLuint, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC = ?*const fn ([*c]const GLuint, [*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC = ?*const fn ([*c]const GLuint, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC = ?*const fn ([*c]const GLuint, [*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC = ?*const fn ([*c]const GLuint, [*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub extern fn glBlendEquationSeparateATI(modeRGB: GLenum, modeA: GLenum) void;
pub const PFNGLBLENDEQUATIONSEPARATEATIPROC = ?*const fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLEGLIMAGETARGETTEXTURE2DOESPROC = ?*const fn (GLenum, GLeglImageOES) callconv(.C) void;
pub const PFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC = ?*const fn (GLenum, GLeglImageOES) callconv(.C) void;
pub const GLFWglproc = ?*const fn () callconv(.C) void;
pub const GLFWvkproc = ?*const fn () callconv(.C) void;
pub const struct_GLFWmonitor = opaque {};
pub const GLFWmonitor = struct_GLFWmonitor;
pub const struct_GLFWwindow = opaque {};
pub const GLFWwindow = struct_GLFWwindow;
pub const struct_GLFWcursor = opaque {};
pub const GLFWcursor = struct_GLFWcursor;
pub const GLFWallocatefun = ?*const fn (usize, ?*anyopaque) callconv(.C) ?*anyopaque;
pub const GLFWreallocatefun = ?*const fn (?*anyopaque, usize, ?*anyopaque) callconv(.C) ?*anyopaque;
pub const GLFWdeallocatefun = ?*const fn (?*anyopaque, ?*anyopaque) callconv(.C) void;
pub const GLFWerrorfun = ?*const fn (c_int, [*c]const u8) callconv(.C) void;
pub const GLFWwindowposfun = ?*const fn (?*GLFWwindow, c_int, c_int) callconv(.C) void;
pub const GLFWwindowsizefun = ?*const fn (?*GLFWwindow, c_int, c_int) callconv(.C) void;
pub const GLFWwindowclosefun = ?*const fn (?*GLFWwindow) callconv(.C) void;
pub const GLFWwindowrefreshfun = ?*const fn (?*GLFWwindow) callconv(.C) void;
pub const GLFWwindowfocusfun = ?*const fn (?*GLFWwindow, c_int) callconv(.C) void;
pub const GLFWwindowiconifyfun = ?*const fn (?*GLFWwindow, c_int) callconv(.C) void;
pub const GLFWwindowmaximizefun = ?*const fn (?*GLFWwindow, c_int) callconv(.C) void;
pub const GLFWframebuffersizefun = ?*const fn (?*GLFWwindow, c_int, c_int) callconv(.C) void;
pub const GLFWwindowcontentscalefun = ?*const fn (?*GLFWwindow, f32, f32) callconv(.C) void;
pub const GLFWmousebuttonfun = ?*const fn (?*GLFWwindow, c_int, c_int, c_int) callconv(.C) void;
pub const GLFWcursorposfun = ?*const fn (?*GLFWwindow, f64, f64) callconv(.C) void;
pub const GLFWcursorenterfun = ?*const fn (?*GLFWwindow, c_int) callconv(.C) void;
pub const GLFWscrollfun = ?*const fn (?*GLFWwindow, f64, f64) callconv(.C) void;
pub const GLFWkeyfun = ?*const fn (?*GLFWwindow, c_int, c_int, c_int, c_int) callconv(.C) void;
pub const GLFWcharfun = ?*const fn (?*GLFWwindow, c_uint) callconv(.C) void;
pub const GLFWcharmodsfun = ?*const fn (?*GLFWwindow, c_uint, c_int) callconv(.C) void;
pub const GLFWdropfun = ?*const fn (?*GLFWwindow, c_int, [*c][*c]const u8) callconv(.C) void;
pub const GLFWmonitorfun = ?*const fn (?*GLFWmonitor, c_int) callconv(.C) void;
pub const GLFWjoystickfun = ?*const fn (c_int, c_int) callconv(.C) void;
pub const struct_GLFWvidmode = extern struct {
    width: c_int = @import("std").mem.zeroes(c_int),
    height: c_int = @import("std").mem.zeroes(c_int),
    redBits: c_int = @import("std").mem.zeroes(c_int),
    greenBits: c_int = @import("std").mem.zeroes(c_int),
    blueBits: c_int = @import("std").mem.zeroes(c_int),
    refreshRate: c_int = @import("std").mem.zeroes(c_int),
};
pub const GLFWvidmode = struct_GLFWvidmode;
pub const struct_GLFWgammaramp = extern struct {
    red: [*c]c_ushort = @import("std").mem.zeroes([*c]c_ushort),
    green: [*c]c_ushort = @import("std").mem.zeroes([*c]c_ushort),
    blue: [*c]c_ushort = @import("std").mem.zeroes([*c]c_ushort),
    size: c_uint = @import("std").mem.zeroes(c_uint),
};
pub const GLFWgammaramp = struct_GLFWgammaramp;
pub const struct_GLFWimage = extern struct {
    width: c_int = @import("std").mem.zeroes(c_int),
    height: c_int = @import("std").mem.zeroes(c_int),
    pixels: [*c]u8 = @import("std").mem.zeroes([*c]u8),
};
pub const GLFWimage = struct_GLFWimage;
pub const struct_GLFWgamepadstate = extern struct {
    buttons: [15]u8 = @import("std").mem.zeroes([15]u8),
    axes: [6]f32 = @import("std").mem.zeroes([6]f32),
};
pub const GLFWgamepadstate = struct_GLFWgamepadstate;
pub const struct_GLFWallocator = extern struct {
    allocate: GLFWallocatefun = @import("std").mem.zeroes(GLFWallocatefun),
    reallocate: GLFWreallocatefun = @import("std").mem.zeroes(GLFWreallocatefun),
    deallocate: GLFWdeallocatefun = @import("std").mem.zeroes(GLFWdeallocatefun),
    user: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
};
pub const GLFWallocator = struct_GLFWallocator;
pub extern fn glfwInit() c_int;
pub extern fn glfwTerminate() void;
pub extern fn glfwInitHint(hint: c_int, value: c_int) void;
pub extern fn glfwInitAllocator(allocator: [*c]const GLFWallocator) void;
pub extern fn glfwInitVulkanLoader(loader: PFN_vkGetInstanceProcAddr) void;
pub extern fn glfwGetVersion(major: [*c]c_int, minor: [*c]c_int, rev: [*c]c_int) void;
pub extern fn glfwGetVersionString() [*c]const u8;
pub extern fn glfwGetError(description: [*c][*c]const u8) c_int;
pub extern fn glfwSetErrorCallback(callback: GLFWerrorfun) GLFWerrorfun;
pub extern fn glfwGetPlatform() c_int;
pub extern fn glfwPlatformSupported(platform: c_int) c_int;
pub extern fn glfwGetMonitors(count: [*c]c_int) [*c]?*GLFWmonitor;
pub extern fn glfwGetPrimaryMonitor() ?*GLFWmonitor;
pub extern fn glfwGetMonitorPos(monitor: ?*GLFWmonitor, xpos: [*c]c_int, ypos: [*c]c_int) void;
pub extern fn glfwGetMonitorWorkarea(monitor: ?*GLFWmonitor, xpos: [*c]c_int, ypos: [*c]c_int, width: [*c]c_int, height: [*c]c_int) void;
pub extern fn glfwGetMonitorPhysicalSize(monitor: ?*GLFWmonitor, widthMM: [*c]c_int, heightMM: [*c]c_int) void;
pub extern fn glfwGetMonitorContentScale(monitor: ?*GLFWmonitor, xscale: [*c]f32, yscale: [*c]f32) void;
pub extern fn glfwGetMonitorName(monitor: ?*GLFWmonitor) [*c]const u8;
pub extern fn glfwSetMonitorUserPointer(monitor: ?*GLFWmonitor, pointer: ?*anyopaque) void;
pub extern fn glfwGetMonitorUserPointer(monitor: ?*GLFWmonitor) ?*anyopaque;
pub extern fn glfwSetMonitorCallback(callback: GLFWmonitorfun) GLFWmonitorfun;
pub extern fn glfwGetVideoModes(monitor: ?*GLFWmonitor, count: [*c]c_int) [*c]const GLFWvidmode;
pub extern fn glfwGetVideoMode(monitor: ?*GLFWmonitor) [*c]const GLFWvidmode;
pub extern fn glfwSetGamma(monitor: ?*GLFWmonitor, gamma: f32) void;
pub extern fn glfwGetGammaRamp(monitor: ?*GLFWmonitor) [*c]const GLFWgammaramp;
pub extern fn glfwSetGammaRamp(monitor: ?*GLFWmonitor, ramp: [*c]const GLFWgammaramp) void;
pub extern fn glfwDefaultWindowHints() void;
pub extern fn glfwWindowHint(hint: c_int, value: c_int) void;
pub extern fn glfwWindowHintString(hint: c_int, value: [*c]const u8) void;
pub extern fn glfwCreateWindow(width: c_int, height: c_int, title: [*c]const u8, monitor: ?*GLFWmonitor, share: ?*GLFWwindow) ?*GLFWwindow;
pub extern fn glfwDestroyWindow(window: ?*GLFWwindow) void;
pub extern fn glfwWindowShouldClose(window: ?*GLFWwindow) c_int;
pub extern fn glfwSetWindowShouldClose(window: ?*GLFWwindow, value: c_int) void;
pub extern fn glfwGetWindowTitle(window: ?*GLFWwindow) [*c]const u8;
pub extern fn glfwSetWindowTitle(window: ?*GLFWwindow, title: [*c]const u8) void;
pub extern fn glfwSetWindowIcon(window: ?*GLFWwindow, count: c_int, images: [*c]const GLFWimage) void;
pub extern fn glfwGetWindowPos(window: ?*GLFWwindow, xpos: [*c]c_int, ypos: [*c]c_int) void;
pub extern fn glfwSetWindowPos(window: ?*GLFWwindow, xpos: c_int, ypos: c_int) void;
pub extern fn glfwGetWindowSize(window: ?*GLFWwindow, width: [*c]c_int, height: [*c]c_int) void;
pub extern fn glfwSetWindowSizeLimits(window: ?*GLFWwindow, minwidth: c_int, minheight: c_int, maxwidth: c_int, maxheight: c_int) void;
pub extern fn glfwSetWindowAspectRatio(window: ?*GLFWwindow, numer: c_int, denom: c_int) void;
pub extern fn glfwSetWindowSize(window: ?*GLFWwindow, width: c_int, height: c_int) void;
pub extern fn glfwGetFramebufferSize(window: ?*GLFWwindow, width: [*c]c_int, height: [*c]c_int) void;
pub extern fn glfwGetWindowFrameSize(window: ?*GLFWwindow, left: [*c]c_int, top: [*c]c_int, right: [*c]c_int, bottom: [*c]c_int) void;
pub extern fn glfwGetWindowContentScale(window: ?*GLFWwindow, xscale: [*c]f32, yscale: [*c]f32) void;
pub extern fn glfwGetWindowOpacity(window: ?*GLFWwindow) f32;
pub extern fn glfwSetWindowOpacity(window: ?*GLFWwindow, opacity: f32) void;
pub extern fn glfwIconifyWindow(window: ?*GLFWwindow) void;
pub extern fn glfwRestoreWindow(window: ?*GLFWwindow) void;
pub extern fn glfwMaximizeWindow(window: ?*GLFWwindow) void;
pub extern fn glfwShowWindow(window: ?*GLFWwindow) void;
pub extern fn glfwHideWindow(window: ?*GLFWwindow) void;
pub extern fn glfwFocusWindow(window: ?*GLFWwindow) void;
pub extern fn glfwRequestWindowAttention(window: ?*GLFWwindow) void;
pub extern fn glfwGetWindowMonitor(window: ?*GLFWwindow) ?*GLFWmonitor;
pub extern fn glfwSetWindowMonitor(window: ?*GLFWwindow, monitor: ?*GLFWmonitor, xpos: c_int, ypos: c_int, width: c_int, height: c_int, refreshRate: c_int) void;
pub extern fn glfwGetWindowAttrib(window: ?*GLFWwindow, attrib: c_int) c_int;
pub extern fn glfwSetWindowAttrib(window: ?*GLFWwindow, attrib: c_int, value: c_int) void;
pub extern fn glfwSetWindowUserPointer(window: ?*GLFWwindow, pointer: ?*anyopaque) void;
pub extern fn glfwGetWindowUserPointer(window: ?*GLFWwindow) ?*anyopaque;
pub extern fn glfwSetWindowPosCallback(window: ?*GLFWwindow, callback: GLFWwindowposfun) GLFWwindowposfun;
pub extern fn glfwSetWindowSizeCallback(window: ?*GLFWwindow, callback: GLFWwindowsizefun) GLFWwindowsizefun;
pub extern fn glfwSetWindowCloseCallback(window: ?*GLFWwindow, callback: GLFWwindowclosefun) GLFWwindowclosefun;
pub extern fn glfwSetWindowRefreshCallback(window: ?*GLFWwindow, callback: GLFWwindowrefreshfun) GLFWwindowrefreshfun;
pub extern fn glfwSetWindowFocusCallback(window: ?*GLFWwindow, callback: GLFWwindowfocusfun) GLFWwindowfocusfun;
pub extern fn glfwSetWindowIconifyCallback(window: ?*GLFWwindow, callback: GLFWwindowiconifyfun) GLFWwindowiconifyfun;
pub extern fn glfwSetWindowMaximizeCallback(window: ?*GLFWwindow, callback: GLFWwindowmaximizefun) GLFWwindowmaximizefun;
pub extern fn glfwSetFramebufferSizeCallback(window: ?*GLFWwindow, callback: GLFWframebuffersizefun) GLFWframebuffersizefun;
pub extern fn glfwSetWindowContentScaleCallback(window: ?*GLFWwindow, callback: GLFWwindowcontentscalefun) GLFWwindowcontentscalefun;
pub extern fn glfwPollEvents() void;
pub extern fn glfwWaitEvents() void;
pub extern fn glfwWaitEventsTimeout(timeout: f64) void;
pub extern fn glfwPostEmptyEvent() void;
pub extern fn glfwGetInputMode(window: ?*GLFWwindow, mode: c_int) c_int;
pub extern fn glfwSetInputMode(window: ?*GLFWwindow, mode: c_int, value: c_int) void;
pub extern fn glfwRawMouseMotionSupported() c_int;
pub extern fn glfwGetKeyName(key: c_int, scancode: c_int) [*c]const u8;
pub extern fn glfwGetKeyScancode(key: c_int) c_int;
pub extern fn glfwGetKey(window: ?*GLFWwindow, key: c_int) c_int;
pub extern fn glfwGetMouseButton(window: ?*GLFWwindow, button: c_int) c_int;
pub extern fn glfwGetCursorPos(window: ?*GLFWwindow, xpos: [*c]f64, ypos: [*c]f64) void;
pub extern fn glfwSetCursorPos(window: ?*GLFWwindow, xpos: f64, ypos: f64) void;
pub extern fn glfwCreateCursor(image: [*c]const GLFWimage, xhot: c_int, yhot: c_int) ?*GLFWcursor;
pub extern fn glfwCreateStandardCursor(shape: c_int) ?*GLFWcursor;
pub extern fn glfwDestroyCursor(cursor: ?*GLFWcursor) void;
pub extern fn glfwSetCursor(window: ?*GLFWwindow, cursor: ?*GLFWcursor) void;
pub extern fn glfwSetKeyCallback(window: ?*GLFWwindow, callback: GLFWkeyfun) GLFWkeyfun;
pub extern fn glfwSetCharCallback(window: ?*GLFWwindow, callback: GLFWcharfun) GLFWcharfun;
pub extern fn glfwSetCharModsCallback(window: ?*GLFWwindow, callback: GLFWcharmodsfun) GLFWcharmodsfun;
pub extern fn glfwSetMouseButtonCallback(window: ?*GLFWwindow, callback: GLFWmousebuttonfun) GLFWmousebuttonfun;
pub extern fn glfwSetCursorPosCallback(window: ?*GLFWwindow, callback: GLFWcursorposfun) GLFWcursorposfun;
pub extern fn glfwSetCursorEnterCallback(window: ?*GLFWwindow, callback: GLFWcursorenterfun) GLFWcursorenterfun;
pub extern fn glfwSetScrollCallback(window: ?*GLFWwindow, callback: GLFWscrollfun) GLFWscrollfun;
pub extern fn glfwSetDropCallback(window: ?*GLFWwindow, callback: GLFWdropfun) GLFWdropfun;
pub extern fn glfwJoystickPresent(jid: c_int) c_int;
pub extern fn glfwGetJoystickAxes(jid: c_int, count: [*c]c_int) [*c]const f32;
pub extern fn glfwGetJoystickButtons(jid: c_int, count: [*c]c_int) [*c]const u8;
pub extern fn glfwGetJoystickHats(jid: c_int, count: [*c]c_int) [*c]const u8;
pub extern fn glfwGetJoystickName(jid: c_int) [*c]const u8;
pub extern fn glfwGetJoystickGUID(jid: c_int) [*c]const u8;
pub extern fn glfwSetJoystickUserPointer(jid: c_int, pointer: ?*anyopaque) void;
pub extern fn glfwGetJoystickUserPointer(jid: c_int) ?*anyopaque;
pub extern fn glfwJoystickIsGamepad(jid: c_int) c_int;
pub extern fn glfwSetJoystickCallback(callback: GLFWjoystickfun) GLFWjoystickfun;
pub extern fn glfwUpdateGamepadMappings(string: [*c]const u8) c_int;
pub extern fn glfwGetGamepadName(jid: c_int) [*c]const u8;
pub extern fn glfwGetGamepadState(jid: c_int, state: [*c]GLFWgamepadstate) c_int;
pub extern fn glfwSetClipboardString(window: ?*GLFWwindow, string: [*c]const u8) void;
pub extern fn glfwGetClipboardString(window: ?*GLFWwindow) [*c]const u8;
pub extern fn glfwGetTime() f64;
pub extern fn glfwSetTime(time: f64) void;
pub extern fn glfwGetTimerValue() u64;
pub extern fn glfwGetTimerFrequency() u64;
pub extern fn glfwMakeContextCurrent(window: ?*GLFWwindow) void;
pub extern fn glfwGetCurrentContext() ?*GLFWwindow;
pub extern fn glfwSwapBuffers(window: ?*GLFWwindow) void;
pub extern fn glfwSwapInterval(interval: c_int) void;
pub extern fn glfwExtensionSupported(extension: [*c]const u8) c_int;
pub extern fn glfwGetProcAddress(procname: [*c]const u8) GLFWglproc;
pub extern fn glfwVulkanSupported() c_int;
pub extern fn glfwGetRequiredInstanceExtensions(count: [*c]u32) [*c][*c]const u8;
pub extern fn glfwGetInstanceProcAddress(instance: VkInstance, procname: [*c]const u8) GLFWvkproc;
pub extern fn glfwGetPhysicalDevicePresentationSupport(instance: VkInstance, device: VkPhysicalDevice, queuefamily: u32) c_int;
pub extern fn glfwCreateWindowSurface(instance: VkInstance, window: ?*GLFWwindow, allocator: [*c]const VkAllocationCallbacks, surface: [*c]VkSurfaceKHR) VkResult;
pub const __llvm__ = @as(c_int, 1);
pub const __clang__ = @as(c_int, 1);
pub const __clang_major__ = @as(c_int, 18);
pub const __clang_minor__ = @as(c_int, 1);
pub const __clang_patchlevel__ = @as(c_int, 6);
pub const __clang_version__ = "18.1.6 (https://github.com/ziglang/zig-bootstrap 98bc6bf4fc4009888d33941daf6b600d20a42a56)";
pub const __GNUC__ = @as(c_int, 4);
pub const __GNUC_MINOR__ = @as(c_int, 2);
pub const __GNUC_PATCHLEVEL__ = @as(c_int, 1);
pub const __GXX_ABI_VERSION = @as(c_int, 1002);
pub const __ATOMIC_RELAXED = @as(c_int, 0);
pub const __ATOMIC_CONSUME = @as(c_int, 1);
pub const __ATOMIC_ACQUIRE = @as(c_int, 2);
pub const __ATOMIC_RELEASE = @as(c_int, 3);
pub const __ATOMIC_ACQ_REL = @as(c_int, 4);
pub const __ATOMIC_SEQ_CST = @as(c_int, 5);
pub const __MEMORY_SCOPE_SYSTEM = @as(c_int, 0);
pub const __MEMORY_SCOPE_DEVICE = @as(c_int, 1);
pub const __MEMORY_SCOPE_WRKGRP = @as(c_int, 2);
pub const __MEMORY_SCOPE_WVFRNT = @as(c_int, 3);
pub const __MEMORY_SCOPE_SINGLE = @as(c_int, 4);
pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM = @as(c_int, 0);
pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP = @as(c_int, 1);
pub const __OPENCL_MEMORY_SCOPE_DEVICE = @as(c_int, 2);
pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES = @as(c_int, 3);
pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP = @as(c_int, 4);
pub const __FPCLASS_SNAN = @as(c_int, 0x0001);
pub const __FPCLASS_QNAN = @as(c_int, 0x0002);
pub const __FPCLASS_NEGINF = @as(c_int, 0x0004);
pub const __FPCLASS_NEGNORMAL = @as(c_int, 0x0008);
pub const __FPCLASS_NEGSUBNORMAL = @as(c_int, 0x0010);
pub const __FPCLASS_NEGZERO = @as(c_int, 0x0020);
pub const __FPCLASS_POSZERO = @as(c_int, 0x0040);
pub const __FPCLASS_POSSUBNORMAL = @as(c_int, 0x0080);
pub const __FPCLASS_POSNORMAL = @as(c_int, 0x0100);
pub const __FPCLASS_POSINF = @as(c_int, 0x0200);
pub const __PRAGMA_REDEFINE_EXTNAME = @as(c_int, 1);
pub const __VERSION__ = "Clang 18.1.6 (https://github.com/ziglang/zig-bootstrap 98bc6bf4fc4009888d33941daf6b600d20a42a56)";
pub const __OBJC_BOOL_IS_BOOL = @as(c_int, 0);
pub const __CONSTANT_CFSTRINGS__ = @as(c_int, 1);
pub const __clang_literal_encoding__ = "UTF-8";
pub const __clang_wide_literal_encoding__ = "UTF-32";
pub const __ORDER_LITTLE_ENDIAN__ = @as(c_int, 1234);
pub const __ORDER_BIG_ENDIAN__ = @as(c_int, 4321);
pub const __ORDER_PDP_ENDIAN__ = @as(c_int, 3412);
pub const __BYTE_ORDER__ = __ORDER_LITTLE_ENDIAN__;
pub const __LITTLE_ENDIAN__ = @as(c_int, 1);
pub const _LP64 = @as(c_int, 1);
pub const __LP64__ = @as(c_int, 1);
pub const __CHAR_BIT__ = @as(c_int, 8);
pub const __BOOL_WIDTH__ = @as(c_int, 8);
pub const __SHRT_WIDTH__ = @as(c_int, 16);
pub const __INT_WIDTH__ = @as(c_int, 32);
pub const __LONG_WIDTH__ = @as(c_int, 64);
pub const __LLONG_WIDTH__ = @as(c_int, 64);
pub const __BITINT_MAXWIDTH__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 8388608, .decimal);
pub const __SCHAR_MAX__ = @as(c_int, 127);
pub const __SHRT_MAX__ = @as(c_int, 32767);
pub const __INT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __LONG_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __LONG_LONG_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __WCHAR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __WCHAR_WIDTH__ = @as(c_int, 32);
pub const __WINT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __WINT_WIDTH__ = @as(c_int, 32);
pub const __INTMAX_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INTMAX_WIDTH__ = @as(c_int, 64);
pub const __SIZE_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __SIZE_WIDTH__ = @as(c_int, 64);
pub const __UINTMAX_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINTMAX_WIDTH__ = @as(c_int, 64);
pub const __PTRDIFF_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __PTRDIFF_WIDTH__ = @as(c_int, 64);
pub const __INTPTR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INTPTR_WIDTH__ = @as(c_int, 64);
pub const __UINTPTR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINTPTR_WIDTH__ = @as(c_int, 64);
pub const __SIZEOF_DOUBLE__ = @as(c_int, 8);
pub const __SIZEOF_FLOAT__ = @as(c_int, 4);
pub const __SIZEOF_INT__ = @as(c_int, 4);
pub const __SIZEOF_LONG__ = @as(c_int, 8);
pub const __SIZEOF_LONG_DOUBLE__ = @as(c_int, 16);
pub const __SIZEOF_LONG_LONG__ = @as(c_int, 8);
pub const __SIZEOF_POINTER__ = @as(c_int, 8);
pub const __SIZEOF_SHORT__ = @as(c_int, 2);
pub const __SIZEOF_PTRDIFF_T__ = @as(c_int, 8);
pub const __SIZEOF_SIZE_T__ = @as(c_int, 8);
pub const __SIZEOF_WCHAR_T__ = @as(c_int, 4);
pub const __SIZEOF_WINT_T__ = @as(c_int, 4);
pub const __SIZEOF_INT128__ = @as(c_int, 16);
pub const __INTMAX_TYPE__ = c_long;
pub const __INTMAX_FMTd__ = "ld";
pub const __INTMAX_FMTi__ = "li";
pub const __INTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `L`");
// (no file):95:9
pub const __UINTMAX_TYPE__ = c_ulong;
pub const __UINTMAX_FMTo__ = "lo";
pub const __UINTMAX_FMTu__ = "lu";
pub const __UINTMAX_FMTx__ = "lx";
pub const __UINTMAX_FMTX__ = "lX";
pub const __UINTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `UL`");
// (no file):101:9
pub const __PTRDIFF_TYPE__ = c_long;
pub const __PTRDIFF_FMTd__ = "ld";
pub const __PTRDIFF_FMTi__ = "li";
pub const __INTPTR_TYPE__ = c_long;
pub const __INTPTR_FMTd__ = "ld";
pub const __INTPTR_FMTi__ = "li";
pub const __SIZE_TYPE__ = c_ulong;
pub const __SIZE_FMTo__ = "lo";
pub const __SIZE_FMTu__ = "lu";
pub const __SIZE_FMTx__ = "lx";
pub const __SIZE_FMTX__ = "lX";
pub const __WCHAR_TYPE__ = c_int;
pub const __WINT_TYPE__ = c_uint;
pub const __SIG_ATOMIC_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __SIG_ATOMIC_WIDTH__ = @as(c_int, 32);
pub const __CHAR16_TYPE__ = c_ushort;
pub const __CHAR32_TYPE__ = c_uint;
pub const __UINTPTR_TYPE__ = c_ulong;
pub const __UINTPTR_FMTo__ = "lo";
pub const __UINTPTR_FMTu__ = "lu";
pub const __UINTPTR_FMTx__ = "lx";
pub const __UINTPTR_FMTX__ = "lX";
pub const __FLT16_DENORM_MIN__ = @as(f16, 5.9604644775390625e-8);
pub const __FLT16_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT16_DIG__ = @as(c_int, 3);
pub const __FLT16_DECIMAL_DIG__ = @as(c_int, 5);
pub const __FLT16_EPSILON__ = @as(f16, 9.765625e-4);
pub const __FLT16_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT16_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT16_MANT_DIG__ = @as(c_int, 11);
pub const __FLT16_MAX_10_EXP__ = @as(c_int, 4);
pub const __FLT16_MAX_EXP__ = @as(c_int, 16);
pub const __FLT16_MAX__ = @as(f16, 6.5504e+4);
pub const __FLT16_MIN_10_EXP__ = -@as(c_int, 4);
pub const __FLT16_MIN_EXP__ = -@as(c_int, 13);
pub const __FLT16_MIN__ = @as(f16, 6.103515625e-5);
pub const __FLT_DENORM_MIN__ = @as(f32, 1.40129846e-45);
pub const __FLT_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT_DIG__ = @as(c_int, 6);
pub const __FLT_DECIMAL_DIG__ = @as(c_int, 9);
pub const __FLT_EPSILON__ = @as(f32, 1.19209290e-7);
pub const __FLT_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT_MANT_DIG__ = @as(c_int, 24);
pub const __FLT_MAX_10_EXP__ = @as(c_int, 38);
pub const __FLT_MAX_EXP__ = @as(c_int, 128);
pub const __FLT_MAX__ = @as(f32, 3.40282347e+38);
pub const __FLT_MIN_10_EXP__ = -@as(c_int, 37);
pub const __FLT_MIN_EXP__ = -@as(c_int, 125);
pub const __FLT_MIN__ = @as(f32, 1.17549435e-38);
pub const __DBL_DENORM_MIN__ = @as(f64, 4.9406564584124654e-324);
pub const __DBL_HAS_DENORM__ = @as(c_int, 1);
pub const __DBL_DIG__ = @as(c_int, 15);
pub const __DBL_DECIMAL_DIG__ = @as(c_int, 17);
pub const __DBL_EPSILON__ = @as(f64, 2.2204460492503131e-16);
pub const __DBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __DBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __DBL_MANT_DIG__ = @as(c_int, 53);
pub const __DBL_MAX_10_EXP__ = @as(c_int, 308);
pub const __DBL_MAX_EXP__ = @as(c_int, 1024);
pub const __DBL_MAX__ = @as(f64, 1.7976931348623157e+308);
pub const __DBL_MIN_10_EXP__ = -@as(c_int, 307);
pub const __DBL_MIN_EXP__ = -@as(c_int, 1021);
pub const __DBL_MIN__ = @as(f64, 2.2250738585072014e-308);
pub const __LDBL_DENORM_MIN__ = @as(c_longdouble, 3.64519953188247460253e-4951);
pub const __LDBL_HAS_DENORM__ = @as(c_int, 1);
pub const __LDBL_DIG__ = @as(c_int, 18);
pub const __LDBL_DECIMAL_DIG__ = @as(c_int, 21);
pub const __LDBL_EPSILON__ = @as(c_longdouble, 1.08420217248550443401e-19);
pub const __LDBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __LDBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __LDBL_MANT_DIG__ = @as(c_int, 64);
pub const __LDBL_MAX_10_EXP__ = @as(c_int, 4932);
pub const __LDBL_MAX_EXP__ = @as(c_int, 16384);
pub const __LDBL_MAX__ = @as(c_longdouble, 1.18973149535723176502e+4932);
pub const __LDBL_MIN_10_EXP__ = -@as(c_int, 4931);
pub const __LDBL_MIN_EXP__ = -@as(c_int, 16381);
pub const __LDBL_MIN__ = @as(c_longdouble, 3.36210314311209350626e-4932);
pub const __POINTER_WIDTH__ = @as(c_int, 64);
pub const __BIGGEST_ALIGNMENT__ = @as(c_int, 16);
pub const __WINT_UNSIGNED__ = @as(c_int, 1);
pub const __INT8_TYPE__ = i8;
pub const __INT8_FMTd__ = "hhd";
pub const __INT8_FMTi__ = "hhi";
pub const __INT8_C_SUFFIX__ = "";
pub const __INT16_TYPE__ = c_short;
pub const __INT16_FMTd__ = "hd";
pub const __INT16_FMTi__ = "hi";
pub const __INT16_C_SUFFIX__ = "";
pub const __INT32_TYPE__ = c_int;
pub const __INT32_FMTd__ = "d";
pub const __INT32_FMTi__ = "i";
pub const __INT32_C_SUFFIX__ = "";
pub const __INT64_TYPE__ = c_long;
pub const __INT64_FMTd__ = "ld";
pub const __INT64_FMTi__ = "li";
pub const __INT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `L`");
// (no file):198:9
pub const __UINT8_TYPE__ = u8;
pub const __UINT8_FMTo__ = "hho";
pub const __UINT8_FMTu__ = "hhu";
pub const __UINT8_FMTx__ = "hhx";
pub const __UINT8_FMTX__ = "hhX";
pub const __UINT8_C_SUFFIX__ = "";
pub const __UINT8_MAX__ = @as(c_int, 255);
pub const __INT8_MAX__ = @as(c_int, 127);
pub const __UINT16_TYPE__ = c_ushort;
pub const __UINT16_FMTo__ = "ho";
pub const __UINT16_FMTu__ = "hu";
pub const __UINT16_FMTx__ = "hx";
pub const __UINT16_FMTX__ = "hX";
pub const __UINT16_C_SUFFIX__ = "";
pub const __UINT16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __INT16_MAX__ = @as(c_int, 32767);
pub const __UINT32_TYPE__ = c_uint;
pub const __UINT32_FMTo__ = "o";
pub const __UINT32_FMTu__ = "u";
pub const __UINT32_FMTx__ = "x";
pub const __UINT32_FMTX__ = "X";
pub const __UINT32_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `U`");
// (no file):220:9
pub const __UINT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __INT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __UINT64_TYPE__ = c_ulong;
pub const __UINT64_FMTo__ = "lo";
pub const __UINT64_FMTu__ = "lu";
pub const __UINT64_FMTx__ = "lx";
pub const __UINT64_FMTX__ = "lX";
pub const __UINT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `UL`");
// (no file):228:9
pub const __UINT64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __INT64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INT_LEAST8_TYPE__ = i8;
pub const __INT_LEAST8_MAX__ = @as(c_int, 127);
pub const __INT_LEAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_LEAST8_FMTd__ = "hhd";
pub const __INT_LEAST8_FMTi__ = "hhi";
pub const __UINT_LEAST8_TYPE__ = u8;
pub const __UINT_LEAST8_MAX__ = @as(c_int, 255);
pub const __UINT_LEAST8_FMTo__ = "hho";
pub const __UINT_LEAST8_FMTu__ = "hhu";
pub const __UINT_LEAST8_FMTx__ = "hhx";
pub const __UINT_LEAST8_FMTX__ = "hhX";
pub const __INT_LEAST16_TYPE__ = c_short;
pub const __INT_LEAST16_MAX__ = @as(c_int, 32767);
pub const __INT_LEAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_LEAST16_FMTd__ = "hd";
pub const __INT_LEAST16_FMTi__ = "hi";
pub const __UINT_LEAST16_TYPE__ = c_ushort;
pub const __UINT_LEAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_LEAST16_FMTo__ = "ho";
pub const __UINT_LEAST16_FMTu__ = "hu";
pub const __UINT_LEAST16_FMTx__ = "hx";
pub const __UINT_LEAST16_FMTX__ = "hX";
pub const __INT_LEAST32_TYPE__ = c_int;
pub const __INT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_LEAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_LEAST32_FMTd__ = "d";
pub const __INT_LEAST32_FMTi__ = "i";
pub const __UINT_LEAST32_TYPE__ = c_uint;
pub const __UINT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_LEAST32_FMTo__ = "o";
pub const __UINT_LEAST32_FMTu__ = "u";
pub const __UINT_LEAST32_FMTx__ = "x";
pub const __UINT_LEAST32_FMTX__ = "X";
pub const __INT_LEAST64_TYPE__ = c_long;
pub const __INT_LEAST64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INT_LEAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_LEAST64_FMTd__ = "ld";
pub const __INT_LEAST64_FMTi__ = "li";
pub const __UINT_LEAST64_TYPE__ = c_ulong;
pub const __UINT_LEAST64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINT_LEAST64_FMTo__ = "lo";
pub const __UINT_LEAST64_FMTu__ = "lu";
pub const __UINT_LEAST64_FMTx__ = "lx";
pub const __UINT_LEAST64_FMTX__ = "lX";
pub const __INT_FAST8_TYPE__ = i8;
pub const __INT_FAST8_MAX__ = @as(c_int, 127);
pub const __INT_FAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_FAST8_FMTd__ = "hhd";
pub const __INT_FAST8_FMTi__ = "hhi";
pub const __UINT_FAST8_TYPE__ = u8;
pub const __UINT_FAST8_MAX__ = @as(c_int, 255);
pub const __UINT_FAST8_FMTo__ = "hho";
pub const __UINT_FAST8_FMTu__ = "hhu";
pub const __UINT_FAST8_FMTx__ = "hhx";
pub const __UINT_FAST8_FMTX__ = "hhX";
pub const __INT_FAST16_TYPE__ = c_short;
pub const __INT_FAST16_MAX__ = @as(c_int, 32767);
pub const __INT_FAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_FAST16_FMTd__ = "hd";
pub const __INT_FAST16_FMTi__ = "hi";
pub const __UINT_FAST16_TYPE__ = c_ushort;
pub const __UINT_FAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_FAST16_FMTo__ = "ho";
pub const __UINT_FAST16_FMTu__ = "hu";
pub const __UINT_FAST16_FMTx__ = "hx";
pub const __UINT_FAST16_FMTX__ = "hX";
pub const __INT_FAST32_TYPE__ = c_int;
pub const __INT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_FAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_FAST32_FMTd__ = "d";
pub const __INT_FAST32_FMTi__ = "i";
pub const __UINT_FAST32_TYPE__ = c_uint;
pub const __UINT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_FAST32_FMTo__ = "o";
pub const __UINT_FAST32_FMTu__ = "u";
pub const __UINT_FAST32_FMTx__ = "x";
pub const __UINT_FAST32_FMTX__ = "X";
pub const __INT_FAST64_TYPE__ = c_long;
pub const __INT_FAST64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INT_FAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_FAST64_FMTd__ = "ld";
pub const __INT_FAST64_FMTi__ = "li";
pub const __UINT_FAST64_TYPE__ = c_ulong;
pub const __UINT_FAST64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINT_FAST64_FMTo__ = "lo";
pub const __UINT_FAST64_FMTu__ = "lu";
pub const __UINT_FAST64_FMTx__ = "lx";
pub const __UINT_FAST64_FMTX__ = "lX";
pub const __USER_LABEL_PREFIX__ = "";
pub const __FINITE_MATH_ONLY__ = @as(c_int, 0);
pub const __GNUC_STDC_INLINE__ = @as(c_int, 1);
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL = @as(c_int, 1);
pub const __CLANG_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_INT_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_LONG_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_INT_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_LONG_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 2);
pub const __NO_INLINE__ = @as(c_int, 1);
pub const __PIC__ = @as(c_int, 2);
pub const __pic__ = @as(c_int, 2);
pub const __PIE__ = @as(c_int, 2);
pub const __pie__ = @as(c_int, 2);
pub const __FLT_RADIX__ = @as(c_int, 2);
pub const __DECIMAL_DIG__ = __LDBL_DECIMAL_DIG__;
pub const __ELF__ = @as(c_int, 1);
pub const __GCC_ASM_FLAG_OUTPUTS__ = @as(c_int, 1);
pub const __code_model_small__ = @as(c_int, 1);
pub const __amd64__ = @as(c_int, 1);
pub const __amd64 = @as(c_int, 1);
pub const __x86_64 = @as(c_int, 1);
pub const __x86_64__ = @as(c_int, 1);
pub const __SEG_GS = @as(c_int, 1);
pub const __SEG_FS = @as(c_int, 1);
pub const __seg_gs = @compileError("unable to translate macro: undefined identifier `address_space`");
// (no file):359:9
pub const __seg_fs = @compileError("unable to translate macro: undefined identifier `address_space`");
// (no file):360:9
pub const __znver1 = @as(c_int, 1);
pub const __znver1__ = @as(c_int, 1);
pub const __tune_znver1__ = @as(c_int, 1);
pub const __REGISTER_PREFIX__ = "";
pub const __NO_MATH_INLINES = @as(c_int, 1);
pub const __AES__ = @as(c_int, 1);
pub const __PCLMUL__ = @as(c_int, 1);
pub const __LAHF_SAHF__ = @as(c_int, 1);
pub const __LZCNT__ = @as(c_int, 1);
pub const __RDRND__ = @as(c_int, 1);
pub const __FSGSBASE__ = @as(c_int, 1);
pub const __BMI__ = @as(c_int, 1);
pub const __BMI2__ = @as(c_int, 1);
pub const __POPCNT__ = @as(c_int, 1);
pub const __PRFCHW__ = @as(c_int, 1);
pub const __RDSEED__ = @as(c_int, 1);
pub const __ADX__ = @as(c_int, 1);
pub const __MWAITX__ = @as(c_int, 1);
pub const __MOVBE__ = @as(c_int, 1);
pub const __SSE4A__ = @as(c_int, 1);
pub const __FMA__ = @as(c_int, 1);
pub const __F16C__ = @as(c_int, 1);
pub const __SHA__ = @as(c_int, 1);
pub const __FXSR__ = @as(c_int, 1);
pub const __XSAVE__ = @as(c_int, 1);
pub const __XSAVEOPT__ = @as(c_int, 1);
pub const __XSAVEC__ = @as(c_int, 1);
pub const __XSAVES__ = @as(c_int, 1);
pub const __CLFLUSHOPT__ = @as(c_int, 1);
pub const __CLZERO__ = @as(c_int, 1);
pub const __CRC32__ = @as(c_int, 1);
pub const __AVX2__ = @as(c_int, 1);
pub const __AVX__ = @as(c_int, 1);
pub const __SSE4_2__ = @as(c_int, 1);
pub const __SSE4_1__ = @as(c_int, 1);
pub const __SSSE3__ = @as(c_int, 1);
pub const __SSE3__ = @as(c_int, 1);
pub const __SSE2__ = @as(c_int, 1);
pub const __SSE2_MATH__ = @as(c_int, 1);
pub const __SSE__ = @as(c_int, 1);
pub const __SSE_MATH__ = @as(c_int, 1);
pub const __MMX__ = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_16 = @as(c_int, 1);
pub const __SIZEOF_FLOAT128__ = @as(c_int, 16);
pub const unix = @as(c_int, 1);
pub const __unix = @as(c_int, 1);
pub const __unix__ = @as(c_int, 1);
pub const linux = @as(c_int, 1);
pub const __linux = @as(c_int, 1);
pub const __linux__ = @as(c_int, 1);
pub const __gnu_linux__ = @as(c_int, 1);
pub const __FLOAT128__ = @as(c_int, 1);
pub const __STDC__ = @as(c_int, 1);
pub const __STDC_HOSTED__ = @as(c_int, 1);
pub const __STDC_VERSION__ = @as(c_long, 201710);
pub const __STDC_UTF_16__ = @as(c_int, 1);
pub const __STDC_UTF_32__ = @as(c_int, 1);
pub const _DEBUG = @as(c_int, 1);
pub const GLFW_INCLUDE_VULKAN = @as(c_int, 1);
pub const __GCC_HAVE_DWARF2_CFI_ASM = @as(c_int, 1);
pub const _glfw3_h_ = "";
pub const __STDDEF_H = "";
pub const __need_ptrdiff_t = "";
pub const __need_size_t = "";
pub const __need_wchar_t = "";
pub const __need_NULL = "";
pub const __need_max_align_t = "";
pub const __need_offsetof = "";
pub const _PTRDIFF_T = "";
pub const _SIZE_T = "";
pub const _WCHAR_T = "";
pub const NULL = @import("std").zig.c_translation.cast(?*anyopaque, @as(c_int, 0));
pub const __CLANG_MAX_ALIGN_T_DEFINED = "";
pub const offsetof = @compileError("unable to translate C expr: unexpected token 'an identifier'");
// /usr/lib/zig/include/__stddef_offsetof.h:16:9
pub const __CLANG_STDINT_H = "";
pub const _STDINT_H = @as(c_int, 1);
pub const __GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION = "";
pub const _FEATURES_H = @as(c_int, 1);
pub const __KERNEL_STRICT_NAMES = "";
pub inline fn __GNUC_PREREQ(maj: anytype, min: anytype) @TypeOf(((__GNUC__ << @as(c_int, 16)) + __GNUC_MINOR__) >= ((maj << @as(c_int, 16)) + min)) {
    _ = &maj;
    _ = &min;
    return ((__GNUC__ << @as(c_int, 16)) + __GNUC_MINOR__) >= ((maj << @as(c_int, 16)) + min);
}
pub inline fn __glibc_clang_prereq(maj: anytype, min: anytype) @TypeOf(((__clang_major__ << @as(c_int, 16)) + __clang_minor__) >= ((maj << @as(c_int, 16)) + min)) {
    _ = &maj;
    _ = &min;
    return ((__clang_major__ << @as(c_int, 16)) + __clang_minor__) >= ((maj << @as(c_int, 16)) + min);
}
pub const __GLIBC_USE = @compileError("unable to translate macro: undefined identifier `__GLIBC_USE_`");
// /usr/include/features.h:189:9
pub const _DEFAULT_SOURCE = @as(c_int, 1);
pub const __GLIBC_USE_ISOC23 = @as(c_int, 0);
pub const __USE_ISOC11 = @as(c_int, 1);
pub const __USE_ISOC99 = @as(c_int, 1);
pub const __USE_ISOC95 = @as(c_int, 1);
pub const __USE_POSIX_IMPLICITLY = @as(c_int, 1);
pub const _POSIX_SOURCE = @as(c_int, 1);
pub const _POSIX_C_SOURCE = @as(c_long, 200809);
pub const __USE_POSIX = @as(c_int, 1);
pub const __USE_POSIX2 = @as(c_int, 1);
pub const __USE_POSIX199309 = @as(c_int, 1);
pub const __USE_POSIX199506 = @as(c_int, 1);
pub const __USE_XOPEN2K = @as(c_int, 1);
pub const __USE_XOPEN2K8 = @as(c_int, 1);
pub const _ATFILE_SOURCE = @as(c_int, 1);
pub const __WORDSIZE = @as(c_int, 64);
pub const __WORDSIZE_TIME64_COMPAT32 = @as(c_int, 1);
pub const __SYSCALL_WORDSIZE = @as(c_int, 64);
pub const __TIMESIZE = __WORDSIZE;
pub const __USE_TIME_BITS64 = @as(c_int, 1);
pub const __USE_MISC = @as(c_int, 1);
pub const __USE_ATFILE = @as(c_int, 1);
pub const __USE_FORTIFY_LEVEL = @as(c_int, 0);
pub const __GLIBC_USE_DEPRECATED_GETS = @as(c_int, 0);
pub const __GLIBC_USE_DEPRECATED_SCANF = @as(c_int, 0);
pub const __GLIBC_USE_C23_STRTOL = @as(c_int, 0);
pub const _STDC_PREDEF_H = @as(c_int, 1);
pub const __STDC_IEC_559__ = @as(c_int, 1);
pub const __STDC_IEC_60559_BFP__ = @as(c_long, 201404);
pub const __STDC_IEC_559_COMPLEX__ = @as(c_int, 1);
pub const __STDC_IEC_60559_COMPLEX__ = @as(c_long, 201404);
pub const __STDC_ISO_10646__ = @as(c_long, 201706);
pub const __GNU_LIBRARY__ = @as(c_int, 6);
pub const __GLIBC__ = @as(c_int, 2);
pub const __GLIBC_MINOR__ = @as(c_int, 40);
pub inline fn __GLIBC_PREREQ(maj: anytype, min: anytype) @TypeOf(((__GLIBC__ << @as(c_int, 16)) + __GLIBC_MINOR__) >= ((maj << @as(c_int, 16)) + min)) {
    _ = &maj;
    _ = &min;
    return ((__GLIBC__ << @as(c_int, 16)) + __GLIBC_MINOR__) >= ((maj << @as(c_int, 16)) + min);
}
pub const _SYS_CDEFS_H = @as(c_int, 1);
pub const __glibc_has_attribute = @compileError("unable to translate macro: undefined identifier `__has_attribute`");
// /usr/include/sys/cdefs.h:45:10
pub inline fn __glibc_has_builtin(name: anytype) @TypeOf(__has_builtin(name)) {
    _ = &name;
    return __has_builtin(name);
}
pub const __glibc_has_extension = @compileError("unable to translate macro: undefined identifier `__has_extension`");
// /usr/include/sys/cdefs.h:55:10
pub const __LEAF = "";
pub const __LEAF_ATTR = "";
pub const __THROW = @compileError("unable to translate macro: undefined identifier `__nothrow__`");
// /usr/include/sys/cdefs.h:79:11
pub const __THROWNL = @compileError("unable to translate macro: undefined identifier `__nothrow__`");
// /usr/include/sys/cdefs.h:80:11
pub const __NTH = @compileError("unable to translate macro: undefined identifier `__nothrow__`");
// /usr/include/sys/cdefs.h:81:11
pub const __NTHNL = @compileError("unable to translate macro: undefined identifier `__nothrow__`");
// /usr/include/sys/cdefs.h:82:11
pub const __COLD = @compileError("unable to translate macro: undefined identifier `__cold__`");
// /usr/include/sys/cdefs.h:102:11
pub inline fn __P(args: anytype) @TypeOf(args) {
    _ = &args;
    return args;
}
pub inline fn __PMT(args: anytype) @TypeOf(args) {
    _ = &args;
    return args;
}
pub const __CONCAT = @compileError("unable to translate C expr: unexpected token '##'");
// /usr/include/sys/cdefs.h:131:9
pub const __STRING = @compileError("unable to translate C expr: unexpected token '#'");
// /usr/include/sys/cdefs.h:132:9
pub const __ptr_t = ?*anyopaque;
pub const __BEGIN_DECLS = "";
pub const __END_DECLS = "";
pub const __attribute_overloadable__ = @compileError("unable to translate macro: undefined identifier `__overloadable__`");
// /usr/include/sys/cdefs.h:151:10
pub inline fn __bos(ptr: anytype) @TypeOf(__builtin_object_size(ptr, __USE_FORTIFY_LEVEL > @as(c_int, 1))) {
    _ = &ptr;
    return __builtin_object_size(ptr, __USE_FORTIFY_LEVEL > @as(c_int, 1));
}
pub inline fn __bos0(ptr: anytype) @TypeOf(__builtin_object_size(ptr, @as(c_int, 0))) {
    _ = &ptr;
    return __builtin_object_size(ptr, @as(c_int, 0));
}
pub inline fn __glibc_objsize0(__o: anytype) @TypeOf(__bos0(__o)) {
    _ = &__o;
    return __bos0(__o);
}
pub inline fn __glibc_objsize(__o: anytype) @TypeOf(__bos(__o)) {
    _ = &__o;
    return __bos(__o);
}
pub const __warnattr = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/sys/cdefs.h:370:10
pub const __errordecl = @compileError("unable to translate C expr: unexpected token 'extern'");
// /usr/include/sys/cdefs.h:371:10
pub const __flexarr = @compileError("unable to translate C expr: unexpected token '['");
// /usr/include/sys/cdefs.h:379:10
pub const __glibc_c99_flexarr_available = @as(c_int, 1);
pub const __REDIRECT = @compileError("unable to translate C expr: unexpected token '__asm__'");
// /usr/include/sys/cdefs.h:410:10
pub const __REDIRECT_NTH = @compileError("unable to translate C expr: unexpected token '__asm__'");
// /usr/include/sys/cdefs.h:417:11
pub const __REDIRECT_NTHNL = @compileError("unable to translate C expr: unexpected token '__asm__'");
// /usr/include/sys/cdefs.h:419:11
pub const __ASMNAME = @compileError("unable to translate C expr: unexpected token ','");
// /usr/include/sys/cdefs.h:422:10
pub inline fn __ASMNAME2(prefix: anytype, cname: anytype) @TypeOf(__STRING(prefix) ++ cname) {
    _ = &prefix;
    _ = &cname;
    return __STRING(prefix) ++ cname;
}
pub const __REDIRECT_FORTIFY = __REDIRECT;
pub const __REDIRECT_FORTIFY_NTH = __REDIRECT_NTH;
pub const __attribute_malloc__ = @compileError("unable to translate macro: undefined identifier `__malloc__`");
// /usr/include/sys/cdefs.h:452:10
pub const __attribute_alloc_size__ = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/sys/cdefs.h:463:10
pub const __attribute_alloc_align__ = @compileError("unable to translate macro: undefined identifier `__alloc_align__`");
// /usr/include/sys/cdefs.h:469:10
pub const __attribute_pure__ = @compileError("unable to translate macro: undefined identifier `__pure__`");
// /usr/include/sys/cdefs.h:479:10
pub const __attribute_const__ = @compileError("unable to translate C expr: unexpected token '__attribute__'");
// /usr/include/sys/cdefs.h:486:10
pub const __attribute_maybe_unused__ = @compileError("unable to translate macro: undefined identifier `__unused__`");
// /usr/include/sys/cdefs.h:492:10
pub const __attribute_used__ = @compileError("unable to translate macro: undefined identifier `__used__`");
// /usr/include/sys/cdefs.h:501:10
pub const __attribute_noinline__ = @compileError("unable to translate macro: undefined identifier `__noinline__`");
// /usr/include/sys/cdefs.h:502:10
pub const __attribute_deprecated__ = @compileError("unable to translate macro: undefined identifier `__deprecated__`");
// /usr/include/sys/cdefs.h:510:10
pub const __attribute_deprecated_msg__ = @compileError("unable to translate macro: undefined identifier `__deprecated__`");
// /usr/include/sys/cdefs.h:520:10
pub const __attribute_format_arg__ = @compileError("unable to translate macro: undefined identifier `__format_arg__`");
// /usr/include/sys/cdefs.h:533:10
pub const __attribute_format_strfmon__ = @compileError("unable to translate macro: undefined identifier `__format__`");
// /usr/include/sys/cdefs.h:543:10
pub const __attribute_nonnull__ = @compileError("unable to translate macro: undefined identifier `__nonnull__`");
// /usr/include/sys/cdefs.h:555:11
pub inline fn __nonnull(params: anytype) @TypeOf(__attribute_nonnull__(params)) {
    _ = &params;
    return __attribute_nonnull__(params);
}
pub const __returns_nonnull = @compileError("unable to translate macro: undefined identifier `__returns_nonnull__`");
// /usr/include/sys/cdefs.h:568:10
pub const __attribute_warn_unused_result__ = @compileError("unable to translate macro: undefined identifier `__warn_unused_result__`");
// /usr/include/sys/cdefs.h:577:10
pub const __wur = "";
pub const __always_inline = @compileError("unable to translate macro: undefined identifier `__always_inline__`");
// /usr/include/sys/cdefs.h:595:10
pub const __attribute_artificial__ = @compileError("unable to translate macro: undefined identifier `__artificial__`");
// /usr/include/sys/cdefs.h:604:10
pub const __extern_inline = @compileError("unable to translate macro: undefined identifier `__gnu_inline__`");
// /usr/include/sys/cdefs.h:622:11
pub const __extern_always_inline = @compileError("unable to translate macro: undefined identifier `__gnu_inline__`");
// /usr/include/sys/cdefs.h:623:11
pub const __fortify_function = __extern_always_inline ++ __attribute_artificial__;
pub const __restrict_arr = @compileError("unable to translate C expr: unexpected token '__restrict'");
// /usr/include/sys/cdefs.h:666:10
pub inline fn __glibc_unlikely(cond: anytype) @TypeOf(__builtin_expect(cond, @as(c_int, 0))) {
    _ = &cond;
    return __builtin_expect(cond, @as(c_int, 0));
}
pub inline fn __glibc_likely(cond: anytype) @TypeOf(__builtin_expect(cond, @as(c_int, 1))) {
    _ = &cond;
    return __builtin_expect(cond, @as(c_int, 1));
}
pub const __attribute_nonstring__ = "";
pub const __attribute_copy__ = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/sys/cdefs.h:715:10
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = @as(c_int, 0);
pub inline fn __LDBL_REDIR1(name: anytype, proto: anytype, alias: anytype) @TypeOf(name ++ proto) {
    _ = &name;
    _ = &proto;
    _ = &alias;
    return name ++ proto;
}
pub inline fn __LDBL_REDIR(name: anytype, proto: anytype) @TypeOf(name ++ proto) {
    _ = &name;
    _ = &proto;
    return name ++ proto;
}
pub inline fn __LDBL_REDIR1_NTH(name: anytype, proto: anytype, alias: anytype) @TypeOf(name ++ proto ++ __THROW) {
    _ = &name;
    _ = &proto;
    _ = &alias;
    return name ++ proto ++ __THROW;
}
pub inline fn __LDBL_REDIR_NTH(name: anytype, proto: anytype) @TypeOf(name ++ proto ++ __THROW) {
    _ = &name;
    _ = &proto;
    return name ++ proto ++ __THROW;
}
pub const __LDBL_REDIR2_DECL = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/sys/cdefs.h:792:10
pub const __LDBL_REDIR_DECL = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/sys/cdefs.h:793:10
pub inline fn __REDIRECT_LDBL(name: anytype, proto: anytype, alias: anytype) @TypeOf(__REDIRECT(name, proto, alias)) {
    _ = &name;
    _ = &proto;
    _ = &alias;
    return __REDIRECT(name, proto, alias);
}
pub inline fn __REDIRECT_NTH_LDBL(name: anytype, proto: anytype, alias: anytype) @TypeOf(__REDIRECT_NTH(name, proto, alias)) {
    _ = &name;
    _ = &proto;
    _ = &alias;
    return __REDIRECT_NTH(name, proto, alias);
}
pub const __glibc_macro_warning1 = @compileError("unable to translate macro: undefined identifier `_Pragma`");
// /usr/include/sys/cdefs.h:807:10
pub const __glibc_macro_warning = @compileError("unable to translate macro: undefined identifier `GCC`");
// /usr/include/sys/cdefs.h:808:10
pub const __HAVE_GENERIC_SELECTION = @as(c_int, 1);
pub const __fortified_attr_access = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/sys/cdefs.h:853:11
pub const __attr_access = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/sys/cdefs.h:854:11
pub const __attr_access_none = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/sys/cdefs.h:855:11
pub const __attr_dealloc = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/sys/cdefs.h:865:10
pub const __attr_dealloc_free = "";
pub const __attribute_returns_twice__ = @compileError("unable to translate macro: undefined identifier `__returns_twice__`");
// /usr/include/sys/cdefs.h:872:10
pub const __attribute_struct_may_alias__ = @compileError("unable to translate macro: undefined identifier `__may_alias__`");
// /usr/include/sys/cdefs.h:881:10
pub const __stub___compat_bdflush = "";
pub const __stub_chflags = "";
pub const __stub_fchflags = "";
pub const __stub_gtty = "";
pub const __stub_revoke = "";
pub const __stub_setlogin = "";
pub const __stub_sigreturn = "";
pub const __stub_stty = "";
pub const __GLIBC_USE_LIB_EXT2 = @as(c_int, 0);
pub const __GLIBC_USE_IEC_60559_BFP_EXT = @as(c_int, 0);
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C23 = @as(c_int, 0);
pub const __GLIBC_USE_IEC_60559_EXT = @as(c_int, 0);
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT = @as(c_int, 0);
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C23 = @as(c_int, 0);
pub const __GLIBC_USE_IEC_60559_TYPES_EXT = @as(c_int, 0);
pub const _BITS_TYPES_H = @as(c_int, 1);
pub const __S16_TYPE = c_short;
pub const __U16_TYPE = c_ushort;
pub const __S32_TYPE = c_int;
pub const __U32_TYPE = c_uint;
pub const __SLONGWORD_TYPE = c_long;
pub const __ULONGWORD_TYPE = c_ulong;
pub const __SQUAD_TYPE = c_long;
pub const __UQUAD_TYPE = c_ulong;
pub const __SWORD_TYPE = c_long;
pub const __UWORD_TYPE = c_ulong;
pub const __SLONG32_TYPE = c_int;
pub const __ULONG32_TYPE = c_uint;
pub const __S64_TYPE = c_long;
pub const __U64_TYPE = c_ulong;
pub const __STD_TYPE = @compileError("unable to translate C expr: unexpected token 'typedef'");
// /usr/include/bits/types.h:137:10
pub const _BITS_TYPESIZES_H = @as(c_int, 1);
pub const __SYSCALL_SLONG_TYPE = __SLONGWORD_TYPE;
pub const __SYSCALL_ULONG_TYPE = __ULONGWORD_TYPE;
pub const __DEV_T_TYPE = __UQUAD_TYPE;
pub const __UID_T_TYPE = __U32_TYPE;
pub const __GID_T_TYPE = __U32_TYPE;
pub const __INO_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __INO64_T_TYPE = __UQUAD_TYPE;
pub const __MODE_T_TYPE = __U32_TYPE;
pub const __NLINK_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __FSWORD_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __OFF_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __OFF64_T_TYPE = __SQUAD_TYPE;
pub const __PID_T_TYPE = __S32_TYPE;
pub const __RLIM_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __RLIM64_T_TYPE = __UQUAD_TYPE;
pub const __BLKCNT_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __BLKCNT64_T_TYPE = __SQUAD_TYPE;
pub const __FSBLKCNT_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __FSBLKCNT64_T_TYPE = __UQUAD_TYPE;
pub const __FSFILCNT_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __FSFILCNT64_T_TYPE = __UQUAD_TYPE;
pub const __ID_T_TYPE = __U32_TYPE;
pub const __CLOCK_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __TIME_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __USECONDS_T_TYPE = __U32_TYPE;
pub const __SUSECONDS_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __SUSECONDS64_T_TYPE = __SQUAD_TYPE;
pub const __DADDR_T_TYPE = __S32_TYPE;
pub const __KEY_T_TYPE = __S32_TYPE;
pub const __CLOCKID_T_TYPE = __S32_TYPE;
pub const __TIMER_T_TYPE = ?*anyopaque;
pub const __BLKSIZE_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __FSID_T_TYPE = @compileError("unable to translate macro: undefined identifier `__val`");
// /usr/include/bits/typesizes.h:73:9
pub const __SSIZE_T_TYPE = __SWORD_TYPE;
pub const __CPU_MASK_TYPE = __SYSCALL_ULONG_TYPE;
pub const __OFF_T_MATCHES_OFF64_T = @as(c_int, 1);
pub const __INO_T_MATCHES_INO64_T = @as(c_int, 1);
pub const __RLIM_T_MATCHES_RLIM64_T = @as(c_int, 1);
pub const __STATFS_MATCHES_STATFS64 = @as(c_int, 1);
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = @as(c_int, 1);
pub const __FD_SETSIZE = @as(c_int, 1024);
pub const _BITS_TIME64_H = @as(c_int, 1);
pub const __TIME64_T_TYPE = __TIME_T_TYPE;
pub const _BITS_WCHAR_H = @as(c_int, 1);
pub const __WCHAR_MAX = __WCHAR_MAX__;
pub const __WCHAR_MIN = -__WCHAR_MAX - @as(c_int, 1);
pub const _BITS_STDINT_INTN_H = @as(c_int, 1);
pub const _BITS_STDINT_UINTN_H = @as(c_int, 1);
pub const _BITS_STDINT_LEAST_H = @as(c_int, 1);
pub const __intptr_t_defined = "";
pub const __INT64_C = @import("std").zig.c_translation.Macros.L_SUFFIX;
pub const __UINT64_C = @import("std").zig.c_translation.Macros.UL_SUFFIX;
pub const INT8_MIN = -@as(c_int, 128);
pub const INT16_MIN = -@as(c_int, 32767) - @as(c_int, 1);
pub const INT32_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal) - @as(c_int, 1);
pub const INT64_MIN = -__INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal)) - @as(c_int, 1);
pub const INT8_MAX = @as(c_int, 127);
pub const INT16_MAX = @as(c_int, 32767);
pub const INT32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const INT64_MAX = __INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal));
pub const UINT8_MAX = @as(c_int, 255);
pub const UINT16_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const UINT32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const UINT64_MAX = __UINT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 18446744073709551615, .decimal));
pub const INT_LEAST8_MIN = -@as(c_int, 128);
pub const INT_LEAST16_MIN = -@as(c_int, 32767) - @as(c_int, 1);
pub const INT_LEAST32_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal) - @as(c_int, 1);
pub const INT_LEAST64_MIN = -__INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal)) - @as(c_int, 1);
pub const INT_LEAST8_MAX = @as(c_int, 127);
pub const INT_LEAST16_MAX = @as(c_int, 32767);
pub const INT_LEAST32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const INT_LEAST64_MAX = __INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal));
pub const UINT_LEAST8_MAX = @as(c_int, 255);
pub const UINT_LEAST16_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const UINT_LEAST32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const UINT_LEAST64_MAX = __UINT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 18446744073709551615, .decimal));
pub const INT_FAST8_MIN = -@as(c_int, 128);
pub const INT_FAST16_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal) - @as(c_int, 1);
pub const INT_FAST32_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal) - @as(c_int, 1);
pub const INT_FAST64_MIN = -__INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal)) - @as(c_int, 1);
pub const INT_FAST8_MAX = @as(c_int, 127);
pub const INT_FAST16_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const INT_FAST32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const INT_FAST64_MAX = __INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal));
pub const UINT_FAST8_MAX = @as(c_int, 255);
pub const UINT_FAST16_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const UINT_FAST32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const UINT_FAST64_MAX = __UINT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 18446744073709551615, .decimal));
pub const INTPTR_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal) - @as(c_int, 1);
pub const INTPTR_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const UINTPTR_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const INTMAX_MIN = -__INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal)) - @as(c_int, 1);
pub const INTMAX_MAX = __INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal));
pub const UINTMAX_MAX = __UINT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 18446744073709551615, .decimal));
pub const PTRDIFF_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal) - @as(c_int, 1);
pub const PTRDIFF_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const SIG_ATOMIC_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal) - @as(c_int, 1);
pub const SIG_ATOMIC_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const SIZE_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const WCHAR_MIN = __WCHAR_MIN;
pub const WCHAR_MAX = __WCHAR_MAX;
pub const WINT_MIN = @as(c_uint, 0);
pub const WINT_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub inline fn INT8_C(c: anytype) @TypeOf(c) {
    _ = &c;
    return c;
}
pub inline fn INT16_C(c: anytype) @TypeOf(c) {
    _ = &c;
    return c;
}
pub inline fn INT32_C(c: anytype) @TypeOf(c) {
    _ = &c;
    return c;
}
pub const INT64_C = @import("std").zig.c_translation.Macros.L_SUFFIX;
pub inline fn UINT8_C(c: anytype) @TypeOf(c) {
    _ = &c;
    return c;
}
pub inline fn UINT16_C(c: anytype) @TypeOf(c) {
    _ = &c;
    return c;
}
pub const UINT32_C = @import("std").zig.c_translation.Macros.U_SUFFIX;
pub const UINT64_C = @import("std").zig.c_translation.Macros.UL_SUFFIX;
pub const INTMAX_C = @import("std").zig.c_translation.Macros.L_SUFFIX;
pub const UINTMAX_C = @import("std").zig.c_translation.Macros.UL_SUFFIX;
pub const VULKAN_H_ = @as(c_int, 1);
pub const VK_PLATFORM_H_ = "";
pub const VKAPI_ATTR = "";
pub const VKAPI_CALL = "";
pub const VKAPI_PTR = "";
pub const VULKAN_CORE_H_ = @as(c_int, 1);
pub const VK_VERSION_1_0 = @as(c_int, 1);
pub const VK_DEFINE_HANDLE = @compileError("unable to translate macro: untranslatable usage of arg `object`");
// /usr/include/vulkan/vulkan_core.h:26:9
pub const VK_USE_64_BIT_PTR_DEFINES = @as(c_int, 1);
pub const VK_NULL_HANDLE = @import("std").zig.c_translation.cast(?*anyopaque, @as(c_int, 0));
pub const VK_DEFINE_NON_DISPATCHABLE_HANDLE = @compileError("unable to translate macro: untranslatable usage of arg `object`");
// /usr/include/vulkan/vulkan_core.h:56:17
pub inline fn VK_MAKE_API_VERSION(variant: anytype, major: anytype, minor: anytype, patch: anytype) @TypeOf((((@import("std").zig.c_translation.cast(u32, variant) << @as(c_uint, 29)) | (@import("std").zig.c_translation.cast(u32, major) << @as(c_uint, 22))) | (@import("std").zig.c_translation.cast(u32, minor) << @as(c_uint, 12))) | @import("std").zig.c_translation.cast(u32, patch)) {
    _ = &variant;
    _ = &major;
    _ = &minor;
    _ = &patch;
    return (((@import("std").zig.c_translation.cast(u32, variant) << @as(c_uint, 29)) | (@import("std").zig.c_translation.cast(u32, major) << @as(c_uint, 22))) | (@import("std").zig.c_translation.cast(u32, minor) << @as(c_uint, 12))) | @import("std").zig.c_translation.cast(u32, patch);
}
pub const VK_API_VERSION_1_0 = VK_MAKE_API_VERSION(@as(c_int, 0), @as(c_int, 1), @as(c_int, 0), @as(c_int, 0));
pub const VK_HEADER_VERSION = @as(c_int, 295);
pub const VK_HEADER_VERSION_COMPLETE = VK_MAKE_API_VERSION(@as(c_int, 0), @as(c_int, 1), @as(c_int, 3), VK_HEADER_VERSION);
pub inline fn VK_MAKE_VERSION(major: anytype, minor: anytype, patch: anytype) @TypeOf(((@import("std").zig.c_translation.cast(u32, major) << @as(c_uint, 22)) | (@import("std").zig.c_translation.cast(u32, minor) << @as(c_uint, 12))) | @import("std").zig.c_translation.cast(u32, patch)) {
    _ = &major;
    _ = &minor;
    _ = &patch;
    return ((@import("std").zig.c_translation.cast(u32, major) << @as(c_uint, 22)) | (@import("std").zig.c_translation.cast(u32, minor) << @as(c_uint, 12))) | @import("std").zig.c_translation.cast(u32, patch);
}
pub inline fn VK_VERSION_MAJOR(version: anytype) @TypeOf(@import("std").zig.c_translation.cast(u32, version) >> @as(c_uint, 22)) {
    _ = &version;
    return @import("std").zig.c_translation.cast(u32, version) >> @as(c_uint, 22);
}
pub inline fn VK_VERSION_MINOR(version: anytype) @TypeOf((@import("std").zig.c_translation.cast(u32, version) >> @as(c_uint, 12)) & @as(c_uint, 0x3FF)) {
    _ = &version;
    return (@import("std").zig.c_translation.cast(u32, version) >> @as(c_uint, 12)) & @as(c_uint, 0x3FF);
}
pub inline fn VK_VERSION_PATCH(version: anytype) @TypeOf(@import("std").zig.c_translation.cast(u32, version) & @as(c_uint, 0xFFF)) {
    _ = &version;
    return @import("std").zig.c_translation.cast(u32, version) & @as(c_uint, 0xFFF);
}
pub inline fn VK_API_VERSION_VARIANT(version: anytype) @TypeOf(@import("std").zig.c_translation.cast(u32, version) >> @as(c_uint, 29)) {
    _ = &version;
    return @import("std").zig.c_translation.cast(u32, version) >> @as(c_uint, 29);
}
pub inline fn VK_API_VERSION_MAJOR(version: anytype) @TypeOf((@import("std").zig.c_translation.cast(u32, version) >> @as(c_uint, 22)) & @as(c_uint, 0x7F)) {
    _ = &version;
    return (@import("std").zig.c_translation.cast(u32, version) >> @as(c_uint, 22)) & @as(c_uint, 0x7F);
}
pub inline fn VK_API_VERSION_MINOR(version: anytype) @TypeOf((@import("std").zig.c_translation.cast(u32, version) >> @as(c_uint, 12)) & @as(c_uint, 0x3FF)) {
    _ = &version;
    return (@import("std").zig.c_translation.cast(u32, version) >> @as(c_uint, 12)) & @as(c_uint, 0x3FF);
}
pub inline fn VK_API_VERSION_PATCH(version: anytype) @TypeOf(@import("std").zig.c_translation.cast(u32, version) & @as(c_uint, 0xFFF)) {
    _ = &version;
    return @import("std").zig.c_translation.cast(u32, version) & @as(c_uint, 0xFFF);
}
pub const VK_ATTACHMENT_UNUSED = ~@as(c_uint, 0);
pub const VK_FALSE = @as(c_uint, 0);
pub const VK_LOD_CLAMP_NONE = @as(f32, 1000.0);
pub const VK_QUEUE_FAMILY_IGNORED = ~@as(c_uint, 0);
pub const VK_REMAINING_ARRAY_LAYERS = ~@as(c_uint, 0);
pub const VK_REMAINING_MIP_LEVELS = ~@as(c_uint, 0);
pub const VK_SUBPASS_EXTERNAL = ~@as(c_uint, 0);
pub const VK_TRUE = @as(c_uint, 1);
pub const VK_WHOLE_SIZE = ~@as(c_ulonglong, 0);
pub const VK_MAX_MEMORY_TYPES = @as(c_uint, 32);
pub const VK_MAX_PHYSICAL_DEVICE_NAME_SIZE = @as(c_uint, 256);
pub const VK_UUID_SIZE = @as(c_uint, 16);
pub const VK_MAX_EXTENSION_NAME_SIZE = @as(c_uint, 256);
pub const VK_MAX_DESCRIPTION_SIZE = @as(c_uint, 256);
pub const VK_MAX_MEMORY_HEAPS = @as(c_uint, 16);
pub const VK_VERSION_1_1 = @as(c_int, 1);
pub const VK_API_VERSION_1_1 = VK_MAKE_API_VERSION(@as(c_int, 0), @as(c_int, 1), @as(c_int, 1), @as(c_int, 0));
pub const VK_MAX_DEVICE_GROUP_SIZE = @as(c_uint, 32);
pub const VK_LUID_SIZE = @as(c_uint, 8);
pub const VK_QUEUE_FAMILY_EXTERNAL = ~@as(c_uint, 1);
pub const VK_VERSION_1_2 = @as(c_int, 1);
pub const VK_API_VERSION_1_2 = VK_MAKE_API_VERSION(@as(c_int, 0), @as(c_int, 1), @as(c_int, 2), @as(c_int, 0));
pub const VK_MAX_DRIVER_NAME_SIZE = @as(c_uint, 256);
pub const VK_MAX_DRIVER_INFO_SIZE = @as(c_uint, 256);
pub const VK_VERSION_1_3 = @as(c_int, 1);
pub const VK_API_VERSION_1_3 = VK_MAKE_API_VERSION(@as(c_int, 0), @as(c_int, 1), @as(c_int, 3), @as(c_int, 0));
pub const VK_KHR_surface = @as(c_int, 1);
pub const VK_KHR_SURFACE_SPEC_VERSION = @as(c_int, 25);
pub const VK_KHR_SURFACE_EXTENSION_NAME = "VK_KHR_surface";
pub const VK_KHR_swapchain = @as(c_int, 1);
pub const VK_KHR_SWAPCHAIN_SPEC_VERSION = @as(c_int, 70);
pub const VK_KHR_SWAPCHAIN_EXTENSION_NAME = "VK_KHR_swapchain";
pub const VK_KHR_display = @as(c_int, 1);
pub const VK_KHR_DISPLAY_SPEC_VERSION = @as(c_int, 23);
pub const VK_KHR_DISPLAY_EXTENSION_NAME = "VK_KHR_display";
pub const VK_KHR_display_swapchain = @as(c_int, 1);
pub const VK_KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION = @as(c_int, 10);
pub const VK_KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME = "VK_KHR_display_swapchain";
pub const VK_KHR_sampler_mirror_clamp_to_edge = @as(c_int, 1);
pub const VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_SPEC_VERSION = @as(c_int, 3);
pub const VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME = "VK_KHR_sampler_mirror_clamp_to_edge";
pub const VK_KHR_video_queue = @as(c_int, 1);
pub const VK_KHR_VIDEO_QUEUE_SPEC_VERSION = @as(c_int, 8);
pub const VK_KHR_VIDEO_QUEUE_EXTENSION_NAME = "VK_KHR_video_queue";
pub const VK_KHR_video_decode_queue = @as(c_int, 1);
pub const VK_KHR_VIDEO_DECODE_QUEUE_SPEC_VERSION = @as(c_int, 8);
pub const VK_KHR_VIDEO_DECODE_QUEUE_EXTENSION_NAME = "VK_KHR_video_decode_queue";
pub const VK_KHR_video_encode_h264 = @as(c_int, 1);
pub const VULKAN_VIDEO_CODEC_H264STD_H_ = @as(c_int, 1);
pub const vulkan_video_codec_h264std = @as(c_int, 1);
pub const VULKAN_VIDEO_CODECS_COMMON_H_ = @as(c_int, 1);
pub const vulkan_video_codecs_common = @as(c_int, 1);
pub inline fn VK_MAKE_VIDEO_STD_VERSION(major: anytype, minor: anytype, patch: anytype) @TypeOf(((@import("std").zig.c_translation.cast(u32, major) << @as(c_int, 22)) | (@import("std").zig.c_translation.cast(u32, minor) << @as(c_int, 12))) | @import("std").zig.c_translation.cast(u32, patch)) {
    _ = &major;
    _ = &minor;
    _ = &patch;
    return ((@import("std").zig.c_translation.cast(u32, major) << @as(c_int, 22)) | (@import("std").zig.c_translation.cast(u32, minor) << @as(c_int, 12))) | @import("std").zig.c_translation.cast(u32, patch);
}
pub const STD_VIDEO_H264_CPB_CNT_LIST_SIZE = @as(c_int, 32);
pub const STD_VIDEO_H264_SCALING_LIST_4X4_NUM_LISTS = @as(c_int, 6);
pub const STD_VIDEO_H264_SCALING_LIST_4X4_NUM_ELEMENTS = @as(c_int, 16);
pub const STD_VIDEO_H264_SCALING_LIST_8X8_NUM_LISTS = @as(c_int, 6);
pub const STD_VIDEO_H264_SCALING_LIST_8X8_NUM_ELEMENTS = @as(c_int, 64);
pub const STD_VIDEO_H264_MAX_NUM_LIST_REF = @as(c_int, 32);
pub const STD_VIDEO_H264_MAX_CHROMA_PLANES = @as(c_int, 2);
pub const STD_VIDEO_H264_NO_REFERENCE_PICTURE = @as(c_int, 0xFF);
pub const VULKAN_VIDEO_CODEC_H264STD_ENCODE_H_ = @as(c_int, 1);
pub const vulkan_video_codec_h264std_encode = @as(c_int, 1);
pub const VK_STD_VULKAN_VIDEO_CODEC_H264_ENCODE_API_VERSION_1_0_0 = VK_MAKE_VIDEO_STD_VERSION(@as(c_int, 1), @as(c_int, 0), @as(c_int, 0));
pub const VK_STD_VULKAN_VIDEO_CODEC_H264_ENCODE_SPEC_VERSION = VK_STD_VULKAN_VIDEO_CODEC_H264_ENCODE_API_VERSION_1_0_0;
pub const VK_STD_VULKAN_VIDEO_CODEC_H264_ENCODE_EXTENSION_NAME = "VK_STD_vulkan_video_codec_h264_encode";
pub const VK_KHR_VIDEO_ENCODE_H264_SPEC_VERSION = @as(c_int, 14);
pub const VK_KHR_VIDEO_ENCODE_H264_EXTENSION_NAME = "VK_KHR_video_encode_h264";
pub const VK_KHR_video_encode_h265 = @as(c_int, 1);
pub const VULKAN_VIDEO_CODEC_H265STD_H_ = @as(c_int, 1);
pub const vulkan_video_codec_h265std = @as(c_int, 1);
pub const STD_VIDEO_H265_CPB_CNT_LIST_SIZE = @as(c_int, 32);
pub const STD_VIDEO_H265_SUBLAYERS_LIST_SIZE = @as(c_int, 7);
pub const STD_VIDEO_H265_SCALING_LIST_4X4_NUM_LISTS = @as(c_int, 6);
pub const STD_VIDEO_H265_SCALING_LIST_4X4_NUM_ELEMENTS = @as(c_int, 16);
pub const STD_VIDEO_H265_SCALING_LIST_8X8_NUM_LISTS = @as(c_int, 6);
pub const STD_VIDEO_H265_SCALING_LIST_8X8_NUM_ELEMENTS = @as(c_int, 64);
pub const STD_VIDEO_H265_SCALING_LIST_16X16_NUM_LISTS = @as(c_int, 6);
pub const STD_VIDEO_H265_SCALING_LIST_16X16_NUM_ELEMENTS = @as(c_int, 64);
pub const STD_VIDEO_H265_SCALING_LIST_32X32_NUM_LISTS = @as(c_int, 2);
pub const STD_VIDEO_H265_SCALING_LIST_32X32_NUM_ELEMENTS = @as(c_int, 64);
pub const STD_VIDEO_H265_CHROMA_QP_OFFSET_LIST_SIZE = @as(c_int, 6);
pub const STD_VIDEO_H265_CHROMA_QP_OFFSET_TILE_COLS_LIST_SIZE = @as(c_int, 19);
pub const STD_VIDEO_H265_CHROMA_QP_OFFSET_TILE_ROWS_LIST_SIZE = @as(c_int, 21);
pub const STD_VIDEO_H265_PREDICTOR_PALETTE_COMPONENTS_LIST_SIZE = @as(c_int, 3);
pub const STD_VIDEO_H265_PREDICTOR_PALETTE_COMP_ENTRIES_LIST_SIZE = @as(c_int, 128);
pub const STD_VIDEO_H265_MAX_NUM_LIST_REF = @as(c_int, 15);
pub const STD_VIDEO_H265_MAX_CHROMA_PLANES = @as(c_int, 2);
pub const STD_VIDEO_H265_MAX_SHORT_TERM_REF_PIC_SETS = @as(c_int, 64);
pub const STD_VIDEO_H265_MAX_DPB_SIZE = @as(c_int, 16);
pub const STD_VIDEO_H265_MAX_LONG_TERM_REF_PICS_SPS = @as(c_int, 32);
pub const STD_VIDEO_H265_MAX_LONG_TERM_PICS = @as(c_int, 16);
pub const STD_VIDEO_H265_MAX_DELTA_POC = @as(c_int, 48);
pub const STD_VIDEO_H265_NO_REFERENCE_PICTURE = @as(c_int, 0xFF);
pub const VULKAN_VIDEO_CODEC_H265STD_ENCODE_H_ = @as(c_int, 1);
pub const vulkan_video_codec_h265std_encode = @as(c_int, 1);
pub const VK_STD_VULKAN_VIDEO_CODEC_H265_ENCODE_API_VERSION_1_0_0 = VK_MAKE_VIDEO_STD_VERSION(@as(c_int, 1), @as(c_int, 0), @as(c_int, 0));
pub const VK_STD_VULKAN_VIDEO_CODEC_H265_ENCODE_SPEC_VERSION = VK_STD_VULKAN_VIDEO_CODEC_H265_ENCODE_API_VERSION_1_0_0;
pub const VK_STD_VULKAN_VIDEO_CODEC_H265_ENCODE_EXTENSION_NAME = "VK_STD_vulkan_video_codec_h265_encode";
pub const VK_KHR_VIDEO_ENCODE_H265_SPEC_VERSION = @as(c_int, 14);
pub const VK_KHR_VIDEO_ENCODE_H265_EXTENSION_NAME = "VK_KHR_video_encode_h265";
pub const VK_KHR_video_decode_h264 = @as(c_int, 1);
pub const VULKAN_VIDEO_CODEC_H264STD_DECODE_H_ = @as(c_int, 1);
pub const vulkan_video_codec_h264std_decode = @as(c_int, 1);
pub const VK_STD_VULKAN_VIDEO_CODEC_H264_DECODE_API_VERSION_1_0_0 = VK_MAKE_VIDEO_STD_VERSION(@as(c_int, 1), @as(c_int, 0), @as(c_int, 0));
pub const VK_STD_VULKAN_VIDEO_CODEC_H264_DECODE_SPEC_VERSION = VK_STD_VULKAN_VIDEO_CODEC_H264_DECODE_API_VERSION_1_0_0;
pub const VK_STD_VULKAN_VIDEO_CODEC_H264_DECODE_EXTENSION_NAME = "VK_STD_vulkan_video_codec_h264_decode";
pub const STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_LIST_SIZE = @as(c_int, 2);
pub const VK_KHR_VIDEO_DECODE_H264_SPEC_VERSION = @as(c_int, 9);
pub const VK_KHR_VIDEO_DECODE_H264_EXTENSION_NAME = "VK_KHR_video_decode_h264";
pub const VK_KHR_dynamic_rendering = @as(c_int, 1);
pub const VK_KHR_DYNAMIC_RENDERING_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_DYNAMIC_RENDERING_EXTENSION_NAME = "VK_KHR_dynamic_rendering";
pub const VK_KHR_multiview = @as(c_int, 1);
pub const VK_KHR_MULTIVIEW_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_MULTIVIEW_EXTENSION_NAME = "VK_KHR_multiview";
pub const VK_KHR_get_physical_device_properties2 = @as(c_int, 1);
pub const VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_SPEC_VERSION = @as(c_int, 2);
pub const VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME = "VK_KHR_get_physical_device_properties2";
pub const VK_KHR_device_group = @as(c_int, 1);
pub const VK_KHR_DEVICE_GROUP_SPEC_VERSION = @as(c_int, 4);
pub const VK_KHR_DEVICE_GROUP_EXTENSION_NAME = "VK_KHR_device_group";
pub const VK_KHR_shader_draw_parameters = @as(c_int, 1);
pub const VK_KHR_SHADER_DRAW_PARAMETERS_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SHADER_DRAW_PARAMETERS_EXTENSION_NAME = "VK_KHR_shader_draw_parameters";
pub const VK_KHR_maintenance1 = @as(c_int, 1);
pub const VK_KHR_MAINTENANCE_1_SPEC_VERSION = @as(c_int, 2);
pub const VK_KHR_MAINTENANCE_1_EXTENSION_NAME = "VK_KHR_maintenance1";
pub const VK_KHR_MAINTENANCE1_SPEC_VERSION = VK_KHR_MAINTENANCE_1_SPEC_VERSION;
pub const VK_KHR_MAINTENANCE1_EXTENSION_NAME = VK_KHR_MAINTENANCE_1_EXTENSION_NAME;
pub const VK_KHR_device_group_creation = @as(c_int, 1);
pub const VK_KHR_DEVICE_GROUP_CREATION_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_DEVICE_GROUP_CREATION_EXTENSION_NAME = "VK_KHR_device_group_creation";
pub const VK_MAX_DEVICE_GROUP_SIZE_KHR = VK_MAX_DEVICE_GROUP_SIZE;
pub const VK_KHR_external_memory_capabilities = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME = "VK_KHR_external_memory_capabilities";
pub const VK_LUID_SIZE_KHR = VK_LUID_SIZE;
pub const VK_KHR_external_memory = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_MEMORY_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_MEMORY_EXTENSION_NAME = "VK_KHR_external_memory";
pub const VK_QUEUE_FAMILY_EXTERNAL_KHR = VK_QUEUE_FAMILY_EXTERNAL;
pub const VK_KHR_external_memory_fd = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_MEMORY_FD_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_MEMORY_FD_EXTENSION_NAME = "VK_KHR_external_memory_fd";
pub const VK_KHR_external_semaphore_capabilities = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_EXTENSION_NAME = "VK_KHR_external_semaphore_capabilities";
pub const VK_KHR_external_semaphore = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_SEMAPHORE_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_SEMAPHORE_EXTENSION_NAME = "VK_KHR_external_semaphore";
pub const VK_KHR_external_semaphore_fd = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_SEMAPHORE_FD_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_SEMAPHORE_FD_EXTENSION_NAME = "VK_KHR_external_semaphore_fd";
pub const VK_KHR_push_descriptor = @as(c_int, 1);
pub const VK_KHR_PUSH_DESCRIPTOR_SPEC_VERSION = @as(c_int, 2);
pub const VK_KHR_PUSH_DESCRIPTOR_EXTENSION_NAME = "VK_KHR_push_descriptor";
pub const VK_KHR_shader_float16_int8 = @as(c_int, 1);
pub const VK_KHR_SHADER_FLOAT16_INT8_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SHADER_FLOAT16_INT8_EXTENSION_NAME = "VK_KHR_shader_float16_int8";
pub const VK_KHR_16bit_storage = @as(c_int, 1);
pub const VK_KHR_16BIT_STORAGE_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_16BIT_STORAGE_EXTENSION_NAME = "VK_KHR_16bit_storage";
pub const VK_KHR_incremental_present = @as(c_int, 1);
pub const VK_KHR_INCREMENTAL_PRESENT_SPEC_VERSION = @as(c_int, 2);
pub const VK_KHR_INCREMENTAL_PRESENT_EXTENSION_NAME = "VK_KHR_incremental_present";
pub const VK_KHR_descriptor_update_template = @as(c_int, 1);
pub const VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_EXTENSION_NAME = "VK_KHR_descriptor_update_template";
pub const VK_KHR_imageless_framebuffer = @as(c_int, 1);
pub const VK_KHR_IMAGELESS_FRAMEBUFFER_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_IMAGELESS_FRAMEBUFFER_EXTENSION_NAME = "VK_KHR_imageless_framebuffer";
pub const VK_KHR_create_renderpass2 = @as(c_int, 1);
pub const VK_KHR_CREATE_RENDERPASS_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_CREATE_RENDERPASS_2_EXTENSION_NAME = "VK_KHR_create_renderpass2";
pub const VK_KHR_shared_presentable_image = @as(c_int, 1);
pub const VK_KHR_SHARED_PRESENTABLE_IMAGE_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SHARED_PRESENTABLE_IMAGE_EXTENSION_NAME = "VK_KHR_shared_presentable_image";
pub const VK_KHR_external_fence_capabilities = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_FENCE_CAPABILITIES_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_FENCE_CAPABILITIES_EXTENSION_NAME = "VK_KHR_external_fence_capabilities";
pub const VK_KHR_external_fence = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_FENCE_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_FENCE_EXTENSION_NAME = "VK_KHR_external_fence";
pub const VK_KHR_external_fence_fd = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_FENCE_FD_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_FENCE_FD_EXTENSION_NAME = "VK_KHR_external_fence_fd";
pub const VK_KHR_performance_query = @as(c_int, 1);
pub const VK_KHR_PERFORMANCE_QUERY_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_PERFORMANCE_QUERY_EXTENSION_NAME = "VK_KHR_performance_query";
pub const VK_KHR_maintenance2 = @as(c_int, 1);
pub const VK_KHR_MAINTENANCE_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_MAINTENANCE_2_EXTENSION_NAME = "VK_KHR_maintenance2";
pub const VK_KHR_MAINTENANCE2_SPEC_VERSION = VK_KHR_MAINTENANCE_2_SPEC_VERSION;
pub const VK_KHR_MAINTENANCE2_EXTENSION_NAME = VK_KHR_MAINTENANCE_2_EXTENSION_NAME;
pub const VK_KHR_get_surface_capabilities2 = @as(c_int, 1);
pub const VK_KHR_GET_SURFACE_CAPABILITIES_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_GET_SURFACE_CAPABILITIES_2_EXTENSION_NAME = "VK_KHR_get_surface_capabilities2";
pub const VK_KHR_variable_pointers = @as(c_int, 1);
pub const VK_KHR_VARIABLE_POINTERS_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_VARIABLE_POINTERS_EXTENSION_NAME = "VK_KHR_variable_pointers";
pub const VK_KHR_get_display_properties2 = @as(c_int, 1);
pub const VK_KHR_GET_DISPLAY_PROPERTIES_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_GET_DISPLAY_PROPERTIES_2_EXTENSION_NAME = "VK_KHR_get_display_properties2";
pub const VK_KHR_dedicated_allocation = @as(c_int, 1);
pub const VK_KHR_DEDICATED_ALLOCATION_SPEC_VERSION = @as(c_int, 3);
pub const VK_KHR_DEDICATED_ALLOCATION_EXTENSION_NAME = "VK_KHR_dedicated_allocation";
pub const VK_KHR_storage_buffer_storage_class = @as(c_int, 1);
pub const VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_EXTENSION_NAME = "VK_KHR_storage_buffer_storage_class";
pub const VK_KHR_relaxed_block_layout = @as(c_int, 1);
pub const VK_KHR_RELAXED_BLOCK_LAYOUT_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_RELAXED_BLOCK_LAYOUT_EXTENSION_NAME = "VK_KHR_relaxed_block_layout";
pub const VK_KHR_get_memory_requirements2 = @as(c_int, 1);
pub const VK_KHR_GET_MEMORY_REQUIREMENTS_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_GET_MEMORY_REQUIREMENTS_2_EXTENSION_NAME = "VK_KHR_get_memory_requirements2";
pub const VK_KHR_image_format_list = @as(c_int, 1);
pub const VK_KHR_IMAGE_FORMAT_LIST_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_IMAGE_FORMAT_LIST_EXTENSION_NAME = "VK_KHR_image_format_list";
pub const VK_KHR_sampler_ycbcr_conversion = @as(c_int, 1);
pub const VK_KHR_SAMPLER_YCBCR_CONVERSION_SPEC_VERSION = @as(c_int, 14);
pub const VK_KHR_SAMPLER_YCBCR_CONVERSION_EXTENSION_NAME = "VK_KHR_sampler_ycbcr_conversion";
pub const VK_KHR_bind_memory2 = @as(c_int, 1);
pub const VK_KHR_BIND_MEMORY_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_BIND_MEMORY_2_EXTENSION_NAME = "VK_KHR_bind_memory2";
pub const VK_KHR_maintenance3 = @as(c_int, 1);
pub const VK_KHR_MAINTENANCE_3_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_MAINTENANCE_3_EXTENSION_NAME = "VK_KHR_maintenance3";
pub const VK_KHR_MAINTENANCE3_SPEC_VERSION = VK_KHR_MAINTENANCE_3_SPEC_VERSION;
pub const VK_KHR_MAINTENANCE3_EXTENSION_NAME = VK_KHR_MAINTENANCE_3_EXTENSION_NAME;
pub const VK_KHR_draw_indirect_count = @as(c_int, 1);
pub const VK_KHR_DRAW_INDIRECT_COUNT_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_DRAW_INDIRECT_COUNT_EXTENSION_NAME = "VK_KHR_draw_indirect_count";
pub const VK_KHR_shader_subgroup_extended_types = @as(c_int, 1);
pub const VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_EXTENSION_NAME = "VK_KHR_shader_subgroup_extended_types";
pub const VK_KHR_8bit_storage = @as(c_int, 1);
pub const VK_KHR_8BIT_STORAGE_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_8BIT_STORAGE_EXTENSION_NAME = "VK_KHR_8bit_storage";
pub const VK_KHR_shader_atomic_int64 = @as(c_int, 1);
pub const VK_KHR_SHADER_ATOMIC_INT64_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SHADER_ATOMIC_INT64_EXTENSION_NAME = "VK_KHR_shader_atomic_int64";
pub const VK_KHR_shader_clock = @as(c_int, 1);
pub const VK_KHR_SHADER_CLOCK_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SHADER_CLOCK_EXTENSION_NAME = "VK_KHR_shader_clock";
pub const VK_KHR_video_decode_h265 = @as(c_int, 1);
pub const VULKAN_VIDEO_CODEC_H265STD_DECODE_H_ = @as(c_int, 1);
pub const vulkan_video_codec_h265std_decode = @as(c_int, 1);
pub const VK_STD_VULKAN_VIDEO_CODEC_H265_DECODE_API_VERSION_1_0_0 = VK_MAKE_VIDEO_STD_VERSION(@as(c_int, 1), @as(c_int, 0), @as(c_int, 0));
pub const VK_STD_VULKAN_VIDEO_CODEC_H265_DECODE_SPEC_VERSION = VK_STD_VULKAN_VIDEO_CODEC_H265_DECODE_API_VERSION_1_0_0;
pub const VK_STD_VULKAN_VIDEO_CODEC_H265_DECODE_EXTENSION_NAME = "VK_STD_vulkan_video_codec_h265_decode";
pub const STD_VIDEO_DECODE_H265_REF_PIC_SET_LIST_SIZE = @as(c_int, 8);
pub const VK_KHR_VIDEO_DECODE_H265_SPEC_VERSION = @as(c_int, 8);
pub const VK_KHR_VIDEO_DECODE_H265_EXTENSION_NAME = "VK_KHR_video_decode_h265";
pub const VK_KHR_global_priority = @as(c_int, 1);
pub const VK_MAX_GLOBAL_PRIORITY_SIZE_KHR = @as(c_uint, 16);
pub const VK_KHR_GLOBAL_PRIORITY_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_GLOBAL_PRIORITY_EXTENSION_NAME = "VK_KHR_global_priority";
pub const VK_KHR_driver_properties = @as(c_int, 1);
pub const VK_KHR_DRIVER_PROPERTIES_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_DRIVER_PROPERTIES_EXTENSION_NAME = "VK_KHR_driver_properties";
pub const VK_MAX_DRIVER_NAME_SIZE_KHR = VK_MAX_DRIVER_NAME_SIZE;
pub const VK_MAX_DRIVER_INFO_SIZE_KHR = VK_MAX_DRIVER_INFO_SIZE;
pub const VK_KHR_shader_float_controls = @as(c_int, 1);
pub const VK_KHR_SHADER_FLOAT_CONTROLS_SPEC_VERSION = @as(c_int, 4);
pub const VK_KHR_SHADER_FLOAT_CONTROLS_EXTENSION_NAME = "VK_KHR_shader_float_controls";
pub const VK_KHR_depth_stencil_resolve = @as(c_int, 1);
pub const VK_KHR_DEPTH_STENCIL_RESOLVE_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_DEPTH_STENCIL_RESOLVE_EXTENSION_NAME = "VK_KHR_depth_stencil_resolve";
pub const VK_KHR_swapchain_mutable_format = @as(c_int, 1);
pub const VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_EXTENSION_NAME = "VK_KHR_swapchain_mutable_format";
pub const VK_KHR_timeline_semaphore = @as(c_int, 1);
pub const VK_KHR_TIMELINE_SEMAPHORE_SPEC_VERSION = @as(c_int, 2);
pub const VK_KHR_TIMELINE_SEMAPHORE_EXTENSION_NAME = "VK_KHR_timeline_semaphore";
pub const VK_KHR_vulkan_memory_model = @as(c_int, 1);
pub const VK_KHR_VULKAN_MEMORY_MODEL_SPEC_VERSION = @as(c_int, 3);
pub const VK_KHR_VULKAN_MEMORY_MODEL_EXTENSION_NAME = "VK_KHR_vulkan_memory_model";
pub const VK_KHR_shader_terminate_invocation = @as(c_int, 1);
pub const VK_KHR_SHADER_TERMINATE_INVOCATION_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SHADER_TERMINATE_INVOCATION_EXTENSION_NAME = "VK_KHR_shader_terminate_invocation";
pub const VK_KHR_fragment_shading_rate = @as(c_int, 1);
pub const VK_KHR_FRAGMENT_SHADING_RATE_SPEC_VERSION = @as(c_int, 2);
pub const VK_KHR_FRAGMENT_SHADING_RATE_EXTENSION_NAME = "VK_KHR_fragment_shading_rate";
pub const VK_KHR_dynamic_rendering_local_read = @as(c_int, 1);
pub const VK_KHR_DYNAMIC_RENDERING_LOCAL_READ_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_DYNAMIC_RENDERING_LOCAL_READ_EXTENSION_NAME = "VK_KHR_dynamic_rendering_local_read";
pub const VK_KHR_shader_quad_control = @as(c_int, 1);
pub const VK_KHR_SHADER_QUAD_CONTROL_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SHADER_QUAD_CONTROL_EXTENSION_NAME = "VK_KHR_shader_quad_control";
pub const VK_KHR_spirv_1_4 = @as(c_int, 1);
pub const VK_KHR_SPIRV_1_4_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SPIRV_1_4_EXTENSION_NAME = "VK_KHR_spirv_1_4";
pub const VK_KHR_surface_protected_capabilities = @as(c_int, 1);
pub const VK_KHR_SURFACE_PROTECTED_CAPABILITIES_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SURFACE_PROTECTED_CAPABILITIES_EXTENSION_NAME = "VK_KHR_surface_protected_capabilities";
pub const VK_KHR_separate_depth_stencil_layouts = @as(c_int, 1);
pub const VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_EXTENSION_NAME = "VK_KHR_separate_depth_stencil_layouts";
pub const VK_KHR_present_wait = @as(c_int, 1);
pub const VK_KHR_PRESENT_WAIT_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_PRESENT_WAIT_EXTENSION_NAME = "VK_KHR_present_wait";
pub const VK_KHR_uniform_buffer_standard_layout = @as(c_int, 1);
pub const VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_EXTENSION_NAME = "VK_KHR_uniform_buffer_standard_layout";
pub const VK_KHR_buffer_device_address = @as(c_int, 1);
pub const VK_KHR_BUFFER_DEVICE_ADDRESS_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME = "VK_KHR_buffer_device_address";
pub const VK_KHR_deferred_host_operations = @as(c_int, 1);
pub const VK_KHR_DEFERRED_HOST_OPERATIONS_SPEC_VERSION = @as(c_int, 4);
pub const VK_KHR_DEFERRED_HOST_OPERATIONS_EXTENSION_NAME = "VK_KHR_deferred_host_operations";
pub const VK_KHR_pipeline_executable_properties = @as(c_int, 1);
pub const VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_EXTENSION_NAME = "VK_KHR_pipeline_executable_properties";
pub const VK_KHR_map_memory2 = @as(c_int, 1);
pub const VK_KHR_MAP_MEMORY_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_MAP_MEMORY_2_EXTENSION_NAME = "VK_KHR_map_memory2";
pub const VK_KHR_shader_integer_dot_product = @as(c_int, 1);
pub const VK_KHR_SHADER_INTEGER_DOT_PRODUCT_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SHADER_INTEGER_DOT_PRODUCT_EXTENSION_NAME = "VK_KHR_shader_integer_dot_product";
pub const VK_KHR_pipeline_library = @as(c_int, 1);
pub const VK_KHR_PIPELINE_LIBRARY_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_PIPELINE_LIBRARY_EXTENSION_NAME = "VK_KHR_pipeline_library";
pub const VK_KHR_shader_non_semantic_info = @as(c_int, 1);
pub const VK_KHR_SHADER_NON_SEMANTIC_INFO_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SHADER_NON_SEMANTIC_INFO_EXTENSION_NAME = "VK_KHR_shader_non_semantic_info";
pub const VK_KHR_present_id = @as(c_int, 1);
pub const VK_KHR_PRESENT_ID_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_PRESENT_ID_EXTENSION_NAME = "VK_KHR_present_id";
pub const VK_KHR_video_encode_queue = @as(c_int, 1);
pub const VK_KHR_VIDEO_ENCODE_QUEUE_SPEC_VERSION = @as(c_int, 12);
pub const VK_KHR_VIDEO_ENCODE_QUEUE_EXTENSION_NAME = "VK_KHR_video_encode_queue";
pub const VK_KHR_synchronization2 = @as(c_int, 1);
pub const VK_KHR_SYNCHRONIZATION_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SYNCHRONIZATION_2_EXTENSION_NAME = "VK_KHR_synchronization2";
pub const VK_KHR_fragment_shader_barycentric = @as(c_int, 1);
pub const VK_KHR_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME = "VK_KHR_fragment_shader_barycentric";
pub const VK_KHR_shader_subgroup_uniform_control_flow = @as(c_int, 1);
pub const VK_KHR_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_EXTENSION_NAME = "VK_KHR_shader_subgroup_uniform_control_flow";
pub const VK_KHR_zero_initialize_workgroup_memory = @as(c_int, 1);
pub const VK_KHR_ZERO_INITIALIZE_WORKGROUP_MEMORY_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_ZERO_INITIALIZE_WORKGROUP_MEMORY_EXTENSION_NAME = "VK_KHR_zero_initialize_workgroup_memory";
pub const VK_KHR_workgroup_memory_explicit_layout = @as(c_int, 1);
pub const VK_KHR_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_EXTENSION_NAME = "VK_KHR_workgroup_memory_explicit_layout";
pub const VK_KHR_copy_commands2 = @as(c_int, 1);
pub const VK_KHR_COPY_COMMANDS_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_COPY_COMMANDS_2_EXTENSION_NAME = "VK_KHR_copy_commands2";
pub const VK_KHR_format_feature_flags2 = @as(c_int, 1);
pub const VK_KHR_FORMAT_FEATURE_FLAGS_2_SPEC_VERSION = @as(c_int, 2);
pub const VK_KHR_FORMAT_FEATURE_FLAGS_2_EXTENSION_NAME = "VK_KHR_format_feature_flags2";
pub const VK_KHR_ray_tracing_maintenance1 = @as(c_int, 1);
pub const VK_KHR_RAY_TRACING_MAINTENANCE_1_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_RAY_TRACING_MAINTENANCE_1_EXTENSION_NAME = "VK_KHR_ray_tracing_maintenance1";
pub const VK_KHR_portability_enumeration = @as(c_int, 1);
pub const VK_KHR_PORTABILITY_ENUMERATION_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_PORTABILITY_ENUMERATION_EXTENSION_NAME = "VK_KHR_portability_enumeration";
pub const VK_KHR_maintenance4 = @as(c_int, 1);
pub const VK_KHR_MAINTENANCE_4_SPEC_VERSION = @as(c_int, 2);
pub const VK_KHR_MAINTENANCE_4_EXTENSION_NAME = "VK_KHR_maintenance4";
pub const VK_KHR_shader_subgroup_rotate = @as(c_int, 1);
pub const VK_KHR_SHADER_SUBGROUP_ROTATE_SPEC_VERSION = @as(c_int, 2);
pub const VK_KHR_SHADER_SUBGROUP_ROTATE_EXTENSION_NAME = "VK_KHR_shader_subgroup_rotate";
pub const VK_KHR_shader_maximal_reconvergence = @as(c_int, 1);
pub const VK_KHR_SHADER_MAXIMAL_RECONVERGENCE_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SHADER_MAXIMAL_RECONVERGENCE_EXTENSION_NAME = "VK_KHR_shader_maximal_reconvergence";
pub const VK_KHR_maintenance5 = @as(c_int, 1);
pub const VK_KHR_MAINTENANCE_5_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_MAINTENANCE_5_EXTENSION_NAME = "VK_KHR_maintenance5";
pub const VK_KHR_ray_tracing_position_fetch = @as(c_int, 1);
pub const VK_KHR_RAY_TRACING_POSITION_FETCH_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_RAY_TRACING_POSITION_FETCH_EXTENSION_NAME = "VK_KHR_ray_tracing_position_fetch";
pub const VK_KHR_pipeline_binary = @as(c_int, 1);
pub const VK_MAX_PIPELINE_BINARY_KEY_SIZE_KHR = @as(c_uint, 32);
pub const VK_KHR_PIPELINE_BINARY_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_PIPELINE_BINARY_EXTENSION_NAME = "VK_KHR_pipeline_binary";
pub const VK_KHR_cooperative_matrix = @as(c_int, 1);
pub const VK_KHR_COOPERATIVE_MATRIX_SPEC_VERSION = @as(c_int, 2);
pub const VK_KHR_COOPERATIVE_MATRIX_EXTENSION_NAME = "VK_KHR_cooperative_matrix";
pub const VK_KHR_compute_shader_derivatives = @as(c_int, 1);
pub const VK_KHR_COMPUTE_SHADER_DERIVATIVES_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME = "VK_KHR_compute_shader_derivatives";
pub const VK_KHR_video_decode_av1 = @as(c_int, 1);
pub const VULKAN_VIDEO_CODEC_AV1STD_H_ = @as(c_int, 1);
pub const vulkan_video_codec_av1std = @as(c_int, 1);
pub const STD_VIDEO_AV1_NUM_REF_FRAMES = @as(c_int, 8);
pub const STD_VIDEO_AV1_REFS_PER_FRAME = @as(c_int, 7);
pub const STD_VIDEO_AV1_TOTAL_REFS_PER_FRAME = @as(c_int, 8);
pub const STD_VIDEO_AV1_MAX_TILE_COLS = @as(c_int, 64);
pub const STD_VIDEO_AV1_MAX_TILE_ROWS = @as(c_int, 64);
pub const STD_VIDEO_AV1_MAX_SEGMENTS = @as(c_int, 8);
pub const STD_VIDEO_AV1_SEG_LVL_MAX = @as(c_int, 8);
pub const STD_VIDEO_AV1_PRIMARY_REF_NONE = @as(c_int, 7);
pub const STD_VIDEO_AV1_SELECT_INTEGER_MV = @as(c_int, 2);
pub const STD_VIDEO_AV1_SELECT_SCREEN_CONTENT_TOOLS = @as(c_int, 2);
pub const STD_VIDEO_AV1_SKIP_MODE_FRAMES = @as(c_int, 2);
pub const STD_VIDEO_AV1_MAX_LOOP_FILTER_STRENGTHS = @as(c_int, 4);
pub const STD_VIDEO_AV1_LOOP_FILTER_ADJUSTMENTS = @as(c_int, 2);
pub const STD_VIDEO_AV1_MAX_CDEF_FILTER_STRENGTHS = @as(c_int, 8);
pub const STD_VIDEO_AV1_MAX_NUM_PLANES = @as(c_int, 3);
pub const STD_VIDEO_AV1_GLOBAL_MOTION_PARAMS = @as(c_int, 6);
pub const STD_VIDEO_AV1_MAX_NUM_Y_POINTS = @as(c_int, 14);
pub const STD_VIDEO_AV1_MAX_NUM_CB_POINTS = @as(c_int, 10);
pub const STD_VIDEO_AV1_MAX_NUM_CR_POINTS = @as(c_int, 10);
pub const STD_VIDEO_AV1_MAX_NUM_POS_LUMA = @as(c_int, 24);
pub const STD_VIDEO_AV1_MAX_NUM_POS_CHROMA = @as(c_int, 25);
pub const VULKAN_VIDEO_CODEC_AV1STD_DECODE_H_ = @as(c_int, 1);
pub const vulkan_video_codec_av1std_decode = @as(c_int, 1);
pub const VK_STD_VULKAN_VIDEO_CODEC_AV1_DECODE_API_VERSION_1_0_0 = VK_MAKE_VIDEO_STD_VERSION(@as(c_int, 1), @as(c_int, 0), @as(c_int, 0));
pub const VK_STD_VULKAN_VIDEO_CODEC_AV1_DECODE_SPEC_VERSION = VK_STD_VULKAN_VIDEO_CODEC_AV1_DECODE_API_VERSION_1_0_0;
pub const VK_STD_VULKAN_VIDEO_CODEC_AV1_DECODE_EXTENSION_NAME = "VK_STD_vulkan_video_codec_av1_decode";
pub const VK_MAX_VIDEO_AV1_REFERENCES_PER_FRAME_KHR = @as(c_uint, 7);
pub const VK_KHR_VIDEO_DECODE_AV1_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_VIDEO_DECODE_AV1_EXTENSION_NAME = "VK_KHR_video_decode_av1";
pub const VK_KHR_video_maintenance1 = @as(c_int, 1);
pub const VK_KHR_VIDEO_MAINTENANCE_1_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_VIDEO_MAINTENANCE_1_EXTENSION_NAME = "VK_KHR_video_maintenance1";
pub const VK_KHR_vertex_attribute_divisor = @as(c_int, 1);
pub const VK_KHR_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME = "VK_KHR_vertex_attribute_divisor";
pub const VK_KHR_load_store_op_none = @as(c_int, 1);
pub const VK_KHR_LOAD_STORE_OP_NONE_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_LOAD_STORE_OP_NONE_EXTENSION_NAME = "VK_KHR_load_store_op_none";
pub const VK_KHR_shader_float_controls2 = @as(c_int, 1);
pub const VK_KHR_SHADER_FLOAT_CONTROLS_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SHADER_FLOAT_CONTROLS_2_EXTENSION_NAME = "VK_KHR_shader_float_controls2";
pub const VK_KHR_index_type_uint8 = @as(c_int, 1);
pub const VK_KHR_INDEX_TYPE_UINT8_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_INDEX_TYPE_UINT8_EXTENSION_NAME = "VK_KHR_index_type_uint8";
pub const VK_KHR_line_rasterization = @as(c_int, 1);
pub const VK_KHR_LINE_RASTERIZATION_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_LINE_RASTERIZATION_EXTENSION_NAME = "VK_KHR_line_rasterization";
pub const VK_KHR_calibrated_timestamps = @as(c_int, 1);
pub const VK_KHR_CALIBRATED_TIMESTAMPS_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_CALIBRATED_TIMESTAMPS_EXTENSION_NAME = "VK_KHR_calibrated_timestamps";
pub const VK_KHR_shader_expect_assume = @as(c_int, 1);
pub const VK_KHR_SHADER_EXPECT_ASSUME_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SHADER_EXPECT_ASSUME_EXTENSION_NAME = "VK_KHR_shader_expect_assume";
pub const VK_KHR_maintenance6 = @as(c_int, 1);
pub const VK_KHR_MAINTENANCE_6_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_MAINTENANCE_6_EXTENSION_NAME = "VK_KHR_maintenance6";
pub const VK_KHR_shader_relaxed_extended_instruction = @as(c_int, 1);
pub const VK_KHR_SHADER_RELAXED_EXTENDED_INSTRUCTION_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SHADER_RELAXED_EXTENDED_INSTRUCTION_EXTENSION_NAME = "VK_KHR_shader_relaxed_extended_instruction";
pub const VK_KHR_maintenance7 = @as(c_int, 1);
pub const VK_KHR_MAINTENANCE_7_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_MAINTENANCE_7_EXTENSION_NAME = "VK_KHR_maintenance7";
pub const VK_EXT_debug_report = @as(c_int, 1);
pub const VK_EXT_DEBUG_REPORT_SPEC_VERSION = @as(c_int, 10);
pub const VK_EXT_DEBUG_REPORT_EXTENSION_NAME = "VK_EXT_debug_report";
pub const VK_NV_glsl_shader = @as(c_int, 1);
pub const VK_NV_GLSL_SHADER_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_GLSL_SHADER_EXTENSION_NAME = "VK_NV_glsl_shader";
pub const VK_EXT_depth_range_unrestricted = @as(c_int, 1);
pub const VK_EXT_DEPTH_RANGE_UNRESTRICTED_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_DEPTH_RANGE_UNRESTRICTED_EXTENSION_NAME = "VK_EXT_depth_range_unrestricted";
pub const VK_IMG_filter_cubic = @as(c_int, 1);
pub const VK_IMG_FILTER_CUBIC_SPEC_VERSION = @as(c_int, 1);
pub const VK_IMG_FILTER_CUBIC_EXTENSION_NAME = "VK_IMG_filter_cubic";
pub const VK_AMD_rasterization_order = @as(c_int, 1);
pub const VK_AMD_RASTERIZATION_ORDER_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_RASTERIZATION_ORDER_EXTENSION_NAME = "VK_AMD_rasterization_order";
pub const VK_AMD_shader_trinary_minmax = @as(c_int, 1);
pub const VK_AMD_SHADER_TRINARY_MINMAX_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_SHADER_TRINARY_MINMAX_EXTENSION_NAME = "VK_AMD_shader_trinary_minmax";
pub const VK_AMD_shader_explicit_vertex_parameter = @as(c_int, 1);
pub const VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_EXTENSION_NAME = "VK_AMD_shader_explicit_vertex_parameter";
pub const VK_EXT_debug_marker = @as(c_int, 1);
pub const VK_EXT_DEBUG_MARKER_SPEC_VERSION = @as(c_int, 4);
pub const VK_EXT_DEBUG_MARKER_EXTENSION_NAME = "VK_EXT_debug_marker";
pub const VK_AMD_gcn_shader = @as(c_int, 1);
pub const VK_AMD_GCN_SHADER_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_GCN_SHADER_EXTENSION_NAME = "VK_AMD_gcn_shader";
pub const VK_NV_dedicated_allocation = @as(c_int, 1);
pub const VK_NV_DEDICATED_ALLOCATION_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_DEDICATED_ALLOCATION_EXTENSION_NAME = "VK_NV_dedicated_allocation";
pub const VK_EXT_transform_feedback = @as(c_int, 1);
pub const VK_EXT_TRANSFORM_FEEDBACK_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_TRANSFORM_FEEDBACK_EXTENSION_NAME = "VK_EXT_transform_feedback";
pub const VK_NVX_binary_import = @as(c_int, 1);
pub const VK_NVX_BINARY_IMPORT_SPEC_VERSION = @as(c_int, 1);
pub const VK_NVX_BINARY_IMPORT_EXTENSION_NAME = "VK_NVX_binary_import";
pub const VK_NVX_image_view_handle = @as(c_int, 1);
pub const VK_NVX_IMAGE_VIEW_HANDLE_SPEC_VERSION = @as(c_int, 2);
pub const VK_NVX_IMAGE_VIEW_HANDLE_EXTENSION_NAME = "VK_NVX_image_view_handle";
pub const VK_AMD_draw_indirect_count = @as(c_int, 1);
pub const VK_AMD_DRAW_INDIRECT_COUNT_SPEC_VERSION = @as(c_int, 2);
pub const VK_AMD_DRAW_INDIRECT_COUNT_EXTENSION_NAME = "VK_AMD_draw_indirect_count";
pub const VK_AMD_negative_viewport_height = @as(c_int, 1);
pub const VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_EXTENSION_NAME = "VK_AMD_negative_viewport_height";
pub const VK_AMD_gpu_shader_half_float = @as(c_int, 1);
pub const VK_AMD_GPU_SHADER_HALF_FLOAT_SPEC_VERSION = @as(c_int, 2);
pub const VK_AMD_GPU_SHADER_HALF_FLOAT_EXTENSION_NAME = "VK_AMD_gpu_shader_half_float";
pub const VK_AMD_shader_ballot = @as(c_int, 1);
pub const VK_AMD_SHADER_BALLOT_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_SHADER_BALLOT_EXTENSION_NAME = "VK_AMD_shader_ballot";
pub const VK_AMD_texture_gather_bias_lod = @as(c_int, 1);
pub const VK_AMD_TEXTURE_GATHER_BIAS_LOD_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_TEXTURE_GATHER_BIAS_LOD_EXTENSION_NAME = "VK_AMD_texture_gather_bias_lod";
pub const VK_AMD_shader_info = @as(c_int, 1);
pub const VK_AMD_SHADER_INFO_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_SHADER_INFO_EXTENSION_NAME = "VK_AMD_shader_info";
pub const VK_AMD_shader_image_load_store_lod = @as(c_int, 1);
pub const VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_EXTENSION_NAME = "VK_AMD_shader_image_load_store_lod";
pub const VK_NV_corner_sampled_image = @as(c_int, 1);
pub const VK_NV_CORNER_SAMPLED_IMAGE_SPEC_VERSION = @as(c_int, 2);
pub const VK_NV_CORNER_SAMPLED_IMAGE_EXTENSION_NAME = "VK_NV_corner_sampled_image";
pub const VK_IMG_format_pvrtc = @as(c_int, 1);
pub const VK_IMG_FORMAT_PVRTC_SPEC_VERSION = @as(c_int, 1);
pub const VK_IMG_FORMAT_PVRTC_EXTENSION_NAME = "VK_IMG_format_pvrtc";
pub const VK_NV_external_memory_capabilities = @as(c_int, 1);
pub const VK_NV_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME = "VK_NV_external_memory_capabilities";
pub const VK_NV_external_memory = @as(c_int, 1);
pub const VK_NV_EXTERNAL_MEMORY_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_EXTERNAL_MEMORY_EXTENSION_NAME = "VK_NV_external_memory";
pub const VK_EXT_validation_flags = @as(c_int, 1);
pub const VK_EXT_VALIDATION_FLAGS_SPEC_VERSION = @as(c_int, 3);
pub const VK_EXT_VALIDATION_FLAGS_EXTENSION_NAME = "VK_EXT_validation_flags";
pub const VK_EXT_shader_subgroup_ballot = @as(c_int, 1);
pub const VK_EXT_SHADER_SUBGROUP_BALLOT_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SHADER_SUBGROUP_BALLOT_EXTENSION_NAME = "VK_EXT_shader_subgroup_ballot";
pub const VK_EXT_shader_subgroup_vote = @as(c_int, 1);
pub const VK_EXT_SHADER_SUBGROUP_VOTE_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SHADER_SUBGROUP_VOTE_EXTENSION_NAME = "VK_EXT_shader_subgroup_vote";
pub const VK_EXT_texture_compression_astc_hdr = @as(c_int, 1);
pub const VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_EXTENSION_NAME = "VK_EXT_texture_compression_astc_hdr";
pub const VK_EXT_astc_decode_mode = @as(c_int, 1);
pub const VK_EXT_ASTC_DECODE_MODE_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_ASTC_DECODE_MODE_EXTENSION_NAME = "VK_EXT_astc_decode_mode";
pub const VK_EXT_pipeline_robustness = @as(c_int, 1);
pub const VK_EXT_PIPELINE_ROBUSTNESS_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_PIPELINE_ROBUSTNESS_EXTENSION_NAME = "VK_EXT_pipeline_robustness";
pub const VK_EXT_conditional_rendering = @as(c_int, 1);
pub const VK_EXT_CONDITIONAL_RENDERING_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_CONDITIONAL_RENDERING_EXTENSION_NAME = "VK_EXT_conditional_rendering";
pub const VK_NV_clip_space_w_scaling = @as(c_int, 1);
pub const VK_NV_CLIP_SPACE_W_SCALING_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_CLIP_SPACE_W_SCALING_EXTENSION_NAME = "VK_NV_clip_space_w_scaling";
pub const VK_EXT_direct_mode_display = @as(c_int, 1);
pub const VK_EXT_DIRECT_MODE_DISPLAY_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_DIRECT_MODE_DISPLAY_EXTENSION_NAME = "VK_EXT_direct_mode_display";
pub const VK_EXT_display_surface_counter = @as(c_int, 1);
pub const VK_EXT_DISPLAY_SURFACE_COUNTER_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_DISPLAY_SURFACE_COUNTER_EXTENSION_NAME = "VK_EXT_display_surface_counter";
pub const VK_EXT_display_control = @as(c_int, 1);
pub const VK_EXT_DISPLAY_CONTROL_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_DISPLAY_CONTROL_EXTENSION_NAME = "VK_EXT_display_control";
pub const VK_GOOGLE_display_timing = @as(c_int, 1);
pub const VK_GOOGLE_DISPLAY_TIMING_SPEC_VERSION = @as(c_int, 1);
pub const VK_GOOGLE_DISPLAY_TIMING_EXTENSION_NAME = "VK_GOOGLE_display_timing";
pub const VK_NV_sample_mask_override_coverage = @as(c_int, 1);
pub const VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_EXTENSION_NAME = "VK_NV_sample_mask_override_coverage";
pub const VK_NV_geometry_shader_passthrough = @as(c_int, 1);
pub const VK_NV_GEOMETRY_SHADER_PASSTHROUGH_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_GEOMETRY_SHADER_PASSTHROUGH_EXTENSION_NAME = "VK_NV_geometry_shader_passthrough";
pub const VK_NV_viewport_array2 = @as(c_int, 1);
pub const VK_NV_VIEWPORT_ARRAY_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_VIEWPORT_ARRAY_2_EXTENSION_NAME = "VK_NV_viewport_array2";
pub const VK_NV_VIEWPORT_ARRAY2_SPEC_VERSION = VK_NV_VIEWPORT_ARRAY_2_SPEC_VERSION;
pub const VK_NV_VIEWPORT_ARRAY2_EXTENSION_NAME = VK_NV_VIEWPORT_ARRAY_2_EXTENSION_NAME;
pub const VK_NVX_multiview_per_view_attributes = @as(c_int, 1);
pub const VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_SPEC_VERSION = @as(c_int, 1);
pub const VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_EXTENSION_NAME = "VK_NVX_multiview_per_view_attributes";
pub const VK_NV_viewport_swizzle = @as(c_int, 1);
pub const VK_NV_VIEWPORT_SWIZZLE_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_VIEWPORT_SWIZZLE_EXTENSION_NAME = "VK_NV_viewport_swizzle";
pub const VK_EXT_discard_rectangles = @as(c_int, 1);
pub const VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_DISCARD_RECTANGLES_EXTENSION_NAME = "VK_EXT_discard_rectangles";
pub const VK_EXT_conservative_rasterization = @as(c_int, 1);
pub const VK_EXT_CONSERVATIVE_RASTERIZATION_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_CONSERVATIVE_RASTERIZATION_EXTENSION_NAME = "VK_EXT_conservative_rasterization";
pub const VK_EXT_depth_clip_enable = @as(c_int, 1);
pub const VK_EXT_DEPTH_CLIP_ENABLE_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_DEPTH_CLIP_ENABLE_EXTENSION_NAME = "VK_EXT_depth_clip_enable";
pub const VK_EXT_swapchain_colorspace = @as(c_int, 1);
pub const VK_EXT_SWAPCHAIN_COLOR_SPACE_SPEC_VERSION = @as(c_int, 5);
pub const VK_EXT_SWAPCHAIN_COLOR_SPACE_EXTENSION_NAME = "VK_EXT_swapchain_colorspace";
pub const VK_EXT_hdr_metadata = @as(c_int, 1);
pub const VK_EXT_HDR_METADATA_SPEC_VERSION = @as(c_int, 3);
pub const VK_EXT_HDR_METADATA_EXTENSION_NAME = "VK_EXT_hdr_metadata";
pub const VK_IMG_relaxed_line_rasterization = @as(c_int, 1);
pub const VK_IMG_RELAXED_LINE_RASTERIZATION_SPEC_VERSION = @as(c_int, 1);
pub const VK_IMG_RELAXED_LINE_RASTERIZATION_EXTENSION_NAME = "VK_IMG_relaxed_line_rasterization";
pub const VK_EXT_external_memory_dma_buf = @as(c_int, 1);
pub const VK_EXT_EXTERNAL_MEMORY_DMA_BUF_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_EXTERNAL_MEMORY_DMA_BUF_EXTENSION_NAME = "VK_EXT_external_memory_dma_buf";
pub const VK_EXT_queue_family_foreign = @as(c_int, 1);
pub const VK_EXT_QUEUE_FAMILY_FOREIGN_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_QUEUE_FAMILY_FOREIGN_EXTENSION_NAME = "VK_EXT_queue_family_foreign";
pub const VK_QUEUE_FAMILY_FOREIGN_EXT = ~@as(c_uint, 2);
pub const VK_EXT_debug_utils = @as(c_int, 1);
pub const VK_EXT_DEBUG_UTILS_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_DEBUG_UTILS_EXTENSION_NAME = "VK_EXT_debug_utils";
pub const VK_EXT_sampler_filter_minmax = @as(c_int, 1);
pub const VK_EXT_SAMPLER_FILTER_MINMAX_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_SAMPLER_FILTER_MINMAX_EXTENSION_NAME = "VK_EXT_sampler_filter_minmax";
pub const VK_AMD_gpu_shader_int16 = @as(c_int, 1);
pub const VK_AMD_GPU_SHADER_INT16_SPEC_VERSION = @as(c_int, 2);
pub const VK_AMD_GPU_SHADER_INT16_EXTENSION_NAME = "VK_AMD_gpu_shader_int16";
pub const VK_AMD_mixed_attachment_samples = @as(c_int, 1);
pub const VK_AMD_MIXED_ATTACHMENT_SAMPLES_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_MIXED_ATTACHMENT_SAMPLES_EXTENSION_NAME = "VK_AMD_mixed_attachment_samples";
pub const VK_AMD_shader_fragment_mask = @as(c_int, 1);
pub const VK_AMD_SHADER_FRAGMENT_MASK_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_SHADER_FRAGMENT_MASK_EXTENSION_NAME = "VK_AMD_shader_fragment_mask";
pub const VK_EXT_inline_uniform_block = @as(c_int, 1);
pub const VK_EXT_INLINE_UNIFORM_BLOCK_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_INLINE_UNIFORM_BLOCK_EXTENSION_NAME = "VK_EXT_inline_uniform_block";
pub const VK_EXT_shader_stencil_export = @as(c_int, 1);
pub const VK_EXT_SHADER_STENCIL_EXPORT_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SHADER_STENCIL_EXPORT_EXTENSION_NAME = "VK_EXT_shader_stencil_export";
pub const VK_EXT_sample_locations = @as(c_int, 1);
pub const VK_EXT_SAMPLE_LOCATIONS_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SAMPLE_LOCATIONS_EXTENSION_NAME = "VK_EXT_sample_locations";
pub const VK_EXT_blend_operation_advanced = @as(c_int, 1);
pub const VK_EXT_BLEND_OPERATION_ADVANCED_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_BLEND_OPERATION_ADVANCED_EXTENSION_NAME = "VK_EXT_blend_operation_advanced";
pub const VK_NV_fragment_coverage_to_color = @as(c_int, 1);
pub const VK_NV_FRAGMENT_COVERAGE_TO_COLOR_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_FRAGMENT_COVERAGE_TO_COLOR_EXTENSION_NAME = "VK_NV_fragment_coverage_to_color";
pub const VK_NV_framebuffer_mixed_samples = @as(c_int, 1);
pub const VK_NV_FRAMEBUFFER_MIXED_SAMPLES_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_FRAMEBUFFER_MIXED_SAMPLES_EXTENSION_NAME = "VK_NV_framebuffer_mixed_samples";
pub const VK_NV_fill_rectangle = @as(c_int, 1);
pub const VK_NV_FILL_RECTANGLE_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_FILL_RECTANGLE_EXTENSION_NAME = "VK_NV_fill_rectangle";
pub const VK_NV_shader_sm_builtins = @as(c_int, 1);
pub const VK_NV_SHADER_SM_BUILTINS_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_SHADER_SM_BUILTINS_EXTENSION_NAME = "VK_NV_shader_sm_builtins";
pub const VK_EXT_post_depth_coverage = @as(c_int, 1);
pub const VK_EXT_POST_DEPTH_COVERAGE_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_POST_DEPTH_COVERAGE_EXTENSION_NAME = "VK_EXT_post_depth_coverage";
pub const VK_EXT_image_drm_format_modifier = @as(c_int, 1);
pub const VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_EXTENSION_NAME = "VK_EXT_image_drm_format_modifier";
pub const VK_EXT_validation_cache = @as(c_int, 1);
pub const VK_EXT_VALIDATION_CACHE_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_VALIDATION_CACHE_EXTENSION_NAME = "VK_EXT_validation_cache";
pub const VK_EXT_descriptor_indexing = @as(c_int, 1);
pub const VK_EXT_DESCRIPTOR_INDEXING_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_DESCRIPTOR_INDEXING_EXTENSION_NAME = "VK_EXT_descriptor_indexing";
pub const VK_EXT_shader_viewport_index_layer = @as(c_int, 1);
pub const VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_EXTENSION_NAME = "VK_EXT_shader_viewport_index_layer";
pub const VK_NV_shading_rate_image = @as(c_int, 1);
pub const VK_NV_SHADING_RATE_IMAGE_SPEC_VERSION = @as(c_int, 3);
pub const VK_NV_SHADING_RATE_IMAGE_EXTENSION_NAME = "VK_NV_shading_rate_image";
pub const VK_NV_ray_tracing = @as(c_int, 1);
pub const VK_NV_RAY_TRACING_SPEC_VERSION = @as(c_int, 3);
pub const VK_NV_RAY_TRACING_EXTENSION_NAME = "VK_NV_ray_tracing";
pub const VK_SHADER_UNUSED_KHR = ~@as(c_uint, 0);
pub const VK_SHADER_UNUSED_NV = VK_SHADER_UNUSED_KHR;
pub const VK_NV_representative_fragment_test = @as(c_int, 1);
pub const VK_NV_REPRESENTATIVE_FRAGMENT_TEST_SPEC_VERSION = @as(c_int, 2);
pub const VK_NV_REPRESENTATIVE_FRAGMENT_TEST_EXTENSION_NAME = "VK_NV_representative_fragment_test";
pub const VK_EXT_filter_cubic = @as(c_int, 1);
pub const VK_EXT_FILTER_CUBIC_SPEC_VERSION = @as(c_int, 3);
pub const VK_EXT_FILTER_CUBIC_EXTENSION_NAME = "VK_EXT_filter_cubic";
pub const VK_QCOM_render_pass_shader_resolve = @as(c_int, 1);
pub const VK_QCOM_RENDER_PASS_SHADER_RESOLVE_SPEC_VERSION = @as(c_int, 4);
pub const VK_QCOM_RENDER_PASS_SHADER_RESOLVE_EXTENSION_NAME = "VK_QCOM_render_pass_shader_resolve";
pub const VK_EXT_global_priority = @as(c_int, 1);
pub const VK_EXT_GLOBAL_PRIORITY_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_GLOBAL_PRIORITY_EXTENSION_NAME = "VK_EXT_global_priority";
pub const VK_EXT_external_memory_host = @as(c_int, 1);
pub const VK_EXT_EXTERNAL_MEMORY_HOST_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_EXTERNAL_MEMORY_HOST_EXTENSION_NAME = "VK_EXT_external_memory_host";
pub const VK_AMD_buffer_marker = @as(c_int, 1);
pub const VK_AMD_BUFFER_MARKER_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_BUFFER_MARKER_EXTENSION_NAME = "VK_AMD_buffer_marker";
pub const VK_AMD_pipeline_compiler_control = @as(c_int, 1);
pub const VK_AMD_PIPELINE_COMPILER_CONTROL_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_PIPELINE_COMPILER_CONTROL_EXTENSION_NAME = "VK_AMD_pipeline_compiler_control";
pub const VK_EXT_calibrated_timestamps = @as(c_int, 1);
pub const VK_EXT_CALIBRATED_TIMESTAMPS_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_CALIBRATED_TIMESTAMPS_EXTENSION_NAME = "VK_EXT_calibrated_timestamps";
pub const VK_AMD_shader_core_properties = @as(c_int, 1);
pub const VK_AMD_SHADER_CORE_PROPERTIES_SPEC_VERSION = @as(c_int, 2);
pub const VK_AMD_SHADER_CORE_PROPERTIES_EXTENSION_NAME = "VK_AMD_shader_core_properties";
pub const VK_AMD_memory_overallocation_behavior = @as(c_int, 1);
pub const VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_EXTENSION_NAME = "VK_AMD_memory_overallocation_behavior";
pub const VK_EXT_vertex_attribute_divisor = @as(c_int, 1);
pub const VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION = @as(c_int, 3);
pub const VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME = "VK_EXT_vertex_attribute_divisor";
pub const VK_EXT_pipeline_creation_feedback = @as(c_int, 1);
pub const VK_EXT_PIPELINE_CREATION_FEEDBACK_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_PIPELINE_CREATION_FEEDBACK_EXTENSION_NAME = "VK_EXT_pipeline_creation_feedback";
pub const VK_NV_shader_subgroup_partitioned = @as(c_int, 1);
pub const VK_NV_SHADER_SUBGROUP_PARTITIONED_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_SHADER_SUBGROUP_PARTITIONED_EXTENSION_NAME = "VK_NV_shader_subgroup_partitioned";
pub const VK_NV_compute_shader_derivatives = @as(c_int, 1);
pub const VK_NV_COMPUTE_SHADER_DERIVATIVES_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME = "VK_NV_compute_shader_derivatives";
pub const VK_NV_mesh_shader = @as(c_int, 1);
pub const VK_NV_MESH_SHADER_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_MESH_SHADER_EXTENSION_NAME = "VK_NV_mesh_shader";
pub const VK_NV_fragment_shader_barycentric = @as(c_int, 1);
pub const VK_NV_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME = "VK_NV_fragment_shader_barycentric";
pub const VK_NV_shader_image_footprint = @as(c_int, 1);
pub const VK_NV_SHADER_IMAGE_FOOTPRINT_SPEC_VERSION = @as(c_int, 2);
pub const VK_NV_SHADER_IMAGE_FOOTPRINT_EXTENSION_NAME = "VK_NV_shader_image_footprint";
pub const VK_NV_scissor_exclusive = @as(c_int, 1);
pub const VK_NV_SCISSOR_EXCLUSIVE_SPEC_VERSION = @as(c_int, 2);
pub const VK_NV_SCISSOR_EXCLUSIVE_EXTENSION_NAME = "VK_NV_scissor_exclusive";
pub const VK_NV_device_diagnostic_checkpoints = @as(c_int, 1);
pub const VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_SPEC_VERSION = @as(c_int, 2);
pub const VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_EXTENSION_NAME = "VK_NV_device_diagnostic_checkpoints";
pub const VK_INTEL_shader_integer_functions2 = @as(c_int, 1);
pub const VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_EXTENSION_NAME = "VK_INTEL_shader_integer_functions2";
pub const VK_INTEL_performance_query = @as(c_int, 1);
pub const VK_INTEL_PERFORMANCE_QUERY_SPEC_VERSION = @as(c_int, 2);
pub const VK_INTEL_PERFORMANCE_QUERY_EXTENSION_NAME = "VK_INTEL_performance_query";
pub const VK_EXT_pci_bus_info = @as(c_int, 1);
pub const VK_EXT_PCI_BUS_INFO_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_PCI_BUS_INFO_EXTENSION_NAME = "VK_EXT_pci_bus_info";
pub const VK_AMD_display_native_hdr = @as(c_int, 1);
pub const VK_AMD_DISPLAY_NATIVE_HDR_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_DISPLAY_NATIVE_HDR_EXTENSION_NAME = "VK_AMD_display_native_hdr";
pub const VK_EXT_fragment_density_map = @as(c_int, 1);
pub const VK_EXT_FRAGMENT_DENSITY_MAP_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_FRAGMENT_DENSITY_MAP_EXTENSION_NAME = "VK_EXT_fragment_density_map";
pub const VK_EXT_scalar_block_layout = @as(c_int, 1);
pub const VK_EXT_SCALAR_BLOCK_LAYOUT_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SCALAR_BLOCK_LAYOUT_EXTENSION_NAME = "VK_EXT_scalar_block_layout";
pub const VK_GOOGLE_hlsl_functionality1 = @as(c_int, 1);
pub const VK_GOOGLE_HLSL_FUNCTIONALITY_1_SPEC_VERSION = @as(c_int, 1);
pub const VK_GOOGLE_HLSL_FUNCTIONALITY_1_EXTENSION_NAME = "VK_GOOGLE_hlsl_functionality1";
pub const VK_GOOGLE_HLSL_FUNCTIONALITY1_SPEC_VERSION = VK_GOOGLE_HLSL_FUNCTIONALITY_1_SPEC_VERSION;
pub const VK_GOOGLE_HLSL_FUNCTIONALITY1_EXTENSION_NAME = VK_GOOGLE_HLSL_FUNCTIONALITY_1_EXTENSION_NAME;
pub const VK_GOOGLE_decorate_string = @as(c_int, 1);
pub const VK_GOOGLE_DECORATE_STRING_SPEC_VERSION = @as(c_int, 1);
pub const VK_GOOGLE_DECORATE_STRING_EXTENSION_NAME = "VK_GOOGLE_decorate_string";
pub const VK_EXT_subgroup_size_control = @as(c_int, 1);
pub const VK_EXT_SUBGROUP_SIZE_CONTROL_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_SUBGROUP_SIZE_CONTROL_EXTENSION_NAME = "VK_EXT_subgroup_size_control";
pub const VK_AMD_shader_core_properties2 = @as(c_int, 1);
pub const VK_AMD_SHADER_CORE_PROPERTIES_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_SHADER_CORE_PROPERTIES_2_EXTENSION_NAME = "VK_AMD_shader_core_properties2";
pub const VK_AMD_device_coherent_memory = @as(c_int, 1);
pub const VK_AMD_DEVICE_COHERENT_MEMORY_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_DEVICE_COHERENT_MEMORY_EXTENSION_NAME = "VK_AMD_device_coherent_memory";
pub const VK_EXT_shader_image_atomic_int64 = @as(c_int, 1);
pub const VK_EXT_SHADER_IMAGE_ATOMIC_INT64_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SHADER_IMAGE_ATOMIC_INT64_EXTENSION_NAME = "VK_EXT_shader_image_atomic_int64";
pub const VK_EXT_memory_budget = @as(c_int, 1);
pub const VK_EXT_MEMORY_BUDGET_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_MEMORY_BUDGET_EXTENSION_NAME = "VK_EXT_memory_budget";
pub const VK_EXT_memory_priority = @as(c_int, 1);
pub const VK_EXT_MEMORY_PRIORITY_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_MEMORY_PRIORITY_EXTENSION_NAME = "VK_EXT_memory_priority";
pub const VK_NV_dedicated_allocation_image_aliasing = @as(c_int, 1);
pub const VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_EXTENSION_NAME = "VK_NV_dedicated_allocation_image_aliasing";
pub const VK_EXT_buffer_device_address = @as(c_int, 1);
pub const VK_EXT_BUFFER_DEVICE_ADDRESS_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME = "VK_EXT_buffer_device_address";
pub const VK_EXT_tooling_info = @as(c_int, 1);
pub const VK_EXT_TOOLING_INFO_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_TOOLING_INFO_EXTENSION_NAME = "VK_EXT_tooling_info";
pub const VK_EXT_separate_stencil_usage = @as(c_int, 1);
pub const VK_EXT_SEPARATE_STENCIL_USAGE_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SEPARATE_STENCIL_USAGE_EXTENSION_NAME = "VK_EXT_separate_stencil_usage";
pub const VK_EXT_validation_features = @as(c_int, 1);
pub const VK_EXT_VALIDATION_FEATURES_SPEC_VERSION = @as(c_int, 6);
pub const VK_EXT_VALIDATION_FEATURES_EXTENSION_NAME = "VK_EXT_validation_features";
pub const VK_NV_cooperative_matrix = @as(c_int, 1);
pub const VK_NV_COOPERATIVE_MATRIX_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_COOPERATIVE_MATRIX_EXTENSION_NAME = "VK_NV_cooperative_matrix";
pub const VK_NV_coverage_reduction_mode = @as(c_int, 1);
pub const VK_NV_COVERAGE_REDUCTION_MODE_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_COVERAGE_REDUCTION_MODE_EXTENSION_NAME = "VK_NV_coverage_reduction_mode";
pub const VK_EXT_fragment_shader_interlock = @as(c_int, 1);
pub const VK_EXT_FRAGMENT_SHADER_INTERLOCK_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_FRAGMENT_SHADER_INTERLOCK_EXTENSION_NAME = "VK_EXT_fragment_shader_interlock";
pub const VK_EXT_ycbcr_image_arrays = @as(c_int, 1);
pub const VK_EXT_YCBCR_IMAGE_ARRAYS_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_YCBCR_IMAGE_ARRAYS_EXTENSION_NAME = "VK_EXT_ycbcr_image_arrays";
pub const VK_EXT_provoking_vertex = @as(c_int, 1);
pub const VK_EXT_PROVOKING_VERTEX_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_PROVOKING_VERTEX_EXTENSION_NAME = "VK_EXT_provoking_vertex";
pub const VK_EXT_headless_surface = @as(c_int, 1);
pub const VK_EXT_HEADLESS_SURFACE_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_HEADLESS_SURFACE_EXTENSION_NAME = "VK_EXT_headless_surface";
pub const VK_EXT_line_rasterization = @as(c_int, 1);
pub const VK_EXT_LINE_RASTERIZATION_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_LINE_RASTERIZATION_EXTENSION_NAME = "VK_EXT_line_rasterization";
pub const VK_EXT_shader_atomic_float = @as(c_int, 1);
pub const VK_EXT_SHADER_ATOMIC_FLOAT_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SHADER_ATOMIC_FLOAT_EXTENSION_NAME = "VK_EXT_shader_atomic_float";
pub const VK_EXT_host_query_reset = @as(c_int, 1);
pub const VK_EXT_HOST_QUERY_RESET_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_HOST_QUERY_RESET_EXTENSION_NAME = "VK_EXT_host_query_reset";
pub const VK_EXT_index_type_uint8 = @as(c_int, 1);
pub const VK_EXT_INDEX_TYPE_UINT8_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_INDEX_TYPE_UINT8_EXTENSION_NAME = "VK_EXT_index_type_uint8";
pub const VK_EXT_extended_dynamic_state = @as(c_int, 1);
pub const VK_EXT_EXTENDED_DYNAMIC_STATE_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_EXTENDED_DYNAMIC_STATE_EXTENSION_NAME = "VK_EXT_extended_dynamic_state";
pub const VK_EXT_host_image_copy = @as(c_int, 1);
pub const VK_EXT_HOST_IMAGE_COPY_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_HOST_IMAGE_COPY_EXTENSION_NAME = "VK_EXT_host_image_copy";
pub const VK_EXT_map_memory_placed = @as(c_int, 1);
pub const VK_EXT_MAP_MEMORY_PLACED_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_MAP_MEMORY_PLACED_EXTENSION_NAME = "VK_EXT_map_memory_placed";
pub const VK_EXT_shader_atomic_float2 = @as(c_int, 1);
pub const VK_EXT_SHADER_ATOMIC_FLOAT_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SHADER_ATOMIC_FLOAT_2_EXTENSION_NAME = "VK_EXT_shader_atomic_float2";
pub const VK_EXT_surface_maintenance1 = @as(c_int, 1);
pub const VK_EXT_SURFACE_MAINTENANCE_1_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SURFACE_MAINTENANCE_1_EXTENSION_NAME = "VK_EXT_surface_maintenance1";
pub const VK_EXT_swapchain_maintenance1 = @as(c_int, 1);
pub const VK_EXT_SWAPCHAIN_MAINTENANCE_1_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SWAPCHAIN_MAINTENANCE_1_EXTENSION_NAME = "VK_EXT_swapchain_maintenance1";
pub const VK_EXT_shader_demote_to_helper_invocation = @as(c_int, 1);
pub const VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_EXTENSION_NAME = "VK_EXT_shader_demote_to_helper_invocation";
pub const VK_NV_device_generated_commands = @as(c_int, 1);
pub const VK_NV_DEVICE_GENERATED_COMMANDS_SPEC_VERSION = @as(c_int, 3);
pub const VK_NV_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME = "VK_NV_device_generated_commands";
pub const VK_NV_inherited_viewport_scissor = @as(c_int, 1);
pub const VK_NV_INHERITED_VIEWPORT_SCISSOR_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_INHERITED_VIEWPORT_SCISSOR_EXTENSION_NAME = "VK_NV_inherited_viewport_scissor";
pub const VK_EXT_texel_buffer_alignment = @as(c_int, 1);
pub const VK_EXT_TEXEL_BUFFER_ALIGNMENT_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_TEXEL_BUFFER_ALIGNMENT_EXTENSION_NAME = "VK_EXT_texel_buffer_alignment";
pub const VK_QCOM_render_pass_transform = @as(c_int, 1);
pub const VK_QCOM_RENDER_PASS_TRANSFORM_SPEC_VERSION = @as(c_int, 4);
pub const VK_QCOM_RENDER_PASS_TRANSFORM_EXTENSION_NAME = "VK_QCOM_render_pass_transform";
pub const VK_EXT_depth_bias_control = @as(c_int, 1);
pub const VK_EXT_DEPTH_BIAS_CONTROL_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_DEPTH_BIAS_CONTROL_EXTENSION_NAME = "VK_EXT_depth_bias_control";
pub const VK_EXT_device_memory_report = @as(c_int, 1);
pub const VK_EXT_DEVICE_MEMORY_REPORT_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_DEVICE_MEMORY_REPORT_EXTENSION_NAME = "VK_EXT_device_memory_report";
pub const VK_EXT_acquire_drm_display = @as(c_int, 1);
pub const VK_EXT_ACQUIRE_DRM_DISPLAY_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_ACQUIRE_DRM_DISPLAY_EXTENSION_NAME = "VK_EXT_acquire_drm_display";
pub const VK_EXT_robustness2 = @as(c_int, 1);
pub const VK_EXT_ROBUSTNESS_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_ROBUSTNESS_2_EXTENSION_NAME = "VK_EXT_robustness2";
pub const VK_EXT_custom_border_color = @as(c_int, 1);
pub const VK_EXT_CUSTOM_BORDER_COLOR_SPEC_VERSION = @as(c_int, 12);
pub const VK_EXT_CUSTOM_BORDER_COLOR_EXTENSION_NAME = "VK_EXT_custom_border_color";
pub const VK_GOOGLE_user_type = @as(c_int, 1);
pub const VK_GOOGLE_USER_TYPE_SPEC_VERSION = @as(c_int, 1);
pub const VK_GOOGLE_USER_TYPE_EXTENSION_NAME = "VK_GOOGLE_user_type";
pub const VK_NV_present_barrier = @as(c_int, 1);
pub const VK_NV_PRESENT_BARRIER_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_PRESENT_BARRIER_EXTENSION_NAME = "VK_NV_present_barrier";
pub const VK_EXT_private_data = @as(c_int, 1);
pub const VK_EXT_PRIVATE_DATA_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_PRIVATE_DATA_EXTENSION_NAME = "VK_EXT_private_data";
pub const VK_EXT_pipeline_creation_cache_control = @as(c_int, 1);
pub const VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_SPEC_VERSION = @as(c_int, 3);
pub const VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_EXTENSION_NAME = "VK_EXT_pipeline_creation_cache_control";
pub const VK_NV_device_diagnostics_config = @as(c_int, 1);
pub const VK_NV_DEVICE_DIAGNOSTICS_CONFIG_SPEC_VERSION = @as(c_int, 2);
pub const VK_NV_DEVICE_DIAGNOSTICS_CONFIG_EXTENSION_NAME = "VK_NV_device_diagnostics_config";
pub const VK_QCOM_render_pass_store_ops = @as(c_int, 1);
pub const VK_QCOM_RENDER_PASS_STORE_OPS_SPEC_VERSION = @as(c_int, 2);
pub const VK_QCOM_RENDER_PASS_STORE_OPS_EXTENSION_NAME = "VK_QCOM_render_pass_store_ops";
pub const VK_NV_cuda_kernel_launch = @as(c_int, 1);
pub const VK_NV_CUDA_KERNEL_LAUNCH_SPEC_VERSION = @as(c_int, 2);
pub const VK_NV_CUDA_KERNEL_LAUNCH_EXTENSION_NAME = "VK_NV_cuda_kernel_launch";
pub const VK_NV_low_latency = @as(c_int, 1);
pub const VK_NV_LOW_LATENCY_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_LOW_LATENCY_EXTENSION_NAME = "VK_NV_low_latency";
pub const VK_EXT_descriptor_buffer = @as(c_int, 1);
pub const VK_EXT_DESCRIPTOR_BUFFER_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_DESCRIPTOR_BUFFER_EXTENSION_NAME = "VK_EXT_descriptor_buffer";
pub const VK_EXT_graphics_pipeline_library = @as(c_int, 1);
pub const VK_EXT_GRAPHICS_PIPELINE_LIBRARY_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_GRAPHICS_PIPELINE_LIBRARY_EXTENSION_NAME = "VK_EXT_graphics_pipeline_library";
pub const VK_AMD_shader_early_and_late_fragment_tests = @as(c_int, 1);
pub const VK_AMD_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_EXTENSION_NAME = "VK_AMD_shader_early_and_late_fragment_tests";
pub const VK_NV_fragment_shading_rate_enums = @as(c_int, 1);
pub const VK_NV_FRAGMENT_SHADING_RATE_ENUMS_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_FRAGMENT_SHADING_RATE_ENUMS_EXTENSION_NAME = "VK_NV_fragment_shading_rate_enums";
pub const VK_NV_ray_tracing_motion_blur = @as(c_int, 1);
pub const VK_NV_RAY_TRACING_MOTION_BLUR_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_RAY_TRACING_MOTION_BLUR_EXTENSION_NAME = "VK_NV_ray_tracing_motion_blur";
pub const VK_EXT_ycbcr_2plane_444_formats = @as(c_int, 1);
pub const VK_EXT_YCBCR_2PLANE_444_FORMATS_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_YCBCR_2PLANE_444_FORMATS_EXTENSION_NAME = "VK_EXT_ycbcr_2plane_444_formats";
pub const VK_EXT_fragment_density_map2 = @as(c_int, 1);
pub const VK_EXT_FRAGMENT_DENSITY_MAP_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_FRAGMENT_DENSITY_MAP_2_EXTENSION_NAME = "VK_EXT_fragment_density_map2";
pub const VK_QCOM_rotated_copy_commands = @as(c_int, 1);
pub const VK_QCOM_ROTATED_COPY_COMMANDS_SPEC_VERSION = @as(c_int, 2);
pub const VK_QCOM_ROTATED_COPY_COMMANDS_EXTENSION_NAME = "VK_QCOM_rotated_copy_commands";
pub const VK_EXT_image_robustness = @as(c_int, 1);
pub const VK_EXT_IMAGE_ROBUSTNESS_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_IMAGE_ROBUSTNESS_EXTENSION_NAME = "VK_EXT_image_robustness";
pub const VK_EXT_image_compression_control = @as(c_int, 1);
pub const VK_EXT_IMAGE_COMPRESSION_CONTROL_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_IMAGE_COMPRESSION_CONTROL_EXTENSION_NAME = "VK_EXT_image_compression_control";
pub const VK_EXT_attachment_feedback_loop_layout = @as(c_int, 1);
pub const VK_EXT_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_EXTENSION_NAME = "VK_EXT_attachment_feedback_loop_layout";
pub const VK_EXT_4444_formats = @as(c_int, 1);
pub const VK_EXT_4444_FORMATS_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_4444_FORMATS_EXTENSION_NAME = "VK_EXT_4444_formats";
pub const VK_EXT_device_fault = @as(c_int, 1);
pub const VK_EXT_DEVICE_FAULT_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_DEVICE_FAULT_EXTENSION_NAME = "VK_EXT_device_fault";
pub const VK_ARM_rasterization_order_attachment_access = @as(c_int, 1);
pub const VK_ARM_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_SPEC_VERSION = @as(c_int, 1);
pub const VK_ARM_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_EXTENSION_NAME = "VK_ARM_rasterization_order_attachment_access";
pub const VK_EXT_rgba10x6_formats = @as(c_int, 1);
pub const VK_EXT_RGBA10X6_FORMATS_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_RGBA10X6_FORMATS_EXTENSION_NAME = "VK_EXT_rgba10x6_formats";
pub const VK_VALVE_mutable_descriptor_type = @as(c_int, 1);
pub const VK_VALVE_MUTABLE_DESCRIPTOR_TYPE_SPEC_VERSION = @as(c_int, 1);
pub const VK_VALVE_MUTABLE_DESCRIPTOR_TYPE_EXTENSION_NAME = "VK_VALVE_mutable_descriptor_type";
pub const VK_EXT_vertex_input_dynamic_state = @as(c_int, 1);
pub const VK_EXT_VERTEX_INPUT_DYNAMIC_STATE_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_VERTEX_INPUT_DYNAMIC_STATE_EXTENSION_NAME = "VK_EXT_vertex_input_dynamic_state";
pub const VK_EXT_physical_device_drm = @as(c_int, 1);
pub const VK_EXT_PHYSICAL_DEVICE_DRM_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_PHYSICAL_DEVICE_DRM_EXTENSION_NAME = "VK_EXT_physical_device_drm";
pub const VK_EXT_device_address_binding_report = @as(c_int, 1);
pub const VK_EXT_DEVICE_ADDRESS_BINDING_REPORT_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_DEVICE_ADDRESS_BINDING_REPORT_EXTENSION_NAME = "VK_EXT_device_address_binding_report";
pub const VK_EXT_depth_clip_control = @as(c_int, 1);
pub const VK_EXT_DEPTH_CLIP_CONTROL_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_DEPTH_CLIP_CONTROL_EXTENSION_NAME = "VK_EXT_depth_clip_control";
pub const VK_EXT_primitive_topology_list_restart = @as(c_int, 1);
pub const VK_EXT_PRIMITIVE_TOPOLOGY_LIST_RESTART_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_PRIMITIVE_TOPOLOGY_LIST_RESTART_EXTENSION_NAME = "VK_EXT_primitive_topology_list_restart";
pub const VK_HUAWEI_subpass_shading = @as(c_int, 1);
pub const VK_HUAWEI_SUBPASS_SHADING_SPEC_VERSION = @as(c_int, 3);
pub const VK_HUAWEI_SUBPASS_SHADING_EXTENSION_NAME = "VK_HUAWEI_subpass_shading";
pub const VK_HUAWEI_invocation_mask = @as(c_int, 1);
pub const VK_HUAWEI_INVOCATION_MASK_SPEC_VERSION = @as(c_int, 1);
pub const VK_HUAWEI_INVOCATION_MASK_EXTENSION_NAME = "VK_HUAWEI_invocation_mask";
pub const VK_NV_external_memory_rdma = @as(c_int, 1);
pub const VK_NV_EXTERNAL_MEMORY_RDMA_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_EXTERNAL_MEMORY_RDMA_EXTENSION_NAME = "VK_NV_external_memory_rdma";
pub const VK_EXT_pipeline_properties = @as(c_int, 1);
pub const VK_EXT_PIPELINE_PROPERTIES_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_PIPELINE_PROPERTIES_EXTENSION_NAME = "VK_EXT_pipeline_properties";
pub const VK_EXT_frame_boundary = @as(c_int, 1);
pub const VK_EXT_FRAME_BOUNDARY_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_FRAME_BOUNDARY_EXTENSION_NAME = "VK_EXT_frame_boundary";
pub const VK_EXT_multisampled_render_to_single_sampled = @as(c_int, 1);
pub const VK_EXT_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_EXTENSION_NAME = "VK_EXT_multisampled_render_to_single_sampled";
pub const VK_EXT_extended_dynamic_state2 = @as(c_int, 1);
pub const VK_EXT_EXTENDED_DYNAMIC_STATE_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_EXTENDED_DYNAMIC_STATE_2_EXTENSION_NAME = "VK_EXT_extended_dynamic_state2";
pub const VK_EXT_color_write_enable = @as(c_int, 1);
pub const VK_EXT_COLOR_WRITE_ENABLE_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_COLOR_WRITE_ENABLE_EXTENSION_NAME = "VK_EXT_color_write_enable";
pub const VK_EXT_primitives_generated_query = @as(c_int, 1);
pub const VK_EXT_PRIMITIVES_GENERATED_QUERY_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_PRIMITIVES_GENERATED_QUERY_EXTENSION_NAME = "VK_EXT_primitives_generated_query";
pub const VK_EXT_global_priority_query = @as(c_int, 1);
pub const VK_EXT_GLOBAL_PRIORITY_QUERY_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_GLOBAL_PRIORITY_QUERY_EXTENSION_NAME = "VK_EXT_global_priority_query";
pub const VK_MAX_GLOBAL_PRIORITY_SIZE_EXT = VK_MAX_GLOBAL_PRIORITY_SIZE_KHR;
pub const VK_EXT_image_view_min_lod = @as(c_int, 1);
pub const VK_EXT_IMAGE_VIEW_MIN_LOD_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_IMAGE_VIEW_MIN_LOD_EXTENSION_NAME = "VK_EXT_image_view_min_lod";
pub const VK_EXT_multi_draw = @as(c_int, 1);
pub const VK_EXT_MULTI_DRAW_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_MULTI_DRAW_EXTENSION_NAME = "VK_EXT_multi_draw";
pub const VK_EXT_image_2d_view_of_3d = @as(c_int, 1);
pub const VK_EXT_IMAGE_2D_VIEW_OF_3D_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_IMAGE_2D_VIEW_OF_3D_EXTENSION_NAME = "VK_EXT_image_2d_view_of_3d";
pub const VK_EXT_shader_tile_image = @as(c_int, 1);
pub const VK_EXT_SHADER_TILE_IMAGE_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SHADER_TILE_IMAGE_EXTENSION_NAME = "VK_EXT_shader_tile_image";
pub const VK_EXT_opacity_micromap = @as(c_int, 1);
pub const VK_EXT_OPACITY_MICROMAP_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_OPACITY_MICROMAP_EXTENSION_NAME = "VK_EXT_opacity_micromap";
pub const VK_EXT_load_store_op_none = @as(c_int, 1);
pub const VK_EXT_LOAD_STORE_OP_NONE_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_LOAD_STORE_OP_NONE_EXTENSION_NAME = "VK_EXT_load_store_op_none";
pub const VK_HUAWEI_cluster_culling_shader = @as(c_int, 1);
pub const VK_HUAWEI_CLUSTER_CULLING_SHADER_SPEC_VERSION = @as(c_int, 3);
pub const VK_HUAWEI_CLUSTER_CULLING_SHADER_EXTENSION_NAME = "VK_HUAWEI_cluster_culling_shader";
pub const VK_EXT_border_color_swizzle = @as(c_int, 1);
pub const VK_EXT_BORDER_COLOR_SWIZZLE_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_BORDER_COLOR_SWIZZLE_EXTENSION_NAME = "VK_EXT_border_color_swizzle";
pub const VK_EXT_pageable_device_local_memory = @as(c_int, 1);
pub const VK_EXT_PAGEABLE_DEVICE_LOCAL_MEMORY_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_PAGEABLE_DEVICE_LOCAL_MEMORY_EXTENSION_NAME = "VK_EXT_pageable_device_local_memory";
pub const VK_ARM_shader_core_properties = @as(c_int, 1);
pub const VK_ARM_SHADER_CORE_PROPERTIES_SPEC_VERSION = @as(c_int, 1);
pub const VK_ARM_SHADER_CORE_PROPERTIES_EXTENSION_NAME = "VK_ARM_shader_core_properties";
pub const VK_ARM_scheduling_controls = @as(c_int, 1);
pub const VK_ARM_SCHEDULING_CONTROLS_SPEC_VERSION = @as(c_int, 1);
pub const VK_ARM_SCHEDULING_CONTROLS_EXTENSION_NAME = "VK_ARM_scheduling_controls";
pub const VK_EXT_image_sliced_view_of_3d = @as(c_int, 1);
pub const VK_EXT_IMAGE_SLICED_VIEW_OF_3D_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_IMAGE_SLICED_VIEW_OF_3D_EXTENSION_NAME = "VK_EXT_image_sliced_view_of_3d";
pub const VK_REMAINING_3D_SLICES_EXT = ~@as(c_uint, 0);
pub const VK_VALVE_descriptor_set_host_mapping = @as(c_int, 1);
pub const VK_VALVE_DESCRIPTOR_SET_HOST_MAPPING_SPEC_VERSION = @as(c_int, 1);
pub const VK_VALVE_DESCRIPTOR_SET_HOST_MAPPING_EXTENSION_NAME = "VK_VALVE_descriptor_set_host_mapping";
pub const VK_EXT_depth_clamp_zero_one = @as(c_int, 1);
pub const VK_EXT_DEPTH_CLAMP_ZERO_ONE_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_DEPTH_CLAMP_ZERO_ONE_EXTENSION_NAME = "VK_EXT_depth_clamp_zero_one";
pub const VK_EXT_non_seamless_cube_map = @as(c_int, 1);
pub const VK_EXT_NON_SEAMLESS_CUBE_MAP_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_NON_SEAMLESS_CUBE_MAP_EXTENSION_NAME = "VK_EXT_non_seamless_cube_map";
pub const VK_ARM_render_pass_striped = @as(c_int, 1);
pub const VK_ARM_RENDER_PASS_STRIPED_SPEC_VERSION = @as(c_int, 1);
pub const VK_ARM_RENDER_PASS_STRIPED_EXTENSION_NAME = "VK_ARM_render_pass_striped";
pub const VK_QCOM_fragment_density_map_offset = @as(c_int, 1);
pub const VK_QCOM_FRAGMENT_DENSITY_MAP_OFFSET_SPEC_VERSION = @as(c_int, 2);
pub const VK_QCOM_FRAGMENT_DENSITY_MAP_OFFSET_EXTENSION_NAME = "VK_QCOM_fragment_density_map_offset";
pub const VK_NV_copy_memory_indirect = @as(c_int, 1);
pub const VK_NV_COPY_MEMORY_INDIRECT_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_COPY_MEMORY_INDIRECT_EXTENSION_NAME = "VK_NV_copy_memory_indirect";
pub const VK_NV_memory_decompression = @as(c_int, 1);
pub const VK_NV_MEMORY_DECOMPRESSION_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_MEMORY_DECOMPRESSION_EXTENSION_NAME = "VK_NV_memory_decompression";
pub const VK_NV_device_generated_commands_compute = @as(c_int, 1);
pub const VK_NV_DEVICE_GENERATED_COMMANDS_COMPUTE_SPEC_VERSION = @as(c_int, 2);
pub const VK_NV_DEVICE_GENERATED_COMMANDS_COMPUTE_EXTENSION_NAME = "VK_NV_device_generated_commands_compute";
pub const VK_NV_linear_color_attachment = @as(c_int, 1);
pub const VK_NV_LINEAR_COLOR_ATTACHMENT_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_LINEAR_COLOR_ATTACHMENT_EXTENSION_NAME = "VK_NV_linear_color_attachment";
pub const VK_GOOGLE_surfaceless_query = @as(c_int, 1);
pub const VK_GOOGLE_SURFACELESS_QUERY_SPEC_VERSION = @as(c_int, 2);
pub const VK_GOOGLE_SURFACELESS_QUERY_EXTENSION_NAME = "VK_GOOGLE_surfaceless_query";
pub const VK_EXT_image_compression_control_swapchain = @as(c_int, 1);
pub const VK_EXT_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_EXTENSION_NAME = "VK_EXT_image_compression_control_swapchain";
pub const VK_QCOM_image_processing = @as(c_int, 1);
pub const VK_QCOM_IMAGE_PROCESSING_SPEC_VERSION = @as(c_int, 1);
pub const VK_QCOM_IMAGE_PROCESSING_EXTENSION_NAME = "VK_QCOM_image_processing";
pub const VK_EXT_nested_command_buffer = @as(c_int, 1);
pub const VK_EXT_NESTED_COMMAND_BUFFER_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_NESTED_COMMAND_BUFFER_EXTENSION_NAME = "VK_EXT_nested_command_buffer";
pub const VK_EXT_external_memory_acquire_unmodified = @as(c_int, 1);
pub const VK_EXT_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_EXTENSION_NAME = "VK_EXT_external_memory_acquire_unmodified";
pub const VK_EXT_extended_dynamic_state3 = @as(c_int, 1);
pub const VK_EXT_EXTENDED_DYNAMIC_STATE_3_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_EXTENDED_DYNAMIC_STATE_3_EXTENSION_NAME = "VK_EXT_extended_dynamic_state3";
pub const VK_EXT_subpass_merge_feedback = @as(c_int, 1);
pub const VK_EXT_SUBPASS_MERGE_FEEDBACK_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_SUBPASS_MERGE_FEEDBACK_EXTENSION_NAME = "VK_EXT_subpass_merge_feedback";
pub const VK_LUNARG_direct_driver_loading = @as(c_int, 1);
pub const VK_LUNARG_DIRECT_DRIVER_LOADING_SPEC_VERSION = @as(c_int, 1);
pub const VK_LUNARG_DIRECT_DRIVER_LOADING_EXTENSION_NAME = "VK_LUNARG_direct_driver_loading";
pub const VK_EXT_shader_module_identifier = @as(c_int, 1);
pub const VK_MAX_SHADER_MODULE_IDENTIFIER_SIZE_EXT = @as(c_uint, 32);
pub const VK_EXT_SHADER_MODULE_IDENTIFIER_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SHADER_MODULE_IDENTIFIER_EXTENSION_NAME = "VK_EXT_shader_module_identifier";
pub const VK_EXT_rasterization_order_attachment_access = @as(c_int, 1);
pub const VK_EXT_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_EXTENSION_NAME = "VK_EXT_rasterization_order_attachment_access";
pub const VK_NV_optical_flow = @as(c_int, 1);
pub const VK_NV_OPTICAL_FLOW_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_OPTICAL_FLOW_EXTENSION_NAME = "VK_NV_optical_flow";
pub const VK_EXT_legacy_dithering = @as(c_int, 1);
pub const VK_EXT_LEGACY_DITHERING_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_LEGACY_DITHERING_EXTENSION_NAME = "VK_EXT_legacy_dithering";
pub const VK_EXT_pipeline_protected_access = @as(c_int, 1);
pub const VK_EXT_PIPELINE_PROTECTED_ACCESS_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_PIPELINE_PROTECTED_ACCESS_EXTENSION_NAME = "VK_EXT_pipeline_protected_access";
pub const VK_AMD_anti_lag = @as(c_int, 1);
pub const VK_AMD_ANTI_LAG_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_ANTI_LAG_EXTENSION_NAME = "VK_AMD_anti_lag";
pub const VK_EXT_shader_object = @as(c_int, 1);
pub const VK_EXT_SHADER_OBJECT_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SHADER_OBJECT_EXTENSION_NAME = "VK_EXT_shader_object";
pub const VK_QCOM_tile_properties = @as(c_int, 1);
pub const VK_QCOM_TILE_PROPERTIES_SPEC_VERSION = @as(c_int, 1);
pub const VK_QCOM_TILE_PROPERTIES_EXTENSION_NAME = "VK_QCOM_tile_properties";
pub const VK_SEC_amigo_profiling = @as(c_int, 1);
pub const VK_SEC_AMIGO_PROFILING_SPEC_VERSION = @as(c_int, 1);
pub const VK_SEC_AMIGO_PROFILING_EXTENSION_NAME = "VK_SEC_amigo_profiling";
pub const VK_QCOM_multiview_per_view_viewports = @as(c_int, 1);
pub const VK_QCOM_MULTIVIEW_PER_VIEW_VIEWPORTS_SPEC_VERSION = @as(c_int, 1);
pub const VK_QCOM_MULTIVIEW_PER_VIEW_VIEWPORTS_EXTENSION_NAME = "VK_QCOM_multiview_per_view_viewports";
pub const VK_NV_ray_tracing_invocation_reorder = @as(c_int, 1);
pub const VK_NV_RAY_TRACING_INVOCATION_REORDER_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_RAY_TRACING_INVOCATION_REORDER_EXTENSION_NAME = "VK_NV_ray_tracing_invocation_reorder";
pub const VK_NV_extended_sparse_address_space = @as(c_int, 1);
pub const VK_NV_EXTENDED_SPARSE_ADDRESS_SPACE_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_EXTENDED_SPARSE_ADDRESS_SPACE_EXTENSION_NAME = "VK_NV_extended_sparse_address_space";
pub const VK_EXT_mutable_descriptor_type = @as(c_int, 1);
pub const VK_EXT_MUTABLE_DESCRIPTOR_TYPE_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_MUTABLE_DESCRIPTOR_TYPE_EXTENSION_NAME = "VK_EXT_mutable_descriptor_type";
pub const VK_EXT_legacy_vertex_attributes = @as(c_int, 1);
pub const VK_EXT_LEGACY_VERTEX_ATTRIBUTES_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_LEGACY_VERTEX_ATTRIBUTES_EXTENSION_NAME = "VK_EXT_legacy_vertex_attributes";
pub const VK_EXT_layer_settings = @as(c_int, 1);
pub const VK_EXT_LAYER_SETTINGS_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_LAYER_SETTINGS_EXTENSION_NAME = "VK_EXT_layer_settings";
pub const VK_ARM_shader_core_builtins = @as(c_int, 1);
pub const VK_ARM_SHADER_CORE_BUILTINS_SPEC_VERSION = @as(c_int, 2);
pub const VK_ARM_SHADER_CORE_BUILTINS_EXTENSION_NAME = "VK_ARM_shader_core_builtins";
pub const VK_EXT_pipeline_library_group_handles = @as(c_int, 1);
pub const VK_EXT_PIPELINE_LIBRARY_GROUP_HANDLES_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_PIPELINE_LIBRARY_GROUP_HANDLES_EXTENSION_NAME = "VK_EXT_pipeline_library_group_handles";
pub const VK_EXT_dynamic_rendering_unused_attachments = @as(c_int, 1);
pub const VK_EXT_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_EXTENSION_NAME = "VK_EXT_dynamic_rendering_unused_attachments";
pub const VK_NV_low_latency2 = @as(c_int, 1);
pub const VK_NV_LOW_LATENCY_2_SPEC_VERSION = @as(c_int, 2);
pub const VK_NV_LOW_LATENCY_2_EXTENSION_NAME = "VK_NV_low_latency2";
pub const VK_QCOM_multiview_per_view_render_areas = @as(c_int, 1);
pub const VK_QCOM_MULTIVIEW_PER_VIEW_RENDER_AREAS_SPEC_VERSION = @as(c_int, 1);
pub const VK_QCOM_MULTIVIEW_PER_VIEW_RENDER_AREAS_EXTENSION_NAME = "VK_QCOM_multiview_per_view_render_areas";
pub const VK_NV_per_stage_descriptor_set = @as(c_int, 1);
pub const VK_NV_PER_STAGE_DESCRIPTOR_SET_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_PER_STAGE_DESCRIPTOR_SET_EXTENSION_NAME = "VK_NV_per_stage_descriptor_set";
pub const VK_QCOM_image_processing2 = @as(c_int, 1);
pub const VK_QCOM_IMAGE_PROCESSING_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_QCOM_IMAGE_PROCESSING_2_EXTENSION_NAME = "VK_QCOM_image_processing2";
pub const VK_QCOM_filter_cubic_weights = @as(c_int, 1);
pub const VK_QCOM_FILTER_CUBIC_WEIGHTS_SPEC_VERSION = @as(c_int, 1);
pub const VK_QCOM_FILTER_CUBIC_WEIGHTS_EXTENSION_NAME = "VK_QCOM_filter_cubic_weights";
pub const VK_QCOM_ycbcr_degamma = @as(c_int, 1);
pub const VK_QCOM_YCBCR_DEGAMMA_SPEC_VERSION = @as(c_int, 1);
pub const VK_QCOM_YCBCR_DEGAMMA_EXTENSION_NAME = "VK_QCOM_ycbcr_degamma";
pub const VK_QCOM_filter_cubic_clamp = @as(c_int, 1);
pub const VK_QCOM_FILTER_CUBIC_CLAMP_SPEC_VERSION = @as(c_int, 1);
pub const VK_QCOM_FILTER_CUBIC_CLAMP_EXTENSION_NAME = "VK_QCOM_filter_cubic_clamp";
pub const VK_EXT_attachment_feedback_loop_dynamic_state = @as(c_int, 1);
pub const VK_EXT_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_EXTENSION_NAME = "VK_EXT_attachment_feedback_loop_dynamic_state";
pub const VK_MSFT_layered_driver = @as(c_int, 1);
pub const VK_MSFT_LAYERED_DRIVER_SPEC_VERSION = @as(c_int, 1);
pub const VK_MSFT_LAYERED_DRIVER_EXTENSION_NAME = "VK_MSFT_layered_driver";
pub const VK_NV_descriptor_pool_overallocation = @as(c_int, 1);
pub const VK_NV_DESCRIPTOR_POOL_OVERALLOCATION_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_DESCRIPTOR_POOL_OVERALLOCATION_EXTENSION_NAME = "VK_NV_descriptor_pool_overallocation";
pub const VK_NV_raw_access_chains = @as(c_int, 1);
pub const VK_NV_RAW_ACCESS_CHAINS_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_RAW_ACCESS_CHAINS_EXTENSION_NAME = "VK_NV_raw_access_chains";
pub const VK_NV_command_buffer_inheritance = @as(c_int, 1);
pub const VK_NV_COMMAND_BUFFER_INHERITANCE_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_COMMAND_BUFFER_INHERITANCE_EXTENSION_NAME = "VK_NV_command_buffer_inheritance";
pub const VK_NV_shader_atomic_float16_vector = @as(c_int, 1);
pub const VK_NV_SHADER_ATOMIC_FLOAT16_VECTOR_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_SHADER_ATOMIC_FLOAT16_VECTOR_EXTENSION_NAME = "VK_NV_shader_atomic_float16_vector";
pub const VK_EXT_shader_replicated_composites = @as(c_int, 1);
pub const VK_EXT_SHADER_REPLICATED_COMPOSITES_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SHADER_REPLICATED_COMPOSITES_EXTENSION_NAME = "VK_EXT_shader_replicated_composites";
pub const VK_NV_ray_tracing_validation = @as(c_int, 1);
pub const VK_NV_RAY_TRACING_VALIDATION_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_RAY_TRACING_VALIDATION_EXTENSION_NAME = "VK_NV_ray_tracing_validation";
pub const VK_MESA_image_alignment_control = @as(c_int, 1);
pub const VK_MESA_IMAGE_ALIGNMENT_CONTROL_SPEC_VERSION = @as(c_int, 1);
pub const VK_MESA_IMAGE_ALIGNMENT_CONTROL_EXTENSION_NAME = "VK_MESA_image_alignment_control";
pub const VK_KHR_acceleration_structure = @as(c_int, 1);
pub const VK_KHR_ACCELERATION_STRUCTURE_SPEC_VERSION = @as(c_int, 13);
pub const VK_KHR_ACCELERATION_STRUCTURE_EXTENSION_NAME = "VK_KHR_acceleration_structure";
pub const VK_KHR_ray_tracing_pipeline = @as(c_int, 1);
pub const VK_KHR_RAY_TRACING_PIPELINE_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_RAY_TRACING_PIPELINE_EXTENSION_NAME = "VK_KHR_ray_tracing_pipeline";
pub const VK_KHR_ray_query = @as(c_int, 1);
pub const VK_KHR_RAY_QUERY_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_RAY_QUERY_EXTENSION_NAME = "VK_KHR_ray_query";
pub const VK_EXT_mesh_shader = @as(c_int, 1);
pub const VK_EXT_MESH_SHADER_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_MESH_SHADER_EXTENSION_NAME = "VK_EXT_mesh_shader";
pub const APIENTRY = "";
pub const GLFW_APIENTRY_DEFINED = "";
pub const __gl_h_ = "";
pub const GLAPI = @compileError("unable to translate macro: undefined identifier `visibility`");
// /usr/include/GL/gl.h:55:11
pub const GLAPIENTRY = "";
pub const APIENTRYP = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/GL/gl.h:88:9
pub const GLAPIENTRYP = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/GL/gl.h:92:9
pub const GL_VERSION_1_1 = @as(c_int, 1);
pub const GL_VERSION_1_2 = @as(c_int, 1);
pub const GL_VERSION_1_3 = @as(c_int, 1);
pub const GL_ARB_imaging = @as(c_int, 1);
pub const GL_FALSE = @as(c_int, 0);
pub const GL_TRUE = @as(c_int, 1);
pub const GL_BYTE = @as(c_int, 0x1400);
pub const GL_UNSIGNED_BYTE = @as(c_int, 0x1401);
pub const GL_SHORT = @as(c_int, 0x1402);
pub const GL_UNSIGNED_SHORT = @as(c_int, 0x1403);
pub const GL_INT = @as(c_int, 0x1404);
pub const GL_UNSIGNED_INT = @as(c_int, 0x1405);
pub const GL_FLOAT = @as(c_int, 0x1406);
pub const GL_2_BYTES = @as(c_int, 0x1407);
pub const GL_3_BYTES = @as(c_int, 0x1408);
pub const GL_4_BYTES = @as(c_int, 0x1409);
pub const GL_DOUBLE = @as(c_int, 0x140A);
pub const GL_POINTS = @as(c_int, 0x0000);
pub const GL_LINES = @as(c_int, 0x0001);
pub const GL_LINE_LOOP = @as(c_int, 0x0002);
pub const GL_LINE_STRIP = @as(c_int, 0x0003);
pub const GL_TRIANGLES = @as(c_int, 0x0004);
pub const GL_TRIANGLE_STRIP = @as(c_int, 0x0005);
pub const GL_TRIANGLE_FAN = @as(c_int, 0x0006);
pub const GL_QUADS = @as(c_int, 0x0007);
pub const GL_QUAD_STRIP = @as(c_int, 0x0008);
pub const GL_POLYGON = @as(c_int, 0x0009);
pub const GL_VERTEX_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8074, .hex);
pub const GL_NORMAL_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8075, .hex);
pub const GL_COLOR_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8076, .hex);
pub const GL_INDEX_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8077, .hex);
pub const GL_TEXTURE_COORD_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8078, .hex);
pub const GL_EDGE_FLAG_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8079, .hex);
pub const GL_VERTEX_ARRAY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x807A, .hex);
pub const GL_VERTEX_ARRAY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x807B, .hex);
pub const GL_VERTEX_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x807C, .hex);
pub const GL_NORMAL_ARRAY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x807E, .hex);
pub const GL_NORMAL_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x807F, .hex);
pub const GL_COLOR_ARRAY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8081, .hex);
pub const GL_COLOR_ARRAY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8082, .hex);
pub const GL_COLOR_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8083, .hex);
pub const GL_INDEX_ARRAY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8085, .hex);
pub const GL_INDEX_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8086, .hex);
pub const GL_TEXTURE_COORD_ARRAY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8088, .hex);
pub const GL_TEXTURE_COORD_ARRAY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8089, .hex);
pub const GL_TEXTURE_COORD_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x808A, .hex);
pub const GL_EDGE_FLAG_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x808C, .hex);
pub const GL_VERTEX_ARRAY_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x808E, .hex);
pub const GL_NORMAL_ARRAY_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x808F, .hex);
pub const GL_COLOR_ARRAY_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8090, .hex);
pub const GL_INDEX_ARRAY_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8091, .hex);
pub const GL_TEXTURE_COORD_ARRAY_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8092, .hex);
pub const GL_EDGE_FLAG_ARRAY_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8093, .hex);
pub const GL_V2F = @as(c_int, 0x2A20);
pub const GL_V3F = @as(c_int, 0x2A21);
pub const GL_C4UB_V2F = @as(c_int, 0x2A22);
pub const GL_C4UB_V3F = @as(c_int, 0x2A23);
pub const GL_C3F_V3F = @as(c_int, 0x2A24);
pub const GL_N3F_V3F = @as(c_int, 0x2A25);
pub const GL_C4F_N3F_V3F = @as(c_int, 0x2A26);
pub const GL_T2F_V3F = @as(c_int, 0x2A27);
pub const GL_T4F_V4F = @as(c_int, 0x2A28);
pub const GL_T2F_C4UB_V3F = @as(c_int, 0x2A29);
pub const GL_T2F_C3F_V3F = @as(c_int, 0x2A2A);
pub const GL_T2F_N3F_V3F = @as(c_int, 0x2A2B);
pub const GL_T2F_C4F_N3F_V3F = @as(c_int, 0x2A2C);
pub const GL_T4F_C4F_N3F_V4F = @as(c_int, 0x2A2D);
pub const GL_MATRIX_MODE = @as(c_int, 0x0BA0);
pub const GL_MODELVIEW = @as(c_int, 0x1700);
pub const GL_PROJECTION = @as(c_int, 0x1701);
pub const GL_TEXTURE = @as(c_int, 0x1702);
pub const GL_POINT_SMOOTH = @as(c_int, 0x0B10);
pub const GL_POINT_SIZE = @as(c_int, 0x0B11);
pub const GL_POINT_SIZE_GRANULARITY = @as(c_int, 0x0B13);
pub const GL_POINT_SIZE_RANGE = @as(c_int, 0x0B12);
pub const GL_LINE_SMOOTH = @as(c_int, 0x0B20);
pub const GL_LINE_STIPPLE = @as(c_int, 0x0B24);
pub const GL_LINE_STIPPLE_PATTERN = @as(c_int, 0x0B25);
pub const GL_LINE_STIPPLE_REPEAT = @as(c_int, 0x0B26);
pub const GL_LINE_WIDTH = @as(c_int, 0x0B21);
pub const GL_LINE_WIDTH_GRANULARITY = @as(c_int, 0x0B23);
pub const GL_LINE_WIDTH_RANGE = @as(c_int, 0x0B22);
pub const GL_POINT = @as(c_int, 0x1B00);
pub const GL_LINE = @as(c_int, 0x1B01);
pub const GL_FILL = @as(c_int, 0x1B02);
pub const GL_CW = @as(c_int, 0x0900);
pub const GL_CCW = @as(c_int, 0x0901);
pub const GL_FRONT = @as(c_int, 0x0404);
pub const GL_BACK = @as(c_int, 0x0405);
pub const GL_POLYGON_MODE = @as(c_int, 0x0B40);
pub const GL_POLYGON_SMOOTH = @as(c_int, 0x0B41);
pub const GL_POLYGON_STIPPLE = @as(c_int, 0x0B42);
pub const GL_EDGE_FLAG = @as(c_int, 0x0B43);
pub const GL_CULL_FACE = @as(c_int, 0x0B44);
pub const GL_CULL_FACE_MODE = @as(c_int, 0x0B45);
pub const GL_FRONT_FACE = @as(c_int, 0x0B46);
pub const GL_POLYGON_OFFSET_FACTOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8038, .hex);
pub const GL_POLYGON_OFFSET_UNITS = @as(c_int, 0x2A00);
pub const GL_POLYGON_OFFSET_POINT = @as(c_int, 0x2A01);
pub const GL_POLYGON_OFFSET_LINE = @as(c_int, 0x2A02);
pub const GL_POLYGON_OFFSET_FILL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8037, .hex);
pub const GL_COMPILE = @as(c_int, 0x1300);
pub const GL_COMPILE_AND_EXECUTE = @as(c_int, 0x1301);
pub const GL_LIST_BASE = @as(c_int, 0x0B32);
pub const GL_LIST_INDEX = @as(c_int, 0x0B33);
pub const GL_LIST_MODE = @as(c_int, 0x0B30);
pub const GL_NEVER = @as(c_int, 0x0200);
pub const GL_LESS = @as(c_int, 0x0201);
pub const GL_EQUAL = @as(c_int, 0x0202);
pub const GL_LEQUAL = @as(c_int, 0x0203);
pub const GL_GREATER = @as(c_int, 0x0204);
pub const GL_NOTEQUAL = @as(c_int, 0x0205);
pub const GL_GEQUAL = @as(c_int, 0x0206);
pub const GL_ALWAYS = @as(c_int, 0x0207);
pub const GL_DEPTH_TEST = @as(c_int, 0x0B71);
pub const GL_DEPTH_BITS = @as(c_int, 0x0D56);
pub const GL_DEPTH_CLEAR_VALUE = @as(c_int, 0x0B73);
pub const GL_DEPTH_FUNC = @as(c_int, 0x0B74);
pub const GL_DEPTH_RANGE = @as(c_int, 0x0B70);
pub const GL_DEPTH_WRITEMASK = @as(c_int, 0x0B72);
pub const GL_DEPTH_COMPONENT = @as(c_int, 0x1902);
pub const GL_LIGHTING = @as(c_int, 0x0B50);
pub const GL_LIGHT0 = @as(c_int, 0x4000);
pub const GL_LIGHT1 = @as(c_int, 0x4001);
pub const GL_LIGHT2 = @as(c_int, 0x4002);
pub const GL_LIGHT3 = @as(c_int, 0x4003);
pub const GL_LIGHT4 = @as(c_int, 0x4004);
pub const GL_LIGHT5 = @as(c_int, 0x4005);
pub const GL_LIGHT6 = @as(c_int, 0x4006);
pub const GL_LIGHT7 = @as(c_int, 0x4007);
pub const GL_SPOT_EXPONENT = @as(c_int, 0x1205);
pub const GL_SPOT_CUTOFF = @as(c_int, 0x1206);
pub const GL_CONSTANT_ATTENUATION = @as(c_int, 0x1207);
pub const GL_LINEAR_ATTENUATION = @as(c_int, 0x1208);
pub const GL_QUADRATIC_ATTENUATION = @as(c_int, 0x1209);
pub const GL_AMBIENT = @as(c_int, 0x1200);
pub const GL_DIFFUSE = @as(c_int, 0x1201);
pub const GL_SPECULAR = @as(c_int, 0x1202);
pub const GL_SHININESS = @as(c_int, 0x1601);
pub const GL_EMISSION = @as(c_int, 0x1600);
pub const GL_POSITION = @as(c_int, 0x1203);
pub const GL_SPOT_DIRECTION = @as(c_int, 0x1204);
pub const GL_AMBIENT_AND_DIFFUSE = @as(c_int, 0x1602);
pub const GL_COLOR_INDEXES = @as(c_int, 0x1603);
pub const GL_LIGHT_MODEL_TWO_SIDE = @as(c_int, 0x0B52);
pub const GL_LIGHT_MODEL_LOCAL_VIEWER = @as(c_int, 0x0B51);
pub const GL_LIGHT_MODEL_AMBIENT = @as(c_int, 0x0B53);
pub const GL_FRONT_AND_BACK = @as(c_int, 0x0408);
pub const GL_SHADE_MODEL = @as(c_int, 0x0B54);
pub const GL_FLAT = @as(c_int, 0x1D00);
pub const GL_SMOOTH = @as(c_int, 0x1D01);
pub const GL_COLOR_MATERIAL = @as(c_int, 0x0B57);
pub const GL_COLOR_MATERIAL_FACE = @as(c_int, 0x0B55);
pub const GL_COLOR_MATERIAL_PARAMETER = @as(c_int, 0x0B56);
pub const GL_NORMALIZE = @as(c_int, 0x0BA1);
pub const GL_CLIP_PLANE0 = @as(c_int, 0x3000);
pub const GL_CLIP_PLANE1 = @as(c_int, 0x3001);
pub const GL_CLIP_PLANE2 = @as(c_int, 0x3002);
pub const GL_CLIP_PLANE3 = @as(c_int, 0x3003);
pub const GL_CLIP_PLANE4 = @as(c_int, 0x3004);
pub const GL_CLIP_PLANE5 = @as(c_int, 0x3005);
pub const GL_ACCUM_RED_BITS = @as(c_int, 0x0D58);
pub const GL_ACCUM_GREEN_BITS = @as(c_int, 0x0D59);
pub const GL_ACCUM_BLUE_BITS = @as(c_int, 0x0D5A);
pub const GL_ACCUM_ALPHA_BITS = @as(c_int, 0x0D5B);
pub const GL_ACCUM_CLEAR_VALUE = @as(c_int, 0x0B80);
pub const GL_ACCUM = @as(c_int, 0x0100);
pub const GL_ADD = @as(c_int, 0x0104);
pub const GL_LOAD = @as(c_int, 0x0101);
pub const GL_MULT = @as(c_int, 0x0103);
pub const GL_RETURN = @as(c_int, 0x0102);
pub const GL_ALPHA_TEST = @as(c_int, 0x0BC0);
pub const GL_ALPHA_TEST_REF = @as(c_int, 0x0BC2);
pub const GL_ALPHA_TEST_FUNC = @as(c_int, 0x0BC1);
pub const GL_BLEND = @as(c_int, 0x0BE2);
pub const GL_BLEND_SRC = @as(c_int, 0x0BE1);
pub const GL_BLEND_DST = @as(c_int, 0x0BE0);
pub const GL_ZERO = @as(c_int, 0);
pub const GL_ONE = @as(c_int, 1);
pub const GL_SRC_COLOR = @as(c_int, 0x0300);
pub const GL_ONE_MINUS_SRC_COLOR = @as(c_int, 0x0301);
pub const GL_SRC_ALPHA = @as(c_int, 0x0302);
pub const GL_ONE_MINUS_SRC_ALPHA = @as(c_int, 0x0303);
pub const GL_DST_ALPHA = @as(c_int, 0x0304);
pub const GL_ONE_MINUS_DST_ALPHA = @as(c_int, 0x0305);
pub const GL_DST_COLOR = @as(c_int, 0x0306);
pub const GL_ONE_MINUS_DST_COLOR = @as(c_int, 0x0307);
pub const GL_SRC_ALPHA_SATURATE = @as(c_int, 0x0308);
pub const GL_FEEDBACK = @as(c_int, 0x1C01);
pub const GL_RENDER = @as(c_int, 0x1C00);
pub const GL_SELECT = @as(c_int, 0x1C02);
pub const GL_2D = @as(c_int, 0x0600);
pub const GL_3D = @as(c_int, 0x0601);
pub const GL_3D_COLOR = @as(c_int, 0x0602);
pub const GL_3D_COLOR_TEXTURE = @as(c_int, 0x0603);
pub const GL_4D_COLOR_TEXTURE = @as(c_int, 0x0604);
pub const GL_POINT_TOKEN = @as(c_int, 0x0701);
pub const GL_LINE_TOKEN = @as(c_int, 0x0702);
pub const GL_LINE_RESET_TOKEN = @as(c_int, 0x0707);
pub const GL_POLYGON_TOKEN = @as(c_int, 0x0703);
pub const GL_BITMAP_TOKEN = @as(c_int, 0x0704);
pub const GL_DRAW_PIXEL_TOKEN = @as(c_int, 0x0705);
pub const GL_COPY_PIXEL_TOKEN = @as(c_int, 0x0706);
pub const GL_PASS_THROUGH_TOKEN = @as(c_int, 0x0700);
pub const GL_FEEDBACK_BUFFER_POINTER = @as(c_int, 0x0DF0);
pub const GL_FEEDBACK_BUFFER_SIZE = @as(c_int, 0x0DF1);
pub const GL_FEEDBACK_BUFFER_TYPE = @as(c_int, 0x0DF2);
pub const GL_SELECTION_BUFFER_POINTER = @as(c_int, 0x0DF3);
pub const GL_SELECTION_BUFFER_SIZE = @as(c_int, 0x0DF4);
pub const GL_FOG = @as(c_int, 0x0B60);
pub const GL_FOG_MODE = @as(c_int, 0x0B65);
pub const GL_FOG_DENSITY = @as(c_int, 0x0B62);
pub const GL_FOG_COLOR = @as(c_int, 0x0B66);
pub const GL_FOG_INDEX = @as(c_int, 0x0B61);
pub const GL_FOG_START = @as(c_int, 0x0B63);
pub const GL_FOG_END = @as(c_int, 0x0B64);
pub const GL_LINEAR = @as(c_int, 0x2601);
pub const GL_EXP = @as(c_int, 0x0800);
pub const GL_EXP2 = @as(c_int, 0x0801);
pub const GL_LOGIC_OP = @as(c_int, 0x0BF1);
pub const GL_INDEX_LOGIC_OP = @as(c_int, 0x0BF1);
pub const GL_COLOR_LOGIC_OP = @as(c_int, 0x0BF2);
pub const GL_LOGIC_OP_MODE = @as(c_int, 0x0BF0);
pub const GL_CLEAR = @as(c_int, 0x1500);
pub const GL_SET = @as(c_int, 0x150F);
pub const GL_COPY = @as(c_int, 0x1503);
pub const GL_COPY_INVERTED = @as(c_int, 0x150C);
pub const GL_NOOP = @as(c_int, 0x1505);
pub const GL_INVERT = @as(c_int, 0x150A);
pub const GL_AND = @as(c_int, 0x1501);
pub const GL_NAND = @as(c_int, 0x150E);
pub const GL_OR = @as(c_int, 0x1507);
pub const GL_NOR = @as(c_int, 0x1508);
pub const GL_XOR = @as(c_int, 0x1506);
pub const GL_EQUIV = @as(c_int, 0x1509);
pub const GL_AND_REVERSE = @as(c_int, 0x1502);
pub const GL_AND_INVERTED = @as(c_int, 0x1504);
pub const GL_OR_REVERSE = @as(c_int, 0x150B);
pub const GL_OR_INVERTED = @as(c_int, 0x150D);
pub const GL_STENCIL_BITS = @as(c_int, 0x0D57);
pub const GL_STENCIL_TEST = @as(c_int, 0x0B90);
pub const GL_STENCIL_CLEAR_VALUE = @as(c_int, 0x0B91);
pub const GL_STENCIL_FUNC = @as(c_int, 0x0B92);
pub const GL_STENCIL_VALUE_MASK = @as(c_int, 0x0B93);
pub const GL_STENCIL_FAIL = @as(c_int, 0x0B94);
pub const GL_STENCIL_PASS_DEPTH_FAIL = @as(c_int, 0x0B95);
pub const GL_STENCIL_PASS_DEPTH_PASS = @as(c_int, 0x0B96);
pub const GL_STENCIL_REF = @as(c_int, 0x0B97);
pub const GL_STENCIL_WRITEMASK = @as(c_int, 0x0B98);
pub const GL_STENCIL_INDEX = @as(c_int, 0x1901);
pub const GL_KEEP = @as(c_int, 0x1E00);
pub const GL_REPLACE = @as(c_int, 0x1E01);
pub const GL_INCR = @as(c_int, 0x1E02);
pub const GL_DECR = @as(c_int, 0x1E03);
pub const GL_NONE = @as(c_int, 0);
pub const GL_LEFT = @as(c_int, 0x0406);
pub const GL_RIGHT = @as(c_int, 0x0407);
pub const GL_FRONT_LEFT = @as(c_int, 0x0400);
pub const GL_FRONT_RIGHT = @as(c_int, 0x0401);
pub const GL_BACK_LEFT = @as(c_int, 0x0402);
pub const GL_BACK_RIGHT = @as(c_int, 0x0403);
pub const GL_AUX0 = @as(c_int, 0x0409);
pub const GL_AUX1 = @as(c_int, 0x040A);
pub const GL_AUX2 = @as(c_int, 0x040B);
pub const GL_AUX3 = @as(c_int, 0x040C);
pub const GL_COLOR_INDEX = @as(c_int, 0x1900);
pub const GL_RED = @as(c_int, 0x1903);
pub const GL_GREEN = @as(c_int, 0x1904);
pub const GL_BLUE = @as(c_int, 0x1905);
pub const GL_ALPHA = @as(c_int, 0x1906);
pub const GL_LUMINANCE = @as(c_int, 0x1909);
pub const GL_LUMINANCE_ALPHA = @as(c_int, 0x190A);
pub const GL_ALPHA_BITS = @as(c_int, 0x0D55);
pub const GL_RED_BITS = @as(c_int, 0x0D52);
pub const GL_GREEN_BITS = @as(c_int, 0x0D53);
pub const GL_BLUE_BITS = @as(c_int, 0x0D54);
pub const GL_INDEX_BITS = @as(c_int, 0x0D51);
pub const GL_SUBPIXEL_BITS = @as(c_int, 0x0D50);
pub const GL_AUX_BUFFERS = @as(c_int, 0x0C00);
pub const GL_READ_BUFFER = @as(c_int, 0x0C02);
pub const GL_DRAW_BUFFER = @as(c_int, 0x0C01);
pub const GL_DOUBLEBUFFER = @as(c_int, 0x0C32);
pub const GL_STEREO = @as(c_int, 0x0C33);
pub const GL_BITMAP = @as(c_int, 0x1A00);
pub const GL_COLOR = @as(c_int, 0x1800);
pub const GL_DEPTH = @as(c_int, 0x1801);
pub const GL_STENCIL = @as(c_int, 0x1802);
pub const GL_DITHER = @as(c_int, 0x0BD0);
pub const GL_RGB = @as(c_int, 0x1907);
pub const GL_RGBA = @as(c_int, 0x1908);
pub const GL_MAX_LIST_NESTING = @as(c_int, 0x0B31);
pub const GL_MAX_EVAL_ORDER = @as(c_int, 0x0D30);
pub const GL_MAX_LIGHTS = @as(c_int, 0x0D31);
pub const GL_MAX_CLIP_PLANES = @as(c_int, 0x0D32);
pub const GL_MAX_TEXTURE_SIZE = @as(c_int, 0x0D33);
pub const GL_MAX_PIXEL_MAP_TABLE = @as(c_int, 0x0D34);
pub const GL_MAX_ATTRIB_STACK_DEPTH = @as(c_int, 0x0D35);
pub const GL_MAX_MODELVIEW_STACK_DEPTH = @as(c_int, 0x0D36);
pub const GL_MAX_NAME_STACK_DEPTH = @as(c_int, 0x0D37);
pub const GL_MAX_PROJECTION_STACK_DEPTH = @as(c_int, 0x0D38);
pub const GL_MAX_TEXTURE_STACK_DEPTH = @as(c_int, 0x0D39);
pub const GL_MAX_VIEWPORT_DIMS = @as(c_int, 0x0D3A);
pub const GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = @as(c_int, 0x0D3B);
pub const GL_ATTRIB_STACK_DEPTH = @as(c_int, 0x0BB0);
pub const GL_CLIENT_ATTRIB_STACK_DEPTH = @as(c_int, 0x0BB1);
pub const GL_COLOR_CLEAR_VALUE = @as(c_int, 0x0C22);
pub const GL_COLOR_WRITEMASK = @as(c_int, 0x0C23);
pub const GL_CURRENT_INDEX = @as(c_int, 0x0B01);
pub const GL_CURRENT_COLOR = @as(c_int, 0x0B00);
pub const GL_CURRENT_NORMAL = @as(c_int, 0x0B02);
pub const GL_CURRENT_RASTER_COLOR = @as(c_int, 0x0B04);
pub const GL_CURRENT_RASTER_DISTANCE = @as(c_int, 0x0B09);
pub const GL_CURRENT_RASTER_INDEX = @as(c_int, 0x0B05);
pub const GL_CURRENT_RASTER_POSITION = @as(c_int, 0x0B07);
pub const GL_CURRENT_RASTER_TEXTURE_COORDS = @as(c_int, 0x0B06);
pub const GL_CURRENT_RASTER_POSITION_VALID = @as(c_int, 0x0B08);
pub const GL_CURRENT_TEXTURE_COORDS = @as(c_int, 0x0B03);
pub const GL_INDEX_CLEAR_VALUE = @as(c_int, 0x0C20);
pub const GL_INDEX_MODE = @as(c_int, 0x0C30);
pub const GL_INDEX_WRITEMASK = @as(c_int, 0x0C21);
pub const GL_MODELVIEW_MATRIX = @as(c_int, 0x0BA6);
pub const GL_MODELVIEW_STACK_DEPTH = @as(c_int, 0x0BA3);
pub const GL_NAME_STACK_DEPTH = @as(c_int, 0x0D70);
pub const GL_PROJECTION_MATRIX = @as(c_int, 0x0BA7);
pub const GL_PROJECTION_STACK_DEPTH = @as(c_int, 0x0BA4);
pub const GL_RENDER_MODE = @as(c_int, 0x0C40);
pub const GL_RGBA_MODE = @as(c_int, 0x0C31);
pub const GL_TEXTURE_MATRIX = @as(c_int, 0x0BA8);
pub const GL_TEXTURE_STACK_DEPTH = @as(c_int, 0x0BA5);
pub const GL_VIEWPORT = @as(c_int, 0x0BA2);
pub const GL_AUTO_NORMAL = @as(c_int, 0x0D80);
pub const GL_MAP1_COLOR_4 = @as(c_int, 0x0D90);
pub const GL_MAP1_INDEX = @as(c_int, 0x0D91);
pub const GL_MAP1_NORMAL = @as(c_int, 0x0D92);
pub const GL_MAP1_TEXTURE_COORD_1 = @as(c_int, 0x0D93);
pub const GL_MAP1_TEXTURE_COORD_2 = @as(c_int, 0x0D94);
pub const GL_MAP1_TEXTURE_COORD_3 = @as(c_int, 0x0D95);
pub const GL_MAP1_TEXTURE_COORD_4 = @as(c_int, 0x0D96);
pub const GL_MAP1_VERTEX_3 = @as(c_int, 0x0D97);
pub const GL_MAP1_VERTEX_4 = @as(c_int, 0x0D98);
pub const GL_MAP2_COLOR_4 = @as(c_int, 0x0DB0);
pub const GL_MAP2_INDEX = @as(c_int, 0x0DB1);
pub const GL_MAP2_NORMAL = @as(c_int, 0x0DB2);
pub const GL_MAP2_TEXTURE_COORD_1 = @as(c_int, 0x0DB3);
pub const GL_MAP2_TEXTURE_COORD_2 = @as(c_int, 0x0DB4);
pub const GL_MAP2_TEXTURE_COORD_3 = @as(c_int, 0x0DB5);
pub const GL_MAP2_TEXTURE_COORD_4 = @as(c_int, 0x0DB6);
pub const GL_MAP2_VERTEX_3 = @as(c_int, 0x0DB7);
pub const GL_MAP2_VERTEX_4 = @as(c_int, 0x0DB8);
pub const GL_MAP1_GRID_DOMAIN = @as(c_int, 0x0DD0);
pub const GL_MAP1_GRID_SEGMENTS = @as(c_int, 0x0DD1);
pub const GL_MAP2_GRID_DOMAIN = @as(c_int, 0x0DD2);
pub const GL_MAP2_GRID_SEGMENTS = @as(c_int, 0x0DD3);
pub const GL_COEFF = @as(c_int, 0x0A00);
pub const GL_ORDER = @as(c_int, 0x0A01);
pub const GL_DOMAIN = @as(c_int, 0x0A02);
pub const GL_PERSPECTIVE_CORRECTION_HINT = @as(c_int, 0x0C50);
pub const GL_POINT_SMOOTH_HINT = @as(c_int, 0x0C51);
pub const GL_LINE_SMOOTH_HINT = @as(c_int, 0x0C52);
pub const GL_POLYGON_SMOOTH_HINT = @as(c_int, 0x0C53);
pub const GL_FOG_HINT = @as(c_int, 0x0C54);
pub const GL_DONT_CARE = @as(c_int, 0x1100);
pub const GL_FASTEST = @as(c_int, 0x1101);
pub const GL_NICEST = @as(c_int, 0x1102);
pub const GL_SCISSOR_BOX = @as(c_int, 0x0C10);
pub const GL_SCISSOR_TEST = @as(c_int, 0x0C11);
pub const GL_MAP_COLOR = @as(c_int, 0x0D10);
pub const GL_MAP_STENCIL = @as(c_int, 0x0D11);
pub const GL_INDEX_SHIFT = @as(c_int, 0x0D12);
pub const GL_INDEX_OFFSET = @as(c_int, 0x0D13);
pub const GL_RED_SCALE = @as(c_int, 0x0D14);
pub const GL_RED_BIAS = @as(c_int, 0x0D15);
pub const GL_GREEN_SCALE = @as(c_int, 0x0D18);
pub const GL_GREEN_BIAS = @as(c_int, 0x0D19);
pub const GL_BLUE_SCALE = @as(c_int, 0x0D1A);
pub const GL_BLUE_BIAS = @as(c_int, 0x0D1B);
pub const GL_ALPHA_SCALE = @as(c_int, 0x0D1C);
pub const GL_ALPHA_BIAS = @as(c_int, 0x0D1D);
pub const GL_DEPTH_SCALE = @as(c_int, 0x0D1E);
pub const GL_DEPTH_BIAS = @as(c_int, 0x0D1F);
pub const GL_PIXEL_MAP_S_TO_S_SIZE = @as(c_int, 0x0CB1);
pub const GL_PIXEL_MAP_I_TO_I_SIZE = @as(c_int, 0x0CB0);
pub const GL_PIXEL_MAP_I_TO_R_SIZE = @as(c_int, 0x0CB2);
pub const GL_PIXEL_MAP_I_TO_G_SIZE = @as(c_int, 0x0CB3);
pub const GL_PIXEL_MAP_I_TO_B_SIZE = @as(c_int, 0x0CB4);
pub const GL_PIXEL_MAP_I_TO_A_SIZE = @as(c_int, 0x0CB5);
pub const GL_PIXEL_MAP_R_TO_R_SIZE = @as(c_int, 0x0CB6);
pub const GL_PIXEL_MAP_G_TO_G_SIZE = @as(c_int, 0x0CB7);
pub const GL_PIXEL_MAP_B_TO_B_SIZE = @as(c_int, 0x0CB8);
pub const GL_PIXEL_MAP_A_TO_A_SIZE = @as(c_int, 0x0CB9);
pub const GL_PIXEL_MAP_S_TO_S = @as(c_int, 0x0C71);
pub const GL_PIXEL_MAP_I_TO_I = @as(c_int, 0x0C70);
pub const GL_PIXEL_MAP_I_TO_R = @as(c_int, 0x0C72);
pub const GL_PIXEL_MAP_I_TO_G = @as(c_int, 0x0C73);
pub const GL_PIXEL_MAP_I_TO_B = @as(c_int, 0x0C74);
pub const GL_PIXEL_MAP_I_TO_A = @as(c_int, 0x0C75);
pub const GL_PIXEL_MAP_R_TO_R = @as(c_int, 0x0C76);
pub const GL_PIXEL_MAP_G_TO_G = @as(c_int, 0x0C77);
pub const GL_PIXEL_MAP_B_TO_B = @as(c_int, 0x0C78);
pub const GL_PIXEL_MAP_A_TO_A = @as(c_int, 0x0C79);
pub const GL_PACK_ALIGNMENT = @as(c_int, 0x0D05);
pub const GL_PACK_LSB_FIRST = @as(c_int, 0x0D01);
pub const GL_PACK_ROW_LENGTH = @as(c_int, 0x0D02);
pub const GL_PACK_SKIP_PIXELS = @as(c_int, 0x0D04);
pub const GL_PACK_SKIP_ROWS = @as(c_int, 0x0D03);
pub const GL_PACK_SWAP_BYTES = @as(c_int, 0x0D00);
pub const GL_UNPACK_ALIGNMENT = @as(c_int, 0x0CF5);
pub const GL_UNPACK_LSB_FIRST = @as(c_int, 0x0CF1);
pub const GL_UNPACK_ROW_LENGTH = @as(c_int, 0x0CF2);
pub const GL_UNPACK_SKIP_PIXELS = @as(c_int, 0x0CF4);
pub const GL_UNPACK_SKIP_ROWS = @as(c_int, 0x0CF3);
pub const GL_UNPACK_SWAP_BYTES = @as(c_int, 0x0CF0);
pub const GL_ZOOM_X = @as(c_int, 0x0D16);
pub const GL_ZOOM_Y = @as(c_int, 0x0D17);
pub const GL_TEXTURE_ENV = @as(c_int, 0x2300);
pub const GL_TEXTURE_ENV_MODE = @as(c_int, 0x2200);
pub const GL_TEXTURE_1D = @as(c_int, 0x0DE0);
pub const GL_TEXTURE_2D = @as(c_int, 0x0DE1);
pub const GL_TEXTURE_WRAP_S = @as(c_int, 0x2802);
pub const GL_TEXTURE_WRAP_T = @as(c_int, 0x2803);
pub const GL_TEXTURE_MAG_FILTER = @as(c_int, 0x2800);
pub const GL_TEXTURE_MIN_FILTER = @as(c_int, 0x2801);
pub const GL_TEXTURE_ENV_COLOR = @as(c_int, 0x2201);
pub const GL_TEXTURE_GEN_S = @as(c_int, 0x0C60);
pub const GL_TEXTURE_GEN_T = @as(c_int, 0x0C61);
pub const GL_TEXTURE_GEN_R = @as(c_int, 0x0C62);
pub const GL_TEXTURE_GEN_Q = @as(c_int, 0x0C63);
pub const GL_TEXTURE_GEN_MODE = @as(c_int, 0x2500);
pub const GL_TEXTURE_BORDER_COLOR = @as(c_int, 0x1004);
pub const GL_TEXTURE_WIDTH = @as(c_int, 0x1000);
pub const GL_TEXTURE_HEIGHT = @as(c_int, 0x1001);
pub const GL_TEXTURE_BORDER = @as(c_int, 0x1005);
pub const GL_TEXTURE_COMPONENTS = @as(c_int, 0x1003);
pub const GL_TEXTURE_RED_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805C, .hex);
pub const GL_TEXTURE_GREEN_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805D, .hex);
pub const GL_TEXTURE_BLUE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805E, .hex);
pub const GL_TEXTURE_ALPHA_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805F, .hex);
pub const GL_TEXTURE_LUMINANCE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8060, .hex);
pub const GL_TEXTURE_INTENSITY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8061, .hex);
pub const GL_NEAREST_MIPMAP_NEAREST = @as(c_int, 0x2700);
pub const GL_NEAREST_MIPMAP_LINEAR = @as(c_int, 0x2702);
pub const GL_LINEAR_MIPMAP_NEAREST = @as(c_int, 0x2701);
pub const GL_LINEAR_MIPMAP_LINEAR = @as(c_int, 0x2703);
pub const GL_OBJECT_LINEAR = @as(c_int, 0x2401);
pub const GL_OBJECT_PLANE = @as(c_int, 0x2501);
pub const GL_EYE_LINEAR = @as(c_int, 0x2400);
pub const GL_EYE_PLANE = @as(c_int, 0x2502);
pub const GL_SPHERE_MAP = @as(c_int, 0x2402);
pub const GL_DECAL = @as(c_int, 0x2101);
pub const GL_MODULATE = @as(c_int, 0x2100);
pub const GL_NEAREST = @as(c_int, 0x2600);
pub const GL_REPEAT = @as(c_int, 0x2901);
pub const GL_CLAMP = @as(c_int, 0x2900);
pub const GL_S = @as(c_int, 0x2000);
pub const GL_T = @as(c_int, 0x2001);
pub const GL_R = @as(c_int, 0x2002);
pub const GL_Q = @as(c_int, 0x2003);
pub const GL_VENDOR = @as(c_int, 0x1F00);
pub const GL_RENDERER = @as(c_int, 0x1F01);
pub const GL_VERSION = @as(c_int, 0x1F02);
pub const GL_EXTENSIONS = @as(c_int, 0x1F03);
pub const GL_NO_ERROR = @as(c_int, 0);
pub const GL_INVALID_ENUM = @as(c_int, 0x0500);
pub const GL_INVALID_VALUE = @as(c_int, 0x0501);
pub const GL_INVALID_OPERATION = @as(c_int, 0x0502);
pub const GL_STACK_OVERFLOW = @as(c_int, 0x0503);
pub const GL_STACK_UNDERFLOW = @as(c_int, 0x0504);
pub const GL_OUT_OF_MEMORY = @as(c_int, 0x0505);
pub const GL_CURRENT_BIT = @as(c_int, 0x00000001);
pub const GL_POINT_BIT = @as(c_int, 0x00000002);
pub const GL_LINE_BIT = @as(c_int, 0x00000004);
pub const GL_POLYGON_BIT = @as(c_int, 0x00000008);
pub const GL_POLYGON_STIPPLE_BIT = @as(c_int, 0x00000010);
pub const GL_PIXEL_MODE_BIT = @as(c_int, 0x00000020);
pub const GL_LIGHTING_BIT = @as(c_int, 0x00000040);
pub const GL_FOG_BIT = @as(c_int, 0x00000080);
pub const GL_DEPTH_BUFFER_BIT = @as(c_int, 0x00000100);
pub const GL_ACCUM_BUFFER_BIT = @as(c_int, 0x00000200);
pub const GL_STENCIL_BUFFER_BIT = @as(c_int, 0x00000400);
pub const GL_VIEWPORT_BIT = @as(c_int, 0x00000800);
pub const GL_TRANSFORM_BIT = @as(c_int, 0x00001000);
pub const GL_ENABLE_BIT = @as(c_int, 0x00002000);
pub const GL_COLOR_BUFFER_BIT = @as(c_int, 0x00004000);
pub const GL_HINT_BIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex);
pub const GL_EVAL_BIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex);
pub const GL_LIST_BIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex);
pub const GL_TEXTURE_BIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex);
pub const GL_SCISSOR_BIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex);
pub const GL_ALL_ATTRIB_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFFFFFF, .hex);
pub const GL_PROXY_TEXTURE_1D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8063, .hex);
pub const GL_PROXY_TEXTURE_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8064, .hex);
pub const GL_TEXTURE_PRIORITY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8066, .hex);
pub const GL_TEXTURE_RESIDENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8067, .hex);
pub const GL_TEXTURE_BINDING_1D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8068, .hex);
pub const GL_TEXTURE_BINDING_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8069, .hex);
pub const GL_TEXTURE_INTERNAL_FORMAT = @as(c_int, 0x1003);
pub const GL_ALPHA4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803B, .hex);
pub const GL_ALPHA8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803C, .hex);
pub const GL_ALPHA12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803D, .hex);
pub const GL_ALPHA16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803E, .hex);
pub const GL_LUMINANCE4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803F, .hex);
pub const GL_LUMINANCE8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8040, .hex);
pub const GL_LUMINANCE12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8041, .hex);
pub const GL_LUMINANCE16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8042, .hex);
pub const GL_LUMINANCE4_ALPHA4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8043, .hex);
pub const GL_LUMINANCE6_ALPHA2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8044, .hex);
pub const GL_LUMINANCE8_ALPHA8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8045, .hex);
pub const GL_LUMINANCE12_ALPHA4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8046, .hex);
pub const GL_LUMINANCE12_ALPHA12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8047, .hex);
pub const GL_LUMINANCE16_ALPHA16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8048, .hex);
pub const GL_INTENSITY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8049, .hex);
pub const GL_INTENSITY4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804A, .hex);
pub const GL_INTENSITY8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804B, .hex);
pub const GL_INTENSITY12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804C, .hex);
pub const GL_INTENSITY16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804D, .hex);
pub const GL_R3_G3_B2 = @as(c_int, 0x2A10);
pub const GL_RGB4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804F, .hex);
pub const GL_RGB5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8050, .hex);
pub const GL_RGB8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8051, .hex);
pub const GL_RGB10 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8052, .hex);
pub const GL_RGB12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8053, .hex);
pub const GL_RGB16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8054, .hex);
pub const GL_RGBA2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8055, .hex);
pub const GL_RGBA4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8056, .hex);
pub const GL_RGB5_A1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8057, .hex);
pub const GL_RGBA8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8058, .hex);
pub const GL_RGB10_A2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8059, .hex);
pub const GL_RGBA12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805A, .hex);
pub const GL_RGBA16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805B, .hex);
pub const GL_CLIENT_PIXEL_STORE_BIT = @as(c_int, 0x00000001);
pub const GL_CLIENT_VERTEX_ARRAY_BIT = @as(c_int, 0x00000002);
pub const GL_ALL_CLIENT_ATTRIB_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFFFFFF, .hex);
pub const GL_CLIENT_ALL_ATTRIB_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFFFFFF, .hex);
pub const GL_RESCALE_NORMAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803A, .hex);
pub const GL_CLAMP_TO_EDGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x812F, .hex);
pub const GL_MAX_ELEMENTS_VERTICES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E8, .hex);
pub const GL_MAX_ELEMENTS_INDICES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E9, .hex);
pub const GL_BGR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E0, .hex);
pub const GL_BGRA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E1, .hex);
pub const GL_UNSIGNED_BYTE_3_3_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8032, .hex);
pub const GL_UNSIGNED_BYTE_2_3_3_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8362, .hex);
pub const GL_UNSIGNED_SHORT_5_6_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8363, .hex);
pub const GL_UNSIGNED_SHORT_5_6_5_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8364, .hex);
pub const GL_UNSIGNED_SHORT_4_4_4_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8033, .hex);
pub const GL_UNSIGNED_SHORT_4_4_4_4_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8365, .hex);
pub const GL_UNSIGNED_SHORT_5_5_5_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8034, .hex);
pub const GL_UNSIGNED_SHORT_1_5_5_5_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8366, .hex);
pub const GL_UNSIGNED_INT_8_8_8_8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8035, .hex);
pub const GL_UNSIGNED_INT_8_8_8_8_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8367, .hex);
pub const GL_UNSIGNED_INT_10_10_10_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8036, .hex);
pub const GL_UNSIGNED_INT_2_10_10_10_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8368, .hex);
pub const GL_LIGHT_MODEL_COLOR_CONTROL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F8, .hex);
pub const GL_SINGLE_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F9, .hex);
pub const GL_SEPARATE_SPECULAR_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81FA, .hex);
pub const GL_TEXTURE_MIN_LOD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x813A, .hex);
pub const GL_TEXTURE_MAX_LOD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x813B, .hex);
pub const GL_TEXTURE_BASE_LEVEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x813C, .hex);
pub const GL_TEXTURE_MAX_LEVEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x813D, .hex);
pub const GL_SMOOTH_POINT_SIZE_RANGE = @as(c_int, 0x0B12);
pub const GL_SMOOTH_POINT_SIZE_GRANULARITY = @as(c_int, 0x0B13);
pub const GL_SMOOTH_LINE_WIDTH_RANGE = @as(c_int, 0x0B22);
pub const GL_SMOOTH_LINE_WIDTH_GRANULARITY = @as(c_int, 0x0B23);
pub const GL_ALIASED_POINT_SIZE_RANGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x846D, .hex);
pub const GL_ALIASED_LINE_WIDTH_RANGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x846E, .hex);
pub const GL_PACK_SKIP_IMAGES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806B, .hex);
pub const GL_PACK_IMAGE_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806C, .hex);
pub const GL_UNPACK_SKIP_IMAGES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806D, .hex);
pub const GL_UNPACK_IMAGE_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806E, .hex);
pub const GL_TEXTURE_3D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806F, .hex);
pub const GL_PROXY_TEXTURE_3D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8070, .hex);
pub const GL_TEXTURE_DEPTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8071, .hex);
pub const GL_TEXTURE_WRAP_R = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8072, .hex);
pub const GL_MAX_3D_TEXTURE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8073, .hex);
pub const GL_TEXTURE_BINDING_3D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806A, .hex);
pub const GL_CONSTANT_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8001, .hex);
pub const GL_ONE_MINUS_CONSTANT_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8002, .hex);
pub const GL_CONSTANT_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8003, .hex);
pub const GL_ONE_MINUS_CONSTANT_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8004, .hex);
pub const GL_COLOR_TABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D0, .hex);
pub const GL_POST_CONVOLUTION_COLOR_TABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D1, .hex);
pub const GL_POST_COLOR_MATRIX_COLOR_TABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D2, .hex);
pub const GL_PROXY_COLOR_TABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D3, .hex);
pub const GL_PROXY_POST_CONVOLUTION_COLOR_TABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D4, .hex);
pub const GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D5, .hex);
pub const GL_COLOR_TABLE_SCALE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D6, .hex);
pub const GL_COLOR_TABLE_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D7, .hex);
pub const GL_COLOR_TABLE_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D8, .hex);
pub const GL_COLOR_TABLE_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D9, .hex);
pub const GL_COLOR_TABLE_RED_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DA, .hex);
pub const GL_COLOR_TABLE_GREEN_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DB, .hex);
pub const GL_COLOR_TABLE_BLUE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DC, .hex);
pub const GL_COLOR_TABLE_ALPHA_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DD, .hex);
pub const GL_COLOR_TABLE_LUMINANCE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DE, .hex);
pub const GL_COLOR_TABLE_INTENSITY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DF, .hex);
pub const GL_CONVOLUTION_1D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8010, .hex);
pub const GL_CONVOLUTION_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8011, .hex);
pub const GL_SEPARABLE_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8012, .hex);
pub const GL_CONVOLUTION_BORDER_MODE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8013, .hex);
pub const GL_CONVOLUTION_FILTER_SCALE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8014, .hex);
pub const GL_CONVOLUTION_FILTER_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8015, .hex);
pub const GL_REDUCE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8016, .hex);
pub const GL_CONVOLUTION_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8017, .hex);
pub const GL_CONVOLUTION_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8018, .hex);
pub const GL_CONVOLUTION_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8019, .hex);
pub const GL_MAX_CONVOLUTION_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x801A, .hex);
pub const GL_MAX_CONVOLUTION_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x801B, .hex);
pub const GL_POST_CONVOLUTION_RED_SCALE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x801C, .hex);
pub const GL_POST_CONVOLUTION_GREEN_SCALE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x801D, .hex);
pub const GL_POST_CONVOLUTION_BLUE_SCALE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x801E, .hex);
pub const GL_POST_CONVOLUTION_ALPHA_SCALE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x801F, .hex);
pub const GL_POST_CONVOLUTION_RED_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8020, .hex);
pub const GL_POST_CONVOLUTION_GREEN_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8021, .hex);
pub const GL_POST_CONVOLUTION_BLUE_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8022, .hex);
pub const GL_POST_CONVOLUTION_ALPHA_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8023, .hex);
pub const GL_CONSTANT_BORDER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8151, .hex);
pub const GL_REPLICATE_BORDER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8153, .hex);
pub const GL_CONVOLUTION_BORDER_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8154, .hex);
pub const GL_COLOR_MATRIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B1, .hex);
pub const GL_COLOR_MATRIX_STACK_DEPTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B2, .hex);
pub const GL_MAX_COLOR_MATRIX_STACK_DEPTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B3, .hex);
pub const GL_POST_COLOR_MATRIX_RED_SCALE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B4, .hex);
pub const GL_POST_COLOR_MATRIX_GREEN_SCALE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B5, .hex);
pub const GL_POST_COLOR_MATRIX_BLUE_SCALE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B6, .hex);
pub const GL_POST_COLOR_MATRIX_ALPHA_SCALE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B7, .hex);
pub const GL_POST_COLOR_MATRIX_RED_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B8, .hex);
pub const GL_POST_COLOR_MATRIX_GREEN_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B9, .hex);
pub const GL_POST_COLOR_MATRIX_BLUE_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80BA, .hex);
pub const GL_POST_COLOR_MATRIX_ALPHA_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80BB, .hex);
pub const GL_HISTOGRAM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8024, .hex);
pub const GL_PROXY_HISTOGRAM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8025, .hex);
pub const GL_HISTOGRAM_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8026, .hex);
pub const GL_HISTOGRAM_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8027, .hex);
pub const GL_HISTOGRAM_RED_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8028, .hex);
pub const GL_HISTOGRAM_GREEN_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8029, .hex);
pub const GL_HISTOGRAM_BLUE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802A, .hex);
pub const GL_HISTOGRAM_ALPHA_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802B, .hex);
pub const GL_HISTOGRAM_LUMINANCE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802C, .hex);
pub const GL_HISTOGRAM_SINK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802D, .hex);
pub const GL_MINMAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802E, .hex);
pub const GL_MINMAX_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802F, .hex);
pub const GL_MINMAX_SINK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8030, .hex);
pub const GL_TABLE_TOO_LARGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8031, .hex);
pub const GL_BLEND_EQUATION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8009, .hex);
pub const GL_MIN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8007, .hex);
pub const GL_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8008, .hex);
pub const GL_FUNC_ADD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8006, .hex);
pub const GL_FUNC_SUBTRACT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x800A, .hex);
pub const GL_FUNC_REVERSE_SUBTRACT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x800B, .hex);
pub const GL_BLEND_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8005, .hex);
pub const GL_TEXTURE0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C0, .hex);
pub const GL_TEXTURE1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C1, .hex);
pub const GL_TEXTURE2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C2, .hex);
pub const GL_TEXTURE3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C3, .hex);
pub const GL_TEXTURE4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C4, .hex);
pub const GL_TEXTURE5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C5, .hex);
pub const GL_TEXTURE6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C6, .hex);
pub const GL_TEXTURE7 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C7, .hex);
pub const GL_TEXTURE8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C8, .hex);
pub const GL_TEXTURE9 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C9, .hex);
pub const GL_TEXTURE10 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CA, .hex);
pub const GL_TEXTURE11 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CB, .hex);
pub const GL_TEXTURE12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CC, .hex);
pub const GL_TEXTURE13 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CD, .hex);
pub const GL_TEXTURE14 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CE, .hex);
pub const GL_TEXTURE15 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CF, .hex);
pub const GL_TEXTURE16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D0, .hex);
pub const GL_TEXTURE17 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D1, .hex);
pub const GL_TEXTURE18 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D2, .hex);
pub const GL_TEXTURE19 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D3, .hex);
pub const GL_TEXTURE20 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D4, .hex);
pub const GL_TEXTURE21 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D5, .hex);
pub const GL_TEXTURE22 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D6, .hex);
pub const GL_TEXTURE23 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D7, .hex);
pub const GL_TEXTURE24 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D8, .hex);
pub const GL_TEXTURE25 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D9, .hex);
pub const GL_TEXTURE26 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DA, .hex);
pub const GL_TEXTURE27 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DB, .hex);
pub const GL_TEXTURE28 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DC, .hex);
pub const GL_TEXTURE29 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DD, .hex);
pub const GL_TEXTURE30 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DE, .hex);
pub const GL_TEXTURE31 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DF, .hex);
pub const GL_ACTIVE_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E0, .hex);
pub const GL_CLIENT_ACTIVE_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E1, .hex);
pub const GL_MAX_TEXTURE_UNITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E2, .hex);
pub const GL_NORMAL_MAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8511, .hex);
pub const GL_REFLECTION_MAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8512, .hex);
pub const GL_TEXTURE_CUBE_MAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8513, .hex);
pub const GL_TEXTURE_BINDING_CUBE_MAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8514, .hex);
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_X = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8515, .hex);
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_X = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8516, .hex);
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Y = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8517, .hex);
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8518, .hex);
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Z = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8519, .hex);
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851A, .hex);
pub const GL_PROXY_TEXTURE_CUBE_MAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851B, .hex);
pub const GL_MAX_CUBE_MAP_TEXTURE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851C, .hex);
pub const GL_COMPRESSED_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E9, .hex);
pub const GL_COMPRESSED_LUMINANCE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84EA, .hex);
pub const GL_COMPRESSED_LUMINANCE_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84EB, .hex);
pub const GL_COMPRESSED_INTENSITY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84EC, .hex);
pub const GL_COMPRESSED_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84ED, .hex);
pub const GL_COMPRESSED_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84EE, .hex);
pub const GL_TEXTURE_COMPRESSION_HINT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84EF, .hex);
pub const GL_TEXTURE_COMPRESSED_IMAGE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A0, .hex);
pub const GL_TEXTURE_COMPRESSED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A1, .hex);
pub const GL_NUM_COMPRESSED_TEXTURE_FORMATS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A2, .hex);
pub const GL_COMPRESSED_TEXTURE_FORMATS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A3, .hex);
pub const GL_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809D, .hex);
pub const GL_SAMPLE_ALPHA_TO_COVERAGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809E, .hex);
pub const GL_SAMPLE_ALPHA_TO_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809F, .hex);
pub const GL_SAMPLE_COVERAGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A0, .hex);
pub const GL_SAMPLE_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A8, .hex);
pub const GL_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A9, .hex);
pub const GL_SAMPLE_COVERAGE_VALUE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AA, .hex);
pub const GL_SAMPLE_COVERAGE_INVERT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AB, .hex);
pub const GL_MULTISAMPLE_BIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex);
pub const GL_TRANSPOSE_MODELVIEW_MATRIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E3, .hex);
pub const GL_TRANSPOSE_PROJECTION_MATRIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E4, .hex);
pub const GL_TRANSPOSE_TEXTURE_MATRIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E5, .hex);
pub const GL_TRANSPOSE_COLOR_MATRIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E6, .hex);
pub const GL_COMBINE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8570, .hex);
pub const GL_COMBINE_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8571, .hex);
pub const GL_COMBINE_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8572, .hex);
pub const GL_SOURCE0_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8580, .hex);
pub const GL_SOURCE1_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8581, .hex);
pub const GL_SOURCE2_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8582, .hex);
pub const GL_SOURCE0_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8588, .hex);
pub const GL_SOURCE1_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8589, .hex);
pub const GL_SOURCE2_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x858A, .hex);
pub const GL_OPERAND0_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8590, .hex);
pub const GL_OPERAND1_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8591, .hex);
pub const GL_OPERAND2_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8592, .hex);
pub const GL_OPERAND0_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8598, .hex);
pub const GL_OPERAND1_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8599, .hex);
pub const GL_OPERAND2_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x859A, .hex);
pub const GL_RGB_SCALE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8573, .hex);
pub const GL_ADD_SIGNED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8574, .hex);
pub const GL_INTERPOLATE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8575, .hex);
pub const GL_SUBTRACT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E7, .hex);
pub const GL_CONSTANT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8576, .hex);
pub const GL_PRIMARY_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8577, .hex);
pub const GL_PREVIOUS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8578, .hex);
pub const GL_DOT3_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86AE, .hex);
pub const GL_DOT3_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86AF, .hex);
pub const GL_CLAMP_TO_BORDER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x812D, .hex);
pub const GL_ARB_multitexture = @as(c_int, 1);
pub const GL_TEXTURE0_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C0, .hex);
pub const GL_TEXTURE1_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C1, .hex);
pub const GL_TEXTURE2_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C2, .hex);
pub const GL_TEXTURE3_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C3, .hex);
pub const GL_TEXTURE4_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C4, .hex);
pub const GL_TEXTURE5_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C5, .hex);
pub const GL_TEXTURE6_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C6, .hex);
pub const GL_TEXTURE7_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C7, .hex);
pub const GL_TEXTURE8_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C8, .hex);
pub const GL_TEXTURE9_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C9, .hex);
pub const GL_TEXTURE10_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CA, .hex);
pub const GL_TEXTURE11_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CB, .hex);
pub const GL_TEXTURE12_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CC, .hex);
pub const GL_TEXTURE13_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CD, .hex);
pub const GL_TEXTURE14_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CE, .hex);
pub const GL_TEXTURE15_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CF, .hex);
pub const GL_TEXTURE16_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D0, .hex);
pub const GL_TEXTURE17_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D1, .hex);
pub const GL_TEXTURE18_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D2, .hex);
pub const GL_TEXTURE19_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D3, .hex);
pub const GL_TEXTURE20_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D4, .hex);
pub const GL_TEXTURE21_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D5, .hex);
pub const GL_TEXTURE22_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D6, .hex);
pub const GL_TEXTURE23_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D7, .hex);
pub const GL_TEXTURE24_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D8, .hex);
pub const GL_TEXTURE25_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D9, .hex);
pub const GL_TEXTURE26_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DA, .hex);
pub const GL_TEXTURE27_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DB, .hex);
pub const GL_TEXTURE28_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DC, .hex);
pub const GL_TEXTURE29_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DD, .hex);
pub const GL_TEXTURE30_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DE, .hex);
pub const GL_TEXTURE31_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DF, .hex);
pub const GL_ACTIVE_TEXTURE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E0, .hex);
pub const GL_CLIENT_ACTIVE_TEXTURE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E1, .hex);
pub const GL_MAX_TEXTURE_UNITS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E2, .hex);
pub const __gl_glext_h_ = @as(c_int, 1);
pub const GL_GLEXT_VERSION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 20220530, .decimal);
pub const __khrplatform_h_ = "";
pub const KHRONOS_APICALL = "";
pub const KHRONOS_APIENTRY = "";
pub const KHRONOS_APIATTRIBUTES = "";
pub const KHRONOS_SUPPORT_INT64 = @as(c_int, 1);
pub const KHRONOS_SUPPORT_FLOAT = @as(c_int, 1);
pub const KHRONOS_MAX_ENUM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x7FFFFFFF, .hex);
pub const GL_VERSION_1_4 = @as(c_int, 1);
pub const GL_BLEND_DST_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80C8, .hex);
pub const GL_BLEND_SRC_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80C9, .hex);
pub const GL_BLEND_DST_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80CA, .hex);
pub const GL_BLEND_SRC_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80CB, .hex);
pub const GL_POINT_FADE_THRESHOLD_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8128, .hex);
pub const GL_DEPTH_COMPONENT16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A5, .hex);
pub const GL_DEPTH_COMPONENT24 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A6, .hex);
pub const GL_DEPTH_COMPONENT32 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A7, .hex);
pub const GL_MIRRORED_REPEAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8370, .hex);
pub const GL_MAX_TEXTURE_LOD_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84FD, .hex);
pub const GL_TEXTURE_LOD_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8501, .hex);
pub const GL_INCR_WRAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8507, .hex);
pub const GL_DECR_WRAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8508, .hex);
pub const GL_TEXTURE_DEPTH_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884A, .hex);
pub const GL_TEXTURE_COMPARE_MODE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884C, .hex);
pub const GL_TEXTURE_COMPARE_FUNC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884D, .hex);
pub const GL_POINT_SIZE_MIN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8126, .hex);
pub const GL_POINT_SIZE_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8127, .hex);
pub const GL_POINT_DISTANCE_ATTENUATION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8129, .hex);
pub const GL_GENERATE_MIPMAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8191, .hex);
pub const GL_GENERATE_MIPMAP_HINT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8192, .hex);
pub const GL_FOG_COORDINATE_SOURCE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8450, .hex);
pub const GL_FOG_COORDINATE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8451, .hex);
pub const GL_FRAGMENT_DEPTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8452, .hex);
pub const GL_CURRENT_FOG_COORDINATE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8453, .hex);
pub const GL_FOG_COORDINATE_ARRAY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8454, .hex);
pub const GL_FOG_COORDINATE_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8455, .hex);
pub const GL_FOG_COORDINATE_ARRAY_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8456, .hex);
pub const GL_FOG_COORDINATE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8457, .hex);
pub const GL_COLOR_SUM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8458, .hex);
pub const GL_CURRENT_SECONDARY_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8459, .hex);
pub const GL_SECONDARY_COLOR_ARRAY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845A, .hex);
pub const GL_SECONDARY_COLOR_ARRAY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845B, .hex);
pub const GL_SECONDARY_COLOR_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845C, .hex);
pub const GL_SECONDARY_COLOR_ARRAY_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845D, .hex);
pub const GL_SECONDARY_COLOR_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845E, .hex);
pub const GL_TEXTURE_FILTER_CONTROL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8500, .hex);
pub const GL_DEPTH_TEXTURE_MODE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884B, .hex);
pub const GL_COMPARE_R_TO_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884E, .hex);
pub const GL_VERSION_1_5 = @as(c_int, 1);
pub const GL_BUFFER_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8764, .hex);
pub const GL_BUFFER_USAGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8765, .hex);
pub const GL_QUERY_COUNTER_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8864, .hex);
pub const GL_CURRENT_QUERY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8865, .hex);
pub const GL_QUERY_RESULT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8866, .hex);
pub const GL_QUERY_RESULT_AVAILABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8867, .hex);
pub const GL_ARRAY_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8892, .hex);
pub const GL_ELEMENT_ARRAY_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8893, .hex);
pub const GL_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8894, .hex);
pub const GL_ELEMENT_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8895, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889F, .hex);
pub const GL_READ_ONLY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B8, .hex);
pub const GL_WRITE_ONLY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B9, .hex);
pub const GL_READ_WRITE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BA, .hex);
pub const GL_BUFFER_ACCESS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BB, .hex);
pub const GL_BUFFER_MAPPED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BC, .hex);
pub const GL_BUFFER_MAP_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BD, .hex);
pub const GL_STREAM_DRAW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E0, .hex);
pub const GL_STREAM_READ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E1, .hex);
pub const GL_STREAM_COPY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E2, .hex);
pub const GL_STATIC_DRAW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E4, .hex);
pub const GL_STATIC_READ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E5, .hex);
pub const GL_STATIC_COPY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E6, .hex);
pub const GL_DYNAMIC_DRAW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E8, .hex);
pub const GL_DYNAMIC_READ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E9, .hex);
pub const GL_DYNAMIC_COPY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EA, .hex);
pub const GL_SAMPLES_PASSED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8914, .hex);
pub const GL_SRC1_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8589, .hex);
pub const GL_VERTEX_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8896, .hex);
pub const GL_NORMAL_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8897, .hex);
pub const GL_COLOR_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8898, .hex);
pub const GL_INDEX_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8899, .hex);
pub const GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889A, .hex);
pub const GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889B, .hex);
pub const GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889C, .hex);
pub const GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889D, .hex);
pub const GL_WEIGHT_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889E, .hex);
pub const GL_FOG_COORD_SRC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8450, .hex);
pub const GL_FOG_COORD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8451, .hex);
pub const GL_CURRENT_FOG_COORD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8453, .hex);
pub const GL_FOG_COORD_ARRAY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8454, .hex);
pub const GL_FOG_COORD_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8455, .hex);
pub const GL_FOG_COORD_ARRAY_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8456, .hex);
pub const GL_FOG_COORD_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8457, .hex);
pub const GL_FOG_COORD_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889D, .hex);
pub const GL_SRC0_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8580, .hex);
pub const GL_SRC1_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8581, .hex);
pub const GL_SRC2_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8582, .hex);
pub const GL_SRC0_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8588, .hex);
pub const GL_SRC2_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x858A, .hex);
pub const GL_VERSION_2_0 = @as(c_int, 1);
pub const GL_BLEND_EQUATION_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8009, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY_ENABLED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8622, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8623, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8624, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8625, .hex);
pub const GL_CURRENT_VERTEX_ATTRIB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8626, .hex);
pub const GL_VERTEX_PROGRAM_POINT_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8642, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8645, .hex);
pub const GL_STENCIL_BACK_FUNC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8800, .hex);
pub const GL_STENCIL_BACK_FAIL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8801, .hex);
pub const GL_STENCIL_BACK_PASS_DEPTH_FAIL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8802, .hex);
pub const GL_STENCIL_BACK_PASS_DEPTH_PASS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8803, .hex);
pub const GL_MAX_DRAW_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8824, .hex);
pub const GL_DRAW_BUFFER0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8825, .hex);
pub const GL_DRAW_BUFFER1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8826, .hex);
pub const GL_DRAW_BUFFER2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8827, .hex);
pub const GL_DRAW_BUFFER3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8828, .hex);
pub const GL_DRAW_BUFFER4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8829, .hex);
pub const GL_DRAW_BUFFER5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882A, .hex);
pub const GL_DRAW_BUFFER6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882B, .hex);
pub const GL_DRAW_BUFFER7 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882C, .hex);
pub const GL_DRAW_BUFFER8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882D, .hex);
pub const GL_DRAW_BUFFER9 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882E, .hex);
pub const GL_DRAW_BUFFER10 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882F, .hex);
pub const GL_DRAW_BUFFER11 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8830, .hex);
pub const GL_DRAW_BUFFER12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8831, .hex);
pub const GL_DRAW_BUFFER13 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8832, .hex);
pub const GL_DRAW_BUFFER14 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8833, .hex);
pub const GL_DRAW_BUFFER15 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8834, .hex);
pub const GL_BLEND_EQUATION_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x883D, .hex);
pub const GL_MAX_VERTEX_ATTRIBS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8869, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x886A, .hex);
pub const GL_MAX_TEXTURE_IMAGE_UNITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8872, .hex);
pub const GL_FRAGMENT_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B30, .hex);
pub const GL_VERTEX_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B31, .hex);
pub const GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B49, .hex);
pub const GL_MAX_VERTEX_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4A, .hex);
pub const GL_MAX_VARYING_FLOATS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4B, .hex);
pub const GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4C, .hex);
pub const GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4D, .hex);
pub const GL_SHADER_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4F, .hex);
pub const GL_FLOAT_VEC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B50, .hex);
pub const GL_FLOAT_VEC3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B51, .hex);
pub const GL_FLOAT_VEC4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B52, .hex);
pub const GL_INT_VEC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B53, .hex);
pub const GL_INT_VEC3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B54, .hex);
pub const GL_INT_VEC4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B55, .hex);
pub const GL_BOOL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B56, .hex);
pub const GL_BOOL_VEC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B57, .hex);
pub const GL_BOOL_VEC3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B58, .hex);
pub const GL_BOOL_VEC4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B59, .hex);
pub const GL_FLOAT_MAT2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5A, .hex);
pub const GL_FLOAT_MAT3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5B, .hex);
pub const GL_FLOAT_MAT4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5C, .hex);
pub const GL_SAMPLER_1D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5D, .hex);
pub const GL_SAMPLER_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5E, .hex);
pub const GL_SAMPLER_3D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5F, .hex);
pub const GL_SAMPLER_CUBE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B60, .hex);
pub const GL_SAMPLER_1D_SHADOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B61, .hex);
pub const GL_SAMPLER_2D_SHADOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B62, .hex);
pub const GL_DELETE_STATUS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B80, .hex);
pub const GL_COMPILE_STATUS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B81, .hex);
pub const GL_LINK_STATUS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B82, .hex);
pub const GL_VALIDATE_STATUS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B83, .hex);
pub const GL_INFO_LOG_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B84, .hex);
pub const GL_ATTACHED_SHADERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B85, .hex);
pub const GL_ACTIVE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B86, .hex);
pub const GL_ACTIVE_UNIFORM_MAX_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B87, .hex);
pub const GL_SHADER_SOURCE_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B88, .hex);
pub const GL_ACTIVE_ATTRIBUTES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B89, .hex);
pub const GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B8A, .hex);
pub const GL_FRAGMENT_SHADER_DERIVATIVE_HINT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B8B, .hex);
pub const GL_SHADING_LANGUAGE_VERSION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B8C, .hex);
pub const GL_CURRENT_PROGRAM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B8D, .hex);
pub const GL_POINT_SPRITE_COORD_ORIGIN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA0, .hex);
pub const GL_LOWER_LEFT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA1, .hex);
pub const GL_UPPER_LEFT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA2, .hex);
pub const GL_STENCIL_BACK_REF = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA3, .hex);
pub const GL_STENCIL_BACK_VALUE_MASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA4, .hex);
pub const GL_STENCIL_BACK_WRITEMASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA5, .hex);
pub const GL_VERTEX_PROGRAM_TWO_SIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8643, .hex);
pub const GL_POINT_SPRITE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8861, .hex);
pub const GL_COORD_REPLACE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8862, .hex);
pub const GL_MAX_TEXTURE_COORDS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8871, .hex);
pub const GL_VERSION_2_1 = @as(c_int, 1);
pub const GL_PIXEL_PACK_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EB, .hex);
pub const GL_PIXEL_UNPACK_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EC, .hex);
pub const GL_PIXEL_PACK_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88ED, .hex);
pub const GL_PIXEL_UNPACK_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EF, .hex);
pub const GL_FLOAT_MAT2x3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B65, .hex);
pub const GL_FLOAT_MAT2x4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B66, .hex);
pub const GL_FLOAT_MAT3x2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B67, .hex);
pub const GL_FLOAT_MAT3x4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B68, .hex);
pub const GL_FLOAT_MAT4x2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B69, .hex);
pub const GL_FLOAT_MAT4x3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B6A, .hex);
pub const GL_SRGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C40, .hex);
pub const GL_SRGB8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C41, .hex);
pub const GL_SRGB_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C42, .hex);
pub const GL_SRGB8_ALPHA8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C43, .hex);
pub const GL_COMPRESSED_SRGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C48, .hex);
pub const GL_COMPRESSED_SRGB_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C49, .hex);
pub const GL_CURRENT_RASTER_SECONDARY_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845F, .hex);
pub const GL_SLUMINANCE_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C44, .hex);
pub const GL_SLUMINANCE8_ALPHA8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C45, .hex);
pub const GL_SLUMINANCE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C46, .hex);
pub const GL_SLUMINANCE8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C47, .hex);
pub const GL_COMPRESSED_SLUMINANCE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4A, .hex);
pub const GL_COMPRESSED_SLUMINANCE_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4B, .hex);
pub const GL_VERSION_3_0 = @as(c_int, 1);
pub const GL_COMPARE_REF_TO_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884E, .hex);
pub const GL_CLIP_DISTANCE0 = @as(c_int, 0x3000);
pub const GL_CLIP_DISTANCE1 = @as(c_int, 0x3001);
pub const GL_CLIP_DISTANCE2 = @as(c_int, 0x3002);
pub const GL_CLIP_DISTANCE3 = @as(c_int, 0x3003);
pub const GL_CLIP_DISTANCE4 = @as(c_int, 0x3004);
pub const GL_CLIP_DISTANCE5 = @as(c_int, 0x3005);
pub const GL_CLIP_DISTANCE6 = @as(c_int, 0x3006);
pub const GL_CLIP_DISTANCE7 = @as(c_int, 0x3007);
pub const GL_MAX_CLIP_DISTANCES = @as(c_int, 0x0D32);
pub const GL_MAJOR_VERSION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x821B, .hex);
pub const GL_MINOR_VERSION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x821C, .hex);
pub const GL_NUM_EXTENSIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x821D, .hex);
pub const GL_CONTEXT_FLAGS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x821E, .hex);
pub const GL_COMPRESSED_RED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8225, .hex);
pub const GL_COMPRESSED_RG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8226, .hex);
pub const GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = @as(c_int, 0x00000001);
pub const GL_RGBA32F = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8814, .hex);
pub const GL_RGB32F = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8815, .hex);
pub const GL_RGBA16F = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881A, .hex);
pub const GL_RGB16F = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881B, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY_INTEGER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FD, .hex);
pub const GL_MAX_ARRAY_TEXTURE_LAYERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FF, .hex);
pub const GL_MIN_PROGRAM_TEXEL_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8904, .hex);
pub const GL_MAX_PROGRAM_TEXEL_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8905, .hex);
pub const GL_CLAMP_READ_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x891C, .hex);
pub const GL_FIXED_ONLY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x891D, .hex);
pub const GL_MAX_VARYING_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4B, .hex);
pub const GL_TEXTURE_1D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C18, .hex);
pub const GL_PROXY_TEXTURE_1D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C19, .hex);
pub const GL_TEXTURE_2D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C1A, .hex);
pub const GL_PROXY_TEXTURE_2D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C1B, .hex);
pub const GL_TEXTURE_BINDING_1D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C1C, .hex);
pub const GL_TEXTURE_BINDING_2D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C1D, .hex);
pub const GL_R11F_G11F_B10F = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3A, .hex);
pub const GL_UNSIGNED_INT_10F_11F_11F_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3B, .hex);
pub const GL_RGB9_E5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3D, .hex);
pub const GL_UNSIGNED_INT_5_9_9_9_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3E, .hex);
pub const GL_TEXTURE_SHARED_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3F, .hex);
pub const GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C76, .hex);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_MODE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C7F, .hex);
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C80, .hex);
pub const GL_TRANSFORM_FEEDBACK_VARYINGS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C83, .hex);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_START = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C84, .hex);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C85, .hex);
pub const GL_PRIMITIVES_GENERATED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C87, .hex);
pub const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C88, .hex);
pub const GL_RASTERIZER_DISCARD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C89, .hex);
pub const GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8A, .hex);
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8B, .hex);
pub const GL_INTERLEAVED_ATTRIBS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8C, .hex);
pub const GL_SEPARATE_ATTRIBS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8D, .hex);
pub const GL_TRANSFORM_FEEDBACK_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8E, .hex);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8F, .hex);
pub const GL_RGBA32UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D70, .hex);
pub const GL_RGB32UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D71, .hex);
pub const GL_RGBA16UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D76, .hex);
pub const GL_RGB16UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D77, .hex);
pub const GL_RGBA8UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D7C, .hex);
pub const GL_RGB8UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D7D, .hex);
pub const GL_RGBA32I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D82, .hex);
pub const GL_RGB32I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D83, .hex);
pub const GL_RGBA16I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D88, .hex);
pub const GL_RGB16I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D89, .hex);
pub const GL_RGBA8I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D8E, .hex);
pub const GL_RGB8I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D8F, .hex);
pub const GL_RED_INTEGER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D94, .hex);
pub const GL_GREEN_INTEGER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D95, .hex);
pub const GL_BLUE_INTEGER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D96, .hex);
pub const GL_RGB_INTEGER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D98, .hex);
pub const GL_RGBA_INTEGER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D99, .hex);
pub const GL_BGR_INTEGER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D9A, .hex);
pub const GL_BGRA_INTEGER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D9B, .hex);
pub const GL_SAMPLER_1D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC0, .hex);
pub const GL_SAMPLER_2D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC1, .hex);
pub const GL_SAMPLER_1D_ARRAY_SHADOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC3, .hex);
pub const GL_SAMPLER_2D_ARRAY_SHADOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC4, .hex);
pub const GL_SAMPLER_CUBE_SHADOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC5, .hex);
pub const GL_UNSIGNED_INT_VEC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC6, .hex);
pub const GL_UNSIGNED_INT_VEC3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC7, .hex);
pub const GL_UNSIGNED_INT_VEC4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC8, .hex);
pub const GL_INT_SAMPLER_1D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC9, .hex);
pub const GL_INT_SAMPLER_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCA, .hex);
pub const GL_INT_SAMPLER_3D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCB, .hex);
pub const GL_INT_SAMPLER_CUBE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCC, .hex);
pub const GL_INT_SAMPLER_1D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCE, .hex);
pub const GL_INT_SAMPLER_2D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCF, .hex);
pub const GL_UNSIGNED_INT_SAMPLER_1D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD1, .hex);
pub const GL_UNSIGNED_INT_SAMPLER_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD2, .hex);
pub const GL_UNSIGNED_INT_SAMPLER_3D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD3, .hex);
pub const GL_UNSIGNED_INT_SAMPLER_CUBE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD4, .hex);
pub const GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD6, .hex);
pub const GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD7, .hex);
pub const GL_QUERY_WAIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E13, .hex);
pub const GL_QUERY_NO_WAIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E14, .hex);
pub const GL_QUERY_BY_REGION_WAIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E15, .hex);
pub const GL_QUERY_BY_REGION_NO_WAIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E16, .hex);
pub const GL_BUFFER_ACCESS_FLAGS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x911F, .hex);
pub const GL_BUFFER_MAP_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9120, .hex);
pub const GL_BUFFER_MAP_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9121, .hex);
pub const GL_DEPTH_COMPONENT32F = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAC, .hex);
pub const GL_DEPTH32F_STENCIL8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAD, .hex);
pub const GL_FLOAT_32_UNSIGNED_INT_24_8_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DAD, .hex);
pub const GL_INVALID_FRAMEBUFFER_OPERATION = @as(c_int, 0x0506);
pub const GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8210, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8211, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8212, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8213, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8214, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8215, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8216, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8217, .hex);
pub const GL_FRAMEBUFFER_DEFAULT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8218, .hex);
pub const GL_FRAMEBUFFER_UNDEFINED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8219, .hex);
pub const GL_DEPTH_STENCIL_ATTACHMENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x821A, .hex);
pub const GL_MAX_RENDERBUFFER_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E8, .hex);
pub const GL_DEPTH_STENCIL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F9, .hex);
pub const GL_UNSIGNED_INT_24_8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84FA, .hex);
pub const GL_DEPTH24_STENCIL8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F0, .hex);
pub const GL_TEXTURE_STENCIL_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F1, .hex);
pub const GL_TEXTURE_RED_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C10, .hex);
pub const GL_TEXTURE_GREEN_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C11, .hex);
pub const GL_TEXTURE_BLUE_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C12, .hex);
pub const GL_TEXTURE_ALPHA_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C13, .hex);
pub const GL_TEXTURE_DEPTH_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C16, .hex);
pub const GL_UNSIGNED_NORMALIZED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C17, .hex);
pub const GL_FRAMEBUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA6, .hex);
pub const GL_DRAW_FRAMEBUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA6, .hex);
pub const GL_RENDERBUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA7, .hex);
pub const GL_READ_FRAMEBUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA8, .hex);
pub const GL_DRAW_FRAMEBUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA9, .hex);
pub const GL_READ_FRAMEBUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAA, .hex);
pub const GL_RENDERBUFFER_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAB, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD0, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD1, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD2, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD3, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD4, .hex);
pub const GL_FRAMEBUFFER_COMPLETE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD5, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD6, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD7, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDB, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDC, .hex);
pub const GL_FRAMEBUFFER_UNSUPPORTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDD, .hex);
pub const GL_MAX_COLOR_ATTACHMENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDF, .hex);
pub const GL_COLOR_ATTACHMENT0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE0, .hex);
pub const GL_COLOR_ATTACHMENT1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE1, .hex);
pub const GL_COLOR_ATTACHMENT2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE2, .hex);
pub const GL_COLOR_ATTACHMENT3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE3, .hex);
pub const GL_COLOR_ATTACHMENT4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE4, .hex);
pub const GL_COLOR_ATTACHMENT5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE5, .hex);
pub const GL_COLOR_ATTACHMENT6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE6, .hex);
pub const GL_COLOR_ATTACHMENT7 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE7, .hex);
pub const GL_COLOR_ATTACHMENT8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE8, .hex);
pub const GL_COLOR_ATTACHMENT9 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE9, .hex);
pub const GL_COLOR_ATTACHMENT10 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEA, .hex);
pub const GL_COLOR_ATTACHMENT11 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEB, .hex);
pub const GL_COLOR_ATTACHMENT12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEC, .hex);
pub const GL_COLOR_ATTACHMENT13 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CED, .hex);
pub const GL_COLOR_ATTACHMENT14 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEE, .hex);
pub const GL_COLOR_ATTACHMENT15 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEF, .hex);
pub const GL_COLOR_ATTACHMENT16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CF0, .hex);
pub const GL_COLOR_ATTACHMENT17 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CF1, .hex);
pub const GL_COLOR_ATTACHMENT18 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CF2, .hex);
pub const GL_COLOR_ATTACHMENT19 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CF3, .hex);
pub const GL_COLOR_ATTACHMENT20 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CF4, .hex);
pub const GL_COLOR_ATTACHMENT21 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CF5, .hex);
pub const GL_COLOR_ATTACHMENT22 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CF6, .hex);
pub const GL_COLOR_ATTACHMENT23 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CF7, .hex);
pub const GL_COLOR_ATTACHMENT24 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CF8, .hex);
pub const GL_COLOR_ATTACHMENT25 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CF9, .hex);
pub const GL_COLOR_ATTACHMENT26 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CFA, .hex);
pub const GL_COLOR_ATTACHMENT27 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CFB, .hex);
pub const GL_COLOR_ATTACHMENT28 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CFC, .hex);
pub const GL_COLOR_ATTACHMENT29 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CFD, .hex);
pub const GL_COLOR_ATTACHMENT30 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CFE, .hex);
pub const GL_COLOR_ATTACHMENT31 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CFF, .hex);
pub const GL_DEPTH_ATTACHMENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D00, .hex);
pub const GL_STENCIL_ATTACHMENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D20, .hex);
pub const GL_FRAMEBUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D40, .hex);
pub const GL_RENDERBUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D41, .hex);
pub const GL_RENDERBUFFER_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D42, .hex);
pub const GL_RENDERBUFFER_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D43, .hex);
pub const GL_RENDERBUFFER_INTERNAL_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D44, .hex);
pub const GL_STENCIL_INDEX1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D46, .hex);
pub const GL_STENCIL_INDEX4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D47, .hex);
pub const GL_STENCIL_INDEX8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D48, .hex);
pub const GL_STENCIL_INDEX16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D49, .hex);
pub const GL_RENDERBUFFER_RED_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D50, .hex);
pub const GL_RENDERBUFFER_GREEN_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D51, .hex);
pub const GL_RENDERBUFFER_BLUE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D52, .hex);
pub const GL_RENDERBUFFER_ALPHA_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D53, .hex);
pub const GL_RENDERBUFFER_DEPTH_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D54, .hex);
pub const GL_RENDERBUFFER_STENCIL_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D55, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D56, .hex);
pub const GL_MAX_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D57, .hex);
pub const GL_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8222, .hex);
pub const GL_TEXTURE_LUMINANCE_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C14, .hex);
pub const GL_TEXTURE_INTENSITY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C15, .hex);
pub const GL_FRAMEBUFFER_SRGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DB9, .hex);
pub const GL_HALF_FLOAT = @as(c_int, 0x140B);
pub const GL_MAP_READ_BIT = @as(c_int, 0x0001);
pub const GL_MAP_WRITE_BIT = @as(c_int, 0x0002);
pub const GL_MAP_INVALIDATE_RANGE_BIT = @as(c_int, 0x0004);
pub const GL_MAP_INVALIDATE_BUFFER_BIT = @as(c_int, 0x0008);
pub const GL_MAP_FLUSH_EXPLICIT_BIT = @as(c_int, 0x0010);
pub const GL_MAP_UNSYNCHRONIZED_BIT = @as(c_int, 0x0020);
pub const GL_COMPRESSED_RED_RGTC1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DBB, .hex);
pub const GL_COMPRESSED_SIGNED_RED_RGTC1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DBC, .hex);
pub const GL_COMPRESSED_RG_RGTC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DBD, .hex);
pub const GL_COMPRESSED_SIGNED_RG_RGTC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DBE, .hex);
pub const GL_RG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8227, .hex);
pub const GL_RG_INTEGER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8228, .hex);
pub const GL_R8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8229, .hex);
pub const GL_R16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822A, .hex);
pub const GL_RG8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822B, .hex);
pub const GL_RG16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822C, .hex);
pub const GL_R16F = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822D, .hex);
pub const GL_R32F = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822E, .hex);
pub const GL_RG16F = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822F, .hex);
pub const GL_RG32F = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8230, .hex);
pub const GL_R8I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8231, .hex);
pub const GL_R8UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8232, .hex);
pub const GL_R16I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8233, .hex);
pub const GL_R16UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8234, .hex);
pub const GL_R32I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8235, .hex);
pub const GL_R32UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8236, .hex);
pub const GL_RG8I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8237, .hex);
pub const GL_RG8UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8238, .hex);
pub const GL_RG16I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8239, .hex);
pub const GL_RG16UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x823A, .hex);
pub const GL_RG32I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x823B, .hex);
pub const GL_RG32UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x823C, .hex);
pub const GL_VERTEX_ARRAY_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85B5, .hex);
pub const GL_CLAMP_VERTEX_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x891A, .hex);
pub const GL_CLAMP_FRAGMENT_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x891B, .hex);
pub const GL_ALPHA_INTEGER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D97, .hex);
pub const GL_VERSION_3_1 = @as(c_int, 1);
pub const GL_SAMPLER_2D_RECT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B63, .hex);
pub const GL_SAMPLER_2D_RECT_SHADOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B64, .hex);
pub const GL_SAMPLER_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC2, .hex);
pub const GL_INT_SAMPLER_2D_RECT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCD, .hex);
pub const GL_INT_SAMPLER_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD0, .hex);
pub const GL_UNSIGNED_INT_SAMPLER_2D_RECT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD5, .hex);
pub const GL_UNSIGNED_INT_SAMPLER_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD8, .hex);
pub const GL_TEXTURE_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2A, .hex);
pub const GL_MAX_TEXTURE_BUFFER_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2B, .hex);
pub const GL_TEXTURE_BINDING_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2C, .hex);
pub const GL_TEXTURE_BUFFER_DATA_STORE_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2D, .hex);
pub const GL_TEXTURE_RECTANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F5, .hex);
pub const GL_TEXTURE_BINDING_RECTANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F6, .hex);
pub const GL_PROXY_TEXTURE_RECTANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F7, .hex);
pub const GL_MAX_RECTANGLE_TEXTURE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F8, .hex);
pub const GL_R8_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F94, .hex);
pub const GL_RG8_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F95, .hex);
pub const GL_RGB8_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F96, .hex);
pub const GL_RGBA8_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F97, .hex);
pub const GL_R16_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F98, .hex);
pub const GL_RG16_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F99, .hex);
pub const GL_RGB16_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F9A, .hex);
pub const GL_RGBA16_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F9B, .hex);
pub const GL_SIGNED_NORMALIZED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F9C, .hex);
pub const GL_PRIMITIVE_RESTART = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F9D, .hex);
pub const GL_PRIMITIVE_RESTART_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F9E, .hex);
pub const GL_COPY_READ_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F36, .hex);
pub const GL_COPY_WRITE_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F37, .hex);
pub const GL_UNIFORM_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A11, .hex);
pub const GL_UNIFORM_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A28, .hex);
pub const GL_UNIFORM_BUFFER_START = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A29, .hex);
pub const GL_UNIFORM_BUFFER_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A2A, .hex);
pub const GL_MAX_VERTEX_UNIFORM_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A2B, .hex);
pub const GL_MAX_GEOMETRY_UNIFORM_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A2C, .hex);
pub const GL_MAX_FRAGMENT_UNIFORM_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A2D, .hex);
pub const GL_MAX_COMBINED_UNIFORM_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A2E, .hex);
pub const GL_MAX_UNIFORM_BUFFER_BINDINGS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A2F, .hex);
pub const GL_MAX_UNIFORM_BLOCK_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A30, .hex);
pub const GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A31, .hex);
pub const GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A32, .hex);
pub const GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A33, .hex);
pub const GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A34, .hex);
pub const GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A35, .hex);
pub const GL_ACTIVE_UNIFORM_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A36, .hex);
pub const GL_UNIFORM_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A37, .hex);
pub const GL_UNIFORM_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A38, .hex);
pub const GL_UNIFORM_NAME_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A39, .hex);
pub const GL_UNIFORM_BLOCK_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A3A, .hex);
pub const GL_UNIFORM_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A3B, .hex);
pub const GL_UNIFORM_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A3C, .hex);
pub const GL_UNIFORM_MATRIX_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A3D, .hex);
pub const GL_UNIFORM_IS_ROW_MAJOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A3E, .hex);
pub const GL_UNIFORM_BLOCK_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A3F, .hex);
pub const GL_UNIFORM_BLOCK_DATA_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A40, .hex);
pub const GL_UNIFORM_BLOCK_NAME_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A41, .hex);
pub const GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A42, .hex);
pub const GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A43, .hex);
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A44, .hex);
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A45, .hex);
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A46, .hex);
pub const GL_INVALID_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xFFFFFFFF, .hex);
pub const GL_VERSION_3_2 = @as(c_int, 1);
pub const GL_CONTEXT_CORE_PROFILE_BIT = @as(c_int, 0x00000001);
pub const GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = @as(c_int, 0x00000002);
pub const GL_LINES_ADJACENCY = @as(c_int, 0x000A);
pub const GL_LINE_STRIP_ADJACENCY = @as(c_int, 0x000B);
pub const GL_TRIANGLES_ADJACENCY = @as(c_int, 0x000C);
pub const GL_TRIANGLE_STRIP_ADJACENCY = @as(c_int, 0x000D);
pub const GL_PROGRAM_POINT_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8642, .hex);
pub const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C29, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_LAYERED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA7, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA8, .hex);
pub const GL_GEOMETRY_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD9, .hex);
pub const GL_GEOMETRY_VERTICES_OUT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8916, .hex);
pub const GL_GEOMETRY_INPUT_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8917, .hex);
pub const GL_GEOMETRY_OUTPUT_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8918, .hex);
pub const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDF, .hex);
pub const GL_MAX_GEOMETRY_OUTPUT_VERTICES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE0, .hex);
pub const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE1, .hex);
pub const GL_MAX_VERTEX_OUTPUT_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9122, .hex);
pub const GL_MAX_GEOMETRY_INPUT_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9123, .hex);
pub const GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9124, .hex);
pub const GL_MAX_FRAGMENT_INPUT_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9125, .hex);
pub const GL_CONTEXT_PROFILE_MASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9126, .hex);
pub const GL_DEPTH_CLAMP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x864F, .hex);
pub const GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4C, .hex);
pub const GL_FIRST_VERTEX_CONVENTION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4D, .hex);
pub const GL_LAST_VERTEX_CONVENTION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4E, .hex);
pub const GL_PROVOKING_VERTEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4F, .hex);
pub const GL_TEXTURE_CUBE_MAP_SEAMLESS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884F, .hex);
pub const GL_MAX_SERVER_WAIT_TIMEOUT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9111, .hex);
pub const GL_OBJECT_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9112, .hex);
pub const GL_SYNC_CONDITION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9113, .hex);
pub const GL_SYNC_STATUS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9114, .hex);
pub const GL_SYNC_FLAGS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9115, .hex);
pub const GL_SYNC_FENCE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9116, .hex);
pub const GL_SYNC_GPU_COMMANDS_COMPLETE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9117, .hex);
pub const GL_UNSIGNALED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9118, .hex);
pub const GL_SIGNALED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9119, .hex);
pub const GL_ALREADY_SIGNALED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x911A, .hex);
pub const GL_TIMEOUT_EXPIRED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x911B, .hex);
pub const GL_CONDITION_SATISFIED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x911C, .hex);
pub const GL_WAIT_FAILED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x911D, .hex);
pub const GL_TIMEOUT_IGNORED = @as(c_ulonglong, 0xFFFFFFFFFFFFFFFF);
pub const GL_SYNC_FLUSH_COMMANDS_BIT = @as(c_int, 0x00000001);
pub const GL_SAMPLE_POSITION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E50, .hex);
pub const GL_SAMPLE_MASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E51, .hex);
pub const GL_SAMPLE_MASK_VALUE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E52, .hex);
pub const GL_MAX_SAMPLE_MASK_WORDS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E59, .hex);
pub const GL_TEXTURE_2D_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9100, .hex);
pub const GL_PROXY_TEXTURE_2D_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9101, .hex);
pub const GL_TEXTURE_2D_MULTISAMPLE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9102, .hex);
pub const GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9103, .hex);
pub const GL_TEXTURE_BINDING_2D_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9104, .hex);
pub const GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9105, .hex);
pub const GL_TEXTURE_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9106, .hex);
pub const GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9107, .hex);
pub const GL_SAMPLER_2D_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9108, .hex);
pub const GL_INT_SAMPLER_2D_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9109, .hex);
pub const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x910A, .hex);
pub const GL_SAMPLER_2D_MULTISAMPLE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x910B, .hex);
pub const GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x910C, .hex);
pub const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x910D, .hex);
pub const GL_MAX_COLOR_TEXTURE_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x910E, .hex);
pub const GL_MAX_DEPTH_TEXTURE_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x910F, .hex);
pub const GL_MAX_INTEGER_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9110, .hex);
pub const GL_VERSION_3_3 = @as(c_int, 1);
pub const GL_VERTEX_ATTRIB_ARRAY_DIVISOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FE, .hex);
pub const GL_SRC1_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F9, .hex);
pub const GL_ONE_MINUS_SRC1_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FA, .hex);
pub const GL_ONE_MINUS_SRC1_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FB, .hex);
pub const GL_MAX_DUAL_SOURCE_DRAW_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FC, .hex);
pub const GL_ANY_SAMPLES_PASSED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2F, .hex);
pub const GL_SAMPLER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8919, .hex);
pub const GL_RGB10_A2UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906F, .hex);
pub const GL_TEXTURE_SWIZZLE_R = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E42, .hex);
pub const GL_TEXTURE_SWIZZLE_G = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E43, .hex);
pub const GL_TEXTURE_SWIZZLE_B = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E44, .hex);
pub const GL_TEXTURE_SWIZZLE_A = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E45, .hex);
pub const GL_TEXTURE_SWIZZLE_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E46, .hex);
pub const GL_TIME_ELAPSED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BF, .hex);
pub const GL_TIMESTAMP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E28, .hex);
pub const GL_INT_2_10_10_10_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D9F, .hex);
pub const GL_VERSION_4_0 = @as(c_int, 1);
pub const GL_SAMPLE_SHADING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C36, .hex);
pub const GL_MIN_SAMPLE_SHADING_VALUE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C37, .hex);
pub const GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5E, .hex);
pub const GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5F, .hex);
pub const GL_TEXTURE_CUBE_MAP_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9009, .hex);
pub const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900A, .hex);
pub const GL_PROXY_TEXTURE_CUBE_MAP_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900B, .hex);
pub const GL_SAMPLER_CUBE_MAP_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900C, .hex);
pub const GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900D, .hex);
pub const GL_INT_SAMPLER_CUBE_MAP_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900E, .hex);
pub const GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900F, .hex);
pub const GL_DRAW_INDIRECT_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3F, .hex);
pub const GL_DRAW_INDIRECT_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F43, .hex);
pub const GL_GEOMETRY_SHADER_INVOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x887F, .hex);
pub const GL_MAX_GEOMETRY_SHADER_INVOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5A, .hex);
pub const GL_MIN_FRAGMENT_INTERPOLATION_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5B, .hex);
pub const GL_MAX_FRAGMENT_INTERPOLATION_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5C, .hex);
pub const GL_FRAGMENT_INTERPOLATION_OFFSET_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5D, .hex);
pub const GL_MAX_VERTEX_STREAMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E71, .hex);
pub const GL_DOUBLE_VEC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FFC, .hex);
pub const GL_DOUBLE_VEC3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FFD, .hex);
pub const GL_DOUBLE_VEC4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FFE, .hex);
pub const GL_DOUBLE_MAT2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F46, .hex);
pub const GL_DOUBLE_MAT3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F47, .hex);
pub const GL_DOUBLE_MAT4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F48, .hex);
pub const GL_DOUBLE_MAT2x3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F49, .hex);
pub const GL_DOUBLE_MAT2x4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4A, .hex);
pub const GL_DOUBLE_MAT3x2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4B, .hex);
pub const GL_DOUBLE_MAT3x4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4C, .hex);
pub const GL_DOUBLE_MAT4x2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4D, .hex);
pub const GL_DOUBLE_MAT4x3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4E, .hex);
pub const GL_ACTIVE_SUBROUTINES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE5, .hex);
pub const GL_ACTIVE_SUBROUTINE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE6, .hex);
pub const GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E47, .hex);
pub const GL_ACTIVE_SUBROUTINE_MAX_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E48, .hex);
pub const GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E49, .hex);
pub const GL_MAX_SUBROUTINES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE7, .hex);
pub const GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE8, .hex);
pub const GL_NUM_COMPATIBLE_SUBROUTINES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4A, .hex);
pub const GL_COMPATIBLE_SUBROUTINES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4B, .hex);
pub const GL_PATCHES = @as(c_int, 0x000E);
pub const GL_PATCH_VERTICES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E72, .hex);
pub const GL_PATCH_DEFAULT_INNER_LEVEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E73, .hex);
pub const GL_PATCH_DEFAULT_OUTER_LEVEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E74, .hex);
pub const GL_TESS_CONTROL_OUTPUT_VERTICES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E75, .hex);
pub const GL_TESS_GEN_MODE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E76, .hex);
pub const GL_TESS_GEN_SPACING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E77, .hex);
pub const GL_TESS_GEN_VERTEX_ORDER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E78, .hex);
pub const GL_TESS_GEN_POINT_MODE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E79, .hex);
pub const GL_ISOLINES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7A, .hex);
pub const GL_FRACTIONAL_ODD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7B, .hex);
pub const GL_FRACTIONAL_EVEN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7C, .hex);
pub const GL_MAX_PATCH_VERTICES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7D, .hex);
pub const GL_MAX_TESS_GEN_LEVEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7E, .hex);
pub const GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7F, .hex);
pub const GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E80, .hex);
pub const GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E81, .hex);
pub const GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E82, .hex);
pub const GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E83, .hex);
pub const GL_MAX_TESS_PATCH_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E84, .hex);
pub const GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E85, .hex);
pub const GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E86, .hex);
pub const GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E89, .hex);
pub const GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8A, .hex);
pub const GL_MAX_TESS_CONTROL_INPUT_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x886C, .hex);
pub const GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x886D, .hex);
pub const GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E1E, .hex);
pub const GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E1F, .hex);
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F0, .hex);
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F1, .hex);
pub const GL_TESS_EVALUATION_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E87, .hex);
pub const GL_TESS_CONTROL_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E88, .hex);
pub const GL_TRANSFORM_FEEDBACK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E22, .hex);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E23, .hex);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E24, .hex);
pub const GL_TRANSFORM_FEEDBACK_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E25, .hex);
pub const GL_MAX_TRANSFORM_FEEDBACK_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E70, .hex);
pub const GL_VERSION_4_1 = @as(c_int, 1);
pub const GL_FIXED = @as(c_int, 0x140C);
pub const GL_IMPLEMENTATION_COLOR_READ_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B9A, .hex);
pub const GL_IMPLEMENTATION_COLOR_READ_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B9B, .hex);
pub const GL_LOW_FLOAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF0, .hex);
pub const GL_MEDIUM_FLOAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF1, .hex);
pub const GL_HIGH_FLOAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF2, .hex);
pub const GL_LOW_INT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF3, .hex);
pub const GL_MEDIUM_INT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF4, .hex);
pub const GL_HIGH_INT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF5, .hex);
pub const GL_SHADER_COMPILER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DFA, .hex);
pub const GL_SHADER_BINARY_FORMATS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF8, .hex);
pub const GL_NUM_SHADER_BINARY_FORMATS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF9, .hex);
pub const GL_MAX_VERTEX_UNIFORM_VECTORS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DFB, .hex);
pub const GL_MAX_VARYING_VECTORS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DFC, .hex);
pub const GL_MAX_FRAGMENT_UNIFORM_VECTORS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DFD, .hex);
pub const GL_RGB565 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D62, .hex);
pub const GL_PROGRAM_BINARY_RETRIEVABLE_HINT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8257, .hex);
pub const GL_PROGRAM_BINARY_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8741, .hex);
pub const GL_NUM_PROGRAM_BINARY_FORMATS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87FE, .hex);
pub const GL_PROGRAM_BINARY_FORMATS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87FF, .hex);
pub const GL_VERTEX_SHADER_BIT = @as(c_int, 0x00000001);
pub const GL_FRAGMENT_SHADER_BIT = @as(c_int, 0x00000002);
pub const GL_GEOMETRY_SHADER_BIT = @as(c_int, 0x00000004);
pub const GL_TESS_CONTROL_SHADER_BIT = @as(c_int, 0x00000008);
pub const GL_TESS_EVALUATION_SHADER_BIT = @as(c_int, 0x00000010);
pub const GL_ALL_SHADER_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFFFFFF, .hex);
pub const GL_PROGRAM_SEPARABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8258, .hex);
pub const GL_ACTIVE_PROGRAM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8259, .hex);
pub const GL_PROGRAM_PIPELINE_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825A, .hex);
pub const GL_MAX_VIEWPORTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825B, .hex);
pub const GL_VIEWPORT_SUBPIXEL_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825C, .hex);
pub const GL_VIEWPORT_BOUNDS_RANGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825D, .hex);
pub const GL_LAYER_PROVOKING_VERTEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825E, .hex);
pub const GL_VIEWPORT_INDEX_PROVOKING_VERTEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825F, .hex);
pub const GL_UNDEFINED_VERTEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8260, .hex);
pub const GL_VERSION_4_2 = @as(c_int, 1);
pub const GL_COPY_READ_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F36, .hex);
pub const GL_COPY_WRITE_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F37, .hex);
pub const GL_TRANSFORM_FEEDBACK_ACTIVE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E24, .hex);
pub const GL_TRANSFORM_FEEDBACK_PAUSED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E23, .hex);
pub const GL_UNPACK_COMPRESSED_BLOCK_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9127, .hex);
pub const GL_UNPACK_COMPRESSED_BLOCK_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9128, .hex);
pub const GL_UNPACK_COMPRESSED_BLOCK_DEPTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9129, .hex);
pub const GL_UNPACK_COMPRESSED_BLOCK_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x912A, .hex);
pub const GL_PACK_COMPRESSED_BLOCK_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x912B, .hex);
pub const GL_PACK_COMPRESSED_BLOCK_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x912C, .hex);
pub const GL_PACK_COMPRESSED_BLOCK_DEPTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x912D, .hex);
pub const GL_PACK_COMPRESSED_BLOCK_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x912E, .hex);
pub const GL_NUM_SAMPLE_COUNTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9380, .hex);
pub const GL_MIN_MAP_BUFFER_ALIGNMENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90BC, .hex);
pub const GL_ATOMIC_COUNTER_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92C0, .hex);
pub const GL_ATOMIC_COUNTER_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92C1, .hex);
pub const GL_ATOMIC_COUNTER_BUFFER_START = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92C2, .hex);
pub const GL_ATOMIC_COUNTER_BUFFER_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92C3, .hex);
pub const GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92C4, .hex);
pub const GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92C5, .hex);
pub const GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92C6, .hex);
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92C7, .hex);
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92C8, .hex);
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92C9, .hex);
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92CA, .hex);
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92CB, .hex);
pub const GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92CC, .hex);
pub const GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92CD, .hex);
pub const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92CE, .hex);
pub const GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92CF, .hex);
pub const GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D0, .hex);
pub const GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D1, .hex);
pub const GL_MAX_VERTEX_ATOMIC_COUNTERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D2, .hex);
pub const GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D3, .hex);
pub const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D4, .hex);
pub const GL_MAX_GEOMETRY_ATOMIC_COUNTERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D5, .hex);
pub const GL_MAX_FRAGMENT_ATOMIC_COUNTERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D6, .hex);
pub const GL_MAX_COMBINED_ATOMIC_COUNTERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D7, .hex);
pub const GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D8, .hex);
pub const GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92DC, .hex);
pub const GL_ACTIVE_ATOMIC_COUNTER_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D9, .hex);
pub const GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92DA, .hex);
pub const GL_UNSIGNED_INT_ATOMIC_COUNTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92DB, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT = @as(c_int, 0x00000001);
pub const GL_ELEMENT_ARRAY_BARRIER_BIT = @as(c_int, 0x00000002);
pub const GL_UNIFORM_BARRIER_BIT = @as(c_int, 0x00000004);
pub const GL_TEXTURE_FETCH_BARRIER_BIT = @as(c_int, 0x00000008);
pub const GL_SHADER_IMAGE_ACCESS_BARRIER_BIT = @as(c_int, 0x00000020);
pub const GL_COMMAND_BARRIER_BIT = @as(c_int, 0x00000040);
pub const GL_PIXEL_BUFFER_BARRIER_BIT = @as(c_int, 0x00000080);
pub const GL_TEXTURE_UPDATE_BARRIER_BIT = @as(c_int, 0x00000100);
pub const GL_BUFFER_UPDATE_BARRIER_BIT = @as(c_int, 0x00000200);
pub const GL_FRAMEBUFFER_BARRIER_BIT = @as(c_int, 0x00000400);
pub const GL_TRANSFORM_FEEDBACK_BARRIER_BIT = @as(c_int, 0x00000800);
pub const GL_ATOMIC_COUNTER_BARRIER_BIT = @as(c_int, 0x00001000);
pub const GL_ALL_BARRIER_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFFFFFF, .hex);
pub const GL_MAX_IMAGE_UNITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F38, .hex);
pub const GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F39, .hex);
pub const GL_IMAGE_BINDING_NAME = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3A, .hex);
pub const GL_IMAGE_BINDING_LEVEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3B, .hex);
pub const GL_IMAGE_BINDING_LAYERED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3C, .hex);
pub const GL_IMAGE_BINDING_LAYER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3D, .hex);
pub const GL_IMAGE_BINDING_ACCESS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3E, .hex);
pub const GL_IMAGE_1D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x904C, .hex);
pub const GL_IMAGE_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x904D, .hex);
pub const GL_IMAGE_3D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x904E, .hex);
pub const GL_IMAGE_2D_RECT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x904F, .hex);
pub const GL_IMAGE_CUBE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9050, .hex);
pub const GL_IMAGE_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9051, .hex);
pub const GL_IMAGE_1D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9052, .hex);
pub const GL_IMAGE_2D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9053, .hex);
pub const GL_IMAGE_CUBE_MAP_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9054, .hex);
pub const GL_IMAGE_2D_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9055, .hex);
pub const GL_IMAGE_2D_MULTISAMPLE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9056, .hex);
pub const GL_INT_IMAGE_1D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9057, .hex);
pub const GL_INT_IMAGE_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9058, .hex);
pub const GL_INT_IMAGE_3D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9059, .hex);
pub const GL_INT_IMAGE_2D_RECT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905A, .hex);
pub const GL_INT_IMAGE_CUBE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905B, .hex);
pub const GL_INT_IMAGE_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905C, .hex);
pub const GL_INT_IMAGE_1D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905D, .hex);
pub const GL_INT_IMAGE_2D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905E, .hex);
pub const GL_INT_IMAGE_CUBE_MAP_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905F, .hex);
pub const GL_INT_IMAGE_2D_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9060, .hex);
pub const GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9061, .hex);
pub const GL_UNSIGNED_INT_IMAGE_1D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9062, .hex);
pub const GL_UNSIGNED_INT_IMAGE_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9063, .hex);
pub const GL_UNSIGNED_INT_IMAGE_3D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9064, .hex);
pub const GL_UNSIGNED_INT_IMAGE_2D_RECT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9065, .hex);
pub const GL_UNSIGNED_INT_IMAGE_CUBE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9066, .hex);
pub const GL_UNSIGNED_INT_IMAGE_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9067, .hex);
pub const GL_UNSIGNED_INT_IMAGE_1D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9068, .hex);
pub const GL_UNSIGNED_INT_IMAGE_2D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9069, .hex);
pub const GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906A, .hex);
pub const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906B, .hex);
pub const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906C, .hex);
pub const GL_MAX_IMAGE_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906D, .hex);
pub const GL_IMAGE_BINDING_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906E, .hex);
pub const GL_IMAGE_FORMAT_COMPATIBILITY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90C7, .hex);
pub const GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90C8, .hex);
pub const GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90C9, .hex);
pub const GL_MAX_VERTEX_IMAGE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90CA, .hex);
pub const GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90CB, .hex);
pub const GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90CC, .hex);
pub const GL_MAX_GEOMETRY_IMAGE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90CD, .hex);
pub const GL_MAX_FRAGMENT_IMAGE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90CE, .hex);
pub const GL_MAX_COMBINED_IMAGE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90CF, .hex);
pub const GL_COMPRESSED_RGBA_BPTC_UNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8C, .hex);
pub const GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8D, .hex);
pub const GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8E, .hex);
pub const GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8F, .hex);
pub const GL_TEXTURE_IMMUTABLE_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x912F, .hex);
pub const GL_VERSION_4_3 = @as(c_int, 1);
pub const GL_NUM_SHADING_LANGUAGE_VERSIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E9, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY_LONG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x874E, .hex);
pub const GL_COMPRESSED_RGB8_ETC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9274, .hex);
pub const GL_COMPRESSED_SRGB8_ETC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9275, .hex);
pub const GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9276, .hex);
pub const GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9277, .hex);
pub const GL_COMPRESSED_RGBA8_ETC2_EAC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9278, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9279, .hex);
pub const GL_COMPRESSED_R11_EAC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9270, .hex);
pub const GL_COMPRESSED_SIGNED_R11_EAC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9271, .hex);
pub const GL_COMPRESSED_RG11_EAC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9272, .hex);
pub const GL_COMPRESSED_SIGNED_RG11_EAC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9273, .hex);
pub const GL_PRIMITIVE_RESTART_FIXED_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D69, .hex);
pub const GL_ANY_SAMPLES_PASSED_CONSERVATIVE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D6A, .hex);
pub const GL_MAX_ELEMENT_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D6B, .hex);
pub const GL_COMPUTE_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B9, .hex);
pub const GL_MAX_COMPUTE_UNIFORM_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91BB, .hex);
pub const GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91BC, .hex);
pub const GL_MAX_COMPUTE_IMAGE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91BD, .hex);
pub const GL_MAX_COMPUTE_SHARED_MEMORY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8262, .hex);
pub const GL_MAX_COMPUTE_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8263, .hex);
pub const GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8264, .hex);
pub const GL_MAX_COMPUTE_ATOMIC_COUNTERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8265, .hex);
pub const GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8266, .hex);
pub const GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90EB, .hex);
pub const GL_MAX_COMPUTE_WORK_GROUP_COUNT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91BE, .hex);
pub const GL_MAX_COMPUTE_WORK_GROUP_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91BF, .hex);
pub const GL_COMPUTE_WORK_GROUP_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8267, .hex);
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90EC, .hex);
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90ED, .hex);
pub const GL_DISPATCH_INDIRECT_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90EE, .hex);
pub const GL_DISPATCH_INDIRECT_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90EF, .hex);
pub const GL_COMPUTE_SHADER_BIT = @as(c_int, 0x00000020);
pub const GL_DEBUG_OUTPUT_SYNCHRONOUS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8242, .hex);
pub const GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8243, .hex);
pub const GL_DEBUG_CALLBACK_FUNCTION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8244, .hex);
pub const GL_DEBUG_CALLBACK_USER_PARAM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8245, .hex);
pub const GL_DEBUG_SOURCE_API = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8246, .hex);
pub const GL_DEBUG_SOURCE_WINDOW_SYSTEM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8247, .hex);
pub const GL_DEBUG_SOURCE_SHADER_COMPILER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8248, .hex);
pub const GL_DEBUG_SOURCE_THIRD_PARTY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8249, .hex);
pub const GL_DEBUG_SOURCE_APPLICATION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824A, .hex);
pub const GL_DEBUG_SOURCE_OTHER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824B, .hex);
pub const GL_DEBUG_TYPE_ERROR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824C, .hex);
pub const GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824D, .hex);
pub const GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824E, .hex);
pub const GL_DEBUG_TYPE_PORTABILITY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824F, .hex);
pub const GL_DEBUG_TYPE_PERFORMANCE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8250, .hex);
pub const GL_DEBUG_TYPE_OTHER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8251, .hex);
pub const GL_MAX_DEBUG_MESSAGE_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9143, .hex);
pub const GL_MAX_DEBUG_LOGGED_MESSAGES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9144, .hex);
pub const GL_DEBUG_LOGGED_MESSAGES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9145, .hex);
pub const GL_DEBUG_SEVERITY_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9146, .hex);
pub const GL_DEBUG_SEVERITY_MEDIUM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9147, .hex);
pub const GL_DEBUG_SEVERITY_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9148, .hex);
pub const GL_DEBUG_TYPE_MARKER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8268, .hex);
pub const GL_DEBUG_TYPE_PUSH_GROUP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8269, .hex);
pub const GL_DEBUG_TYPE_POP_GROUP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x826A, .hex);
pub const GL_DEBUG_SEVERITY_NOTIFICATION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x826B, .hex);
pub const GL_MAX_DEBUG_GROUP_STACK_DEPTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x826C, .hex);
pub const GL_DEBUG_GROUP_STACK_DEPTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x826D, .hex);
pub const GL_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E0, .hex);
pub const GL_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E1, .hex);
pub const GL_PROGRAM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E2, .hex);
pub const GL_QUERY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E3, .hex);
pub const GL_PROGRAM_PIPELINE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E4, .hex);
pub const GL_SAMPLER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E6, .hex);
pub const GL_MAX_LABEL_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E8, .hex);
pub const GL_DEBUG_OUTPUT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E0, .hex);
pub const GL_CONTEXT_FLAG_DEBUG_BIT = @as(c_int, 0x00000002);
pub const GL_MAX_UNIFORM_LOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x826E, .hex);
pub const GL_FRAMEBUFFER_DEFAULT_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9310, .hex);
pub const GL_FRAMEBUFFER_DEFAULT_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9311, .hex);
pub const GL_FRAMEBUFFER_DEFAULT_LAYERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9312, .hex);
pub const GL_FRAMEBUFFER_DEFAULT_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9313, .hex);
pub const GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9314, .hex);
pub const GL_MAX_FRAMEBUFFER_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9315, .hex);
pub const GL_MAX_FRAMEBUFFER_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9316, .hex);
pub const GL_MAX_FRAMEBUFFER_LAYERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9317, .hex);
pub const GL_MAX_FRAMEBUFFER_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9318, .hex);
pub const GL_INTERNALFORMAT_SUPPORTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x826F, .hex);
pub const GL_INTERNALFORMAT_PREFERRED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8270, .hex);
pub const GL_INTERNALFORMAT_RED_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8271, .hex);
pub const GL_INTERNALFORMAT_GREEN_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8272, .hex);
pub const GL_INTERNALFORMAT_BLUE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8273, .hex);
pub const GL_INTERNALFORMAT_ALPHA_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8274, .hex);
pub const GL_INTERNALFORMAT_DEPTH_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8275, .hex);
pub const GL_INTERNALFORMAT_STENCIL_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8276, .hex);
pub const GL_INTERNALFORMAT_SHARED_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8277, .hex);
pub const GL_INTERNALFORMAT_RED_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8278, .hex);
pub const GL_INTERNALFORMAT_GREEN_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8279, .hex);
pub const GL_INTERNALFORMAT_BLUE_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x827A, .hex);
pub const GL_INTERNALFORMAT_ALPHA_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x827B, .hex);
pub const GL_INTERNALFORMAT_DEPTH_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x827C, .hex);
pub const GL_INTERNALFORMAT_STENCIL_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x827D, .hex);
pub const GL_MAX_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x827E, .hex);
pub const GL_MAX_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x827F, .hex);
pub const GL_MAX_DEPTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8280, .hex);
pub const GL_MAX_LAYERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8281, .hex);
pub const GL_MAX_COMBINED_DIMENSIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8282, .hex);
pub const GL_COLOR_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8283, .hex);
pub const GL_DEPTH_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8284, .hex);
pub const GL_STENCIL_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8285, .hex);
pub const GL_COLOR_RENDERABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8286, .hex);
pub const GL_DEPTH_RENDERABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8287, .hex);
pub const GL_STENCIL_RENDERABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8288, .hex);
pub const GL_FRAMEBUFFER_RENDERABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8289, .hex);
pub const GL_FRAMEBUFFER_RENDERABLE_LAYERED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x828A, .hex);
pub const GL_FRAMEBUFFER_BLEND = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x828B, .hex);
pub const GL_READ_PIXELS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x828C, .hex);
pub const GL_READ_PIXELS_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x828D, .hex);
pub const GL_READ_PIXELS_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x828E, .hex);
pub const GL_TEXTURE_IMAGE_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x828F, .hex);
pub const GL_TEXTURE_IMAGE_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8290, .hex);
pub const GL_GET_TEXTURE_IMAGE_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8291, .hex);
pub const GL_GET_TEXTURE_IMAGE_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8292, .hex);
pub const GL_MIPMAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8293, .hex);
pub const GL_MANUAL_GENERATE_MIPMAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8294, .hex);
pub const GL_AUTO_GENERATE_MIPMAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8295, .hex);
pub const GL_COLOR_ENCODING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8296, .hex);
pub const GL_SRGB_READ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8297, .hex);
pub const GL_SRGB_WRITE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8298, .hex);
pub const GL_FILTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x829A, .hex);
pub const GL_VERTEX_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x829B, .hex);
pub const GL_TESS_CONTROL_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x829C, .hex);
pub const GL_TESS_EVALUATION_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x829D, .hex);
pub const GL_GEOMETRY_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x829E, .hex);
pub const GL_FRAGMENT_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x829F, .hex);
pub const GL_COMPUTE_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82A0, .hex);
pub const GL_TEXTURE_SHADOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82A1, .hex);
pub const GL_TEXTURE_GATHER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82A2, .hex);
pub const GL_TEXTURE_GATHER_SHADOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82A3, .hex);
pub const GL_SHADER_IMAGE_LOAD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82A4, .hex);
pub const GL_SHADER_IMAGE_STORE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82A5, .hex);
pub const GL_SHADER_IMAGE_ATOMIC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82A6, .hex);
pub const GL_IMAGE_TEXEL_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82A7, .hex);
pub const GL_IMAGE_COMPATIBILITY_CLASS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82A8, .hex);
pub const GL_IMAGE_PIXEL_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82A9, .hex);
pub const GL_IMAGE_PIXEL_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82AA, .hex);
pub const GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82AC, .hex);
pub const GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82AD, .hex);
pub const GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82AE, .hex);
pub const GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82AF, .hex);
pub const GL_TEXTURE_COMPRESSED_BLOCK_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82B1, .hex);
pub const GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82B2, .hex);
pub const GL_TEXTURE_COMPRESSED_BLOCK_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82B3, .hex);
pub const GL_CLEAR_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82B4, .hex);
pub const GL_TEXTURE_VIEW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82B5, .hex);
pub const GL_VIEW_COMPATIBILITY_CLASS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82B6, .hex);
pub const GL_FULL_SUPPORT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82B7, .hex);
pub const GL_CAVEAT_SUPPORT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82B8, .hex);
pub const GL_IMAGE_CLASS_4_X_32 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82B9, .hex);
pub const GL_IMAGE_CLASS_2_X_32 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82BA, .hex);
pub const GL_IMAGE_CLASS_1_X_32 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82BB, .hex);
pub const GL_IMAGE_CLASS_4_X_16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82BC, .hex);
pub const GL_IMAGE_CLASS_2_X_16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82BD, .hex);
pub const GL_IMAGE_CLASS_1_X_16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82BE, .hex);
pub const GL_IMAGE_CLASS_4_X_8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82BF, .hex);
pub const GL_IMAGE_CLASS_2_X_8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82C0, .hex);
pub const GL_IMAGE_CLASS_1_X_8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82C1, .hex);
pub const GL_IMAGE_CLASS_11_11_10 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82C2, .hex);
pub const GL_IMAGE_CLASS_10_10_10_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82C3, .hex);
pub const GL_VIEW_CLASS_128_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82C4, .hex);
pub const GL_VIEW_CLASS_96_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82C5, .hex);
pub const GL_VIEW_CLASS_64_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82C6, .hex);
pub const GL_VIEW_CLASS_48_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82C7, .hex);
pub const GL_VIEW_CLASS_32_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82C8, .hex);
pub const GL_VIEW_CLASS_24_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82C9, .hex);
pub const GL_VIEW_CLASS_16_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82CA, .hex);
pub const GL_VIEW_CLASS_8_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82CB, .hex);
pub const GL_VIEW_CLASS_S3TC_DXT1_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82CC, .hex);
pub const GL_VIEW_CLASS_S3TC_DXT1_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82CD, .hex);
pub const GL_VIEW_CLASS_S3TC_DXT3_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82CE, .hex);
pub const GL_VIEW_CLASS_S3TC_DXT5_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82CF, .hex);
pub const GL_VIEW_CLASS_RGTC1_RED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82D0, .hex);
pub const GL_VIEW_CLASS_RGTC2_RG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82D1, .hex);
pub const GL_VIEW_CLASS_BPTC_UNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82D2, .hex);
pub const GL_VIEW_CLASS_BPTC_FLOAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82D3, .hex);
pub const GL_UNIFORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E1, .hex);
pub const GL_UNIFORM_BLOCK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E2, .hex);
pub const GL_PROGRAM_INPUT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E3, .hex);
pub const GL_PROGRAM_OUTPUT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E4, .hex);
pub const GL_BUFFER_VARIABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E5, .hex);
pub const GL_SHADER_STORAGE_BLOCK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E6, .hex);
pub const GL_VERTEX_SUBROUTINE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E8, .hex);
pub const GL_TESS_CONTROL_SUBROUTINE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E9, .hex);
pub const GL_TESS_EVALUATION_SUBROUTINE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92EA, .hex);
pub const GL_GEOMETRY_SUBROUTINE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92EB, .hex);
pub const GL_FRAGMENT_SUBROUTINE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92EC, .hex);
pub const GL_COMPUTE_SUBROUTINE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92ED, .hex);
pub const GL_VERTEX_SUBROUTINE_UNIFORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92EE, .hex);
pub const GL_TESS_CONTROL_SUBROUTINE_UNIFORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92EF, .hex);
pub const GL_TESS_EVALUATION_SUBROUTINE_UNIFORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92F0, .hex);
pub const GL_GEOMETRY_SUBROUTINE_UNIFORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92F1, .hex);
pub const GL_FRAGMENT_SUBROUTINE_UNIFORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92F2, .hex);
pub const GL_COMPUTE_SUBROUTINE_UNIFORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92F3, .hex);
pub const GL_TRANSFORM_FEEDBACK_VARYING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92F4, .hex);
pub const GL_ACTIVE_RESOURCES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92F5, .hex);
pub const GL_MAX_NAME_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92F6, .hex);
pub const GL_MAX_NUM_ACTIVE_VARIABLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92F7, .hex);
pub const GL_MAX_NUM_COMPATIBLE_SUBROUTINES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92F8, .hex);
pub const GL_NAME_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92F9, .hex);
pub const GL_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92FA, .hex);
pub const GL_ARRAY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92FB, .hex);
pub const GL_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92FC, .hex);
pub const GL_BLOCK_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92FD, .hex);
pub const GL_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92FE, .hex);
pub const GL_MATRIX_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92FF, .hex);
pub const GL_IS_ROW_MAJOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9300, .hex);
pub const GL_ATOMIC_COUNTER_BUFFER_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9301, .hex);
pub const GL_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9302, .hex);
pub const GL_BUFFER_DATA_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9303, .hex);
pub const GL_NUM_ACTIVE_VARIABLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9304, .hex);
pub const GL_ACTIVE_VARIABLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9305, .hex);
pub const GL_REFERENCED_BY_VERTEX_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9306, .hex);
pub const GL_REFERENCED_BY_TESS_CONTROL_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9307, .hex);
pub const GL_REFERENCED_BY_TESS_EVALUATION_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9308, .hex);
pub const GL_REFERENCED_BY_GEOMETRY_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9309, .hex);
pub const GL_REFERENCED_BY_FRAGMENT_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x930A, .hex);
pub const GL_REFERENCED_BY_COMPUTE_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x930B, .hex);
pub const GL_TOP_LEVEL_ARRAY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x930C, .hex);
pub const GL_TOP_LEVEL_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x930D, .hex);
pub const GL_LOCATION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x930E, .hex);
pub const GL_LOCATION_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x930F, .hex);
pub const GL_IS_PER_PATCH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E7, .hex);
pub const GL_SHADER_STORAGE_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D2, .hex);
pub const GL_SHADER_STORAGE_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D3, .hex);
pub const GL_SHADER_STORAGE_BUFFER_START = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D4, .hex);
pub const GL_SHADER_STORAGE_BUFFER_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D5, .hex);
pub const GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D6, .hex);
pub const GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D7, .hex);
pub const GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D8, .hex);
pub const GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D9, .hex);
pub const GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90DA, .hex);
pub const GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90DB, .hex);
pub const GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90DC, .hex);
pub const GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90DD, .hex);
pub const GL_MAX_SHADER_STORAGE_BLOCK_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90DE, .hex);
pub const GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90DF, .hex);
pub const GL_SHADER_STORAGE_BARRIER_BIT = @as(c_int, 0x00002000);
pub const GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F39, .hex);
pub const GL_DEPTH_STENCIL_TEXTURE_MODE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90EA, .hex);
pub const GL_TEXTURE_BUFFER_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919D, .hex);
pub const GL_TEXTURE_BUFFER_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919E, .hex);
pub const GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919F, .hex);
pub const GL_TEXTURE_VIEW_MIN_LEVEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DB, .hex);
pub const GL_TEXTURE_VIEW_NUM_LEVELS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DC, .hex);
pub const GL_TEXTURE_VIEW_MIN_LAYER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DD, .hex);
pub const GL_TEXTURE_VIEW_NUM_LAYERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DE, .hex);
pub const GL_TEXTURE_IMMUTABLE_LEVELS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DF, .hex);
pub const GL_VERTEX_ATTRIB_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82D4, .hex);
pub const GL_VERTEX_ATTRIB_RELATIVE_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82D5, .hex);
pub const GL_VERTEX_BINDING_DIVISOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82D6, .hex);
pub const GL_VERTEX_BINDING_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82D7, .hex);
pub const GL_VERTEX_BINDING_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82D8, .hex);
pub const GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82D9, .hex);
pub const GL_MAX_VERTEX_ATTRIB_BINDINGS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DA, .hex);
pub const GL_VERTEX_BINDING_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4F, .hex);
pub const GL_DISPLAY_LIST = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E7, .hex);
pub const GL_VERSION_4_4 = @as(c_int, 1);
pub const GL_MAX_VERTEX_ATTRIB_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E5, .hex);
pub const GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8221, .hex);
pub const GL_TEXTURE_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2A, .hex);
pub const GL_MAP_PERSISTENT_BIT = @as(c_int, 0x0040);
pub const GL_MAP_COHERENT_BIT = @as(c_int, 0x0080);
pub const GL_DYNAMIC_STORAGE_BIT = @as(c_int, 0x0100);
pub const GL_CLIENT_STORAGE_BIT = @as(c_int, 0x0200);
pub const GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT = @as(c_int, 0x00004000);
pub const GL_BUFFER_IMMUTABLE_STORAGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x821F, .hex);
pub const GL_BUFFER_STORAGE_FLAGS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8220, .hex);
pub const GL_CLEAR_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9365, .hex);
pub const GL_LOCATION_COMPONENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x934A, .hex);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x934B, .hex);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x934C, .hex);
pub const GL_QUERY_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9192, .hex);
pub const GL_QUERY_BUFFER_BARRIER_BIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex);
pub const GL_QUERY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9193, .hex);
pub const GL_QUERY_RESULT_NO_WAIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9194, .hex);
pub const GL_MIRROR_CLAMP_TO_EDGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8743, .hex);
pub const GL_VERSION_4_5 = @as(c_int, 1);
pub const GL_CONTEXT_LOST = @as(c_int, 0x0507);
pub const GL_NEGATIVE_ONE_TO_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x935E, .hex);
pub const GL_ZERO_TO_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x935F, .hex);
pub const GL_CLIP_ORIGIN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x935C, .hex);
pub const GL_CLIP_DEPTH_MODE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x935D, .hex);
pub const GL_QUERY_WAIT_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E17, .hex);
pub const GL_QUERY_NO_WAIT_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E18, .hex);
pub const GL_QUERY_BY_REGION_WAIT_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E19, .hex);
pub const GL_QUERY_BY_REGION_NO_WAIT_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E1A, .hex);
pub const GL_MAX_CULL_DISTANCES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F9, .hex);
pub const GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82FA, .hex);
pub const GL_TEXTURE_TARGET = @as(c_int, 0x1006);
pub const GL_QUERY_TARGET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82EA, .hex);
pub const GL_GUILTY_CONTEXT_RESET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8253, .hex);
pub const GL_INNOCENT_CONTEXT_RESET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8254, .hex);
pub const GL_UNKNOWN_CONTEXT_RESET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8255, .hex);
pub const GL_RESET_NOTIFICATION_STRATEGY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8256, .hex);
pub const GL_LOSE_CONTEXT_ON_RESET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8252, .hex);
pub const GL_NO_RESET_NOTIFICATION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8261, .hex);
pub const GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT = @as(c_int, 0x00000004);
pub const GL_CONTEXT_RELEASE_BEHAVIOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82FB, .hex);
pub const GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82FC, .hex);
pub const GL_VERSION_4_6 = @as(c_int, 1);
pub const GL_SHADER_BINARY_FORMAT_SPIR_V = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9551, .hex);
pub const GL_SPIR_V_BINARY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9552, .hex);
pub const GL_PARAMETER_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80EE, .hex);
pub const GL_PARAMETER_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80EF, .hex);
pub const GL_CONTEXT_FLAG_NO_ERROR_BIT = @as(c_int, 0x00000008);
pub const GL_VERTICES_SUBMITTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82EE, .hex);
pub const GL_PRIMITIVES_SUBMITTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82EF, .hex);
pub const GL_VERTEX_SHADER_INVOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F0, .hex);
pub const GL_TESS_CONTROL_SHADER_PATCHES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F1, .hex);
pub const GL_TESS_EVALUATION_SHADER_INVOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F2, .hex);
pub const GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F3, .hex);
pub const GL_FRAGMENT_SHADER_INVOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F4, .hex);
pub const GL_COMPUTE_SHADER_INVOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F5, .hex);
pub const GL_CLIPPING_INPUT_PRIMITIVES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F6, .hex);
pub const GL_CLIPPING_OUTPUT_PRIMITIVES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F7, .hex);
pub const GL_POLYGON_OFFSET_CLAMP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E1B, .hex);
pub const GL_SPIR_V_EXTENSIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9553, .hex);
pub const GL_NUM_SPIR_V_EXTENSIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9554, .hex);
pub const GL_TEXTURE_MAX_ANISOTROPY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84FE, .hex);
pub const GL_MAX_TEXTURE_MAX_ANISOTROPY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84FF, .hex);
pub const GL_TRANSFORM_FEEDBACK_OVERFLOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82EC, .hex);
pub const GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82ED, .hex);
pub const GL_ARB_ES2_compatibility = @as(c_int, 1);
pub const GL_ARB_ES3_1_compatibility = @as(c_int, 1);
pub const GL_ARB_ES3_2_compatibility = @as(c_int, 1);
pub const GL_PRIMITIVE_BOUNDING_BOX_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92BE, .hex);
pub const GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9381, .hex);
pub const GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9382, .hex);
pub const GL_ARB_ES3_compatibility = @as(c_int, 1);
pub const GL_ARB_arrays_of_arrays = @as(c_int, 1);
pub const GL_ARB_base_instance = @as(c_int, 1);
pub const GL_ARB_bindless_texture = @as(c_int, 1);
pub const GL_UNSIGNED_INT64_ARB = @as(c_int, 0x140F);
pub const GL_ARB_blend_func_extended = @as(c_int, 1);
pub const GL_ARB_buffer_storage = @as(c_int, 1);
pub const GL_ARB_cl_event = @as(c_int, 1);
pub const GL_SYNC_CL_EVENT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8240, .hex);
pub const GL_SYNC_CL_EVENT_COMPLETE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8241, .hex);
pub const GL_ARB_clear_buffer_object = @as(c_int, 1);
pub const GL_ARB_clear_texture = @as(c_int, 1);
pub const GL_ARB_clip_control = @as(c_int, 1);
pub const GL_ARB_color_buffer_float = @as(c_int, 1);
pub const GL_RGBA_FLOAT_MODE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8820, .hex);
pub const GL_CLAMP_VERTEX_COLOR_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x891A, .hex);
pub const GL_CLAMP_FRAGMENT_COLOR_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x891B, .hex);
pub const GL_CLAMP_READ_COLOR_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x891C, .hex);
pub const GL_FIXED_ONLY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x891D, .hex);
pub const GL_ARB_compatibility = @as(c_int, 1);
pub const GL_ARB_compressed_texture_pixel_storage = @as(c_int, 1);
pub const GL_ARB_compute_shader = @as(c_int, 1);
pub const GL_ARB_compute_variable_group_size = @as(c_int, 1);
pub const GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9344, .hex);
pub const GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90EB, .hex);
pub const GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9345, .hex);
pub const GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91BF, .hex);
pub const GL_ARB_conditional_render_inverted = @as(c_int, 1);
pub const GL_ARB_conservative_depth = @as(c_int, 1);
pub const GL_ARB_copy_buffer = @as(c_int, 1);
pub const GL_ARB_copy_image = @as(c_int, 1);
pub const GL_ARB_cull_distance = @as(c_int, 1);
pub const GL_ARB_debug_output = @as(c_int, 1);
pub const GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8242, .hex);
pub const GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8243, .hex);
pub const GL_DEBUG_CALLBACK_FUNCTION_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8244, .hex);
pub const GL_DEBUG_CALLBACK_USER_PARAM_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8245, .hex);
pub const GL_DEBUG_SOURCE_API_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8246, .hex);
pub const GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8247, .hex);
pub const GL_DEBUG_SOURCE_SHADER_COMPILER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8248, .hex);
pub const GL_DEBUG_SOURCE_THIRD_PARTY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8249, .hex);
pub const GL_DEBUG_SOURCE_APPLICATION_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824A, .hex);
pub const GL_DEBUG_SOURCE_OTHER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824B, .hex);
pub const GL_DEBUG_TYPE_ERROR_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824C, .hex);
pub const GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824D, .hex);
pub const GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824E, .hex);
pub const GL_DEBUG_TYPE_PORTABILITY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824F, .hex);
pub const GL_DEBUG_TYPE_PERFORMANCE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8250, .hex);
pub const GL_DEBUG_TYPE_OTHER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8251, .hex);
pub const GL_MAX_DEBUG_MESSAGE_LENGTH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9143, .hex);
pub const GL_MAX_DEBUG_LOGGED_MESSAGES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9144, .hex);
pub const GL_DEBUG_LOGGED_MESSAGES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9145, .hex);
pub const GL_DEBUG_SEVERITY_HIGH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9146, .hex);
pub const GL_DEBUG_SEVERITY_MEDIUM_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9147, .hex);
pub const GL_DEBUG_SEVERITY_LOW_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9148, .hex);
pub const GL_ARB_depth_buffer_float = @as(c_int, 1);
pub const GL_ARB_depth_clamp = @as(c_int, 1);
pub const GL_ARB_depth_texture = @as(c_int, 1);
pub const GL_DEPTH_COMPONENT16_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A5, .hex);
pub const GL_DEPTH_COMPONENT24_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A6, .hex);
pub const GL_DEPTH_COMPONENT32_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A7, .hex);
pub const GL_TEXTURE_DEPTH_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884A, .hex);
pub const GL_DEPTH_TEXTURE_MODE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884B, .hex);
pub const GL_ARB_derivative_control = @as(c_int, 1);
pub const GL_ARB_direct_state_access = @as(c_int, 1);
pub const GL_ARB_draw_buffers = @as(c_int, 1);
pub const GL_MAX_DRAW_BUFFERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8824, .hex);
pub const GL_DRAW_BUFFER0_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8825, .hex);
pub const GL_DRAW_BUFFER1_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8826, .hex);
pub const GL_DRAW_BUFFER2_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8827, .hex);
pub const GL_DRAW_BUFFER3_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8828, .hex);
pub const GL_DRAW_BUFFER4_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8829, .hex);
pub const GL_DRAW_BUFFER5_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882A, .hex);
pub const GL_DRAW_BUFFER6_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882B, .hex);
pub const GL_DRAW_BUFFER7_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882C, .hex);
pub const GL_DRAW_BUFFER8_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882D, .hex);
pub const GL_DRAW_BUFFER9_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882E, .hex);
pub const GL_DRAW_BUFFER10_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882F, .hex);
pub const GL_DRAW_BUFFER11_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8830, .hex);
pub const GL_DRAW_BUFFER12_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8831, .hex);
pub const GL_DRAW_BUFFER13_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8832, .hex);
pub const GL_DRAW_BUFFER14_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8833, .hex);
pub const GL_DRAW_BUFFER15_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8834, .hex);
pub const GL_ARB_draw_buffers_blend = @as(c_int, 1);
pub const GL_ARB_draw_elements_base_vertex = @as(c_int, 1);
pub const GL_ARB_draw_indirect = @as(c_int, 1);
pub const GL_ARB_draw_instanced = @as(c_int, 1);
pub const GL_ARB_enhanced_layouts = @as(c_int, 1);
pub const GL_ARB_explicit_attrib_location = @as(c_int, 1);
pub const GL_ARB_explicit_uniform_location = @as(c_int, 1);
pub const GL_ARB_fragment_coord_conventions = @as(c_int, 1);
pub const GL_ARB_fragment_layer_viewport = @as(c_int, 1);
pub const GL_ARB_fragment_program = @as(c_int, 1);
pub const GL_FRAGMENT_PROGRAM_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8804, .hex);
pub const GL_PROGRAM_FORMAT_ASCII_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8875, .hex);
pub const GL_PROGRAM_LENGTH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8627, .hex);
pub const GL_PROGRAM_FORMAT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8876, .hex);
pub const GL_PROGRAM_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8677, .hex);
pub const GL_PROGRAM_INSTRUCTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88A0, .hex);
pub const GL_MAX_PROGRAM_INSTRUCTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88A1, .hex);
pub const GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88A2, .hex);
pub const GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88A3, .hex);
pub const GL_PROGRAM_TEMPORARIES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88A4, .hex);
pub const GL_MAX_PROGRAM_TEMPORARIES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88A5, .hex);
pub const GL_PROGRAM_NATIVE_TEMPORARIES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88A6, .hex);
pub const GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88A7, .hex);
pub const GL_PROGRAM_PARAMETERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88A8, .hex);
pub const GL_MAX_PROGRAM_PARAMETERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88A9, .hex);
pub const GL_PROGRAM_NATIVE_PARAMETERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88AA, .hex);
pub const GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88AB, .hex);
pub const GL_PROGRAM_ATTRIBS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88AC, .hex);
pub const GL_MAX_PROGRAM_ATTRIBS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88AD, .hex);
pub const GL_PROGRAM_NATIVE_ATTRIBS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88AE, .hex);
pub const GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88AF, .hex);
pub const GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B4, .hex);
pub const GL_MAX_PROGRAM_ENV_PARAMETERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B5, .hex);
pub const GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B6, .hex);
pub const GL_PROGRAM_ALU_INSTRUCTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8805, .hex);
pub const GL_PROGRAM_TEX_INSTRUCTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8806, .hex);
pub const GL_PROGRAM_TEX_INDIRECTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8807, .hex);
pub const GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8808, .hex);
pub const GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8809, .hex);
pub const GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x880A, .hex);
pub const GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x880B, .hex);
pub const GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x880C, .hex);
pub const GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x880D, .hex);
pub const GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x880E, .hex);
pub const GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x880F, .hex);
pub const GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8810, .hex);
pub const GL_PROGRAM_STRING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8628, .hex);
pub const GL_PROGRAM_ERROR_POSITION_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x864B, .hex);
pub const GL_CURRENT_MATRIX_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8641, .hex);
pub const GL_TRANSPOSE_CURRENT_MATRIX_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B7, .hex);
pub const GL_CURRENT_MATRIX_STACK_DEPTH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8640, .hex);
pub const GL_MAX_PROGRAM_MATRICES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x862F, .hex);
pub const GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x862E, .hex);
pub const GL_MAX_TEXTURE_COORDS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8871, .hex);
pub const GL_MAX_TEXTURE_IMAGE_UNITS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8872, .hex);
pub const GL_PROGRAM_ERROR_STRING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8874, .hex);
pub const GL_MATRIX0_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88C0, .hex);
pub const GL_MATRIX1_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88C1, .hex);
pub const GL_MATRIX2_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88C2, .hex);
pub const GL_MATRIX3_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88C3, .hex);
pub const GL_MATRIX4_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88C4, .hex);
pub const GL_MATRIX5_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88C5, .hex);
pub const GL_MATRIX6_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88C6, .hex);
pub const GL_MATRIX7_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88C7, .hex);
pub const GL_MATRIX8_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88C8, .hex);
pub const GL_MATRIX9_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88C9, .hex);
pub const GL_MATRIX10_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88CA, .hex);
pub const GL_MATRIX11_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88CB, .hex);
pub const GL_MATRIX12_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88CC, .hex);
pub const GL_MATRIX13_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88CD, .hex);
pub const GL_MATRIX14_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88CE, .hex);
pub const GL_MATRIX15_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88CF, .hex);
pub const GL_MATRIX16_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88D0, .hex);
pub const GL_MATRIX17_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88D1, .hex);
pub const GL_MATRIX18_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88D2, .hex);
pub const GL_MATRIX19_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88D3, .hex);
pub const GL_MATRIX20_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88D4, .hex);
pub const GL_MATRIX21_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88D5, .hex);
pub const GL_MATRIX22_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88D6, .hex);
pub const GL_MATRIX23_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88D7, .hex);
pub const GL_MATRIX24_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88D8, .hex);
pub const GL_MATRIX25_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88D9, .hex);
pub const GL_MATRIX26_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88DA, .hex);
pub const GL_MATRIX27_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88DB, .hex);
pub const GL_MATRIX28_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88DC, .hex);
pub const GL_MATRIX29_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88DD, .hex);
pub const GL_MATRIX30_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88DE, .hex);
pub const GL_MATRIX31_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88DF, .hex);
pub const GL_ARB_fragment_program_shadow = @as(c_int, 1);
pub const GL_ARB_fragment_shader = @as(c_int, 1);
pub const GL_FRAGMENT_SHADER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B30, .hex);
pub const GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B49, .hex);
pub const GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B8B, .hex);
pub const GL_ARB_fragment_shader_interlock = @as(c_int, 1);
pub const GL_ARB_framebuffer_no_attachments = @as(c_int, 1);
pub const GL_ARB_framebuffer_object = @as(c_int, 1);
pub const GL_ARB_framebuffer_sRGB = @as(c_int, 1);
pub const GL_ARB_geometry_shader4 = @as(c_int, 1);
pub const GL_LINES_ADJACENCY_ARB = @as(c_int, 0x000A);
pub const GL_LINE_STRIP_ADJACENCY_ARB = @as(c_int, 0x000B);
pub const GL_TRIANGLES_ADJACENCY_ARB = @as(c_int, 0x000C);
pub const GL_TRIANGLE_STRIP_ADJACENCY_ARB = @as(c_int, 0x000D);
pub const GL_PROGRAM_POINT_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8642, .hex);
pub const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C29, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA7, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA8, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA9, .hex);
pub const GL_GEOMETRY_SHADER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD9, .hex);
pub const GL_GEOMETRY_VERTICES_OUT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDA, .hex);
pub const GL_GEOMETRY_INPUT_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDB, .hex);
pub const GL_GEOMETRY_OUTPUT_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDC, .hex);
pub const GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDD, .hex);
pub const GL_MAX_VERTEX_VARYING_COMPONENTS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDE, .hex);
pub const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDF, .hex);
pub const GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE0, .hex);
pub const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE1, .hex);
pub const GL_ARB_get_program_binary = @as(c_int, 1);
pub const GL_ARB_get_texture_sub_image = @as(c_int, 1);
pub const GL_ARB_gl_spirv = @as(c_int, 1);
pub const GL_SHADER_BINARY_FORMAT_SPIR_V_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9551, .hex);
pub const GL_SPIR_V_BINARY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9552, .hex);
pub const GL_ARB_gpu_shader5 = @as(c_int, 1);
pub const GL_ARB_gpu_shader_fp64 = @as(c_int, 1);
pub const GL_ARB_gpu_shader_int64 = @as(c_int, 1);
pub const GL_INT64_ARB = @as(c_int, 0x140E);
pub const GL_INT64_VEC2_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FE9, .hex);
pub const GL_INT64_VEC3_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FEA, .hex);
pub const GL_INT64_VEC4_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FEB, .hex);
pub const GL_UNSIGNED_INT64_VEC2_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF5, .hex);
pub const GL_UNSIGNED_INT64_VEC3_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF6, .hex);
pub const GL_UNSIGNED_INT64_VEC4_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF7, .hex);
pub const GL_ARB_half_float_pixel = @as(c_int, 1);
pub const GL_HALF_FLOAT_ARB = @as(c_int, 0x140B);
pub const GL_ARB_half_float_vertex = @as(c_int, 1);
pub const GL_ARB_indirect_parameters = @as(c_int, 1);
pub const GL_PARAMETER_BUFFER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80EE, .hex);
pub const GL_PARAMETER_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80EF, .hex);
pub const GL_ARB_instanced_arrays = @as(c_int, 1);
pub const GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FE, .hex);
pub const GL_ARB_internalformat_query = @as(c_int, 1);
pub const GL_ARB_internalformat_query2 = @as(c_int, 1);
pub const GL_SRGB_DECODE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8299, .hex);
pub const GL_VIEW_CLASS_EAC_R11 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9383, .hex);
pub const GL_VIEW_CLASS_EAC_RG11 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9384, .hex);
pub const GL_VIEW_CLASS_ETC2_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9385, .hex);
pub const GL_VIEW_CLASS_ETC2_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9386, .hex);
pub const GL_VIEW_CLASS_ETC2_EAC_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9387, .hex);
pub const GL_VIEW_CLASS_ASTC_4x4_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9388, .hex);
pub const GL_VIEW_CLASS_ASTC_5x4_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9389, .hex);
pub const GL_VIEW_CLASS_ASTC_5x5_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x938A, .hex);
pub const GL_VIEW_CLASS_ASTC_6x5_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x938B, .hex);
pub const GL_VIEW_CLASS_ASTC_6x6_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x938C, .hex);
pub const GL_VIEW_CLASS_ASTC_8x5_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x938D, .hex);
pub const GL_VIEW_CLASS_ASTC_8x6_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x938E, .hex);
pub const GL_VIEW_CLASS_ASTC_8x8_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x938F, .hex);
pub const GL_VIEW_CLASS_ASTC_10x5_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9390, .hex);
pub const GL_VIEW_CLASS_ASTC_10x6_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9391, .hex);
pub const GL_VIEW_CLASS_ASTC_10x8_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9392, .hex);
pub const GL_VIEW_CLASS_ASTC_10x10_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9393, .hex);
pub const GL_VIEW_CLASS_ASTC_12x10_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9394, .hex);
pub const GL_VIEW_CLASS_ASTC_12x12_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9395, .hex);
pub const GL_ARB_invalidate_subdata = @as(c_int, 1);
pub const GL_ARB_map_buffer_alignment = @as(c_int, 1);
pub const GL_ARB_map_buffer_range = @as(c_int, 1);
pub const GL_ARB_matrix_palette = @as(c_int, 1);
pub const GL_MATRIX_PALETTE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8840, .hex);
pub const GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8841, .hex);
pub const GL_MAX_PALETTE_MATRICES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8842, .hex);
pub const GL_CURRENT_PALETTE_MATRIX_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8843, .hex);
pub const GL_MATRIX_INDEX_ARRAY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8844, .hex);
pub const GL_CURRENT_MATRIX_INDEX_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8845, .hex);
pub const GL_MATRIX_INDEX_ARRAY_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8846, .hex);
pub const GL_MATRIX_INDEX_ARRAY_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8847, .hex);
pub const GL_MATRIX_INDEX_ARRAY_STRIDE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8848, .hex);
pub const GL_MATRIX_INDEX_ARRAY_POINTER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8849, .hex);
pub const GL_ARB_multi_bind = @as(c_int, 1);
pub const GL_ARB_multi_draw_indirect = @as(c_int, 1);
pub const GL_ARB_multisample = @as(c_int, 1);
pub const GL_MULTISAMPLE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809D, .hex);
pub const GL_SAMPLE_ALPHA_TO_COVERAGE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809E, .hex);
pub const GL_SAMPLE_ALPHA_TO_ONE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809F, .hex);
pub const GL_SAMPLE_COVERAGE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A0, .hex);
pub const GL_SAMPLE_BUFFERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A8, .hex);
pub const GL_SAMPLES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A9, .hex);
pub const GL_SAMPLE_COVERAGE_VALUE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AA, .hex);
pub const GL_SAMPLE_COVERAGE_INVERT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AB, .hex);
pub const GL_MULTISAMPLE_BIT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex);
pub const GL_ARB_occlusion_query = @as(c_int, 1);
pub const GL_QUERY_COUNTER_BITS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8864, .hex);
pub const GL_CURRENT_QUERY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8865, .hex);
pub const GL_QUERY_RESULT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8866, .hex);
pub const GL_QUERY_RESULT_AVAILABLE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8867, .hex);
pub const GL_SAMPLES_PASSED_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8914, .hex);
pub const GL_ARB_occlusion_query2 = @as(c_int, 1);
pub const GL_ARB_parallel_shader_compile = @as(c_int, 1);
pub const GL_MAX_SHADER_COMPILER_THREADS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B0, .hex);
pub const GL_COMPLETION_STATUS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B1, .hex);
pub const GL_ARB_pipeline_statistics_query = @as(c_int, 1);
pub const GL_VERTICES_SUBMITTED_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82EE, .hex);
pub const GL_PRIMITIVES_SUBMITTED_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82EF, .hex);
pub const GL_VERTEX_SHADER_INVOCATIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F0, .hex);
pub const GL_TESS_CONTROL_SHADER_PATCHES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F1, .hex);
pub const GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F2, .hex);
pub const GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F3, .hex);
pub const GL_FRAGMENT_SHADER_INVOCATIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F4, .hex);
pub const GL_COMPUTE_SHADER_INVOCATIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F5, .hex);
pub const GL_CLIPPING_INPUT_PRIMITIVES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F6, .hex);
pub const GL_CLIPPING_OUTPUT_PRIMITIVES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F7, .hex);
pub const GL_ARB_pixel_buffer_object = @as(c_int, 1);
pub const GL_PIXEL_PACK_BUFFER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EB, .hex);
pub const GL_PIXEL_UNPACK_BUFFER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EC, .hex);
pub const GL_PIXEL_PACK_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88ED, .hex);
pub const GL_PIXEL_UNPACK_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EF, .hex);
pub const GL_ARB_point_parameters = @as(c_int, 1);
pub const GL_POINT_SIZE_MIN_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8126, .hex);
pub const GL_POINT_SIZE_MAX_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8127, .hex);
pub const GL_POINT_FADE_THRESHOLD_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8128, .hex);
pub const GL_POINT_DISTANCE_ATTENUATION_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8129, .hex);
pub const GL_ARB_point_sprite = @as(c_int, 1);
pub const GL_POINT_SPRITE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8861, .hex);
pub const GL_COORD_REPLACE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8862, .hex);
pub const GL_ARB_polygon_offset_clamp = @as(c_int, 1);
pub const GL_ARB_post_depth_coverage = @as(c_int, 1);
pub const GL_ARB_program_interface_query = @as(c_int, 1);
pub const GL_ARB_provoking_vertex = @as(c_int, 1);
pub const GL_ARB_query_buffer_object = @as(c_int, 1);
pub const GL_ARB_robust_buffer_access_behavior = @as(c_int, 1);
pub const GL_ARB_robustness = @as(c_int, 1);
pub const GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB = @as(c_int, 0x00000004);
pub const GL_LOSE_CONTEXT_ON_RESET_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8252, .hex);
pub const GL_GUILTY_CONTEXT_RESET_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8253, .hex);
pub const GL_INNOCENT_CONTEXT_RESET_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8254, .hex);
pub const GL_UNKNOWN_CONTEXT_RESET_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8255, .hex);
pub const GL_RESET_NOTIFICATION_STRATEGY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8256, .hex);
pub const GL_NO_RESET_NOTIFICATION_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8261, .hex);
pub const GL_ARB_robustness_isolation = @as(c_int, 1);
pub const GL_ARB_sample_locations = @as(c_int, 1);
pub const GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x933D, .hex);
pub const GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x933E, .hex);
pub const GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x933F, .hex);
pub const GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9340, .hex);
pub const GL_SAMPLE_LOCATION_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E50, .hex);
pub const GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9341, .hex);
pub const GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9342, .hex);
pub const GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9343, .hex);
pub const GL_ARB_sample_shading = @as(c_int, 1);
pub const GL_SAMPLE_SHADING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C36, .hex);
pub const GL_MIN_SAMPLE_SHADING_VALUE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C37, .hex);
pub const GL_ARB_sampler_objects = @as(c_int, 1);
pub const GL_ARB_seamless_cube_map = @as(c_int, 1);
pub const GL_ARB_seamless_cubemap_per_texture = @as(c_int, 1);
pub const GL_ARB_separate_shader_objects = @as(c_int, 1);
pub const GL_ARB_shader_atomic_counter_ops = @as(c_int, 1);
pub const GL_ARB_shader_atomic_counters = @as(c_int, 1);
pub const GL_ARB_shader_ballot = @as(c_int, 1);
pub const GL_ARB_shader_bit_encoding = @as(c_int, 1);
pub const GL_ARB_shader_clock = @as(c_int, 1);
pub const GL_ARB_shader_draw_parameters = @as(c_int, 1);
pub const GL_ARB_shader_group_vote = @as(c_int, 1);
pub const GL_ARB_shader_image_load_store = @as(c_int, 1);
pub const GL_ARB_shader_image_size = @as(c_int, 1);
pub const GL_ARB_shader_objects = @as(c_int, 1);
pub const GL_PROGRAM_OBJECT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B40, .hex);
pub const GL_SHADER_OBJECT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B48, .hex);
pub const GL_OBJECT_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4E, .hex);
pub const GL_OBJECT_SUBTYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4F, .hex);
pub const GL_FLOAT_VEC2_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B50, .hex);
pub const GL_FLOAT_VEC3_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B51, .hex);
pub const GL_FLOAT_VEC4_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B52, .hex);
pub const GL_INT_VEC2_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B53, .hex);
pub const GL_INT_VEC3_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B54, .hex);
pub const GL_INT_VEC4_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B55, .hex);
pub const GL_BOOL_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B56, .hex);
pub const GL_BOOL_VEC2_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B57, .hex);
pub const GL_BOOL_VEC3_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B58, .hex);
pub const GL_BOOL_VEC4_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B59, .hex);
pub const GL_FLOAT_MAT2_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5A, .hex);
pub const GL_FLOAT_MAT3_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5B, .hex);
pub const GL_FLOAT_MAT4_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5C, .hex);
pub const GL_SAMPLER_1D_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5D, .hex);
pub const GL_SAMPLER_2D_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5E, .hex);
pub const GL_SAMPLER_3D_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5F, .hex);
pub const GL_SAMPLER_CUBE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B60, .hex);
pub const GL_SAMPLER_1D_SHADOW_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B61, .hex);
pub const GL_SAMPLER_2D_SHADOW_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B62, .hex);
pub const GL_SAMPLER_2D_RECT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B63, .hex);
pub const GL_SAMPLER_2D_RECT_SHADOW_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B64, .hex);
pub const GL_OBJECT_DELETE_STATUS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B80, .hex);
pub const GL_OBJECT_COMPILE_STATUS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B81, .hex);
pub const GL_OBJECT_LINK_STATUS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B82, .hex);
pub const GL_OBJECT_VALIDATE_STATUS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B83, .hex);
pub const GL_OBJECT_INFO_LOG_LENGTH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B84, .hex);
pub const GL_OBJECT_ATTACHED_OBJECTS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B85, .hex);
pub const GL_OBJECT_ACTIVE_UNIFORMS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B86, .hex);
pub const GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B87, .hex);
pub const GL_OBJECT_SHADER_SOURCE_LENGTH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B88, .hex);
pub const GL_ARB_shader_precision = @as(c_int, 1);
pub const GL_ARB_shader_stencil_export = @as(c_int, 1);
pub const GL_ARB_shader_storage_buffer_object = @as(c_int, 1);
pub const GL_ARB_shader_subroutine = @as(c_int, 1);
pub const GL_ARB_shader_texture_image_samples = @as(c_int, 1);
pub const GL_ARB_shader_texture_lod = @as(c_int, 1);
pub const GL_ARB_shader_viewport_layer_array = @as(c_int, 1);
pub const GL_ARB_shading_language_100 = @as(c_int, 1);
pub const GL_SHADING_LANGUAGE_VERSION_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B8C, .hex);
pub const GL_ARB_shading_language_420pack = @as(c_int, 1);
pub const GL_ARB_shading_language_include = @as(c_int, 1);
pub const GL_SHADER_INCLUDE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DAE, .hex);
pub const GL_NAMED_STRING_LENGTH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE9, .hex);
pub const GL_NAMED_STRING_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DEA, .hex);
pub const GL_ARB_shading_language_packing = @as(c_int, 1);
pub const GL_ARB_shadow = @as(c_int, 1);
pub const GL_TEXTURE_COMPARE_MODE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884C, .hex);
pub const GL_TEXTURE_COMPARE_FUNC_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884D, .hex);
pub const GL_COMPARE_R_TO_TEXTURE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884E, .hex);
pub const GL_ARB_shadow_ambient = @as(c_int, 1);
pub const GL_TEXTURE_COMPARE_FAIL_VALUE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80BF, .hex);
pub const GL_ARB_sparse_buffer = @as(c_int, 1);
pub const GL_SPARSE_STORAGE_BIT_ARB = @as(c_int, 0x0400);
pub const GL_SPARSE_BUFFER_PAGE_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F8, .hex);
pub const GL_ARB_sparse_texture = @as(c_int, 1);
pub const GL_TEXTURE_SPARSE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91A6, .hex);
pub const GL_VIRTUAL_PAGE_SIZE_INDEX_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91A7, .hex);
pub const GL_NUM_SPARSE_LEVELS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91AA, .hex);
pub const GL_NUM_VIRTUAL_PAGE_SIZES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91A8, .hex);
pub const GL_VIRTUAL_PAGE_SIZE_X_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9195, .hex);
pub const GL_VIRTUAL_PAGE_SIZE_Y_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9196, .hex);
pub const GL_VIRTUAL_PAGE_SIZE_Z_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9197, .hex);
pub const GL_MAX_SPARSE_TEXTURE_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9198, .hex);
pub const GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9199, .hex);
pub const GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919A, .hex);
pub const GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91A9, .hex);
pub const GL_ARB_sparse_texture2 = @as(c_int, 1);
pub const GL_ARB_sparse_texture_clamp = @as(c_int, 1);
pub const GL_ARB_spirv_extensions = @as(c_int, 1);
pub const GL_ARB_stencil_texturing = @as(c_int, 1);
pub const GL_ARB_sync = @as(c_int, 1);
pub const GL_ARB_tessellation_shader = @as(c_int, 1);
pub const GL_ARB_texture_barrier = @as(c_int, 1);
pub const GL_ARB_texture_border_clamp = @as(c_int, 1);
pub const GL_CLAMP_TO_BORDER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x812D, .hex);
pub const GL_ARB_texture_buffer_object = @as(c_int, 1);
pub const GL_TEXTURE_BUFFER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2A, .hex);
pub const GL_MAX_TEXTURE_BUFFER_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2B, .hex);
pub const GL_TEXTURE_BINDING_BUFFER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2C, .hex);
pub const GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2D, .hex);
pub const GL_TEXTURE_BUFFER_FORMAT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2E, .hex);
pub const GL_ARB_texture_buffer_object_rgb32 = @as(c_int, 1);
pub const GL_ARB_texture_buffer_range = @as(c_int, 1);
pub const GL_ARB_texture_compression = @as(c_int, 1);
pub const GL_COMPRESSED_ALPHA_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E9, .hex);
pub const GL_COMPRESSED_LUMINANCE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84EA, .hex);
pub const GL_COMPRESSED_LUMINANCE_ALPHA_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84EB, .hex);
pub const GL_COMPRESSED_INTENSITY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84EC, .hex);
pub const GL_COMPRESSED_RGB_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84ED, .hex);
pub const GL_COMPRESSED_RGBA_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84EE, .hex);
pub const GL_TEXTURE_COMPRESSION_HINT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84EF, .hex);
pub const GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A0, .hex);
pub const GL_TEXTURE_COMPRESSED_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A1, .hex);
pub const GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A2, .hex);
pub const GL_COMPRESSED_TEXTURE_FORMATS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A3, .hex);
pub const GL_ARB_texture_compression_bptc = @as(c_int, 1);
pub const GL_COMPRESSED_RGBA_BPTC_UNORM_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8C, .hex);
pub const GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8D, .hex);
pub const GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8E, .hex);
pub const GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8F, .hex);
pub const GL_ARB_texture_compression_rgtc = @as(c_int, 1);
pub const GL_ARB_texture_cube_map = @as(c_int, 1);
pub const GL_NORMAL_MAP_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8511, .hex);
pub const GL_REFLECTION_MAP_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8512, .hex);
pub const GL_TEXTURE_CUBE_MAP_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8513, .hex);
pub const GL_TEXTURE_BINDING_CUBE_MAP_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8514, .hex);
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8515, .hex);
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8516, .hex);
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8517, .hex);
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8518, .hex);
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8519, .hex);
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851A, .hex);
pub const GL_PROXY_TEXTURE_CUBE_MAP_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851B, .hex);
pub const GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851C, .hex);
pub const GL_ARB_texture_cube_map_array = @as(c_int, 1);
pub const GL_TEXTURE_CUBE_MAP_ARRAY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9009, .hex);
pub const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900A, .hex);
pub const GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900B, .hex);
pub const GL_SAMPLER_CUBE_MAP_ARRAY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900C, .hex);
pub const GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900D, .hex);
pub const GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900E, .hex);
pub const GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900F, .hex);
pub const GL_ARB_texture_env_add = @as(c_int, 1);
pub const GL_ARB_texture_env_combine = @as(c_int, 1);
pub const GL_COMBINE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8570, .hex);
pub const GL_COMBINE_RGB_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8571, .hex);
pub const GL_COMBINE_ALPHA_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8572, .hex);
pub const GL_SOURCE0_RGB_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8580, .hex);
pub const GL_SOURCE1_RGB_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8581, .hex);
pub const GL_SOURCE2_RGB_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8582, .hex);
pub const GL_SOURCE0_ALPHA_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8588, .hex);
pub const GL_SOURCE1_ALPHA_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8589, .hex);
pub const GL_SOURCE2_ALPHA_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x858A, .hex);
pub const GL_OPERAND0_RGB_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8590, .hex);
pub const GL_OPERAND1_RGB_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8591, .hex);
pub const GL_OPERAND2_RGB_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8592, .hex);
pub const GL_OPERAND0_ALPHA_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8598, .hex);
pub const GL_OPERAND1_ALPHA_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8599, .hex);
pub const GL_OPERAND2_ALPHA_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x859A, .hex);
pub const GL_RGB_SCALE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8573, .hex);
pub const GL_ADD_SIGNED_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8574, .hex);
pub const GL_INTERPOLATE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8575, .hex);
pub const GL_SUBTRACT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E7, .hex);
pub const GL_CONSTANT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8576, .hex);
pub const GL_PRIMARY_COLOR_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8577, .hex);
pub const GL_PREVIOUS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8578, .hex);
pub const GL_ARB_texture_env_crossbar = @as(c_int, 1);
pub const GL_ARB_texture_env_dot3 = @as(c_int, 1);
pub const GL_DOT3_RGB_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86AE, .hex);
pub const GL_DOT3_RGBA_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86AF, .hex);
pub const GL_ARB_texture_filter_anisotropic = @as(c_int, 1);
pub const GL_ARB_texture_filter_minmax = @as(c_int, 1);
pub const GL_TEXTURE_REDUCTION_MODE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9366, .hex);
pub const GL_WEIGHTED_AVERAGE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9367, .hex);
pub const GL_ARB_texture_float = @as(c_int, 1);
pub const GL_TEXTURE_RED_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C10, .hex);
pub const GL_TEXTURE_GREEN_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C11, .hex);
pub const GL_TEXTURE_BLUE_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C12, .hex);
pub const GL_TEXTURE_ALPHA_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C13, .hex);
pub const GL_TEXTURE_LUMINANCE_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C14, .hex);
pub const GL_TEXTURE_INTENSITY_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C15, .hex);
pub const GL_TEXTURE_DEPTH_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C16, .hex);
pub const GL_UNSIGNED_NORMALIZED_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C17, .hex);
pub const GL_RGBA32F_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8814, .hex);
pub const GL_RGB32F_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8815, .hex);
pub const GL_ALPHA32F_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8816, .hex);
pub const GL_INTENSITY32F_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8817, .hex);
pub const GL_LUMINANCE32F_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8818, .hex);
pub const GL_LUMINANCE_ALPHA32F_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8819, .hex);
pub const GL_RGBA16F_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881A, .hex);
pub const GL_RGB16F_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881B, .hex);
pub const GL_ALPHA16F_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881C, .hex);
pub const GL_INTENSITY16F_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881D, .hex);
pub const GL_LUMINANCE16F_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881E, .hex);
pub const GL_LUMINANCE_ALPHA16F_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881F, .hex);
pub const GL_ARB_texture_gather = @as(c_int, 1);
pub const GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5E, .hex);
pub const GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5F, .hex);
pub const GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F9F, .hex);
pub const GL_ARB_texture_mirror_clamp_to_edge = @as(c_int, 1);
pub const GL_ARB_texture_mirrored_repeat = @as(c_int, 1);
pub const GL_MIRRORED_REPEAT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8370, .hex);
pub const GL_ARB_texture_multisample = @as(c_int, 1);
pub const GL_ARB_texture_non_power_of_two = @as(c_int, 1);
pub const GL_ARB_texture_query_levels = @as(c_int, 1);
pub const GL_ARB_texture_query_lod = @as(c_int, 1);
pub const GL_ARB_texture_rectangle = @as(c_int, 1);
pub const GL_TEXTURE_RECTANGLE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F5, .hex);
pub const GL_TEXTURE_BINDING_RECTANGLE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F6, .hex);
pub const GL_PROXY_TEXTURE_RECTANGLE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F7, .hex);
pub const GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F8, .hex);
pub const GL_ARB_texture_rg = @as(c_int, 1);
pub const GL_ARB_texture_rgb10_a2ui = @as(c_int, 1);
pub const GL_ARB_texture_stencil8 = @as(c_int, 1);
pub const GL_ARB_texture_storage = @as(c_int, 1);
pub const GL_ARB_texture_storage_multisample = @as(c_int, 1);
pub const GL_ARB_texture_swizzle = @as(c_int, 1);
pub const GL_ARB_texture_view = @as(c_int, 1);
pub const GL_ARB_timer_query = @as(c_int, 1);
pub const GL_ARB_transform_feedback2 = @as(c_int, 1);
pub const GL_ARB_transform_feedback3 = @as(c_int, 1);
pub const GL_ARB_transform_feedback_instanced = @as(c_int, 1);
pub const GL_ARB_transform_feedback_overflow_query = @as(c_int, 1);
pub const GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82EC, .hex);
pub const GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82ED, .hex);
pub const GL_ARB_transpose_matrix = @as(c_int, 1);
pub const GL_TRANSPOSE_MODELVIEW_MATRIX_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E3, .hex);
pub const GL_TRANSPOSE_PROJECTION_MATRIX_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E4, .hex);
pub const GL_TRANSPOSE_TEXTURE_MATRIX_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E5, .hex);
pub const GL_TRANSPOSE_COLOR_MATRIX_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E6, .hex);
pub const GL_ARB_uniform_buffer_object = @as(c_int, 1);
pub const GL_ARB_vertex_array_bgra = @as(c_int, 1);
pub const GL_ARB_vertex_array_object = @as(c_int, 1);
pub const GL_ARB_vertex_attrib_64bit = @as(c_int, 1);
pub const GL_ARB_vertex_attrib_binding = @as(c_int, 1);
pub const GL_ARB_vertex_blend = @as(c_int, 1);
pub const GL_MAX_VERTEX_UNITS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A4, .hex);
pub const GL_ACTIVE_VERTEX_UNITS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A5, .hex);
pub const GL_WEIGHT_SUM_UNITY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A6, .hex);
pub const GL_VERTEX_BLEND_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A7, .hex);
pub const GL_CURRENT_WEIGHT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A8, .hex);
pub const GL_WEIGHT_ARRAY_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A9, .hex);
pub const GL_WEIGHT_ARRAY_STRIDE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86AA, .hex);
pub const GL_WEIGHT_ARRAY_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86AB, .hex);
pub const GL_WEIGHT_ARRAY_POINTER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86AC, .hex);
pub const GL_WEIGHT_ARRAY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86AD, .hex);
pub const GL_MODELVIEW0_ARB = @as(c_int, 0x1700);
pub const GL_MODELVIEW1_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x850A, .hex);
pub const GL_MODELVIEW2_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8722, .hex);
pub const GL_MODELVIEW3_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8723, .hex);
pub const GL_MODELVIEW4_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8724, .hex);
pub const GL_MODELVIEW5_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8725, .hex);
pub const GL_MODELVIEW6_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8726, .hex);
pub const GL_MODELVIEW7_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8727, .hex);
pub const GL_MODELVIEW8_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8728, .hex);
pub const GL_MODELVIEW9_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8729, .hex);
pub const GL_MODELVIEW10_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x872A, .hex);
pub const GL_MODELVIEW11_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x872B, .hex);
pub const GL_MODELVIEW12_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x872C, .hex);
pub const GL_MODELVIEW13_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x872D, .hex);
pub const GL_MODELVIEW14_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x872E, .hex);
pub const GL_MODELVIEW15_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x872F, .hex);
pub const GL_MODELVIEW16_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8730, .hex);
pub const GL_MODELVIEW17_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8731, .hex);
pub const GL_MODELVIEW18_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8732, .hex);
pub const GL_MODELVIEW19_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8733, .hex);
pub const GL_MODELVIEW20_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8734, .hex);
pub const GL_MODELVIEW21_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8735, .hex);
pub const GL_MODELVIEW22_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8736, .hex);
pub const GL_MODELVIEW23_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8737, .hex);
pub const GL_MODELVIEW24_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8738, .hex);
pub const GL_MODELVIEW25_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8739, .hex);
pub const GL_MODELVIEW26_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x873A, .hex);
pub const GL_MODELVIEW27_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x873B, .hex);
pub const GL_MODELVIEW28_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x873C, .hex);
pub const GL_MODELVIEW29_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x873D, .hex);
pub const GL_MODELVIEW30_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x873E, .hex);
pub const GL_MODELVIEW31_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x873F, .hex);
pub const GL_ARB_vertex_buffer_object = @as(c_int, 1);
pub const GL_BUFFER_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8764, .hex);
pub const GL_BUFFER_USAGE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8765, .hex);
pub const GL_ARRAY_BUFFER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8892, .hex);
pub const GL_ELEMENT_ARRAY_BUFFER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8893, .hex);
pub const GL_ARRAY_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8894, .hex);
pub const GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8895, .hex);
pub const GL_VERTEX_ARRAY_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8896, .hex);
pub const GL_NORMAL_ARRAY_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8897, .hex);
pub const GL_COLOR_ARRAY_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8898, .hex);
pub const GL_INDEX_ARRAY_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8899, .hex);
pub const GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889A, .hex);
pub const GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889B, .hex);
pub const GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889C, .hex);
pub const GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889D, .hex);
pub const GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889E, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889F, .hex);
pub const GL_READ_ONLY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B8, .hex);
pub const GL_WRITE_ONLY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B9, .hex);
pub const GL_READ_WRITE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BA, .hex);
pub const GL_BUFFER_ACCESS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BB, .hex);
pub const GL_BUFFER_MAPPED_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BC, .hex);
pub const GL_BUFFER_MAP_POINTER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BD, .hex);
pub const GL_STREAM_DRAW_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E0, .hex);
pub const GL_STREAM_READ_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E1, .hex);
pub const GL_STREAM_COPY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E2, .hex);
pub const GL_STATIC_DRAW_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E4, .hex);
pub const GL_STATIC_READ_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E5, .hex);
pub const GL_STATIC_COPY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E6, .hex);
pub const GL_DYNAMIC_DRAW_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E8, .hex);
pub const GL_DYNAMIC_READ_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E9, .hex);
pub const GL_DYNAMIC_COPY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EA, .hex);
pub const GL_ARB_vertex_program = @as(c_int, 1);
pub const GL_COLOR_SUM_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8458, .hex);
pub const GL_VERTEX_PROGRAM_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8620, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8622, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8623, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8624, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8625, .hex);
pub const GL_CURRENT_VERTEX_ATTRIB_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8626, .hex);
pub const GL_VERTEX_PROGRAM_POINT_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8642, .hex);
pub const GL_VERTEX_PROGRAM_TWO_SIDE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8643, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8645, .hex);
pub const GL_MAX_VERTEX_ATTRIBS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8869, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x886A, .hex);
pub const GL_PROGRAM_ADDRESS_REGISTERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B0, .hex);
pub const GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B1, .hex);
pub const GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B2, .hex);
pub const GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B3, .hex);
pub const GL_ARB_vertex_shader = @as(c_int, 1);
pub const GL_VERTEX_SHADER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B31, .hex);
pub const GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4A, .hex);
pub const GL_MAX_VARYING_FLOATS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4B, .hex);
pub const GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4C, .hex);
pub const GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4D, .hex);
pub const GL_OBJECT_ACTIVE_ATTRIBUTES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B89, .hex);
pub const GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B8A, .hex);
pub const GL_ARB_vertex_type_10f_11f_11f_rev = @as(c_int, 1);
pub const GL_ARB_vertex_type_2_10_10_10_rev = @as(c_int, 1);
pub const GL_ARB_viewport_array = @as(c_int, 1);
pub const GL_ARB_window_pos = @as(c_int, 1);
pub const GL_KHR_blend_equation_advanced = @as(c_int, 1);
pub const GL_MULTIPLY_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9294, .hex);
pub const GL_SCREEN_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9295, .hex);
pub const GL_OVERLAY_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9296, .hex);
pub const GL_DARKEN_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9297, .hex);
pub const GL_LIGHTEN_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9298, .hex);
pub const GL_COLORDODGE_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9299, .hex);
pub const GL_COLORBURN_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x929A, .hex);
pub const GL_HARDLIGHT_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x929B, .hex);
pub const GL_SOFTLIGHT_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x929C, .hex);
pub const GL_DIFFERENCE_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x929E, .hex);
pub const GL_EXCLUSION_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A0, .hex);
pub const GL_HSL_HUE_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92AD, .hex);
pub const GL_HSL_SATURATION_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92AE, .hex);
pub const GL_HSL_COLOR_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92AF, .hex);
pub const GL_HSL_LUMINOSITY_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92B0, .hex);
pub const GL_KHR_blend_equation_advanced_coherent = @as(c_int, 1);
pub const GL_BLEND_ADVANCED_COHERENT_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9285, .hex);
pub const GL_KHR_context_flush_control = @as(c_int, 1);
pub const GL_KHR_debug = @as(c_int, 1);
pub const GL_KHR_no_error = @as(c_int, 1);
pub const GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR = @as(c_int, 0x00000008);
pub const GL_KHR_parallel_shader_compile = @as(c_int, 1);
pub const GL_MAX_SHADER_COMPILER_THREADS_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B0, .hex);
pub const GL_COMPLETION_STATUS_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B1, .hex);
pub const GL_KHR_robust_buffer_access_behavior = @as(c_int, 1);
pub const GL_KHR_robustness = @as(c_int, 1);
pub const GL_CONTEXT_ROBUST_ACCESS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90F3, .hex);
pub const GL_KHR_shader_subgroup = @as(c_int, 1);
pub const GL_SUBGROUP_SIZE_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9532, .hex);
pub const GL_SUBGROUP_SUPPORTED_STAGES_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9533, .hex);
pub const GL_SUBGROUP_SUPPORTED_FEATURES_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9534, .hex);
pub const GL_SUBGROUP_QUAD_ALL_STAGES_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9535, .hex);
pub const GL_SUBGROUP_FEATURE_BASIC_BIT_KHR = @as(c_int, 0x00000001);
pub const GL_SUBGROUP_FEATURE_VOTE_BIT_KHR = @as(c_int, 0x00000002);
pub const GL_SUBGROUP_FEATURE_ARITHMETIC_BIT_KHR = @as(c_int, 0x00000004);
pub const GL_SUBGROUP_FEATURE_BALLOT_BIT_KHR = @as(c_int, 0x00000008);
pub const GL_SUBGROUP_FEATURE_SHUFFLE_BIT_KHR = @as(c_int, 0x00000010);
pub const GL_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT_KHR = @as(c_int, 0x00000020);
pub const GL_SUBGROUP_FEATURE_CLUSTERED_BIT_KHR = @as(c_int, 0x00000040);
pub const GL_SUBGROUP_FEATURE_QUAD_BIT_KHR = @as(c_int, 0x00000080);
pub const GL_KHR_texture_compression_astc_hdr = @as(c_int, 1);
pub const GL_COMPRESSED_RGBA_ASTC_4x4_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B0, .hex);
pub const GL_COMPRESSED_RGBA_ASTC_5x4_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B1, .hex);
pub const GL_COMPRESSED_RGBA_ASTC_5x5_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B2, .hex);
pub const GL_COMPRESSED_RGBA_ASTC_6x5_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B3, .hex);
pub const GL_COMPRESSED_RGBA_ASTC_6x6_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B4, .hex);
pub const GL_COMPRESSED_RGBA_ASTC_8x5_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B5, .hex);
pub const GL_COMPRESSED_RGBA_ASTC_8x6_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B6, .hex);
pub const GL_COMPRESSED_RGBA_ASTC_8x8_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B7, .hex);
pub const GL_COMPRESSED_RGBA_ASTC_10x5_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B8, .hex);
pub const GL_COMPRESSED_RGBA_ASTC_10x6_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B9, .hex);
pub const GL_COMPRESSED_RGBA_ASTC_10x8_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93BA, .hex);
pub const GL_COMPRESSED_RGBA_ASTC_10x10_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93BB, .hex);
pub const GL_COMPRESSED_RGBA_ASTC_12x10_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93BC, .hex);
pub const GL_COMPRESSED_RGBA_ASTC_12x12_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93BD, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D0, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D1, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D2, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D3, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D4, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D5, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D6, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D7, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D8, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D9, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93DA, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93DB, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93DC, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93DD, .hex);
pub const GL_KHR_texture_compression_astc_ldr = @as(c_int, 1);
pub const GL_KHR_texture_compression_astc_sliced_3d = @as(c_int, 1);
pub const GL_OES_byte_coordinates = @as(c_int, 1);
pub const GL_OES_compressed_paletted_texture = @as(c_int, 1);
pub const GL_PALETTE4_RGB8_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B90, .hex);
pub const GL_PALETTE4_RGBA8_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B91, .hex);
pub const GL_PALETTE4_R5_G6_B5_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B92, .hex);
pub const GL_PALETTE4_RGBA4_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B93, .hex);
pub const GL_PALETTE4_RGB5_A1_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B94, .hex);
pub const GL_PALETTE8_RGB8_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B95, .hex);
pub const GL_PALETTE8_RGBA8_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B96, .hex);
pub const GL_PALETTE8_R5_G6_B5_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B97, .hex);
pub const GL_PALETTE8_RGBA4_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B98, .hex);
pub const GL_PALETTE8_RGB5_A1_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B99, .hex);
pub const GL_OES_fixed_point = @as(c_int, 1);
pub const GL_FIXED_OES = @as(c_int, 0x140C);
pub const GL_OES_query_matrix = @as(c_int, 1);
pub const GL_OES_read_format = @as(c_int, 1);
pub const GL_IMPLEMENTATION_COLOR_READ_TYPE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B9A, .hex);
pub const GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B9B, .hex);
pub const GL_OES_single_precision = @as(c_int, 1);
pub const GL_3DFX_multisample = @as(c_int, 1);
pub const GL_MULTISAMPLE_3DFX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86B2, .hex);
pub const GL_SAMPLE_BUFFERS_3DFX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86B3, .hex);
pub const GL_SAMPLES_3DFX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86B4, .hex);
pub const GL_MULTISAMPLE_BIT_3DFX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex);
pub const GL_3DFX_tbuffer = @as(c_int, 1);
pub const GL_3DFX_texture_compression_FXT1 = @as(c_int, 1);
pub const GL_COMPRESSED_RGB_FXT1_3DFX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86B0, .hex);
pub const GL_COMPRESSED_RGBA_FXT1_3DFX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86B1, .hex);
pub const GL_AMD_blend_minmax_factor = @as(c_int, 1);
pub const GL_FACTOR_MIN_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x901C, .hex);
pub const GL_FACTOR_MAX_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x901D, .hex);
pub const GL_AMD_conservative_depth = @as(c_int, 1);
pub const GL_AMD_debug_output = @as(c_int, 1);
pub const GL_MAX_DEBUG_MESSAGE_LENGTH_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9143, .hex);
pub const GL_MAX_DEBUG_LOGGED_MESSAGES_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9144, .hex);
pub const GL_DEBUG_LOGGED_MESSAGES_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9145, .hex);
pub const GL_DEBUG_SEVERITY_HIGH_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9146, .hex);
pub const GL_DEBUG_SEVERITY_MEDIUM_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9147, .hex);
pub const GL_DEBUG_SEVERITY_LOW_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9148, .hex);
pub const GL_DEBUG_CATEGORY_API_ERROR_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9149, .hex);
pub const GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x914A, .hex);
pub const GL_DEBUG_CATEGORY_DEPRECATION_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x914B, .hex);
pub const GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x914C, .hex);
pub const GL_DEBUG_CATEGORY_PERFORMANCE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x914D, .hex);
pub const GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x914E, .hex);
pub const GL_DEBUG_CATEGORY_APPLICATION_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x914F, .hex);
pub const GL_DEBUG_CATEGORY_OTHER_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9150, .hex);
pub const GL_AMD_depth_clamp_separate = @as(c_int, 1);
pub const GL_DEPTH_CLAMP_NEAR_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x901E, .hex);
pub const GL_DEPTH_CLAMP_FAR_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x901F, .hex);
pub const GL_AMD_draw_buffers_blend = @as(c_int, 1);
pub const GL_AMD_framebuffer_multisample_advanced = @as(c_int, 1);
pub const GL_RENDERBUFFER_STORAGE_SAMPLES_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B2, .hex);
pub const GL_MAX_COLOR_FRAMEBUFFER_SAMPLES_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B3, .hex);
pub const GL_MAX_COLOR_FRAMEBUFFER_STORAGE_SAMPLES_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B4, .hex);
pub const GL_MAX_DEPTH_STENCIL_FRAMEBUFFER_SAMPLES_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B5, .hex);
pub const GL_NUM_SUPPORTED_MULTISAMPLE_MODES_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B6, .hex);
pub const GL_SUPPORTED_MULTISAMPLE_MODES_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B7, .hex);
pub const GL_AMD_framebuffer_sample_positions = @as(c_int, 1);
pub const GL_SUBSAMPLE_DISTANCE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x883F, .hex);
pub const GL_PIXELS_PER_SAMPLE_PATTERN_X_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91AE, .hex);
pub const GL_PIXELS_PER_SAMPLE_PATTERN_Y_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91AF, .hex);
pub const GL_ALL_PIXELS_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFFFFFF, .hex);
pub const GL_AMD_gcn_shader = @as(c_int, 1);
pub const GL_AMD_gpu_shader_half_float = @as(c_int, 1);
pub const GL_FLOAT16_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF8, .hex);
pub const GL_FLOAT16_VEC2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF9, .hex);
pub const GL_FLOAT16_VEC3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FFA, .hex);
pub const GL_FLOAT16_VEC4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FFB, .hex);
pub const GL_FLOAT16_MAT2_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91C5, .hex);
pub const GL_FLOAT16_MAT3_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91C6, .hex);
pub const GL_FLOAT16_MAT4_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91C7, .hex);
pub const GL_FLOAT16_MAT2x3_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91C8, .hex);
pub const GL_FLOAT16_MAT2x4_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91C9, .hex);
pub const GL_FLOAT16_MAT3x2_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91CA, .hex);
pub const GL_FLOAT16_MAT3x4_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91CB, .hex);
pub const GL_FLOAT16_MAT4x2_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91CC, .hex);
pub const GL_FLOAT16_MAT4x3_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91CD, .hex);
pub const GL_AMD_gpu_shader_int16 = @as(c_int, 1);
pub const GL_AMD_gpu_shader_int64 = @as(c_int, 1);
pub const GL_INT64_NV = @as(c_int, 0x140E);
pub const GL_UNSIGNED_INT64_NV = @as(c_int, 0x140F);
pub const GL_INT8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FE0, .hex);
pub const GL_INT8_VEC2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FE1, .hex);
pub const GL_INT8_VEC3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FE2, .hex);
pub const GL_INT8_VEC4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FE3, .hex);
pub const GL_INT16_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FE4, .hex);
pub const GL_INT16_VEC2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FE5, .hex);
pub const GL_INT16_VEC3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FE6, .hex);
pub const GL_INT16_VEC4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FE7, .hex);
pub const GL_INT64_VEC2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FE9, .hex);
pub const GL_INT64_VEC3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FEA, .hex);
pub const GL_INT64_VEC4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FEB, .hex);
pub const GL_UNSIGNED_INT8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FEC, .hex);
pub const GL_UNSIGNED_INT8_VEC2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FED, .hex);
pub const GL_UNSIGNED_INT8_VEC3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FEE, .hex);
pub const GL_UNSIGNED_INT8_VEC4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FEF, .hex);
pub const GL_UNSIGNED_INT16_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF0, .hex);
pub const GL_UNSIGNED_INT16_VEC2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF1, .hex);
pub const GL_UNSIGNED_INT16_VEC3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF2, .hex);
pub const GL_UNSIGNED_INT16_VEC4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF3, .hex);
pub const GL_UNSIGNED_INT64_VEC2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF5, .hex);
pub const GL_UNSIGNED_INT64_VEC3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF6, .hex);
pub const GL_UNSIGNED_INT64_VEC4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF7, .hex);
pub const GL_AMD_interleaved_elements = @as(c_int, 1);
pub const GL_VERTEX_ELEMENT_SWIZZLE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91A4, .hex);
pub const GL_VERTEX_ID_SWIZZLE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91A5, .hex);
pub const GL_AMD_multi_draw_indirect = @as(c_int, 1);
pub const GL_AMD_name_gen_delete = @as(c_int, 1);
pub const GL_DATA_BUFFER_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9151, .hex);
pub const GL_PERFORMANCE_MONITOR_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9152, .hex);
pub const GL_QUERY_OBJECT_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9153, .hex);
pub const GL_VERTEX_ARRAY_OBJECT_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9154, .hex);
pub const GL_SAMPLER_OBJECT_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9155, .hex);
pub const GL_AMD_occlusion_query_event = @as(c_int, 1);
pub const GL_OCCLUSION_QUERY_EVENT_MASK_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x874F, .hex);
pub const GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD = @as(c_int, 0x00000001);
pub const GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD = @as(c_int, 0x00000002);
pub const GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD = @as(c_int, 0x00000004);
pub const GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD = @as(c_int, 0x00000008);
pub const GL_QUERY_ALL_EVENT_BITS_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFFFFFF, .hex);
pub const GL_AMD_performance_monitor = @as(c_int, 1);
pub const GL_COUNTER_TYPE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BC0, .hex);
pub const GL_COUNTER_RANGE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BC1, .hex);
pub const GL_UNSIGNED_INT64_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BC2, .hex);
pub const GL_PERCENTAGE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BC3, .hex);
pub const GL_PERFMON_RESULT_AVAILABLE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BC4, .hex);
pub const GL_PERFMON_RESULT_SIZE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BC5, .hex);
pub const GL_PERFMON_RESULT_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BC6, .hex);
pub const GL_AMD_pinned_memory = @as(c_int, 1);
pub const GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9160, .hex);
pub const GL_AMD_query_buffer_object = @as(c_int, 1);
pub const GL_QUERY_BUFFER_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9192, .hex);
pub const GL_QUERY_BUFFER_BINDING_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9193, .hex);
pub const GL_QUERY_RESULT_NO_WAIT_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9194, .hex);
pub const GL_AMD_sample_positions = @as(c_int, 1);
pub const GL_AMD_seamless_cubemap_per_texture = @as(c_int, 1);
pub const GL_AMD_shader_atomic_counter_ops = @as(c_int, 1);
pub const GL_AMD_shader_ballot = @as(c_int, 1);
pub const GL_AMD_shader_explicit_vertex_parameter = @as(c_int, 1);
pub const GL_AMD_shader_gpu_shader_half_float_fetch = @as(c_int, 1);
pub const GL_AMD_shader_image_load_store_lod = @as(c_int, 1);
pub const GL_AMD_shader_stencil_export = @as(c_int, 1);
pub const GL_AMD_shader_trinary_minmax = @as(c_int, 1);
pub const GL_AMD_sparse_texture = @as(c_int, 1);
pub const GL_VIRTUAL_PAGE_SIZE_X_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9195, .hex);
pub const GL_VIRTUAL_PAGE_SIZE_Y_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9196, .hex);
pub const GL_VIRTUAL_PAGE_SIZE_Z_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9197, .hex);
pub const GL_MAX_SPARSE_TEXTURE_SIZE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9198, .hex);
pub const GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9199, .hex);
pub const GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919A, .hex);
pub const GL_MIN_SPARSE_LEVEL_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919B, .hex);
pub const GL_MIN_LOD_WARNING_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919C, .hex);
pub const GL_TEXTURE_STORAGE_SPARSE_BIT_AMD = @as(c_int, 0x00000001);
pub const GL_AMD_stencil_operation_extended = @as(c_int, 1);
pub const GL_SET_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x874A, .hex);
pub const GL_REPLACE_VALUE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x874B, .hex);
pub const GL_STENCIL_OP_VALUE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x874C, .hex);
pub const GL_STENCIL_BACK_OP_VALUE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x874D, .hex);
pub const GL_AMD_texture_gather_bias_lod = @as(c_int, 1);
pub const GL_AMD_texture_texture4 = @as(c_int, 1);
pub const GL_AMD_transform_feedback3_lines_triangles = @as(c_int, 1);
pub const GL_AMD_transform_feedback4 = @as(c_int, 1);
pub const GL_STREAM_RASTERIZATION_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91A0, .hex);
pub const GL_AMD_vertex_shader_layer = @as(c_int, 1);
pub const GL_AMD_vertex_shader_tessellator = @as(c_int, 1);
pub const GL_SAMPLER_BUFFER_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9001, .hex);
pub const GL_INT_SAMPLER_BUFFER_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9002, .hex);
pub const GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9003, .hex);
pub const GL_TESSELLATION_MODE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9004, .hex);
pub const GL_TESSELLATION_FACTOR_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9005, .hex);
pub const GL_DISCRETE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9006, .hex);
pub const GL_CONTINUOUS_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9007, .hex);
pub const GL_AMD_vertex_shader_viewport_index = @as(c_int, 1);
pub const GL_APPLE_aux_depth_stencil = @as(c_int, 1);
pub const GL_AUX_DEPTH_STENCIL_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A14, .hex);
pub const GL_APPLE_client_storage = @as(c_int, 1);
pub const GL_UNPACK_CLIENT_STORAGE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85B2, .hex);
pub const GL_APPLE_element_array = @as(c_int, 1);
pub const GL_ELEMENT_ARRAY_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A0C, .hex);
pub const GL_ELEMENT_ARRAY_TYPE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A0D, .hex);
pub const GL_ELEMENT_ARRAY_POINTER_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A0E, .hex);
pub const GL_APPLE_fence = @as(c_int, 1);
pub const GL_DRAW_PIXELS_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A0A, .hex);
pub const GL_FENCE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A0B, .hex);
pub const GL_APPLE_float_pixels = @as(c_int, 1);
pub const GL_HALF_APPLE = @as(c_int, 0x140B);
pub const GL_RGBA_FLOAT32_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8814, .hex);
pub const GL_RGB_FLOAT32_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8815, .hex);
pub const GL_ALPHA_FLOAT32_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8816, .hex);
pub const GL_INTENSITY_FLOAT32_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8817, .hex);
pub const GL_LUMINANCE_FLOAT32_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8818, .hex);
pub const GL_LUMINANCE_ALPHA_FLOAT32_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8819, .hex);
pub const GL_RGBA_FLOAT16_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881A, .hex);
pub const GL_RGB_FLOAT16_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881B, .hex);
pub const GL_ALPHA_FLOAT16_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881C, .hex);
pub const GL_INTENSITY_FLOAT16_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881D, .hex);
pub const GL_LUMINANCE_FLOAT16_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881E, .hex);
pub const GL_LUMINANCE_ALPHA_FLOAT16_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881F, .hex);
pub const GL_COLOR_FLOAT_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A0F, .hex);
pub const GL_APPLE_flush_buffer_range = @as(c_int, 1);
pub const GL_BUFFER_SERIALIZED_MODIFY_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A12, .hex);
pub const GL_BUFFER_FLUSHING_UNMAP_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A13, .hex);
pub const GL_APPLE_object_purgeable = @as(c_int, 1);
pub const GL_BUFFER_OBJECT_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85B3, .hex);
pub const GL_RELEASED_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A19, .hex);
pub const GL_VOLATILE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A1A, .hex);
pub const GL_RETAINED_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A1B, .hex);
pub const GL_UNDEFINED_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A1C, .hex);
pub const GL_PURGEABLE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A1D, .hex);
pub const GL_APPLE_rgb_422 = @as(c_int, 1);
pub const GL_RGB_422_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A1F, .hex);
pub const GL_UNSIGNED_SHORT_8_8_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85BA, .hex);
pub const GL_UNSIGNED_SHORT_8_8_REV_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85BB, .hex);
pub const GL_RGB_RAW_422_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A51, .hex);
pub const GL_APPLE_row_bytes = @as(c_int, 1);
pub const GL_PACK_ROW_BYTES_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A15, .hex);
pub const GL_UNPACK_ROW_BYTES_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A16, .hex);
pub const GL_APPLE_specular_vector = @as(c_int, 1);
pub const GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85B0, .hex);
pub const GL_APPLE_texture_range = @as(c_int, 1);
pub const GL_TEXTURE_RANGE_LENGTH_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85B7, .hex);
pub const GL_TEXTURE_RANGE_POINTER_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85B8, .hex);
pub const GL_TEXTURE_STORAGE_HINT_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85BC, .hex);
pub const GL_STORAGE_PRIVATE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85BD, .hex);
pub const GL_STORAGE_CACHED_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85BE, .hex);
pub const GL_STORAGE_SHARED_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85BF, .hex);
pub const GL_APPLE_transform_hint = @as(c_int, 1);
pub const GL_TRANSFORM_HINT_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85B1, .hex);
pub const GL_APPLE_vertex_array_object = @as(c_int, 1);
pub const GL_VERTEX_ARRAY_BINDING_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85B5, .hex);
pub const GL_APPLE_vertex_array_range = @as(c_int, 1);
pub const GL_VERTEX_ARRAY_RANGE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851D, .hex);
pub const GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851E, .hex);
pub const GL_VERTEX_ARRAY_STORAGE_HINT_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851F, .hex);
pub const GL_VERTEX_ARRAY_RANGE_POINTER_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8521, .hex);
pub const GL_STORAGE_CLIENT_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85B4, .hex);
pub const GL_APPLE_vertex_program_evaluators = @as(c_int, 1);
pub const GL_VERTEX_ATTRIB_MAP1_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A00, .hex);
pub const GL_VERTEX_ATTRIB_MAP2_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A01, .hex);
pub const GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A02, .hex);
pub const GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A03, .hex);
pub const GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A04, .hex);
pub const GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A05, .hex);
pub const GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A06, .hex);
pub const GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A07, .hex);
pub const GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A08, .hex);
pub const GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A09, .hex);
pub const GL_APPLE_ycbcr_422 = @as(c_int, 1);
pub const GL_YCBCR_422_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85B9, .hex);
pub const GL_ATI_draw_buffers = @as(c_int, 1);
pub const GL_MAX_DRAW_BUFFERS_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8824, .hex);
pub const GL_DRAW_BUFFER0_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8825, .hex);
pub const GL_DRAW_BUFFER1_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8826, .hex);
pub const GL_DRAW_BUFFER2_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8827, .hex);
pub const GL_DRAW_BUFFER3_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8828, .hex);
pub const GL_DRAW_BUFFER4_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8829, .hex);
pub const GL_DRAW_BUFFER5_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882A, .hex);
pub const GL_DRAW_BUFFER6_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882B, .hex);
pub const GL_DRAW_BUFFER7_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882C, .hex);
pub const GL_DRAW_BUFFER8_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882D, .hex);
pub const GL_DRAW_BUFFER9_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882E, .hex);
pub const GL_DRAW_BUFFER10_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882F, .hex);
pub const GL_DRAW_BUFFER11_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8830, .hex);
pub const GL_DRAW_BUFFER12_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8831, .hex);
pub const GL_DRAW_BUFFER13_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8832, .hex);
pub const GL_DRAW_BUFFER14_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8833, .hex);
pub const GL_DRAW_BUFFER15_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8834, .hex);
pub const GL_ATI_element_array = @as(c_int, 1);
pub const GL_ELEMENT_ARRAY_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8768, .hex);
pub const GL_ELEMENT_ARRAY_TYPE_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8769, .hex);
pub const GL_ELEMENT_ARRAY_POINTER_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x876A, .hex);
pub const GL_ATI_envmap_bumpmap = @as(c_int, 1);
pub const GL_BUMP_ROT_MATRIX_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8775, .hex);
pub const GL_BUMP_ROT_MATRIX_SIZE_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8776, .hex);
pub const GL_BUMP_NUM_TEX_UNITS_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8777, .hex);
pub const GL_BUMP_TEX_UNITS_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8778, .hex);
pub const GL_DUDV_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8779, .hex);
pub const GL_DU8DV8_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x877A, .hex);
pub const GL_BUMP_ENVMAP_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x877B, .hex);
pub const GL_BUMP_TARGET_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x877C, .hex);
pub const GL_ATI_fragment_shader = @as(c_int, 1);
pub const GL_FRAGMENT_SHADER_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8920, .hex);
pub const GL_REG_0_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8921, .hex);
pub const GL_REG_1_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8922, .hex);
pub const GL_REG_2_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8923, .hex);
pub const GL_REG_3_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8924, .hex);
pub const GL_REG_4_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8925, .hex);
pub const GL_REG_5_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8926, .hex);
pub const GL_REG_6_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8927, .hex);
pub const GL_REG_7_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8928, .hex);
pub const GL_REG_8_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8929, .hex);
pub const GL_REG_9_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x892A, .hex);
pub const GL_REG_10_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x892B, .hex);
pub const GL_REG_11_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x892C, .hex);
pub const GL_REG_12_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x892D, .hex);
pub const GL_REG_13_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x892E, .hex);
pub const GL_REG_14_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x892F, .hex);
pub const GL_REG_15_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8930, .hex);
pub const GL_REG_16_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8931, .hex);
pub const GL_REG_17_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8932, .hex);
pub const GL_REG_18_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8933, .hex);
pub const GL_REG_19_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8934, .hex);
pub const GL_REG_20_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8935, .hex);
pub const GL_REG_21_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8936, .hex);
pub const GL_REG_22_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8937, .hex);
pub const GL_REG_23_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8938, .hex);
pub const GL_REG_24_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8939, .hex);
pub const GL_REG_25_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x893A, .hex);
pub const GL_REG_26_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x893B, .hex);
pub const GL_REG_27_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x893C, .hex);
pub const GL_REG_28_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x893D, .hex);
pub const GL_REG_29_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x893E, .hex);
pub const GL_REG_30_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x893F, .hex);
pub const GL_REG_31_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8940, .hex);
pub const GL_CON_0_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8941, .hex);
pub const GL_CON_1_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8942, .hex);
pub const GL_CON_2_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8943, .hex);
pub const GL_CON_3_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8944, .hex);
pub const GL_CON_4_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8945, .hex);
pub const GL_CON_5_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8946, .hex);
pub const GL_CON_6_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8947, .hex);
pub const GL_CON_7_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8948, .hex);
pub const GL_CON_8_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8949, .hex);
pub const GL_CON_9_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x894A, .hex);
pub const GL_CON_10_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x894B, .hex);
pub const GL_CON_11_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x894C, .hex);
pub const GL_CON_12_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x894D, .hex);
pub const GL_CON_13_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x894E, .hex);
pub const GL_CON_14_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x894F, .hex);
pub const GL_CON_15_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8950, .hex);
pub const GL_CON_16_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8951, .hex);
pub const GL_CON_17_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8952, .hex);
pub const GL_CON_18_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8953, .hex);
pub const GL_CON_19_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8954, .hex);
pub const GL_CON_20_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8955, .hex);
pub const GL_CON_21_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8956, .hex);
pub const GL_CON_22_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8957, .hex);
pub const GL_CON_23_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8958, .hex);
pub const GL_CON_24_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8959, .hex);
pub const GL_CON_25_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x895A, .hex);
pub const GL_CON_26_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x895B, .hex);
pub const GL_CON_27_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x895C, .hex);
pub const GL_CON_28_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x895D, .hex);
pub const GL_CON_29_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x895E, .hex);
pub const GL_CON_30_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x895F, .hex);
pub const GL_CON_31_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8960, .hex);
pub const GL_MOV_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8961, .hex);
pub const GL_ADD_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8963, .hex);
pub const GL_MUL_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8964, .hex);
pub const GL_SUB_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8965, .hex);
pub const GL_DOT3_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8966, .hex);
pub const GL_DOT4_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8967, .hex);
pub const GL_MAD_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8968, .hex);
pub const GL_LERP_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8969, .hex);
pub const GL_CND_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x896A, .hex);
pub const GL_CND0_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x896B, .hex);
pub const GL_DOT2_ADD_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x896C, .hex);
pub const GL_SECONDARY_INTERPOLATOR_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x896D, .hex);
pub const GL_NUM_FRAGMENT_REGISTERS_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x896E, .hex);
pub const GL_NUM_FRAGMENT_CONSTANTS_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x896F, .hex);
pub const GL_NUM_PASSES_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8970, .hex);
pub const GL_NUM_INSTRUCTIONS_PER_PASS_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8971, .hex);
pub const GL_NUM_INSTRUCTIONS_TOTAL_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8972, .hex);
pub const GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8973, .hex);
pub const GL_NUM_LOOPBACK_COMPONENTS_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8974, .hex);
pub const GL_COLOR_ALPHA_PAIRING_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8975, .hex);
pub const GL_SWIZZLE_STR_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8976, .hex);
pub const GL_SWIZZLE_STQ_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8977, .hex);
pub const GL_SWIZZLE_STR_DR_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8978, .hex);
pub const GL_SWIZZLE_STQ_DQ_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8979, .hex);
pub const GL_SWIZZLE_STRQ_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x897A, .hex);
pub const GL_SWIZZLE_STRQ_DQ_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x897B, .hex);
pub const GL_RED_BIT_ATI = @as(c_int, 0x00000001);
pub const GL_GREEN_BIT_ATI = @as(c_int, 0x00000002);
pub const GL_BLUE_BIT_ATI = @as(c_int, 0x00000004);
pub const GL_2X_BIT_ATI = @as(c_int, 0x00000001);
pub const GL_4X_BIT_ATI = @as(c_int, 0x00000002);
pub const GL_8X_BIT_ATI = @as(c_int, 0x00000004);
pub const GL_HALF_BIT_ATI = @as(c_int, 0x00000008);
pub const GL_QUARTER_BIT_ATI = @as(c_int, 0x00000010);
pub const GL_EIGHTH_BIT_ATI = @as(c_int, 0x00000020);
pub const GL_SATURATE_BIT_ATI = @as(c_int, 0x00000040);
pub const GL_COMP_BIT_ATI = @as(c_int, 0x00000002);
pub const GL_NEGATE_BIT_ATI = @as(c_int, 0x00000004);
pub const GL_BIAS_BIT_ATI = @as(c_int, 0x00000008);
pub const GL_ATI_map_object_buffer = @as(c_int, 1);
pub const GL_ATI_meminfo = @as(c_int, 1);
pub const GL_VBO_FREE_MEMORY_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87FB, .hex);
pub const GL_TEXTURE_FREE_MEMORY_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87FC, .hex);
pub const GL_RENDERBUFFER_FREE_MEMORY_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87FD, .hex);
pub const GL_ATI_pixel_format_float = @as(c_int, 1);
pub const GL_RGBA_FLOAT_MODE_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8820, .hex);
pub const GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8835, .hex);
pub const GL_ATI_pn_triangles = @as(c_int, 1);
pub const GL_PN_TRIANGLES_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87F0, .hex);
pub const GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87F1, .hex);
pub const GL_PN_TRIANGLES_POINT_MODE_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87F2, .hex);
pub const GL_PN_TRIANGLES_NORMAL_MODE_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87F3, .hex);
pub const GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87F4, .hex);
pub const GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87F5, .hex);
pub const GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87F6, .hex);
pub const GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87F7, .hex);
pub const GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87F8, .hex);
pub const GL_ATI_separate_stencil = @as(c_int, 1);
pub const GL_STENCIL_BACK_FUNC_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8800, .hex);
pub const GL_STENCIL_BACK_FAIL_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8801, .hex);
pub const GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8802, .hex);
pub const GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8803, .hex);
pub const GL_ATI_text_fragment_shader = @as(c_int, 1);
pub const GL_TEXT_FRAGMENT_SHADER_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8200, .hex);
pub const GL_ATI_texture_env_combine3 = @as(c_int, 1);
pub const GL_MODULATE_ADD_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8744, .hex);
pub const GL_MODULATE_SIGNED_ADD_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8745, .hex);
pub const GL_MODULATE_SUBTRACT_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8746, .hex);
pub const GL_ATI_texture_float = @as(c_int, 1);
pub const GL_RGBA_FLOAT32_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8814, .hex);
pub const GL_RGB_FLOAT32_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8815, .hex);
pub const GL_ALPHA_FLOAT32_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8816, .hex);
pub const GL_INTENSITY_FLOAT32_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8817, .hex);
pub const GL_LUMINANCE_FLOAT32_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8818, .hex);
pub const GL_LUMINANCE_ALPHA_FLOAT32_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8819, .hex);
pub const GL_RGBA_FLOAT16_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881A, .hex);
pub const GL_RGB_FLOAT16_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881B, .hex);
pub const GL_ALPHA_FLOAT16_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881C, .hex);
pub const GL_INTENSITY_FLOAT16_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881D, .hex);
pub const GL_LUMINANCE_FLOAT16_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881E, .hex);
pub const GL_LUMINANCE_ALPHA_FLOAT16_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881F, .hex);
pub const GL_ATI_texture_mirror_once = @as(c_int, 1);
pub const GL_MIRROR_CLAMP_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8742, .hex);
pub const GL_MIRROR_CLAMP_TO_EDGE_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8743, .hex);
pub const GL_ATI_vertex_array_object = @as(c_int, 1);
pub const GL_STATIC_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8760, .hex);
pub const GL_DYNAMIC_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8761, .hex);
pub const GL_PRESERVE_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8762, .hex);
pub const GL_DISCARD_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8763, .hex);
pub const GL_OBJECT_BUFFER_SIZE_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8764, .hex);
pub const GL_OBJECT_BUFFER_USAGE_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8765, .hex);
pub const GL_ARRAY_OBJECT_BUFFER_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8766, .hex);
pub const GL_ARRAY_OBJECT_OFFSET_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8767, .hex);
pub const GL_ATI_vertex_attrib_array_object = @as(c_int, 1);
pub const GL_ATI_vertex_streams = @as(c_int, 1);
pub const GL_MAX_VERTEX_STREAMS_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x876B, .hex);
pub const GL_VERTEX_STREAM0_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x876C, .hex);
pub const GL_VERTEX_STREAM1_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x876D, .hex);
pub const GL_VERTEX_STREAM2_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x876E, .hex);
pub const GL_VERTEX_STREAM3_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x876F, .hex);
pub const GL_VERTEX_STREAM4_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8770, .hex);
pub const GL_VERTEX_STREAM5_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8771, .hex);
pub const GL_VERTEX_STREAM6_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8772, .hex);
pub const GL_VERTEX_STREAM7_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8773, .hex);
pub const GL_VERTEX_SOURCE_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8774, .hex);
pub const GL_EXT_422_pixels = @as(c_int, 1);
pub const GL_422_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80CC, .hex);
pub const GL_422_REV_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80CD, .hex);
pub const GL_422_AVERAGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80CE, .hex);
pub const GL_422_REV_AVERAGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80CF, .hex);
pub const GL_EXT_EGL_image_storage = @as(c_int, 1);
pub const GL_EXT_EGL_sync = @as(c_int, 1);
pub const GL_EXT_abgr = @as(c_int, 1);
pub const GL_ABGR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8000, .hex);
pub const GL_EXT_bgra = @as(c_int, 1);
pub const GL_BGR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E0, .hex);
pub const GL_BGRA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E1, .hex);
pub const GL_EXT_bindable_uniform = @as(c_int, 1);
pub const GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE2, .hex);
pub const GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE3, .hex);
pub const GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE4, .hex);
pub const GL_MAX_BINDABLE_UNIFORM_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DED, .hex);
pub const GL_UNIFORM_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DEE, .hex);
pub const GL_UNIFORM_BUFFER_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DEF, .hex);
pub const GL_EXT_blend_color = @as(c_int, 1);
pub const GL_CONSTANT_COLOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8001, .hex);
pub const GL_ONE_MINUS_CONSTANT_COLOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8002, .hex);
pub const GL_CONSTANT_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8003, .hex);
pub const GL_ONE_MINUS_CONSTANT_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8004, .hex);
pub const GL_BLEND_COLOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8005, .hex);
pub const GL_EXT_blend_equation_separate = @as(c_int, 1);
pub const GL_BLEND_EQUATION_RGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8009, .hex);
pub const GL_BLEND_EQUATION_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x883D, .hex);
pub const GL_EXT_blend_func_separate = @as(c_int, 1);
pub const GL_BLEND_DST_RGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80C8, .hex);
pub const GL_BLEND_SRC_RGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80C9, .hex);
pub const GL_BLEND_DST_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80CA, .hex);
pub const GL_BLEND_SRC_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80CB, .hex);
pub const GL_EXT_blend_logic_op = @as(c_int, 1);
pub const GL_EXT_blend_minmax = @as(c_int, 1);
pub const GL_MIN_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8007, .hex);
pub const GL_MAX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8008, .hex);
pub const GL_FUNC_ADD_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8006, .hex);
pub const GL_BLEND_EQUATION_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8009, .hex);
pub const GL_EXT_blend_subtract = @as(c_int, 1);
pub const GL_FUNC_SUBTRACT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x800A, .hex);
pub const GL_FUNC_REVERSE_SUBTRACT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x800B, .hex);
pub const GL_EXT_clip_volume_hint = @as(c_int, 1);
pub const GL_CLIP_VOLUME_CLIPPING_HINT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80F0, .hex);
pub const GL_EXT_cmyka = @as(c_int, 1);
pub const GL_CMYK_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x800C, .hex);
pub const GL_CMYKA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x800D, .hex);
pub const GL_PACK_CMYK_HINT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x800E, .hex);
pub const GL_UNPACK_CMYK_HINT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x800F, .hex);
pub const GL_EXT_color_subtable = @as(c_int, 1);
pub const GL_EXT_compiled_vertex_array = @as(c_int, 1);
pub const GL_ARRAY_ELEMENT_LOCK_FIRST_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A8, .hex);
pub const GL_ARRAY_ELEMENT_LOCK_COUNT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A9, .hex);
pub const GL_EXT_convolution = @as(c_int, 1);
pub const GL_CONVOLUTION_1D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8010, .hex);
pub const GL_CONVOLUTION_2D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8011, .hex);
pub const GL_SEPARABLE_2D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8012, .hex);
pub const GL_CONVOLUTION_BORDER_MODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8013, .hex);
pub const GL_CONVOLUTION_FILTER_SCALE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8014, .hex);
pub const GL_CONVOLUTION_FILTER_BIAS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8015, .hex);
pub const GL_REDUCE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8016, .hex);
pub const GL_CONVOLUTION_FORMAT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8017, .hex);
pub const GL_CONVOLUTION_WIDTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8018, .hex);
pub const GL_CONVOLUTION_HEIGHT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8019, .hex);
pub const GL_MAX_CONVOLUTION_WIDTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x801A, .hex);
pub const GL_MAX_CONVOLUTION_HEIGHT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x801B, .hex);
pub const GL_POST_CONVOLUTION_RED_SCALE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x801C, .hex);
pub const GL_POST_CONVOLUTION_GREEN_SCALE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x801D, .hex);
pub const GL_POST_CONVOLUTION_BLUE_SCALE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x801E, .hex);
pub const GL_POST_CONVOLUTION_ALPHA_SCALE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x801F, .hex);
pub const GL_POST_CONVOLUTION_RED_BIAS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8020, .hex);
pub const GL_POST_CONVOLUTION_GREEN_BIAS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8021, .hex);
pub const GL_POST_CONVOLUTION_BLUE_BIAS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8022, .hex);
pub const GL_POST_CONVOLUTION_ALPHA_BIAS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8023, .hex);
pub const GL_EXT_coordinate_frame = @as(c_int, 1);
pub const GL_TANGENT_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8439, .hex);
pub const GL_BINORMAL_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x843A, .hex);
pub const GL_CURRENT_TANGENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x843B, .hex);
pub const GL_CURRENT_BINORMAL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x843C, .hex);
pub const GL_TANGENT_ARRAY_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x843E, .hex);
pub const GL_TANGENT_ARRAY_STRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x843F, .hex);
pub const GL_BINORMAL_ARRAY_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8440, .hex);
pub const GL_BINORMAL_ARRAY_STRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8441, .hex);
pub const GL_TANGENT_ARRAY_POINTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8442, .hex);
pub const GL_BINORMAL_ARRAY_POINTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8443, .hex);
pub const GL_MAP1_TANGENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8444, .hex);
pub const GL_MAP2_TANGENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8445, .hex);
pub const GL_MAP1_BINORMAL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8446, .hex);
pub const GL_MAP2_BINORMAL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8447, .hex);
pub const GL_EXT_copy_texture = @as(c_int, 1);
pub const GL_EXT_cull_vertex = @as(c_int, 1);
pub const GL_CULL_VERTEX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81AA, .hex);
pub const GL_CULL_VERTEX_EYE_POSITION_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81AB, .hex);
pub const GL_CULL_VERTEX_OBJECT_POSITION_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81AC, .hex);
pub const GL_EXT_debug_label = @as(c_int, 1);
pub const GL_PROGRAM_PIPELINE_OBJECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A4F, .hex);
pub const GL_PROGRAM_OBJECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B40, .hex);
pub const GL_SHADER_OBJECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B48, .hex);
pub const GL_BUFFER_OBJECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9151, .hex);
pub const GL_QUERY_OBJECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9153, .hex);
pub const GL_VERTEX_ARRAY_OBJECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9154, .hex);
pub const GL_EXT_debug_marker = @as(c_int, 1);
pub const GL_EXT_depth_bounds_test = @as(c_int, 1);
pub const GL_DEPTH_BOUNDS_TEST_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8890, .hex);
pub const GL_DEPTH_BOUNDS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8891, .hex);
pub const GL_EXT_direct_state_access = @as(c_int, 1);
pub const GL_PROGRAM_MATRIX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E2D, .hex);
pub const GL_TRANSPOSE_PROGRAM_MATRIX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E2E, .hex);
pub const GL_PROGRAM_MATRIX_STACK_DEPTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E2F, .hex);
pub const GL_EXT_draw_buffers2 = @as(c_int, 1);
pub const GL_EXT_draw_instanced = @as(c_int, 1);
pub const GL_EXT_draw_range_elements = @as(c_int, 1);
pub const GL_MAX_ELEMENTS_VERTICES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E8, .hex);
pub const GL_MAX_ELEMENTS_INDICES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E9, .hex);
pub const GL_EXT_external_buffer = @as(c_int, 1);
pub const GL_EXT_fog_coord = @as(c_int, 1);
pub const GL_FOG_COORDINATE_SOURCE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8450, .hex);
pub const GL_FOG_COORDINATE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8451, .hex);
pub const GL_FRAGMENT_DEPTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8452, .hex);
pub const GL_CURRENT_FOG_COORDINATE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8453, .hex);
pub const GL_FOG_COORDINATE_ARRAY_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8454, .hex);
pub const GL_FOG_COORDINATE_ARRAY_STRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8455, .hex);
pub const GL_FOG_COORDINATE_ARRAY_POINTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8456, .hex);
pub const GL_FOG_COORDINATE_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8457, .hex);
pub const GL_EXT_framebuffer_blit = @as(c_int, 1);
pub const GL_READ_FRAMEBUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA8, .hex);
pub const GL_DRAW_FRAMEBUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA9, .hex);
pub const GL_DRAW_FRAMEBUFFER_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA6, .hex);
pub const GL_READ_FRAMEBUFFER_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAA, .hex);
pub const GL_EXT_framebuffer_multisample = @as(c_int, 1);
pub const GL_RENDERBUFFER_SAMPLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAB, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D56, .hex);
pub const GL_MAX_SAMPLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D57, .hex);
pub const GL_EXT_framebuffer_multisample_blit_scaled = @as(c_int, 1);
pub const GL_SCALED_RESOLVE_FASTEST_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90BA, .hex);
pub const GL_SCALED_RESOLVE_NICEST_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90BB, .hex);
pub const GL_EXT_framebuffer_object = @as(c_int, 1);
pub const GL_INVALID_FRAMEBUFFER_OPERATION_EXT = @as(c_int, 0x0506);
pub const GL_MAX_RENDERBUFFER_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E8, .hex);
pub const GL_FRAMEBUFFER_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA6, .hex);
pub const GL_RENDERBUFFER_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA7, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD0, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD1, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD2, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD3, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD4, .hex);
pub const GL_FRAMEBUFFER_COMPLETE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD5, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD6, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD7, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD9, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDA, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDB, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDC, .hex);
pub const GL_FRAMEBUFFER_UNSUPPORTED_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDD, .hex);
pub const GL_MAX_COLOR_ATTACHMENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDF, .hex);
pub const GL_COLOR_ATTACHMENT0_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE0, .hex);
pub const GL_COLOR_ATTACHMENT1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE1, .hex);
pub const GL_COLOR_ATTACHMENT2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE2, .hex);
pub const GL_COLOR_ATTACHMENT3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE3, .hex);
pub const GL_COLOR_ATTACHMENT4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE4, .hex);
pub const GL_COLOR_ATTACHMENT5_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE5, .hex);
pub const GL_COLOR_ATTACHMENT6_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE6, .hex);
pub const GL_COLOR_ATTACHMENT7_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE7, .hex);
pub const GL_COLOR_ATTACHMENT8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE8, .hex);
pub const GL_COLOR_ATTACHMENT9_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE9, .hex);
pub const GL_COLOR_ATTACHMENT10_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEA, .hex);
pub const GL_COLOR_ATTACHMENT11_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEB, .hex);
pub const GL_COLOR_ATTACHMENT12_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEC, .hex);
pub const GL_COLOR_ATTACHMENT13_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CED, .hex);
pub const GL_COLOR_ATTACHMENT14_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEE, .hex);
pub const GL_COLOR_ATTACHMENT15_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEF, .hex);
pub const GL_DEPTH_ATTACHMENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D00, .hex);
pub const GL_STENCIL_ATTACHMENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D20, .hex);
pub const GL_FRAMEBUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D40, .hex);
pub const GL_RENDERBUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D41, .hex);
pub const GL_RENDERBUFFER_WIDTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D42, .hex);
pub const GL_RENDERBUFFER_HEIGHT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D43, .hex);
pub const GL_RENDERBUFFER_INTERNAL_FORMAT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D44, .hex);
pub const GL_STENCIL_INDEX1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D46, .hex);
pub const GL_STENCIL_INDEX4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D47, .hex);
pub const GL_STENCIL_INDEX8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D48, .hex);
pub const GL_STENCIL_INDEX16_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D49, .hex);
pub const GL_RENDERBUFFER_RED_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D50, .hex);
pub const GL_RENDERBUFFER_GREEN_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D51, .hex);
pub const GL_RENDERBUFFER_BLUE_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D52, .hex);
pub const GL_RENDERBUFFER_ALPHA_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D53, .hex);
pub const GL_RENDERBUFFER_DEPTH_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D54, .hex);
pub const GL_RENDERBUFFER_STENCIL_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D55, .hex);
pub const GL_EXT_framebuffer_sRGB = @as(c_int, 1);
pub const GL_FRAMEBUFFER_SRGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DB9, .hex);
pub const GL_FRAMEBUFFER_SRGB_CAPABLE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DBA, .hex);
pub const GL_EXT_geometry_shader4 = @as(c_int, 1);
pub const GL_GEOMETRY_SHADER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD9, .hex);
pub const GL_GEOMETRY_VERTICES_OUT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDA, .hex);
pub const GL_GEOMETRY_INPUT_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDB, .hex);
pub const GL_GEOMETRY_OUTPUT_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDC, .hex);
pub const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C29, .hex);
pub const GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDD, .hex);
pub const GL_MAX_VERTEX_VARYING_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDE, .hex);
pub const GL_MAX_VARYING_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4B, .hex);
pub const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDF, .hex);
pub const GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE0, .hex);
pub const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE1, .hex);
pub const GL_LINES_ADJACENCY_EXT = @as(c_int, 0x000A);
pub const GL_LINE_STRIP_ADJACENCY_EXT = @as(c_int, 0x000B);
pub const GL_TRIANGLES_ADJACENCY_EXT = @as(c_int, 0x000C);
pub const GL_TRIANGLE_STRIP_ADJACENCY_EXT = @as(c_int, 0x000D);
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA8, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA9, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA7, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD4, .hex);
pub const GL_PROGRAM_POINT_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8642, .hex);
pub const GL_EXT_gpu_program_parameters = @as(c_int, 1);
pub const GL_EXT_gpu_shader4 = @as(c_int, 1);
pub const GL_SAMPLER_1D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC0, .hex);
pub const GL_SAMPLER_2D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC1, .hex);
pub const GL_SAMPLER_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC2, .hex);
pub const GL_SAMPLER_1D_ARRAY_SHADOW_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC3, .hex);
pub const GL_SAMPLER_2D_ARRAY_SHADOW_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC4, .hex);
pub const GL_SAMPLER_CUBE_SHADOW_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC5, .hex);
pub const GL_UNSIGNED_INT_VEC2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC6, .hex);
pub const GL_UNSIGNED_INT_VEC3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC7, .hex);
pub const GL_UNSIGNED_INT_VEC4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC8, .hex);
pub const GL_INT_SAMPLER_1D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC9, .hex);
pub const GL_INT_SAMPLER_2D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCA, .hex);
pub const GL_INT_SAMPLER_3D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCB, .hex);
pub const GL_INT_SAMPLER_CUBE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCC, .hex);
pub const GL_INT_SAMPLER_2D_RECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCD, .hex);
pub const GL_INT_SAMPLER_1D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCE, .hex);
pub const GL_INT_SAMPLER_2D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCF, .hex);
pub const GL_INT_SAMPLER_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD0, .hex);
pub const GL_UNSIGNED_INT_SAMPLER_1D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD1, .hex);
pub const GL_UNSIGNED_INT_SAMPLER_2D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD2, .hex);
pub const GL_UNSIGNED_INT_SAMPLER_3D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD3, .hex);
pub const GL_UNSIGNED_INT_SAMPLER_CUBE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD4, .hex);
pub const GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD5, .hex);
pub const GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD6, .hex);
pub const GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD7, .hex);
pub const GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD8, .hex);
pub const GL_MIN_PROGRAM_TEXEL_OFFSET_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8904, .hex);
pub const GL_MAX_PROGRAM_TEXEL_OFFSET_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8905, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FD, .hex);
pub const GL_EXT_histogram = @as(c_int, 1);
pub const GL_HISTOGRAM_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8024, .hex);
pub const GL_PROXY_HISTOGRAM_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8025, .hex);
pub const GL_HISTOGRAM_WIDTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8026, .hex);
pub const GL_HISTOGRAM_FORMAT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8027, .hex);
pub const GL_HISTOGRAM_RED_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8028, .hex);
pub const GL_HISTOGRAM_GREEN_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8029, .hex);
pub const GL_HISTOGRAM_BLUE_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802A, .hex);
pub const GL_HISTOGRAM_ALPHA_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802B, .hex);
pub const GL_HISTOGRAM_LUMINANCE_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802C, .hex);
pub const GL_HISTOGRAM_SINK_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802D, .hex);
pub const GL_MINMAX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802E, .hex);
pub const GL_MINMAX_FORMAT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802F, .hex);
pub const GL_MINMAX_SINK_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8030, .hex);
pub const GL_TABLE_TOO_LARGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8031, .hex);
pub const GL_EXT_index_array_formats = @as(c_int, 1);
pub const GL_IUI_V2F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81AD, .hex);
pub const GL_IUI_V3F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81AE, .hex);
pub const GL_IUI_N3F_V2F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81AF, .hex);
pub const GL_IUI_N3F_V3F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81B0, .hex);
pub const GL_T2F_IUI_V2F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81B1, .hex);
pub const GL_T2F_IUI_V3F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81B2, .hex);
pub const GL_T2F_IUI_N3F_V2F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81B3, .hex);
pub const GL_T2F_IUI_N3F_V3F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81B4, .hex);
pub const GL_EXT_index_func = @as(c_int, 1);
pub const GL_INDEX_TEST_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81B5, .hex);
pub const GL_INDEX_TEST_FUNC_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81B6, .hex);
pub const GL_INDEX_TEST_REF_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81B7, .hex);
pub const GL_EXT_index_material = @as(c_int, 1);
pub const GL_INDEX_MATERIAL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81B8, .hex);
pub const GL_INDEX_MATERIAL_PARAMETER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81B9, .hex);
pub const GL_INDEX_MATERIAL_FACE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81BA, .hex);
pub const GL_EXT_index_texture = @as(c_int, 1);
pub const GL_EXT_light_texture = @as(c_int, 1);
pub const GL_FRAGMENT_MATERIAL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8349, .hex);
pub const GL_FRAGMENT_NORMAL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x834A, .hex);
pub const GL_FRAGMENT_COLOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x834C, .hex);
pub const GL_ATTENUATION_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x834D, .hex);
pub const GL_SHADOW_ATTENUATION_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x834E, .hex);
pub const GL_TEXTURE_APPLICATION_MODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x834F, .hex);
pub const GL_TEXTURE_LIGHT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8350, .hex);
pub const GL_TEXTURE_MATERIAL_FACE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8351, .hex);
pub const GL_TEXTURE_MATERIAL_PARAMETER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8352, .hex);
pub const GL_EXT_memory_object = @as(c_int, 1);
pub const GL_TEXTURE_TILING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9580, .hex);
pub const GL_DEDICATED_MEMORY_OBJECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9581, .hex);
pub const GL_PROTECTED_MEMORY_OBJECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x959B, .hex);
pub const GL_NUM_TILING_TYPES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9582, .hex);
pub const GL_TILING_TYPES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9583, .hex);
pub const GL_OPTIMAL_TILING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9584, .hex);
pub const GL_LINEAR_TILING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9585, .hex);
pub const GL_NUM_DEVICE_UUIDS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9596, .hex);
pub const GL_DEVICE_UUID_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9597, .hex);
pub const GL_DRIVER_UUID_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9598, .hex);
pub const GL_UUID_SIZE_EXT = @as(c_int, 16);
pub const GL_EXT_memory_object_fd = @as(c_int, 1);
pub const GL_HANDLE_TYPE_OPAQUE_FD_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9586, .hex);
pub const GL_EXT_memory_object_win32 = @as(c_int, 1);
pub const GL_HANDLE_TYPE_OPAQUE_WIN32_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9587, .hex);
pub const GL_HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9588, .hex);
pub const GL_DEVICE_LUID_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9599, .hex);
pub const GL_DEVICE_NODE_MASK_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x959A, .hex);
pub const GL_LUID_SIZE_EXT = @as(c_int, 8);
pub const GL_HANDLE_TYPE_D3D12_TILEPOOL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9589, .hex);
pub const GL_HANDLE_TYPE_D3D12_RESOURCE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x958A, .hex);
pub const GL_HANDLE_TYPE_D3D11_IMAGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x958B, .hex);
pub const GL_HANDLE_TYPE_D3D11_IMAGE_KMT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x958C, .hex);
pub const GL_EXT_misc_attribute = @as(c_int, 1);
pub const GL_EXT_multi_draw_arrays = @as(c_int, 1);
pub const GL_EXT_multisample = @as(c_int, 1);
pub const GL_MULTISAMPLE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809D, .hex);
pub const GL_SAMPLE_ALPHA_TO_MASK_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809E, .hex);
pub const GL_SAMPLE_ALPHA_TO_ONE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809F, .hex);
pub const GL_SAMPLE_MASK_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A0, .hex);
pub const GL_1PASS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A1, .hex);
pub const GL_2PASS_0_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A2, .hex);
pub const GL_2PASS_1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A3, .hex);
pub const GL_4PASS_0_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A4, .hex);
pub const GL_4PASS_1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A5, .hex);
pub const GL_4PASS_2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A6, .hex);
pub const GL_4PASS_3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A7, .hex);
pub const GL_SAMPLE_BUFFERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A8, .hex);
pub const GL_SAMPLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A9, .hex);
pub const GL_SAMPLE_MASK_VALUE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AA, .hex);
pub const GL_SAMPLE_MASK_INVERT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AB, .hex);
pub const GL_SAMPLE_PATTERN_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AC, .hex);
pub const GL_MULTISAMPLE_BIT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex);
pub const GL_EXT_multiview_tessellation_geometry_shader = @as(c_int, 1);
pub const GL_EXT_multiview_texture_multisample = @as(c_int, 1);
pub const GL_EXT_multiview_timer_query = @as(c_int, 1);
pub const GL_EXT_packed_depth_stencil = @as(c_int, 1);
pub const GL_DEPTH_STENCIL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F9, .hex);
pub const GL_UNSIGNED_INT_24_8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84FA, .hex);
pub const GL_DEPTH24_STENCIL8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F0, .hex);
pub const GL_TEXTURE_STENCIL_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F1, .hex);
pub const GL_EXT_packed_float = @as(c_int, 1);
pub const GL_R11F_G11F_B10F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3A, .hex);
pub const GL_UNSIGNED_INT_10F_11F_11F_REV_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3B, .hex);
pub const GL_RGBA_SIGNED_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3C, .hex);
pub const GL_EXT_packed_pixels = @as(c_int, 1);
pub const GL_UNSIGNED_BYTE_3_3_2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8032, .hex);
pub const GL_UNSIGNED_SHORT_4_4_4_4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8033, .hex);
pub const GL_UNSIGNED_SHORT_5_5_5_1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8034, .hex);
pub const GL_UNSIGNED_INT_8_8_8_8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8035, .hex);
pub const GL_UNSIGNED_INT_10_10_10_2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8036, .hex);
pub const GL_EXT_paletted_texture = @as(c_int, 1);
pub const GL_COLOR_INDEX1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E2, .hex);
pub const GL_COLOR_INDEX2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E3, .hex);
pub const GL_COLOR_INDEX4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E4, .hex);
pub const GL_COLOR_INDEX8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E5, .hex);
pub const GL_COLOR_INDEX12_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E6, .hex);
pub const GL_COLOR_INDEX16_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E7, .hex);
pub const GL_TEXTURE_INDEX_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80ED, .hex);
pub const GL_EXT_pixel_buffer_object = @as(c_int, 1);
pub const GL_PIXEL_PACK_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EB, .hex);
pub const GL_PIXEL_UNPACK_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EC, .hex);
pub const GL_PIXEL_PACK_BUFFER_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88ED, .hex);
pub const GL_PIXEL_UNPACK_BUFFER_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EF, .hex);
pub const GL_EXT_pixel_transform = @as(c_int, 1);
pub const GL_PIXEL_TRANSFORM_2D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8330, .hex);
pub const GL_PIXEL_MAG_FILTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8331, .hex);
pub const GL_PIXEL_MIN_FILTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8332, .hex);
pub const GL_PIXEL_CUBIC_WEIGHT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8333, .hex);
pub const GL_CUBIC_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8334, .hex);
pub const GL_AVERAGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8335, .hex);
pub const GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8336, .hex);
pub const GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8337, .hex);
pub const GL_PIXEL_TRANSFORM_2D_MATRIX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8338, .hex);
pub const GL_EXT_pixel_transform_color_table = @as(c_int, 1);
pub const GL_EXT_point_parameters = @as(c_int, 1);
pub const GL_POINT_SIZE_MIN_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8126, .hex);
pub const GL_POINT_SIZE_MAX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8127, .hex);
pub const GL_POINT_FADE_THRESHOLD_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8128, .hex);
pub const GL_DISTANCE_ATTENUATION_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8129, .hex);
pub const GL_EXT_polygon_offset = @as(c_int, 1);
pub const GL_POLYGON_OFFSET_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8037, .hex);
pub const GL_POLYGON_OFFSET_FACTOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8038, .hex);
pub const GL_POLYGON_OFFSET_BIAS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8039, .hex);
pub const GL_EXT_polygon_offset_clamp = @as(c_int, 1);
pub const GL_POLYGON_OFFSET_CLAMP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E1B, .hex);
pub const GL_EXT_post_depth_coverage = @as(c_int, 1);
pub const GL_EXT_provoking_vertex = @as(c_int, 1);
pub const GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4C, .hex);
pub const GL_FIRST_VERTEX_CONVENTION_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4D, .hex);
pub const GL_LAST_VERTEX_CONVENTION_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4E, .hex);
pub const GL_PROVOKING_VERTEX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4F, .hex);
pub const GL_EXT_raster_multisample = @as(c_int, 1);
pub const GL_RASTER_MULTISAMPLE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9327, .hex);
pub const GL_RASTER_SAMPLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9328, .hex);
pub const GL_MAX_RASTER_SAMPLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9329, .hex);
pub const GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x932A, .hex);
pub const GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x932B, .hex);
pub const GL_EFFECTIVE_RASTER_SAMPLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x932C, .hex);
pub const GL_EXT_rescale_normal = @as(c_int, 1);
pub const GL_RESCALE_NORMAL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803A, .hex);
pub const GL_EXT_secondary_color = @as(c_int, 1);
pub const GL_COLOR_SUM_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8458, .hex);
pub const GL_CURRENT_SECONDARY_COLOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8459, .hex);
pub const GL_SECONDARY_COLOR_ARRAY_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845A, .hex);
pub const GL_SECONDARY_COLOR_ARRAY_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845B, .hex);
pub const GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845C, .hex);
pub const GL_SECONDARY_COLOR_ARRAY_POINTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845D, .hex);
pub const GL_SECONDARY_COLOR_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845E, .hex);
pub const GL_EXT_semaphore = @as(c_int, 1);
pub const GL_LAYOUT_GENERAL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x958D, .hex);
pub const GL_LAYOUT_COLOR_ATTACHMENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x958E, .hex);
pub const GL_LAYOUT_DEPTH_STENCIL_ATTACHMENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x958F, .hex);
pub const GL_LAYOUT_DEPTH_STENCIL_READ_ONLY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9590, .hex);
pub const GL_LAYOUT_SHADER_READ_ONLY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9591, .hex);
pub const GL_LAYOUT_TRANSFER_SRC_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9592, .hex);
pub const GL_LAYOUT_TRANSFER_DST_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9593, .hex);
pub const GL_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9530, .hex);
pub const GL_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9531, .hex);
pub const GL_EXT_semaphore_fd = @as(c_int, 1);
pub const GL_EXT_semaphore_win32 = @as(c_int, 1);
pub const GL_HANDLE_TYPE_D3D12_FENCE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9594, .hex);
pub const GL_D3D12_FENCE_VALUE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9595, .hex);
pub const GL_EXT_separate_shader_objects = @as(c_int, 1);
pub const GL_ACTIVE_PROGRAM_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B8D, .hex);
pub const GL_EXT_separate_specular_color = @as(c_int, 1);
pub const GL_LIGHT_MODEL_COLOR_CONTROL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F8, .hex);
pub const GL_SINGLE_COLOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F9, .hex);
pub const GL_SEPARATE_SPECULAR_COLOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81FA, .hex);
pub const GL_EXT_shader_framebuffer_fetch = @as(c_int, 1);
pub const GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A52, .hex);
pub const GL_EXT_shader_framebuffer_fetch_non_coherent = @as(c_int, 1);
pub const GL_EXT_shader_image_load_formatted = @as(c_int, 1);
pub const GL_EXT_shader_image_load_store = @as(c_int, 1);
pub const GL_MAX_IMAGE_UNITS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F38, .hex);
pub const GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F39, .hex);
pub const GL_IMAGE_BINDING_NAME_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3A, .hex);
pub const GL_IMAGE_BINDING_LEVEL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3B, .hex);
pub const GL_IMAGE_BINDING_LAYERED_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3C, .hex);
pub const GL_IMAGE_BINDING_LAYER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3D, .hex);
pub const GL_IMAGE_BINDING_ACCESS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3E, .hex);
pub const GL_IMAGE_1D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x904C, .hex);
pub const GL_IMAGE_2D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x904D, .hex);
pub const GL_IMAGE_3D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x904E, .hex);
pub const GL_IMAGE_2D_RECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x904F, .hex);
pub const GL_IMAGE_CUBE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9050, .hex);
pub const GL_IMAGE_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9051, .hex);
pub const GL_IMAGE_1D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9052, .hex);
pub const GL_IMAGE_2D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9053, .hex);
pub const GL_IMAGE_CUBE_MAP_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9054, .hex);
pub const GL_IMAGE_2D_MULTISAMPLE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9055, .hex);
pub const GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9056, .hex);
pub const GL_INT_IMAGE_1D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9057, .hex);
pub const GL_INT_IMAGE_2D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9058, .hex);
pub const GL_INT_IMAGE_3D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9059, .hex);
pub const GL_INT_IMAGE_2D_RECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905A, .hex);
pub const GL_INT_IMAGE_CUBE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905B, .hex);
pub const GL_INT_IMAGE_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905C, .hex);
pub const GL_INT_IMAGE_1D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905D, .hex);
pub const GL_INT_IMAGE_2D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905E, .hex);
pub const GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905F, .hex);
pub const GL_INT_IMAGE_2D_MULTISAMPLE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9060, .hex);
pub const GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9061, .hex);
pub const GL_UNSIGNED_INT_IMAGE_1D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9062, .hex);
pub const GL_UNSIGNED_INT_IMAGE_2D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9063, .hex);
pub const GL_UNSIGNED_INT_IMAGE_3D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9064, .hex);
pub const GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9065, .hex);
pub const GL_UNSIGNED_INT_IMAGE_CUBE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9066, .hex);
pub const GL_UNSIGNED_INT_IMAGE_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9067, .hex);
pub const GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9068, .hex);
pub const GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9069, .hex);
pub const GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906A, .hex);
pub const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906B, .hex);
pub const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906C, .hex);
pub const GL_MAX_IMAGE_SAMPLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906D, .hex);
pub const GL_IMAGE_BINDING_FORMAT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906E, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT = @as(c_int, 0x00000001);
pub const GL_ELEMENT_ARRAY_BARRIER_BIT_EXT = @as(c_int, 0x00000002);
pub const GL_UNIFORM_BARRIER_BIT_EXT = @as(c_int, 0x00000004);
pub const GL_TEXTURE_FETCH_BARRIER_BIT_EXT = @as(c_int, 0x00000008);
pub const GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT = @as(c_int, 0x00000020);
pub const GL_COMMAND_BARRIER_BIT_EXT = @as(c_int, 0x00000040);
pub const GL_PIXEL_BUFFER_BARRIER_BIT_EXT = @as(c_int, 0x00000080);
pub const GL_TEXTURE_UPDATE_BARRIER_BIT_EXT = @as(c_int, 0x00000100);
pub const GL_BUFFER_UPDATE_BARRIER_BIT_EXT = @as(c_int, 0x00000200);
pub const GL_FRAMEBUFFER_BARRIER_BIT_EXT = @as(c_int, 0x00000400);
pub const GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT = @as(c_int, 0x00000800);
pub const GL_ATOMIC_COUNTER_BARRIER_BIT_EXT = @as(c_int, 0x00001000);
pub const GL_ALL_BARRIER_BITS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFFFFFF, .hex);
pub const GL_EXT_shader_integer_mix = @as(c_int, 1);
pub const GL_EXT_shader_samples_identical = @as(c_int, 1);
pub const GL_EXT_shadow_funcs = @as(c_int, 1);
pub const GL_EXT_shared_texture_palette = @as(c_int, 1);
pub const GL_SHARED_TEXTURE_PALETTE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81FB, .hex);
pub const GL_EXT_sparse_texture2 = @as(c_int, 1);
pub const GL_EXT_stencil_clear_tag = @as(c_int, 1);
pub const GL_STENCIL_TAG_BITS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F2, .hex);
pub const GL_STENCIL_CLEAR_TAG_VALUE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F3, .hex);
pub const GL_EXT_stencil_two_side = @as(c_int, 1);
pub const GL_STENCIL_TEST_TWO_SIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8910, .hex);
pub const GL_ACTIVE_STENCIL_FACE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8911, .hex);
pub const GL_EXT_stencil_wrap = @as(c_int, 1);
pub const GL_INCR_WRAP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8507, .hex);
pub const GL_DECR_WRAP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8508, .hex);
pub const GL_EXT_subtexture = @as(c_int, 1);
pub const GL_EXT_texture = @as(c_int, 1);
pub const GL_ALPHA4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803B, .hex);
pub const GL_ALPHA8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803C, .hex);
pub const GL_ALPHA12_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803D, .hex);
pub const GL_ALPHA16_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803E, .hex);
pub const GL_LUMINANCE4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803F, .hex);
pub const GL_LUMINANCE8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8040, .hex);
pub const GL_LUMINANCE12_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8041, .hex);
pub const GL_LUMINANCE16_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8042, .hex);
pub const GL_LUMINANCE4_ALPHA4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8043, .hex);
pub const GL_LUMINANCE6_ALPHA2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8044, .hex);
pub const GL_LUMINANCE8_ALPHA8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8045, .hex);
pub const GL_LUMINANCE12_ALPHA4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8046, .hex);
pub const GL_LUMINANCE12_ALPHA12_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8047, .hex);
pub const GL_LUMINANCE16_ALPHA16_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8048, .hex);
pub const GL_INTENSITY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8049, .hex);
pub const GL_INTENSITY4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804A, .hex);
pub const GL_INTENSITY8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804B, .hex);
pub const GL_INTENSITY12_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804C, .hex);
pub const GL_INTENSITY16_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804D, .hex);
pub const GL_RGB2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804E, .hex);
pub const GL_RGB4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804F, .hex);
pub const GL_RGB5_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8050, .hex);
pub const GL_RGB8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8051, .hex);
pub const GL_RGB10_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8052, .hex);
pub const GL_RGB12_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8053, .hex);
pub const GL_RGB16_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8054, .hex);
pub const GL_RGBA2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8055, .hex);
pub const GL_RGBA4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8056, .hex);
pub const GL_RGB5_A1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8057, .hex);
pub const GL_RGBA8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8058, .hex);
pub const GL_RGB10_A2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8059, .hex);
pub const GL_RGBA12_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805A, .hex);
pub const GL_RGBA16_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805B, .hex);
pub const GL_TEXTURE_RED_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805C, .hex);
pub const GL_TEXTURE_GREEN_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805D, .hex);
pub const GL_TEXTURE_BLUE_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805E, .hex);
pub const GL_TEXTURE_ALPHA_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805F, .hex);
pub const GL_TEXTURE_LUMINANCE_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8060, .hex);
pub const GL_TEXTURE_INTENSITY_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8061, .hex);
pub const GL_REPLACE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8062, .hex);
pub const GL_PROXY_TEXTURE_1D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8063, .hex);
pub const GL_PROXY_TEXTURE_2D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8064, .hex);
pub const GL_TEXTURE_TOO_LARGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8065, .hex);
pub const GL_EXT_texture3D = @as(c_int, 1);
pub const GL_PACK_SKIP_IMAGES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806B, .hex);
pub const GL_PACK_IMAGE_HEIGHT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806C, .hex);
pub const GL_UNPACK_SKIP_IMAGES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806D, .hex);
pub const GL_UNPACK_IMAGE_HEIGHT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806E, .hex);
pub const GL_TEXTURE_3D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806F, .hex);
pub const GL_PROXY_TEXTURE_3D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8070, .hex);
pub const GL_TEXTURE_DEPTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8071, .hex);
pub const GL_TEXTURE_WRAP_R_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8072, .hex);
pub const GL_MAX_3D_TEXTURE_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8073, .hex);
pub const GL_EXT_texture_array = @as(c_int, 1);
pub const GL_TEXTURE_1D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C18, .hex);
pub const GL_PROXY_TEXTURE_1D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C19, .hex);
pub const GL_TEXTURE_2D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C1A, .hex);
pub const GL_PROXY_TEXTURE_2D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C1B, .hex);
pub const GL_TEXTURE_BINDING_1D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C1C, .hex);
pub const GL_TEXTURE_BINDING_2D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C1D, .hex);
pub const GL_MAX_ARRAY_TEXTURE_LAYERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FF, .hex);
pub const GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884E, .hex);
pub const GL_EXT_texture_buffer_object = @as(c_int, 1);
pub const GL_TEXTURE_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2A, .hex);
pub const GL_MAX_TEXTURE_BUFFER_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2B, .hex);
pub const GL_TEXTURE_BINDING_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2C, .hex);
pub const GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2D, .hex);
pub const GL_TEXTURE_BUFFER_FORMAT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2E, .hex);
pub const GL_EXT_texture_compression_latc = @as(c_int, 1);
pub const GL_COMPRESSED_LUMINANCE_LATC1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C70, .hex);
pub const GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C71, .hex);
pub const GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C72, .hex);
pub const GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C73, .hex);
pub const GL_EXT_texture_compression_rgtc = @as(c_int, 1);
pub const GL_COMPRESSED_RED_RGTC1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DBB, .hex);
pub const GL_COMPRESSED_SIGNED_RED_RGTC1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DBC, .hex);
pub const GL_COMPRESSED_RED_GREEN_RGTC2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DBD, .hex);
pub const GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DBE, .hex);
pub const GL_EXT_texture_compression_s3tc = @as(c_int, 1);
pub const GL_COMPRESSED_RGB_S3TC_DXT1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F0, .hex);
pub const GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F1, .hex);
pub const GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F2, .hex);
pub const GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F3, .hex);
pub const GL_EXT_texture_cube_map = @as(c_int, 1);
pub const GL_NORMAL_MAP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8511, .hex);
pub const GL_REFLECTION_MAP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8512, .hex);
pub const GL_TEXTURE_CUBE_MAP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8513, .hex);
pub const GL_TEXTURE_BINDING_CUBE_MAP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8514, .hex);
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8515, .hex);
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8516, .hex);
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8517, .hex);
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8518, .hex);
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8519, .hex);
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851A, .hex);
pub const GL_PROXY_TEXTURE_CUBE_MAP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851B, .hex);
pub const GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851C, .hex);
pub const GL_EXT_texture_env_add = @as(c_int, 1);
pub const GL_EXT_texture_env_combine = @as(c_int, 1);
pub const GL_COMBINE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8570, .hex);
pub const GL_COMBINE_RGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8571, .hex);
pub const GL_COMBINE_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8572, .hex);
pub const GL_RGB_SCALE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8573, .hex);
pub const GL_ADD_SIGNED_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8574, .hex);
pub const GL_INTERPOLATE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8575, .hex);
pub const GL_CONSTANT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8576, .hex);
pub const GL_PRIMARY_COLOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8577, .hex);
pub const GL_PREVIOUS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8578, .hex);
pub const GL_SOURCE0_RGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8580, .hex);
pub const GL_SOURCE1_RGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8581, .hex);
pub const GL_SOURCE2_RGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8582, .hex);
pub const GL_SOURCE0_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8588, .hex);
pub const GL_SOURCE1_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8589, .hex);
pub const GL_SOURCE2_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x858A, .hex);
pub const GL_OPERAND0_RGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8590, .hex);
pub const GL_OPERAND1_RGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8591, .hex);
pub const GL_OPERAND2_RGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8592, .hex);
pub const GL_OPERAND0_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8598, .hex);
pub const GL_OPERAND1_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8599, .hex);
pub const GL_OPERAND2_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x859A, .hex);
pub const GL_EXT_texture_env_dot3 = @as(c_int, 1);
pub const GL_DOT3_RGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8740, .hex);
pub const GL_DOT3_RGBA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8741, .hex);
pub const GL_EXT_texture_filter_anisotropic = @as(c_int, 1);
pub const GL_TEXTURE_MAX_ANISOTROPY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84FE, .hex);
pub const GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84FF, .hex);
pub const GL_EXT_texture_filter_minmax = @as(c_int, 1);
pub const GL_TEXTURE_REDUCTION_MODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9366, .hex);
pub const GL_WEIGHTED_AVERAGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9367, .hex);
pub const GL_EXT_texture_integer = @as(c_int, 1);
pub const GL_RGBA32UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D70, .hex);
pub const GL_RGB32UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D71, .hex);
pub const GL_ALPHA32UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D72, .hex);
pub const GL_INTENSITY32UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D73, .hex);
pub const GL_LUMINANCE32UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D74, .hex);
pub const GL_LUMINANCE_ALPHA32UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D75, .hex);
pub const GL_RGBA16UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D76, .hex);
pub const GL_RGB16UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D77, .hex);
pub const GL_ALPHA16UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D78, .hex);
pub const GL_INTENSITY16UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D79, .hex);
pub const GL_LUMINANCE16UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D7A, .hex);
pub const GL_LUMINANCE_ALPHA16UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D7B, .hex);
pub const GL_RGBA8UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D7C, .hex);
pub const GL_RGB8UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D7D, .hex);
pub const GL_ALPHA8UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D7E, .hex);
pub const GL_INTENSITY8UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D7F, .hex);
pub const GL_LUMINANCE8UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D80, .hex);
pub const GL_LUMINANCE_ALPHA8UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D81, .hex);
pub const GL_RGBA32I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D82, .hex);
pub const GL_RGB32I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D83, .hex);
pub const GL_ALPHA32I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D84, .hex);
pub const GL_INTENSITY32I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D85, .hex);
pub const GL_LUMINANCE32I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D86, .hex);
pub const GL_LUMINANCE_ALPHA32I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D87, .hex);
pub const GL_RGBA16I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D88, .hex);
pub const GL_RGB16I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D89, .hex);
pub const GL_ALPHA16I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D8A, .hex);
pub const GL_INTENSITY16I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D8B, .hex);
pub const GL_LUMINANCE16I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D8C, .hex);
pub const GL_LUMINANCE_ALPHA16I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D8D, .hex);
pub const GL_RGBA8I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D8E, .hex);
pub const GL_RGB8I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D8F, .hex);
pub const GL_ALPHA8I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D90, .hex);
pub const GL_INTENSITY8I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D91, .hex);
pub const GL_LUMINANCE8I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D92, .hex);
pub const GL_LUMINANCE_ALPHA8I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D93, .hex);
pub const GL_RED_INTEGER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D94, .hex);
pub const GL_GREEN_INTEGER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D95, .hex);
pub const GL_BLUE_INTEGER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D96, .hex);
pub const GL_ALPHA_INTEGER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D97, .hex);
pub const GL_RGB_INTEGER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D98, .hex);
pub const GL_RGBA_INTEGER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D99, .hex);
pub const GL_BGR_INTEGER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D9A, .hex);
pub const GL_BGRA_INTEGER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D9B, .hex);
pub const GL_LUMINANCE_INTEGER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D9C, .hex);
pub const GL_LUMINANCE_ALPHA_INTEGER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D9D, .hex);
pub const GL_RGBA_INTEGER_MODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D9E, .hex);
pub const GL_EXT_texture_lod_bias = @as(c_int, 1);
pub const GL_MAX_TEXTURE_LOD_BIAS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84FD, .hex);
pub const GL_TEXTURE_FILTER_CONTROL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8500, .hex);
pub const GL_TEXTURE_LOD_BIAS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8501, .hex);
pub const GL_EXT_texture_mirror_clamp = @as(c_int, 1);
pub const GL_MIRROR_CLAMP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8742, .hex);
pub const GL_MIRROR_CLAMP_TO_EDGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8743, .hex);
pub const GL_MIRROR_CLAMP_TO_BORDER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8912, .hex);
pub const GL_EXT_texture_object = @as(c_int, 1);
pub const GL_TEXTURE_PRIORITY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8066, .hex);
pub const GL_TEXTURE_RESIDENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8067, .hex);
pub const GL_TEXTURE_1D_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8068, .hex);
pub const GL_TEXTURE_2D_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8069, .hex);
pub const GL_TEXTURE_3D_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806A, .hex);
pub const GL_EXT_texture_perturb_normal = @as(c_int, 1);
pub const GL_PERTURB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85AE, .hex);
pub const GL_TEXTURE_NORMAL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85AF, .hex);
pub const GL_EXT_texture_sRGB = @as(c_int, 1);
pub const GL_SRGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C40, .hex);
pub const GL_SRGB8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C41, .hex);
pub const GL_SRGB_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C42, .hex);
pub const GL_SRGB8_ALPHA8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C43, .hex);
pub const GL_SLUMINANCE_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C44, .hex);
pub const GL_SLUMINANCE8_ALPHA8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C45, .hex);
pub const GL_SLUMINANCE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C46, .hex);
pub const GL_SLUMINANCE8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C47, .hex);
pub const GL_COMPRESSED_SRGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C48, .hex);
pub const GL_COMPRESSED_SRGB_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C49, .hex);
pub const GL_COMPRESSED_SLUMINANCE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4A, .hex);
pub const GL_COMPRESSED_SLUMINANCE_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4B, .hex);
pub const GL_COMPRESSED_SRGB_S3TC_DXT1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4C, .hex);
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4D, .hex);
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4E, .hex);
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4F, .hex);
pub const GL_EXT_texture_sRGB_R8 = @as(c_int, 1);
pub const GL_SR8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FBD, .hex);
pub const GL_EXT_texture_sRGB_RG8 = @as(c_int, 1);
pub const GL_SRG8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FBE, .hex);
pub const GL_EXT_texture_sRGB_decode = @as(c_int, 1);
pub const GL_TEXTURE_SRGB_DECODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A48, .hex);
pub const GL_DECODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A49, .hex);
pub const GL_SKIP_DECODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A4A, .hex);
pub const GL_EXT_texture_shadow_lod = @as(c_int, 1);
pub const GL_EXT_texture_shared_exponent = @as(c_int, 1);
pub const GL_RGB9_E5_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3D, .hex);
pub const GL_UNSIGNED_INT_5_9_9_9_REV_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3E, .hex);
pub const GL_TEXTURE_SHARED_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3F, .hex);
pub const GL_EXT_texture_snorm = @as(c_int, 1);
pub const GL_ALPHA_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9010, .hex);
pub const GL_LUMINANCE_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9011, .hex);
pub const GL_LUMINANCE_ALPHA_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9012, .hex);
pub const GL_INTENSITY_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9013, .hex);
pub const GL_ALPHA8_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9014, .hex);
pub const GL_LUMINANCE8_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9015, .hex);
pub const GL_LUMINANCE8_ALPHA8_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9016, .hex);
pub const GL_INTENSITY8_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9017, .hex);
pub const GL_ALPHA16_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9018, .hex);
pub const GL_LUMINANCE16_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9019, .hex);
pub const GL_LUMINANCE16_ALPHA16_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x901A, .hex);
pub const GL_INTENSITY16_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x901B, .hex);
pub const GL_RED_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F90, .hex);
pub const GL_RG_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F91, .hex);
pub const GL_RGB_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F92, .hex);
pub const GL_RGBA_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F93, .hex);
pub const GL_EXT_texture_storage = @as(c_int, 1);
pub const GL_TEXTURE_IMMUTABLE_FORMAT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x912F, .hex);
pub const GL_RGBA32F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8814, .hex);
pub const GL_RGB32F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8815, .hex);
pub const GL_ALPHA32F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8816, .hex);
pub const GL_LUMINANCE32F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8818, .hex);
pub const GL_LUMINANCE_ALPHA32F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8819, .hex);
pub const GL_RGBA16F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881A, .hex);
pub const GL_RGB16F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881B, .hex);
pub const GL_ALPHA16F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881C, .hex);
pub const GL_LUMINANCE16F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881E, .hex);
pub const GL_LUMINANCE_ALPHA16F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881F, .hex);
pub const GL_BGRA8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93A1, .hex);
pub const GL_R8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8229, .hex);
pub const GL_RG8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822B, .hex);
pub const GL_R32F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822E, .hex);
pub const GL_RG32F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8230, .hex);
pub const GL_R16F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822D, .hex);
pub const GL_RG16F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822F, .hex);
pub const GL_EXT_texture_swizzle = @as(c_int, 1);
pub const GL_TEXTURE_SWIZZLE_R_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E42, .hex);
pub const GL_TEXTURE_SWIZZLE_G_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E43, .hex);
pub const GL_TEXTURE_SWIZZLE_B_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E44, .hex);
pub const GL_TEXTURE_SWIZZLE_A_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E45, .hex);
pub const GL_TEXTURE_SWIZZLE_RGBA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E46, .hex);
pub const GL_EXT_timer_query = @as(c_int, 1);
pub const GL_TIME_ELAPSED_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BF, .hex);
pub const GL_EXT_transform_feedback = @as(c_int, 1);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8E, .hex);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C84, .hex);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C85, .hex);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8F, .hex);
pub const GL_INTERLEAVED_ATTRIBS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8C, .hex);
pub const GL_SEPARATE_ATTRIBS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8D, .hex);
pub const GL_PRIMITIVES_GENERATED_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C87, .hex);
pub const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C88, .hex);
pub const GL_RASTERIZER_DISCARD_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C89, .hex);
pub const GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8A, .hex);
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8B, .hex);
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C80, .hex);
pub const GL_TRANSFORM_FEEDBACK_VARYINGS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C83, .hex);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C7F, .hex);
pub const GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C76, .hex);
pub const GL_EXT_vertex_array = @as(c_int, 1);
pub const GL_VERTEX_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8074, .hex);
pub const GL_NORMAL_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8075, .hex);
pub const GL_COLOR_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8076, .hex);
pub const GL_INDEX_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8077, .hex);
pub const GL_TEXTURE_COORD_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8078, .hex);
pub const GL_EDGE_FLAG_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8079, .hex);
pub const GL_VERTEX_ARRAY_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x807A, .hex);
pub const GL_VERTEX_ARRAY_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x807B, .hex);
pub const GL_VERTEX_ARRAY_STRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x807C, .hex);
pub const GL_VERTEX_ARRAY_COUNT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x807D, .hex);
pub const GL_NORMAL_ARRAY_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x807E, .hex);
pub const GL_NORMAL_ARRAY_STRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x807F, .hex);
pub const GL_NORMAL_ARRAY_COUNT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8080, .hex);
pub const GL_COLOR_ARRAY_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8081, .hex);
pub const GL_COLOR_ARRAY_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8082, .hex);
pub const GL_COLOR_ARRAY_STRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8083, .hex);
pub const GL_COLOR_ARRAY_COUNT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8084, .hex);
pub const GL_INDEX_ARRAY_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8085, .hex);
pub const GL_INDEX_ARRAY_STRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8086, .hex);
pub const GL_INDEX_ARRAY_COUNT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8087, .hex);
pub const GL_TEXTURE_COORD_ARRAY_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8088, .hex);
pub const GL_TEXTURE_COORD_ARRAY_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8089, .hex);
pub const GL_TEXTURE_COORD_ARRAY_STRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x808A, .hex);
pub const GL_TEXTURE_COORD_ARRAY_COUNT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x808B, .hex);
pub const GL_EDGE_FLAG_ARRAY_STRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x808C, .hex);
pub const GL_EDGE_FLAG_ARRAY_COUNT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x808D, .hex);
pub const GL_VERTEX_ARRAY_POINTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x808E, .hex);
pub const GL_NORMAL_ARRAY_POINTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x808F, .hex);
pub const GL_COLOR_ARRAY_POINTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8090, .hex);
pub const GL_INDEX_ARRAY_POINTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8091, .hex);
pub const GL_TEXTURE_COORD_ARRAY_POINTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8092, .hex);
pub const GL_EDGE_FLAG_ARRAY_POINTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8093, .hex);
pub const GL_EXT_vertex_array_bgra = @as(c_int, 1);
pub const GL_EXT_vertex_attrib_64bit = @as(c_int, 1);
pub const GL_DOUBLE_VEC2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FFC, .hex);
pub const GL_DOUBLE_VEC3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FFD, .hex);
pub const GL_DOUBLE_VEC4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FFE, .hex);
pub const GL_DOUBLE_MAT2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F46, .hex);
pub const GL_DOUBLE_MAT3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F47, .hex);
pub const GL_DOUBLE_MAT4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F48, .hex);
pub const GL_DOUBLE_MAT2x3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F49, .hex);
pub const GL_DOUBLE_MAT2x4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4A, .hex);
pub const GL_DOUBLE_MAT3x2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4B, .hex);
pub const GL_DOUBLE_MAT3x4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4C, .hex);
pub const GL_DOUBLE_MAT4x2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4D, .hex);
pub const GL_DOUBLE_MAT4x3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4E, .hex);
pub const GL_EXT_vertex_shader = @as(c_int, 1);
pub const GL_VERTEX_SHADER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8780, .hex);
pub const GL_VERTEX_SHADER_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8781, .hex);
pub const GL_OP_INDEX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8782, .hex);
pub const GL_OP_NEGATE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8783, .hex);
pub const GL_OP_DOT3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8784, .hex);
pub const GL_OP_DOT4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8785, .hex);
pub const GL_OP_MUL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8786, .hex);
pub const GL_OP_ADD_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8787, .hex);
pub const GL_OP_MADD_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8788, .hex);
pub const GL_OP_FRAC_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8789, .hex);
pub const GL_OP_MAX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x878A, .hex);
pub const GL_OP_MIN_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x878B, .hex);
pub const GL_OP_SET_GE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x878C, .hex);
pub const GL_OP_SET_LT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x878D, .hex);
pub const GL_OP_CLAMP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x878E, .hex);
pub const GL_OP_FLOOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x878F, .hex);
pub const GL_OP_ROUND_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8790, .hex);
pub const GL_OP_EXP_BASE_2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8791, .hex);
pub const GL_OP_LOG_BASE_2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8792, .hex);
pub const GL_OP_POWER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8793, .hex);
pub const GL_OP_RECIP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8794, .hex);
pub const GL_OP_RECIP_SQRT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8795, .hex);
pub const GL_OP_SUB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8796, .hex);
pub const GL_OP_CROSS_PRODUCT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8797, .hex);
pub const GL_OP_MULTIPLY_MATRIX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8798, .hex);
pub const GL_OP_MOV_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8799, .hex);
pub const GL_OUTPUT_VERTEX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x879A, .hex);
pub const GL_OUTPUT_COLOR0_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x879B, .hex);
pub const GL_OUTPUT_COLOR1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x879C, .hex);
pub const GL_OUTPUT_TEXTURE_COORD0_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x879D, .hex);
pub const GL_OUTPUT_TEXTURE_COORD1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x879E, .hex);
pub const GL_OUTPUT_TEXTURE_COORD2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x879F, .hex);
pub const GL_OUTPUT_TEXTURE_COORD3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87A0, .hex);
pub const GL_OUTPUT_TEXTURE_COORD4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87A1, .hex);
pub const GL_OUTPUT_TEXTURE_COORD5_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87A2, .hex);
pub const GL_OUTPUT_TEXTURE_COORD6_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87A3, .hex);
pub const GL_OUTPUT_TEXTURE_COORD7_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87A4, .hex);
pub const GL_OUTPUT_TEXTURE_COORD8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87A5, .hex);
pub const GL_OUTPUT_TEXTURE_COORD9_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87A6, .hex);
pub const GL_OUTPUT_TEXTURE_COORD10_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87A7, .hex);
pub const GL_OUTPUT_TEXTURE_COORD11_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87A8, .hex);
pub const GL_OUTPUT_TEXTURE_COORD12_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87A9, .hex);
pub const GL_OUTPUT_TEXTURE_COORD13_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87AA, .hex);
pub const GL_OUTPUT_TEXTURE_COORD14_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87AB, .hex);
pub const GL_OUTPUT_TEXTURE_COORD15_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87AC, .hex);
pub const GL_OUTPUT_TEXTURE_COORD16_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87AD, .hex);
pub const GL_OUTPUT_TEXTURE_COORD17_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87AE, .hex);
pub const GL_OUTPUT_TEXTURE_COORD18_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87AF, .hex);
pub const GL_OUTPUT_TEXTURE_COORD19_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87B0, .hex);
pub const GL_OUTPUT_TEXTURE_COORD20_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87B1, .hex);
pub const GL_OUTPUT_TEXTURE_COORD21_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87B2, .hex);
pub const GL_OUTPUT_TEXTURE_COORD22_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87B3, .hex);
pub const GL_OUTPUT_TEXTURE_COORD23_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87B4, .hex);
pub const GL_OUTPUT_TEXTURE_COORD24_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87B5, .hex);
pub const GL_OUTPUT_TEXTURE_COORD25_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87B6, .hex);
pub const GL_OUTPUT_TEXTURE_COORD26_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87B7, .hex);
pub const GL_OUTPUT_TEXTURE_COORD27_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87B8, .hex);
pub const GL_OUTPUT_TEXTURE_COORD28_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87B9, .hex);
pub const GL_OUTPUT_TEXTURE_COORD29_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87BA, .hex);
pub const GL_OUTPUT_TEXTURE_COORD30_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87BB, .hex);
pub const GL_OUTPUT_TEXTURE_COORD31_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87BC, .hex);
pub const GL_OUTPUT_FOG_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87BD, .hex);
pub const GL_SCALAR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87BE, .hex);
pub const GL_VECTOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87BF, .hex);
pub const GL_MATRIX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87C0, .hex);
pub const GL_VARIANT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87C1, .hex);
pub const GL_INVARIANT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87C2, .hex);
pub const GL_LOCAL_CONSTANT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87C3, .hex);
pub const GL_LOCAL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87C4, .hex);
pub const GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87C5, .hex);
pub const GL_MAX_VERTEX_SHADER_VARIANTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87C6, .hex);
pub const GL_MAX_VERTEX_SHADER_INVARIANTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87C7, .hex);
pub const GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87C8, .hex);
pub const GL_MAX_VERTEX_SHADER_LOCALS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87C9, .hex);
pub const GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87CA, .hex);
pub const GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87CB, .hex);
pub const GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87CC, .hex);
pub const GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87CD, .hex);
pub const GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87CE, .hex);
pub const GL_VERTEX_SHADER_INSTRUCTIONS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87CF, .hex);
pub const GL_VERTEX_SHADER_VARIANTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87D0, .hex);
pub const GL_VERTEX_SHADER_INVARIANTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87D1, .hex);
pub const GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87D2, .hex);
pub const GL_VERTEX_SHADER_LOCALS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87D3, .hex);
pub const GL_VERTEX_SHADER_OPTIMIZED_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87D4, .hex);
pub const GL_X_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87D5, .hex);
pub const GL_Y_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87D6, .hex);
pub const GL_Z_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87D7, .hex);
pub const GL_W_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87D8, .hex);
pub const GL_NEGATIVE_X_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87D9, .hex);
pub const GL_NEGATIVE_Y_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87DA, .hex);
pub const GL_NEGATIVE_Z_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87DB, .hex);
pub const GL_NEGATIVE_W_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87DC, .hex);
pub const GL_ZERO_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87DD, .hex);
pub const GL_ONE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87DE, .hex);
pub const GL_NEGATIVE_ONE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87DF, .hex);
pub const GL_NORMALIZED_RANGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87E0, .hex);
pub const GL_FULL_RANGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87E1, .hex);
pub const GL_CURRENT_VERTEX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87E2, .hex);
pub const GL_MVP_MATRIX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87E3, .hex);
pub const GL_VARIANT_VALUE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87E4, .hex);
pub const GL_VARIANT_DATATYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87E5, .hex);
pub const GL_VARIANT_ARRAY_STRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87E6, .hex);
pub const GL_VARIANT_ARRAY_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87E7, .hex);
pub const GL_VARIANT_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87E8, .hex);
pub const GL_VARIANT_ARRAY_POINTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87E9, .hex);
pub const GL_INVARIANT_VALUE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87EA, .hex);
pub const GL_INVARIANT_DATATYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87EB, .hex);
pub const GL_LOCAL_CONSTANT_VALUE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87EC, .hex);
pub const GL_LOCAL_CONSTANT_DATATYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87ED, .hex);
pub const GL_EXT_vertex_weighting = @as(c_int, 1);
pub const GL_MODELVIEW0_STACK_DEPTH_EXT = @as(c_int, 0x0BA3);
pub const GL_MODELVIEW1_STACK_DEPTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8502, .hex);
pub const GL_MODELVIEW0_MATRIX_EXT = @as(c_int, 0x0BA6);
pub const GL_MODELVIEW1_MATRIX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8506, .hex);
pub const GL_VERTEX_WEIGHTING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8509, .hex);
pub const GL_MODELVIEW0_EXT = @as(c_int, 0x1700);
pub const GL_MODELVIEW1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x850A, .hex);
pub const GL_CURRENT_VERTEX_WEIGHT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x850B, .hex);
pub const GL_VERTEX_WEIGHT_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x850C, .hex);
pub const GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x850D, .hex);
pub const GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x850E, .hex);
pub const GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x850F, .hex);
pub const GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8510, .hex);
pub const GL_EXT_win32_keyed_mutex = @as(c_int, 1);
pub const GL_EXT_window_rectangles = @as(c_int, 1);
pub const GL_INCLUSIVE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F10, .hex);
pub const GL_EXCLUSIVE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F11, .hex);
pub const GL_WINDOW_RECTANGLE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F12, .hex);
pub const GL_WINDOW_RECTANGLE_MODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F13, .hex);
pub const GL_MAX_WINDOW_RECTANGLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F14, .hex);
pub const GL_NUM_WINDOW_RECTANGLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F15, .hex);
pub const GL_EXT_x11_sync_object = @as(c_int, 1);
pub const GL_SYNC_X11_FENCE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90E1, .hex);
pub const GL_GREMEDY_frame_terminator = @as(c_int, 1);
pub const GL_GREMEDY_string_marker = @as(c_int, 1);
pub const GL_HP_convolution_border_modes = @as(c_int, 1);
pub const GL_IGNORE_BORDER_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8150, .hex);
pub const GL_CONSTANT_BORDER_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8151, .hex);
pub const GL_REPLICATE_BORDER_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8153, .hex);
pub const GL_CONVOLUTION_BORDER_COLOR_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8154, .hex);
pub const GL_HP_image_transform = @as(c_int, 1);
pub const GL_IMAGE_SCALE_X_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8155, .hex);
pub const GL_IMAGE_SCALE_Y_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8156, .hex);
pub const GL_IMAGE_TRANSLATE_X_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8157, .hex);
pub const GL_IMAGE_TRANSLATE_Y_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8158, .hex);
pub const GL_IMAGE_ROTATE_ANGLE_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8159, .hex);
pub const GL_IMAGE_ROTATE_ORIGIN_X_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x815A, .hex);
pub const GL_IMAGE_ROTATE_ORIGIN_Y_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x815B, .hex);
pub const GL_IMAGE_MAG_FILTER_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x815C, .hex);
pub const GL_IMAGE_MIN_FILTER_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x815D, .hex);
pub const GL_IMAGE_CUBIC_WEIGHT_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x815E, .hex);
pub const GL_CUBIC_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x815F, .hex);
pub const GL_AVERAGE_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8160, .hex);
pub const GL_IMAGE_TRANSFORM_2D_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8161, .hex);
pub const GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8162, .hex);
pub const GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8163, .hex);
pub const GL_HP_occlusion_test = @as(c_int, 1);
pub const GL_OCCLUSION_TEST_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8165, .hex);
pub const GL_OCCLUSION_TEST_RESULT_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8166, .hex);
pub const GL_HP_texture_lighting = @as(c_int, 1);
pub const GL_TEXTURE_LIGHTING_MODE_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8167, .hex);
pub const GL_TEXTURE_POST_SPECULAR_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8168, .hex);
pub const GL_TEXTURE_PRE_SPECULAR_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8169, .hex);
pub const GL_IBM_cull_vertex = @as(c_int, 1);
pub const GL_CULL_VERTEX_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103050, .decimal);
pub const GL_IBM_multimode_draw_arrays = @as(c_int, 1);
pub const GL_IBM_rasterpos_clip = @as(c_int, 1);
pub const GL_RASTER_POSITION_UNCLIPPED_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x19262, .hex);
pub const GL_IBM_static_data = @as(c_int, 1);
pub const GL_ALL_STATIC_DATA_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103060, .decimal);
pub const GL_STATIC_VERTEX_ARRAY_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103061, .decimal);
pub const GL_IBM_texture_mirrored_repeat = @as(c_int, 1);
pub const GL_MIRRORED_REPEAT_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8370, .hex);
pub const GL_IBM_vertex_array_lists = @as(c_int, 1);
pub const GL_VERTEX_ARRAY_LIST_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103070, .decimal);
pub const GL_NORMAL_ARRAY_LIST_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103071, .decimal);
pub const GL_COLOR_ARRAY_LIST_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103072, .decimal);
pub const GL_INDEX_ARRAY_LIST_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103073, .decimal);
pub const GL_TEXTURE_COORD_ARRAY_LIST_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103074, .decimal);
pub const GL_EDGE_FLAG_ARRAY_LIST_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103075, .decimal);
pub const GL_FOG_COORDINATE_ARRAY_LIST_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103076, .decimal);
pub const GL_SECONDARY_COLOR_ARRAY_LIST_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103077, .decimal);
pub const GL_VERTEX_ARRAY_LIST_STRIDE_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103080, .decimal);
pub const GL_NORMAL_ARRAY_LIST_STRIDE_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103081, .decimal);
pub const GL_COLOR_ARRAY_LIST_STRIDE_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103082, .decimal);
pub const GL_INDEX_ARRAY_LIST_STRIDE_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103083, .decimal);
pub const GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103084, .decimal);
pub const GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103085, .decimal);
pub const GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103086, .decimal);
pub const GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103087, .decimal);
pub const GL_INGR_blend_func_separate = @as(c_int, 1);
pub const GL_INGR_color_clamp = @as(c_int, 1);
pub const GL_RED_MIN_CLAMP_INGR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8560, .hex);
pub const GL_GREEN_MIN_CLAMP_INGR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8561, .hex);
pub const GL_BLUE_MIN_CLAMP_INGR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8562, .hex);
pub const GL_ALPHA_MIN_CLAMP_INGR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8563, .hex);
pub const GL_RED_MAX_CLAMP_INGR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8564, .hex);
pub const GL_GREEN_MAX_CLAMP_INGR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8565, .hex);
pub const GL_BLUE_MAX_CLAMP_INGR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8566, .hex);
pub const GL_ALPHA_MAX_CLAMP_INGR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8567, .hex);
pub const GL_INGR_interlace_read = @as(c_int, 1);
pub const GL_INTERLACE_READ_INGR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8568, .hex);
pub const GL_INTEL_blackhole_render = @as(c_int, 1);
pub const GL_BLACKHOLE_RENDER_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83FC, .hex);
pub const GL_INTEL_conservative_rasterization = @as(c_int, 1);
pub const GL_CONSERVATIVE_RASTERIZATION_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83FE, .hex);
pub const GL_INTEL_fragment_shader_ordering = @as(c_int, 1);
pub const GL_INTEL_framebuffer_CMAA = @as(c_int, 1);
pub const GL_INTEL_map_texture = @as(c_int, 1);
pub const GL_TEXTURE_MEMORY_LAYOUT_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83FF, .hex);
pub const GL_LAYOUT_DEFAULT_INTEL = @as(c_int, 0);
pub const GL_LAYOUT_LINEAR_INTEL = @as(c_int, 1);
pub const GL_LAYOUT_LINEAR_CPU_CACHED_INTEL = @as(c_int, 2);
pub const GL_INTEL_parallel_arrays = @as(c_int, 1);
pub const GL_PARALLEL_ARRAYS_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F4, .hex);
pub const GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F5, .hex);
pub const GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F6, .hex);
pub const GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F7, .hex);
pub const GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F8, .hex);
pub const GL_INTEL_performance_query = @as(c_int, 1);
pub const GL_PERFQUERY_SINGLE_CONTEXT_INTEL = @as(c_int, 0x00000000);
pub const GL_PERFQUERY_GLOBAL_CONTEXT_INTEL = @as(c_int, 0x00000001);
pub const GL_PERFQUERY_WAIT_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83FB, .hex);
pub const GL_PERFQUERY_FLUSH_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83FA, .hex);
pub const GL_PERFQUERY_DONOT_FLUSH_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F9, .hex);
pub const GL_PERFQUERY_COUNTER_EVENT_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94F0, .hex);
pub const GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94F1, .hex);
pub const GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94F2, .hex);
pub const GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94F3, .hex);
pub const GL_PERFQUERY_COUNTER_RAW_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94F4, .hex);
pub const GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94F5, .hex);
pub const GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94F8, .hex);
pub const GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94F9, .hex);
pub const GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94FA, .hex);
pub const GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94FB, .hex);
pub const GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94FC, .hex);
pub const GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94FD, .hex);
pub const GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94FE, .hex);
pub const GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94FF, .hex);
pub const GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9500, .hex);
pub const GL_MESAX_texture_stack = @as(c_int, 1);
pub const GL_TEXTURE_1D_STACK_MESAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8759, .hex);
pub const GL_TEXTURE_2D_STACK_MESAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x875A, .hex);
pub const GL_PROXY_TEXTURE_1D_STACK_MESAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x875B, .hex);
pub const GL_PROXY_TEXTURE_2D_STACK_MESAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x875C, .hex);
pub const GL_TEXTURE_1D_STACK_BINDING_MESAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x875D, .hex);
pub const GL_TEXTURE_2D_STACK_BINDING_MESAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x875E, .hex);
pub const GL_MESA_framebuffer_flip_x = @as(c_int, 1);
pub const GL_FRAMEBUFFER_FLIP_X_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BBC, .hex);
pub const GL_MESA_framebuffer_flip_y = @as(c_int, 1);
pub const GL_FRAMEBUFFER_FLIP_Y_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BBB, .hex);
pub const GL_MESA_framebuffer_swap_xy = @as(c_int, 1);
pub const GL_FRAMEBUFFER_SWAP_XY_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BBD, .hex);
pub const GL_MESA_pack_invert = @as(c_int, 1);
pub const GL_PACK_INVERT_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8758, .hex);
pub const GL_MESA_program_binary_formats = @as(c_int, 1);
pub const GL_PROGRAM_BINARY_FORMAT_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x875F, .hex);
pub const GL_MESA_resize_buffers = @as(c_int, 1);
pub const GL_MESA_shader_integer_functions = @as(c_int, 1);
pub const GL_MESA_tile_raster_order = @as(c_int, 1);
pub const GL_TILE_RASTER_ORDER_FIXED_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BB8, .hex);
pub const GL_TILE_RASTER_ORDER_INCREASING_X_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BB9, .hex);
pub const GL_TILE_RASTER_ORDER_INCREASING_Y_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BBA, .hex);
pub const GL_MESA_window_pos = @as(c_int, 1);
pub const GL_MESA_ycbcr_texture = @as(c_int, 1);
pub const GL_UNSIGNED_SHORT_8_8_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85BA, .hex);
pub const GL_UNSIGNED_SHORT_8_8_REV_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85BB, .hex);
pub const GL_YCBCR_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8757, .hex);
pub const GL_NVX_blend_equation_advanced_multi_draw_buffers = @as(c_int, 1);
pub const GL_NVX_conditional_render = @as(c_int, 1);
pub const GL_NVX_gpu_memory_info = @as(c_int, 1);
pub const GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9047, .hex);
pub const GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9048, .hex);
pub const GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9049, .hex);
pub const GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x904A, .hex);
pub const GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x904B, .hex);
pub const GL_NVX_gpu_multicast2 = @as(c_int, 1);
pub const GL_UPLOAD_GPU_MASK_NVX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x954A, .hex);
pub const GL_NVX_linked_gpu_multicast = @as(c_int, 1);
pub const GL_LGPU_SEPARATE_STORAGE_BIT_NVX = @as(c_int, 0x0800);
pub const GL_MAX_LGPU_GPUS_NVX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92BA, .hex);
pub const GL_NVX_progress_fence = @as(c_int, 1);
pub const GL_NV_alpha_to_coverage_dither_control = @as(c_int, 1);
pub const GL_ALPHA_TO_COVERAGE_DITHER_DEFAULT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x934D, .hex);
pub const GL_ALPHA_TO_COVERAGE_DITHER_ENABLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x934E, .hex);
pub const GL_ALPHA_TO_COVERAGE_DITHER_DISABLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x934F, .hex);
pub const GL_ALPHA_TO_COVERAGE_DITHER_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92BF, .hex);
pub const GL_NV_bindless_multi_draw_indirect = @as(c_int, 1);
pub const GL_NV_bindless_multi_draw_indirect_count = @as(c_int, 1);
pub const GL_NV_bindless_texture = @as(c_int, 1);
pub const GL_NV_blend_equation_advanced = @as(c_int, 1);
pub const GL_BLEND_OVERLAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9281, .hex);
pub const GL_BLEND_PREMULTIPLIED_SRC_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9280, .hex);
pub const GL_BLUE_NV = @as(c_int, 0x1905);
pub const GL_COLORBURN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x929A, .hex);
pub const GL_COLORDODGE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9299, .hex);
pub const GL_CONJOINT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9284, .hex);
pub const GL_CONTRAST_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A1, .hex);
pub const GL_DARKEN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9297, .hex);
pub const GL_DIFFERENCE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x929E, .hex);
pub const GL_DISJOINT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9283, .hex);
pub const GL_DST_ATOP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x928F, .hex);
pub const GL_DST_IN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x928B, .hex);
pub const GL_DST_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9287, .hex);
pub const GL_DST_OUT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x928D, .hex);
pub const GL_DST_OVER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9289, .hex);
pub const GL_EXCLUSION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A0, .hex);
pub const GL_GREEN_NV = @as(c_int, 0x1904);
pub const GL_HARDLIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x929B, .hex);
pub const GL_HARDMIX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A9, .hex);
pub const GL_HSL_COLOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92AF, .hex);
pub const GL_HSL_HUE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92AD, .hex);
pub const GL_HSL_LUMINOSITY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92B0, .hex);
pub const GL_HSL_SATURATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92AE, .hex);
pub const GL_INVERT_OVG_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92B4, .hex);
pub const GL_INVERT_RGB_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A3, .hex);
pub const GL_LIGHTEN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9298, .hex);
pub const GL_LINEARBURN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A5, .hex);
pub const GL_LINEARDODGE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A4, .hex);
pub const GL_LINEARLIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A7, .hex);
pub const GL_MINUS_CLAMPED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92B3, .hex);
pub const GL_MINUS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x929F, .hex);
pub const GL_MULTIPLY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9294, .hex);
pub const GL_OVERLAY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9296, .hex);
pub const GL_PINLIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A8, .hex);
pub const GL_PLUS_CLAMPED_ALPHA_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92B2, .hex);
pub const GL_PLUS_CLAMPED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92B1, .hex);
pub const GL_PLUS_DARKER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9292, .hex);
pub const GL_PLUS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9291, .hex);
pub const GL_RED_NV = @as(c_int, 0x1903);
pub const GL_SCREEN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9295, .hex);
pub const GL_SOFTLIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x929C, .hex);
pub const GL_SRC_ATOP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x928E, .hex);
pub const GL_SRC_IN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x928A, .hex);
pub const GL_SRC_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9286, .hex);
pub const GL_SRC_OUT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x928C, .hex);
pub const GL_SRC_OVER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9288, .hex);
pub const GL_UNCORRELATED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9282, .hex);
pub const GL_VIVIDLIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A6, .hex);
pub const GL_XOR_NV = @as(c_int, 0x1506);
pub const GL_NV_blend_equation_advanced_coherent = @as(c_int, 1);
pub const GL_BLEND_ADVANCED_COHERENT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9285, .hex);
pub const GL_NV_blend_minmax_factor = @as(c_int, 1);
pub const GL_NV_blend_square = @as(c_int, 1);
pub const GL_NV_clip_space_w_scaling = @as(c_int, 1);
pub const GL_VIEWPORT_POSITION_W_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x937C, .hex);
pub const GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x937D, .hex);
pub const GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x937E, .hex);
pub const GL_NV_command_list = @as(c_int, 1);
pub const GL_TERMINATE_SEQUENCE_COMMAND_NV = @as(c_int, 0x0000);
pub const GL_NOP_COMMAND_NV = @as(c_int, 0x0001);
pub const GL_DRAW_ELEMENTS_COMMAND_NV = @as(c_int, 0x0002);
pub const GL_DRAW_ARRAYS_COMMAND_NV = @as(c_int, 0x0003);
pub const GL_DRAW_ELEMENTS_STRIP_COMMAND_NV = @as(c_int, 0x0004);
pub const GL_DRAW_ARRAYS_STRIP_COMMAND_NV = @as(c_int, 0x0005);
pub const GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV = @as(c_int, 0x0006);
pub const GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV = @as(c_int, 0x0007);
pub const GL_ELEMENT_ADDRESS_COMMAND_NV = @as(c_int, 0x0008);
pub const GL_ATTRIBUTE_ADDRESS_COMMAND_NV = @as(c_int, 0x0009);
pub const GL_UNIFORM_ADDRESS_COMMAND_NV = @as(c_int, 0x000A);
pub const GL_BLEND_COLOR_COMMAND_NV = @as(c_int, 0x000B);
pub const GL_STENCIL_REF_COMMAND_NV = @as(c_int, 0x000C);
pub const GL_LINE_WIDTH_COMMAND_NV = @as(c_int, 0x000D);
pub const GL_POLYGON_OFFSET_COMMAND_NV = @as(c_int, 0x000E);
pub const GL_ALPHA_REF_COMMAND_NV = @as(c_int, 0x000F);
pub const GL_VIEWPORT_COMMAND_NV = @as(c_int, 0x0010);
pub const GL_SCISSOR_COMMAND_NV = @as(c_int, 0x0011);
pub const GL_FRONT_FACE_COMMAND_NV = @as(c_int, 0x0012);
pub const GL_NV_compute_program5 = @as(c_int, 1);
pub const GL_COMPUTE_PROGRAM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90FB, .hex);
pub const GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90FC, .hex);
pub const GL_NV_compute_shader_derivatives = @as(c_int, 1);
pub const GL_NV_conditional_render = @as(c_int, 1);
pub const GL_QUERY_WAIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E13, .hex);
pub const GL_QUERY_NO_WAIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E14, .hex);
pub const GL_QUERY_BY_REGION_WAIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E15, .hex);
pub const GL_QUERY_BY_REGION_NO_WAIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E16, .hex);
pub const GL_NV_conservative_raster = @as(c_int, 1);
pub const GL_CONSERVATIVE_RASTERIZATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9346, .hex);
pub const GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9347, .hex);
pub const GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9348, .hex);
pub const GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9349, .hex);
pub const GL_NV_conservative_raster_dilate = @as(c_int, 1);
pub const GL_CONSERVATIVE_RASTER_DILATE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9379, .hex);
pub const GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x937A, .hex);
pub const GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x937B, .hex);
pub const GL_NV_conservative_raster_pre_snap = @as(c_int, 1);
pub const GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9550, .hex);
pub const GL_NV_conservative_raster_pre_snap_triangles = @as(c_int, 1);
pub const GL_CONSERVATIVE_RASTER_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x954D, .hex);
pub const GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x954E, .hex);
pub const GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x954F, .hex);
pub const GL_NV_conservative_raster_underestimation = @as(c_int, 1);
pub const GL_NV_copy_depth_to_color = @as(c_int, 1);
pub const GL_DEPTH_STENCIL_TO_RGBA_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x886E, .hex);
pub const GL_DEPTH_STENCIL_TO_BGRA_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x886F, .hex);
pub const GL_NV_copy_image = @as(c_int, 1);
pub const GL_NV_deep_texture3D = @as(c_int, 1);
pub const GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D0, .hex);
pub const GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D1, .hex);
pub const GL_NV_depth_buffer_float = @as(c_int, 1);
pub const GL_DEPTH_COMPONENT32F_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DAB, .hex);
pub const GL_DEPTH32F_STENCIL8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DAC, .hex);
pub const GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DAD, .hex);
pub const GL_DEPTH_BUFFER_FLOAT_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DAF, .hex);
pub const GL_NV_depth_clamp = @as(c_int, 1);
pub const GL_DEPTH_CLAMP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x864F, .hex);
pub const GL_NV_draw_texture = @as(c_int, 1);
pub const GL_NV_draw_vulkan_image = @as(c_int, 1);
pub const GL_NV_evaluators = @as(c_int, 1);
pub const GL_EVAL_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86C0, .hex);
pub const GL_EVAL_TRIANGULAR_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86C1, .hex);
pub const GL_MAP_TESSELLATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86C2, .hex);
pub const GL_MAP_ATTRIB_U_ORDER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86C3, .hex);
pub const GL_MAP_ATTRIB_V_ORDER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86C4, .hex);
pub const GL_EVAL_FRACTIONAL_TESSELLATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86C5, .hex);
pub const GL_EVAL_VERTEX_ATTRIB0_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86C6, .hex);
pub const GL_EVAL_VERTEX_ATTRIB1_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86C7, .hex);
pub const GL_EVAL_VERTEX_ATTRIB2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86C8, .hex);
pub const GL_EVAL_VERTEX_ATTRIB3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86C9, .hex);
pub const GL_EVAL_VERTEX_ATTRIB4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86CA, .hex);
pub const GL_EVAL_VERTEX_ATTRIB5_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86CB, .hex);
pub const GL_EVAL_VERTEX_ATTRIB6_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86CC, .hex);
pub const GL_EVAL_VERTEX_ATTRIB7_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86CD, .hex);
pub const GL_EVAL_VERTEX_ATTRIB8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86CE, .hex);
pub const GL_EVAL_VERTEX_ATTRIB9_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86CF, .hex);
pub const GL_EVAL_VERTEX_ATTRIB10_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86D0, .hex);
pub const GL_EVAL_VERTEX_ATTRIB11_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86D1, .hex);
pub const GL_EVAL_VERTEX_ATTRIB12_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86D2, .hex);
pub const GL_EVAL_VERTEX_ATTRIB13_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86D3, .hex);
pub const GL_EVAL_VERTEX_ATTRIB14_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86D4, .hex);
pub const GL_EVAL_VERTEX_ATTRIB15_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86D5, .hex);
pub const GL_MAX_MAP_TESSELLATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86D6, .hex);
pub const GL_MAX_RATIONAL_EVAL_ORDER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86D7, .hex);
pub const GL_NV_explicit_multisample = @as(c_int, 1);
pub const GL_SAMPLE_POSITION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E50, .hex);
pub const GL_SAMPLE_MASK_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E51, .hex);
pub const GL_SAMPLE_MASK_VALUE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E52, .hex);
pub const GL_TEXTURE_BINDING_RENDERBUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E53, .hex);
pub const GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E54, .hex);
pub const GL_TEXTURE_RENDERBUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E55, .hex);
pub const GL_SAMPLER_RENDERBUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E56, .hex);
pub const GL_INT_SAMPLER_RENDERBUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E57, .hex);
pub const GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E58, .hex);
pub const GL_MAX_SAMPLE_MASK_WORDS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E59, .hex);
pub const GL_NV_fence = @as(c_int, 1);
pub const GL_ALL_COMPLETED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F2, .hex);
pub const GL_FENCE_STATUS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F3, .hex);
pub const GL_FENCE_CONDITION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F4, .hex);
pub const GL_NV_fill_rectangle = @as(c_int, 1);
pub const GL_FILL_RECTANGLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x933C, .hex);
pub const GL_NV_float_buffer = @as(c_int, 1);
pub const GL_FLOAT_R_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8880, .hex);
pub const GL_FLOAT_RG_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8881, .hex);
pub const GL_FLOAT_RGB_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8882, .hex);
pub const GL_FLOAT_RGBA_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8883, .hex);
pub const GL_FLOAT_R16_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8884, .hex);
pub const GL_FLOAT_R32_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8885, .hex);
pub const GL_FLOAT_RG16_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8886, .hex);
pub const GL_FLOAT_RG32_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8887, .hex);
pub const GL_FLOAT_RGB16_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8888, .hex);
pub const GL_FLOAT_RGB32_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8889, .hex);
pub const GL_FLOAT_RGBA16_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x888A, .hex);
pub const GL_FLOAT_RGBA32_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x888B, .hex);
pub const GL_TEXTURE_FLOAT_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x888C, .hex);
pub const GL_FLOAT_CLEAR_COLOR_VALUE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x888D, .hex);
pub const GL_FLOAT_RGBA_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x888E, .hex);
pub const GL_NV_fog_distance = @as(c_int, 1);
pub const GL_FOG_DISTANCE_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x855A, .hex);
pub const GL_EYE_RADIAL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x855B, .hex);
pub const GL_EYE_PLANE_ABSOLUTE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x855C, .hex);
pub const GL_NV_fragment_coverage_to_color = @as(c_int, 1);
pub const GL_FRAGMENT_COVERAGE_TO_COLOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92DD, .hex);
pub const GL_FRAGMENT_COVERAGE_COLOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92DE, .hex);
pub const GL_NV_fragment_program = @as(c_int, 1);
pub const GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8868, .hex);
pub const GL_FRAGMENT_PROGRAM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8870, .hex);
pub const GL_MAX_TEXTURE_COORDS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8871, .hex);
pub const GL_MAX_TEXTURE_IMAGE_UNITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8872, .hex);
pub const GL_FRAGMENT_PROGRAM_BINDING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8873, .hex);
pub const GL_PROGRAM_ERROR_STRING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8874, .hex);
pub const GL_NV_fragment_program2 = @as(c_int, 1);
pub const GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F4, .hex);
pub const GL_MAX_PROGRAM_CALL_DEPTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F5, .hex);
pub const GL_MAX_PROGRAM_IF_DEPTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F6, .hex);
pub const GL_MAX_PROGRAM_LOOP_DEPTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F7, .hex);
pub const GL_MAX_PROGRAM_LOOP_COUNT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F8, .hex);
pub const GL_NV_fragment_program4 = @as(c_int, 1);
pub const GL_NV_fragment_program_option = @as(c_int, 1);
pub const GL_NV_fragment_shader_barycentric = @as(c_int, 1);
pub const GL_NV_fragment_shader_interlock = @as(c_int, 1);
pub const GL_NV_framebuffer_mixed_samples = @as(c_int, 1);
pub const GL_COVERAGE_MODULATION_TABLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9331, .hex);
pub const GL_COLOR_SAMPLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E20, .hex);
pub const GL_DEPTH_SAMPLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x932D, .hex);
pub const GL_STENCIL_SAMPLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x932E, .hex);
pub const GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x932F, .hex);
pub const GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9330, .hex);
pub const GL_COVERAGE_MODULATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9332, .hex);
pub const GL_COVERAGE_MODULATION_TABLE_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9333, .hex);
pub const GL_NV_framebuffer_multisample_coverage = @as(c_int, 1);
pub const GL_RENDERBUFFER_COVERAGE_SAMPLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAB, .hex);
pub const GL_RENDERBUFFER_COLOR_SAMPLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E10, .hex);
pub const GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E11, .hex);
pub const GL_MULTISAMPLE_COVERAGE_MODES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E12, .hex);
pub const GL_NV_geometry_program4 = @as(c_int, 1);
pub const GL_GEOMETRY_PROGRAM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C26, .hex);
pub const GL_MAX_PROGRAM_OUTPUT_VERTICES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C27, .hex);
pub const GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C28, .hex);
pub const GL_NV_geometry_shader4 = @as(c_int, 1);
pub const GL_NV_geometry_shader_passthrough = @as(c_int, 1);
pub const GL_NV_gpu_multicast = @as(c_int, 1);
pub const GL_PER_GPU_STORAGE_BIT_NV = @as(c_int, 0x0800);
pub const GL_MULTICAST_GPUS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92BA, .hex);
pub const GL_RENDER_GPU_MASK_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9558, .hex);
pub const GL_PER_GPU_STORAGE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9548, .hex);
pub const GL_MULTICAST_PROGRAMMABLE_SAMPLE_LOCATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9549, .hex);
pub const GL_NV_gpu_program4 = @as(c_int, 1);
pub const GL_MIN_PROGRAM_TEXEL_OFFSET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8904, .hex);
pub const GL_MAX_PROGRAM_TEXEL_OFFSET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8905, .hex);
pub const GL_PROGRAM_ATTRIB_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8906, .hex);
pub const GL_PROGRAM_RESULT_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8907, .hex);
pub const GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8908, .hex);
pub const GL_MAX_PROGRAM_RESULT_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8909, .hex);
pub const GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA5, .hex);
pub const GL_MAX_PROGRAM_GENERIC_RESULTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA6, .hex);
pub const GL_NV_gpu_program5 = @as(c_int, 1);
pub const GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5A, .hex);
pub const GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5B, .hex);
pub const GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5C, .hex);
pub const GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5D, .hex);
pub const GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5E, .hex);
pub const GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5F, .hex);
pub const GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F44, .hex);
pub const GL_MAX_PROGRAM_SUBROUTINE_NUM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F45, .hex);
pub const GL_NV_gpu_program5_mem_extended = @as(c_int, 1);
pub const GL_NV_gpu_shader5 = @as(c_int, 1);
pub const GL_NV_half_float = @as(c_int, 1);
pub const GL_HALF_FLOAT_NV = @as(c_int, 0x140B);
pub const GL_NV_internalformat_sample_query = @as(c_int, 1);
pub const GL_MULTISAMPLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9371, .hex);
pub const GL_SUPERSAMPLE_SCALE_X_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9372, .hex);
pub const GL_SUPERSAMPLE_SCALE_Y_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9373, .hex);
pub const GL_CONFORMANT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9374, .hex);
pub const GL_NV_light_max_exponent = @as(c_int, 1);
pub const GL_MAX_SHININESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8504, .hex);
pub const GL_MAX_SPOT_EXPONENT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8505, .hex);
pub const GL_NV_memory_attachment = @as(c_int, 1);
pub const GL_ATTACHED_MEMORY_OBJECT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95A4, .hex);
pub const GL_ATTACHED_MEMORY_OFFSET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95A5, .hex);
pub const GL_MEMORY_ATTACHABLE_ALIGNMENT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95A6, .hex);
pub const GL_MEMORY_ATTACHABLE_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95A7, .hex);
pub const GL_MEMORY_ATTACHABLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95A8, .hex);
pub const GL_DETACHED_MEMORY_INCARNATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95A9, .hex);
pub const GL_DETACHED_TEXTURES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95AA, .hex);
pub const GL_DETACHED_BUFFERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95AB, .hex);
pub const GL_MAX_DETACHED_TEXTURES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95AC, .hex);
pub const GL_MAX_DETACHED_BUFFERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95AD, .hex);
pub const GL_NV_memory_object_sparse = @as(c_int, 1);
pub const GL_NV_mesh_shader = @as(c_int, 1);
pub const GL_MESH_SHADER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9559, .hex);
pub const GL_TASK_SHADER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x955A, .hex);
pub const GL_MAX_MESH_UNIFORM_BLOCKS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E60, .hex);
pub const GL_MAX_MESH_TEXTURE_IMAGE_UNITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E61, .hex);
pub const GL_MAX_MESH_IMAGE_UNIFORMS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E62, .hex);
pub const GL_MAX_MESH_UNIFORM_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E63, .hex);
pub const GL_MAX_MESH_ATOMIC_COUNTER_BUFFERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E64, .hex);
pub const GL_MAX_MESH_ATOMIC_COUNTERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E65, .hex);
pub const GL_MAX_MESH_SHADER_STORAGE_BLOCKS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E66, .hex);
pub const GL_MAX_COMBINED_MESH_UNIFORM_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E67, .hex);
pub const GL_MAX_TASK_UNIFORM_BLOCKS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E68, .hex);
pub const GL_MAX_TASK_TEXTURE_IMAGE_UNITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E69, .hex);
pub const GL_MAX_TASK_IMAGE_UNIFORMS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E6A, .hex);
pub const GL_MAX_TASK_UNIFORM_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E6B, .hex);
pub const GL_MAX_TASK_ATOMIC_COUNTER_BUFFERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E6C, .hex);
pub const GL_MAX_TASK_ATOMIC_COUNTERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E6D, .hex);
pub const GL_MAX_TASK_SHADER_STORAGE_BLOCKS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E6E, .hex);
pub const GL_MAX_COMBINED_TASK_UNIFORM_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E6F, .hex);
pub const GL_MAX_MESH_WORK_GROUP_INVOCATIONS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95A2, .hex);
pub const GL_MAX_TASK_WORK_GROUP_INVOCATIONS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95A3, .hex);
pub const GL_MAX_MESH_TOTAL_MEMORY_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9536, .hex);
pub const GL_MAX_TASK_TOTAL_MEMORY_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9537, .hex);
pub const GL_MAX_MESH_OUTPUT_VERTICES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9538, .hex);
pub const GL_MAX_MESH_OUTPUT_PRIMITIVES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9539, .hex);
pub const GL_MAX_TASK_OUTPUT_COUNT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x953A, .hex);
pub const GL_MAX_DRAW_MESH_TASKS_COUNT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x953D, .hex);
pub const GL_MAX_MESH_VIEWS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9557, .hex);
pub const GL_MESH_OUTPUT_PER_VERTEX_GRANULARITY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92DF, .hex);
pub const GL_MESH_OUTPUT_PER_PRIMITIVE_GRANULARITY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9543, .hex);
pub const GL_MAX_MESH_WORK_GROUP_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x953B, .hex);
pub const GL_MAX_TASK_WORK_GROUP_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x953C, .hex);
pub const GL_MESH_WORK_GROUP_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x953E, .hex);
pub const GL_TASK_WORK_GROUP_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x953F, .hex);
pub const GL_MESH_VERTICES_OUT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9579, .hex);
pub const GL_MESH_PRIMITIVES_OUT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x957A, .hex);
pub const GL_MESH_OUTPUT_TYPE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x957B, .hex);
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_MESH_SHADER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x959C, .hex);
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_TASK_SHADER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x959D, .hex);
pub const GL_REFERENCED_BY_MESH_SHADER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95A0, .hex);
pub const GL_REFERENCED_BY_TASK_SHADER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95A1, .hex);
pub const GL_MESH_SHADER_BIT_NV = @as(c_int, 0x00000040);
pub const GL_TASK_SHADER_BIT_NV = @as(c_int, 0x00000080);
pub const GL_MESH_SUBROUTINE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x957C, .hex);
pub const GL_TASK_SUBROUTINE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x957D, .hex);
pub const GL_MESH_SUBROUTINE_UNIFORM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x957E, .hex);
pub const GL_TASK_SUBROUTINE_UNIFORM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x957F, .hex);
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_MESH_SHADER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x959E, .hex);
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TASK_SHADER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x959F, .hex);
pub const GL_NV_multisample_coverage = @as(c_int, 1);
pub const GL_NV_multisample_filter_hint = @as(c_int, 1);
pub const GL_MULTISAMPLE_FILTER_HINT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8534, .hex);
pub const GL_NV_occlusion_query = @as(c_int, 1);
pub const GL_PIXEL_COUNTER_BITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8864, .hex);
pub const GL_CURRENT_OCCLUSION_QUERY_ID_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8865, .hex);
pub const GL_PIXEL_COUNT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8866, .hex);
pub const GL_PIXEL_COUNT_AVAILABLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8867, .hex);
pub const GL_NV_packed_depth_stencil = @as(c_int, 1);
pub const GL_DEPTH_STENCIL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F9, .hex);
pub const GL_UNSIGNED_INT_24_8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84FA, .hex);
pub const GL_NV_parameter_buffer_object = @as(c_int, 1);
pub const GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA0, .hex);
pub const GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA1, .hex);
pub const GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA2, .hex);
pub const GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA3, .hex);
pub const GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA4, .hex);
pub const GL_NV_parameter_buffer_object2 = @as(c_int, 1);
pub const GL_NV_path_rendering = @as(c_int, 1);
pub const GL_PATH_FORMAT_SVG_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9070, .hex);
pub const GL_PATH_FORMAT_PS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9071, .hex);
pub const GL_STANDARD_FONT_NAME_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9072, .hex);
pub const GL_SYSTEM_FONT_NAME_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9073, .hex);
pub const GL_FILE_NAME_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9074, .hex);
pub const GL_PATH_STROKE_WIDTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9075, .hex);
pub const GL_PATH_END_CAPS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9076, .hex);
pub const GL_PATH_INITIAL_END_CAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9077, .hex);
pub const GL_PATH_TERMINAL_END_CAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9078, .hex);
pub const GL_PATH_JOIN_STYLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9079, .hex);
pub const GL_PATH_MITER_LIMIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x907A, .hex);
pub const GL_PATH_DASH_CAPS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x907B, .hex);
pub const GL_PATH_INITIAL_DASH_CAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x907C, .hex);
pub const GL_PATH_TERMINAL_DASH_CAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x907D, .hex);
pub const GL_PATH_DASH_OFFSET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x907E, .hex);
pub const GL_PATH_CLIENT_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x907F, .hex);
pub const GL_PATH_FILL_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9080, .hex);
pub const GL_PATH_FILL_MASK_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9081, .hex);
pub const GL_PATH_FILL_COVER_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9082, .hex);
pub const GL_PATH_STROKE_COVER_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9083, .hex);
pub const GL_PATH_STROKE_MASK_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9084, .hex);
pub const GL_COUNT_UP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9088, .hex);
pub const GL_COUNT_DOWN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9089, .hex);
pub const GL_PATH_OBJECT_BOUNDING_BOX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x908A, .hex);
pub const GL_CONVEX_HULL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x908B, .hex);
pub const GL_BOUNDING_BOX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x908D, .hex);
pub const GL_TRANSLATE_X_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x908E, .hex);
pub const GL_TRANSLATE_Y_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x908F, .hex);
pub const GL_TRANSLATE_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9090, .hex);
pub const GL_TRANSLATE_3D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9091, .hex);
pub const GL_AFFINE_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9092, .hex);
pub const GL_AFFINE_3D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9094, .hex);
pub const GL_TRANSPOSE_AFFINE_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9096, .hex);
pub const GL_TRANSPOSE_AFFINE_3D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9098, .hex);
pub const GL_UTF8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x909A, .hex);
pub const GL_UTF16_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x909B, .hex);
pub const GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x909C, .hex);
pub const GL_PATH_COMMAND_COUNT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x909D, .hex);
pub const GL_PATH_COORD_COUNT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x909E, .hex);
pub const GL_PATH_DASH_ARRAY_COUNT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x909F, .hex);
pub const GL_PATH_COMPUTED_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90A0, .hex);
pub const GL_PATH_FILL_BOUNDING_BOX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90A1, .hex);
pub const GL_PATH_STROKE_BOUNDING_BOX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90A2, .hex);
pub const GL_SQUARE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90A3, .hex);
pub const GL_ROUND_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90A4, .hex);
pub const GL_TRIANGULAR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90A5, .hex);
pub const GL_BEVEL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90A6, .hex);
pub const GL_MITER_REVERT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90A7, .hex);
pub const GL_MITER_TRUNCATE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90A8, .hex);
pub const GL_SKIP_MISSING_GLYPH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90A9, .hex);
pub const GL_USE_MISSING_GLYPH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90AA, .hex);
pub const GL_PATH_ERROR_POSITION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90AB, .hex);
pub const GL_ACCUM_ADJACENT_PAIRS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90AD, .hex);
pub const GL_ADJACENT_PAIRS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90AE, .hex);
pub const GL_FIRST_TO_REST_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90AF, .hex);
pub const GL_PATH_GEN_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90B0, .hex);
pub const GL_PATH_GEN_COEFF_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90B1, .hex);
pub const GL_PATH_GEN_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90B3, .hex);
pub const GL_PATH_STENCIL_FUNC_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90B7, .hex);
pub const GL_PATH_STENCIL_REF_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90B8, .hex);
pub const GL_PATH_STENCIL_VALUE_MASK_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90B9, .hex);
pub const GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90BD, .hex);
pub const GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90BE, .hex);
pub const GL_PATH_COVER_DEPTH_FUNC_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90BF, .hex);
pub const GL_PATH_DASH_OFFSET_RESET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90B4, .hex);
pub const GL_MOVE_TO_RESETS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90B5, .hex);
pub const GL_MOVE_TO_CONTINUES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90B6, .hex);
pub const GL_CLOSE_PATH_NV = @as(c_int, 0x00);
pub const GL_MOVE_TO_NV = @as(c_int, 0x02);
pub const GL_RELATIVE_MOVE_TO_NV = @as(c_int, 0x03);
pub const GL_LINE_TO_NV = @as(c_int, 0x04);
pub const GL_RELATIVE_LINE_TO_NV = @as(c_int, 0x05);
pub const GL_HORIZONTAL_LINE_TO_NV = @as(c_int, 0x06);
pub const GL_RELATIVE_HORIZONTAL_LINE_TO_NV = @as(c_int, 0x07);
pub const GL_VERTICAL_LINE_TO_NV = @as(c_int, 0x08);
pub const GL_RELATIVE_VERTICAL_LINE_TO_NV = @as(c_int, 0x09);
pub const GL_QUADRATIC_CURVE_TO_NV = @as(c_int, 0x0A);
pub const GL_RELATIVE_QUADRATIC_CURVE_TO_NV = @as(c_int, 0x0B);
pub const GL_CUBIC_CURVE_TO_NV = @as(c_int, 0x0C);
pub const GL_RELATIVE_CUBIC_CURVE_TO_NV = @as(c_int, 0x0D);
pub const GL_SMOOTH_QUADRATIC_CURVE_TO_NV = @as(c_int, 0x0E);
pub const GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV = @as(c_int, 0x0F);
pub const GL_SMOOTH_CUBIC_CURVE_TO_NV = @as(c_int, 0x10);
pub const GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV = @as(c_int, 0x11);
pub const GL_SMALL_CCW_ARC_TO_NV = @as(c_int, 0x12);
pub const GL_RELATIVE_SMALL_CCW_ARC_TO_NV = @as(c_int, 0x13);
pub const GL_SMALL_CW_ARC_TO_NV = @as(c_int, 0x14);
pub const GL_RELATIVE_SMALL_CW_ARC_TO_NV = @as(c_int, 0x15);
pub const GL_LARGE_CCW_ARC_TO_NV = @as(c_int, 0x16);
pub const GL_RELATIVE_LARGE_CCW_ARC_TO_NV = @as(c_int, 0x17);
pub const GL_LARGE_CW_ARC_TO_NV = @as(c_int, 0x18);
pub const GL_RELATIVE_LARGE_CW_ARC_TO_NV = @as(c_int, 0x19);
pub const GL_RESTART_PATH_NV = @as(c_int, 0xF0);
pub const GL_DUP_FIRST_CUBIC_CURVE_TO_NV = @as(c_int, 0xF2);
pub const GL_DUP_LAST_CUBIC_CURVE_TO_NV = @as(c_int, 0xF4);
pub const GL_RECT_NV = @as(c_int, 0xF6);
pub const GL_CIRCULAR_CCW_ARC_TO_NV = @as(c_int, 0xF8);
pub const GL_CIRCULAR_CW_ARC_TO_NV = @as(c_int, 0xFA);
pub const GL_CIRCULAR_TANGENT_ARC_TO_NV = @as(c_int, 0xFC);
pub const GL_ARC_TO_NV = @as(c_int, 0xFE);
pub const GL_RELATIVE_ARC_TO_NV = @as(c_int, 0xFF);
pub const GL_BOLD_BIT_NV = @as(c_int, 0x01);
pub const GL_ITALIC_BIT_NV = @as(c_int, 0x02);
pub const GL_GLYPH_WIDTH_BIT_NV = @as(c_int, 0x01);
pub const GL_GLYPH_HEIGHT_BIT_NV = @as(c_int, 0x02);
pub const GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV = @as(c_int, 0x04);
pub const GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV = @as(c_int, 0x08);
pub const GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV = @as(c_int, 0x10);
pub const GL_GLYPH_VERTICAL_BEARING_X_BIT_NV = @as(c_int, 0x20);
pub const GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV = @as(c_int, 0x40);
pub const GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV = @as(c_int, 0x80);
pub const GL_GLYPH_HAS_KERNING_BIT_NV = @as(c_int, 0x100);
pub const GL_FONT_X_MIN_BOUNDS_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex);
pub const GL_FONT_Y_MIN_BOUNDS_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex);
pub const GL_FONT_X_MAX_BOUNDS_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex);
pub const GL_FONT_Y_MAX_BOUNDS_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex);
pub const GL_FONT_UNITS_PER_EM_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex);
pub const GL_FONT_ASCENDER_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex);
pub const GL_FONT_DESCENDER_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex);
pub const GL_FONT_HEIGHT_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex);
pub const GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex);
pub const GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex);
pub const GL_FONT_UNDERLINE_POSITION_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex);
pub const GL_FONT_UNDERLINE_THICKNESS_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex);
pub const GL_FONT_HAS_KERNING_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex);
pub const GL_ROUNDED_RECT_NV = @as(c_int, 0xE8);
pub const GL_RELATIVE_ROUNDED_RECT_NV = @as(c_int, 0xE9);
pub const GL_ROUNDED_RECT2_NV = @as(c_int, 0xEA);
pub const GL_RELATIVE_ROUNDED_RECT2_NV = @as(c_int, 0xEB);
pub const GL_ROUNDED_RECT4_NV = @as(c_int, 0xEC);
pub const GL_RELATIVE_ROUNDED_RECT4_NV = @as(c_int, 0xED);
pub const GL_ROUNDED_RECT8_NV = @as(c_int, 0xEE);
pub const GL_RELATIVE_ROUNDED_RECT8_NV = @as(c_int, 0xEF);
pub const GL_RELATIVE_RECT_NV = @as(c_int, 0xF7);
pub const GL_FONT_GLYPHS_AVAILABLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9368, .hex);
pub const GL_FONT_TARGET_UNAVAILABLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9369, .hex);
pub const GL_FONT_UNAVAILABLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x936A, .hex);
pub const GL_FONT_UNINTELLIGIBLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x936B, .hex);
pub const GL_CONIC_CURVE_TO_NV = @as(c_int, 0x1A);
pub const GL_RELATIVE_CONIC_CURVE_TO_NV = @as(c_int, 0x1B);
pub const GL_FONT_NUM_GLYPH_INDICES_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex);
pub const GL_STANDARD_FONT_FORMAT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x936C, .hex);
pub const GL_2_BYTES_NV = @as(c_int, 0x1407);
pub const GL_3_BYTES_NV = @as(c_int, 0x1408);
pub const GL_4_BYTES_NV = @as(c_int, 0x1409);
pub const GL_EYE_LINEAR_NV = @as(c_int, 0x2400);
pub const GL_OBJECT_LINEAR_NV = @as(c_int, 0x2401);
pub const GL_CONSTANT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8576, .hex);
pub const GL_PATH_FOG_GEN_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90AC, .hex);
pub const GL_PRIMARY_COLOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x852C, .hex);
pub const GL_SECONDARY_COLOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x852D, .hex);
pub const GL_PATH_GEN_COLOR_FORMAT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90B2, .hex);
pub const GL_PATH_PROJECTION_NV = @as(c_int, 0x1701);
pub const GL_PATH_MODELVIEW_NV = @as(c_int, 0x1700);
pub const GL_PATH_MODELVIEW_STACK_DEPTH_NV = @as(c_int, 0x0BA3);
pub const GL_PATH_MODELVIEW_MATRIX_NV = @as(c_int, 0x0BA6);
pub const GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV = @as(c_int, 0x0D36);
pub const GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E3, .hex);
pub const GL_PATH_PROJECTION_STACK_DEPTH_NV = @as(c_int, 0x0BA4);
pub const GL_PATH_PROJECTION_MATRIX_NV = @as(c_int, 0x0BA7);
pub const GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV = @as(c_int, 0x0D38);
pub const GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E4, .hex);
pub const GL_FRAGMENT_INPUT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x936D, .hex);
pub const GL_NV_path_rendering_shared_edge = @as(c_int, 1);
pub const GL_SHARED_EDGE_NV = @as(c_int, 0xC0);
pub const GL_NV_pixel_data_range = @as(c_int, 1);
pub const GL_WRITE_PIXEL_DATA_RANGE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8878, .hex);
pub const GL_READ_PIXEL_DATA_RANGE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8879, .hex);
pub const GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x887A, .hex);
pub const GL_READ_PIXEL_DATA_RANGE_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x887B, .hex);
pub const GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x887C, .hex);
pub const GL_READ_PIXEL_DATA_RANGE_POINTER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x887D, .hex);
pub const GL_NV_point_sprite = @as(c_int, 1);
pub const GL_POINT_SPRITE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8861, .hex);
pub const GL_COORD_REPLACE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8862, .hex);
pub const GL_POINT_SPRITE_R_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8863, .hex);
pub const GL_NV_present_video = @as(c_int, 1);
pub const GL_FRAME_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E26, .hex);
pub const GL_FIELDS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E27, .hex);
pub const GL_CURRENT_TIME_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E28, .hex);
pub const GL_NUM_FILL_STREAMS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E29, .hex);
pub const GL_PRESENT_TIME_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E2A, .hex);
pub const GL_PRESENT_DURATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E2B, .hex);
pub const GL_NV_primitive_restart = @as(c_int, 1);
pub const GL_PRIMITIVE_RESTART_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8558, .hex);
pub const GL_PRIMITIVE_RESTART_INDEX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8559, .hex);
pub const GL_NV_primitive_shading_rate = @as(c_int, 1);
pub const GL_SHADING_RATE_IMAGE_PER_PRIMITIVE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95B1, .hex);
pub const GL_SHADING_RATE_IMAGE_PALETTE_COUNT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95B2, .hex);
pub const GL_NV_query_resource = @as(c_int, 1);
pub const GL_QUERY_RESOURCE_TYPE_VIDMEM_ALLOC_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9540, .hex);
pub const GL_QUERY_RESOURCE_MEMTYPE_VIDMEM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9542, .hex);
pub const GL_QUERY_RESOURCE_SYS_RESERVED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9544, .hex);
pub const GL_QUERY_RESOURCE_TEXTURE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9545, .hex);
pub const GL_QUERY_RESOURCE_RENDERBUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9546, .hex);
pub const GL_QUERY_RESOURCE_BUFFEROBJECT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9547, .hex);
pub const GL_NV_query_resource_tag = @as(c_int, 1);
pub const GL_NV_register_combiners = @as(c_int, 1);
pub const GL_REGISTER_COMBINERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8522, .hex);
pub const GL_VARIABLE_A_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8523, .hex);
pub const GL_VARIABLE_B_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8524, .hex);
pub const GL_VARIABLE_C_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8525, .hex);
pub const GL_VARIABLE_D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8526, .hex);
pub const GL_VARIABLE_E_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8527, .hex);
pub const GL_VARIABLE_F_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8528, .hex);
pub const GL_VARIABLE_G_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8529, .hex);
pub const GL_CONSTANT_COLOR0_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x852A, .hex);
pub const GL_CONSTANT_COLOR1_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x852B, .hex);
pub const GL_SPARE0_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x852E, .hex);
pub const GL_SPARE1_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x852F, .hex);
pub const GL_DISCARD_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8530, .hex);
pub const GL_E_TIMES_F_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8531, .hex);
pub const GL_SPARE0_PLUS_SECONDARY_COLOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8532, .hex);
pub const GL_UNSIGNED_IDENTITY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8536, .hex);
pub const GL_UNSIGNED_INVERT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8537, .hex);
pub const GL_EXPAND_NORMAL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8538, .hex);
pub const GL_EXPAND_NEGATE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8539, .hex);
pub const GL_HALF_BIAS_NORMAL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x853A, .hex);
pub const GL_HALF_BIAS_NEGATE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x853B, .hex);
pub const GL_SIGNED_IDENTITY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x853C, .hex);
pub const GL_SIGNED_NEGATE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x853D, .hex);
pub const GL_SCALE_BY_TWO_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x853E, .hex);
pub const GL_SCALE_BY_FOUR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x853F, .hex);
pub const GL_SCALE_BY_ONE_HALF_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8540, .hex);
pub const GL_BIAS_BY_NEGATIVE_ONE_HALF_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8541, .hex);
pub const GL_COMBINER_INPUT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8542, .hex);
pub const GL_COMBINER_MAPPING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8543, .hex);
pub const GL_COMBINER_COMPONENT_USAGE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8544, .hex);
pub const GL_COMBINER_AB_DOT_PRODUCT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8545, .hex);
pub const GL_COMBINER_CD_DOT_PRODUCT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8546, .hex);
pub const GL_COMBINER_MUX_SUM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8547, .hex);
pub const GL_COMBINER_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8548, .hex);
pub const GL_COMBINER_BIAS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8549, .hex);
pub const GL_COMBINER_AB_OUTPUT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x854A, .hex);
pub const GL_COMBINER_CD_OUTPUT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x854B, .hex);
pub const GL_COMBINER_SUM_OUTPUT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x854C, .hex);
pub const GL_MAX_GENERAL_COMBINERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x854D, .hex);
pub const GL_NUM_GENERAL_COMBINERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x854E, .hex);
pub const GL_COLOR_SUM_CLAMP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x854F, .hex);
pub const GL_COMBINER0_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8550, .hex);
pub const GL_COMBINER1_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8551, .hex);
pub const GL_COMBINER2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8552, .hex);
pub const GL_COMBINER3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8553, .hex);
pub const GL_COMBINER4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8554, .hex);
pub const GL_COMBINER5_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8555, .hex);
pub const GL_COMBINER6_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8556, .hex);
pub const GL_COMBINER7_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8557, .hex);
pub const GL_NV_register_combiners2 = @as(c_int, 1);
pub const GL_PER_STAGE_CONSTANTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8535, .hex);
pub const GL_NV_representative_fragment_test = @as(c_int, 1);
pub const GL_REPRESENTATIVE_FRAGMENT_TEST_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x937F, .hex);
pub const GL_NV_robustness_video_memory_purge = @as(c_int, 1);
pub const GL_PURGED_CONTEXT_RESET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92BB, .hex);
pub const GL_NV_sample_locations = @as(c_int, 1);
pub const GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x933D, .hex);
pub const GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x933E, .hex);
pub const GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x933F, .hex);
pub const GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9340, .hex);
pub const GL_SAMPLE_LOCATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E50, .hex);
pub const GL_PROGRAMMABLE_SAMPLE_LOCATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9341, .hex);
pub const GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9342, .hex);
pub const GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9343, .hex);
pub const GL_NV_sample_mask_override_coverage = @as(c_int, 1);
pub const GL_NV_scissor_exclusive = @as(c_int, 1);
pub const GL_SCISSOR_TEST_EXCLUSIVE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9555, .hex);
pub const GL_SCISSOR_BOX_EXCLUSIVE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9556, .hex);
pub const GL_NV_shader_atomic_counters = @as(c_int, 1);
pub const GL_NV_shader_atomic_float = @as(c_int, 1);
pub const GL_NV_shader_atomic_float64 = @as(c_int, 1);
pub const GL_NV_shader_atomic_fp16_vector = @as(c_int, 1);
pub const GL_NV_shader_atomic_int64 = @as(c_int, 1);
pub const GL_NV_shader_buffer_load = @as(c_int, 1);
pub const GL_BUFFER_GPU_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F1D, .hex);
pub const GL_GPU_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F34, .hex);
pub const GL_MAX_SHADER_BUFFER_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F35, .hex);
pub const GL_NV_shader_buffer_store = @as(c_int, 1);
pub const GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV = @as(c_int, 0x00000010);
pub const GL_NV_shader_storage_buffer_object = @as(c_int, 1);
pub const GL_NV_shader_subgroup_partitioned = @as(c_int, 1);
pub const GL_SUBGROUP_FEATURE_PARTITIONED_BIT_NV = @as(c_int, 0x00000100);
pub const GL_NV_shader_texture_footprint = @as(c_int, 1);
pub const GL_NV_shader_thread_group = @as(c_int, 1);
pub const GL_WARP_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9339, .hex);
pub const GL_WARPS_PER_SM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x933A, .hex);
pub const GL_SM_COUNT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x933B, .hex);
pub const GL_NV_shader_thread_shuffle = @as(c_int, 1);
pub const GL_NV_shading_rate_image = @as(c_int, 1);
pub const GL_SHADING_RATE_IMAGE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9563, .hex);
pub const GL_SHADING_RATE_NO_INVOCATIONS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9564, .hex);
pub const GL_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9565, .hex);
pub const GL_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9566, .hex);
pub const GL_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9567, .hex);
pub const GL_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9568, .hex);
pub const GL_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9569, .hex);
pub const GL_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x956A, .hex);
pub const GL_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x956B, .hex);
pub const GL_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x956C, .hex);
pub const GL_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x956D, .hex);
pub const GL_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x956E, .hex);
pub const GL_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x956F, .hex);
pub const GL_SHADING_RATE_IMAGE_BINDING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x955B, .hex);
pub const GL_SHADING_RATE_IMAGE_TEXEL_WIDTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x955C, .hex);
pub const GL_SHADING_RATE_IMAGE_TEXEL_HEIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x955D, .hex);
pub const GL_SHADING_RATE_IMAGE_PALETTE_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x955E, .hex);
pub const GL_MAX_COARSE_FRAGMENT_SAMPLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x955F, .hex);
pub const GL_SHADING_RATE_SAMPLE_ORDER_DEFAULT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95AE, .hex);
pub const GL_SHADING_RATE_SAMPLE_ORDER_PIXEL_MAJOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95AF, .hex);
pub const GL_SHADING_RATE_SAMPLE_ORDER_SAMPLE_MAJOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95B0, .hex);
pub const GL_NV_stereo_view_rendering = @as(c_int, 1);
pub const GL_NV_tessellation_program5 = @as(c_int, 1);
pub const GL_MAX_PROGRAM_PATCH_ATTRIBS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86D8, .hex);
pub const GL_TESS_CONTROL_PROGRAM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x891E, .hex);
pub const GL_TESS_EVALUATION_PROGRAM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x891F, .hex);
pub const GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C74, .hex);
pub const GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C75, .hex);
pub const GL_NV_texgen_emboss = @as(c_int, 1);
pub const GL_EMBOSS_LIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x855D, .hex);
pub const GL_EMBOSS_CONSTANT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x855E, .hex);
pub const GL_EMBOSS_MAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x855F, .hex);
pub const GL_NV_texgen_reflection = @as(c_int, 1);
pub const GL_NORMAL_MAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8511, .hex);
pub const GL_REFLECTION_MAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8512, .hex);
pub const GL_NV_texture_barrier = @as(c_int, 1);
pub const GL_NV_texture_compression_vtc = @as(c_int, 1);
pub const GL_NV_texture_env_combine4 = @as(c_int, 1);
pub const GL_COMBINE4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8503, .hex);
pub const GL_SOURCE3_RGB_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8583, .hex);
pub const GL_SOURCE3_ALPHA_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x858B, .hex);
pub const GL_OPERAND3_RGB_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8593, .hex);
pub const GL_OPERAND3_ALPHA_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x859B, .hex);
pub const GL_NV_texture_expand_normal = @as(c_int, 1);
pub const GL_TEXTURE_UNSIGNED_REMAP_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x888F, .hex);
pub const GL_NV_texture_multisample = @as(c_int, 1);
pub const GL_TEXTURE_COVERAGE_SAMPLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9045, .hex);
pub const GL_TEXTURE_COLOR_SAMPLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9046, .hex);
pub const GL_NV_texture_rectangle = @as(c_int, 1);
pub const GL_TEXTURE_RECTANGLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F5, .hex);
pub const GL_TEXTURE_BINDING_RECTANGLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F6, .hex);
pub const GL_PROXY_TEXTURE_RECTANGLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F7, .hex);
pub const GL_MAX_RECTANGLE_TEXTURE_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F8, .hex);
pub const GL_NV_texture_rectangle_compressed = @as(c_int, 1);
pub const GL_NV_texture_shader = @as(c_int, 1);
pub const GL_OFFSET_TEXTURE_RECTANGLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x864C, .hex);
pub const GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x864D, .hex);
pub const GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x864E, .hex);
pub const GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86D9, .hex);
pub const GL_UNSIGNED_INT_S8_S8_8_8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86DA, .hex);
pub const GL_UNSIGNED_INT_8_8_S8_S8_REV_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86DB, .hex);
pub const GL_DSDT_MAG_INTENSITY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86DC, .hex);
pub const GL_SHADER_CONSISTENT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86DD, .hex);
pub const GL_TEXTURE_SHADER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86DE, .hex);
pub const GL_SHADER_OPERATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86DF, .hex);
pub const GL_CULL_MODES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E0, .hex);
pub const GL_OFFSET_TEXTURE_MATRIX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E1, .hex);
pub const GL_OFFSET_TEXTURE_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E2, .hex);
pub const GL_OFFSET_TEXTURE_BIAS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E3, .hex);
pub const GL_OFFSET_TEXTURE_2D_MATRIX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E1, .hex);
pub const GL_OFFSET_TEXTURE_2D_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E2, .hex);
pub const GL_OFFSET_TEXTURE_2D_BIAS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E3, .hex);
pub const GL_PREVIOUS_TEXTURE_INPUT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E4, .hex);
pub const GL_CONST_EYE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E5, .hex);
pub const GL_PASS_THROUGH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E6, .hex);
pub const GL_CULL_FRAGMENT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E7, .hex);
pub const GL_OFFSET_TEXTURE_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E8, .hex);
pub const GL_DEPENDENT_AR_TEXTURE_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E9, .hex);
pub const GL_DEPENDENT_GB_TEXTURE_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86EA, .hex);
pub const GL_DOT_PRODUCT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86EC, .hex);
pub const GL_DOT_PRODUCT_DEPTH_REPLACE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86ED, .hex);
pub const GL_DOT_PRODUCT_TEXTURE_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86EE, .hex);
pub const GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86F0, .hex);
pub const GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86F1, .hex);
pub const GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86F2, .hex);
pub const GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86F3, .hex);
pub const GL_HILO_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86F4, .hex);
pub const GL_DSDT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86F5, .hex);
pub const GL_DSDT_MAG_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86F6, .hex);
pub const GL_DSDT_MAG_VIB_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86F7, .hex);
pub const GL_HILO16_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86F8, .hex);
pub const GL_SIGNED_HILO_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86F9, .hex);
pub const GL_SIGNED_HILO16_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86FA, .hex);
pub const GL_SIGNED_RGBA_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86FB, .hex);
pub const GL_SIGNED_RGBA8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86FC, .hex);
pub const GL_SIGNED_RGB_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86FE, .hex);
pub const GL_SIGNED_RGB8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86FF, .hex);
pub const GL_SIGNED_LUMINANCE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8701, .hex);
pub const GL_SIGNED_LUMINANCE8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8702, .hex);
pub const GL_SIGNED_LUMINANCE_ALPHA_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8703, .hex);
pub const GL_SIGNED_LUMINANCE8_ALPHA8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8704, .hex);
pub const GL_SIGNED_ALPHA_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8705, .hex);
pub const GL_SIGNED_ALPHA8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8706, .hex);
pub const GL_SIGNED_INTENSITY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8707, .hex);
pub const GL_SIGNED_INTENSITY8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8708, .hex);
pub const GL_DSDT8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8709, .hex);
pub const GL_DSDT8_MAG8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x870A, .hex);
pub const GL_DSDT8_MAG8_INTENSITY8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x870B, .hex);
pub const GL_SIGNED_RGB_UNSIGNED_ALPHA_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x870C, .hex);
pub const GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x870D, .hex);
pub const GL_HI_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x870E, .hex);
pub const GL_LO_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x870F, .hex);
pub const GL_DS_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8710, .hex);
pub const GL_DT_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8711, .hex);
pub const GL_MAGNITUDE_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8712, .hex);
pub const GL_VIBRANCE_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8713, .hex);
pub const GL_HI_BIAS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8714, .hex);
pub const GL_LO_BIAS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8715, .hex);
pub const GL_DS_BIAS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8716, .hex);
pub const GL_DT_BIAS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8717, .hex);
pub const GL_MAGNITUDE_BIAS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8718, .hex);
pub const GL_VIBRANCE_BIAS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8719, .hex);
pub const GL_TEXTURE_BORDER_VALUES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x871A, .hex);
pub const GL_TEXTURE_HI_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x871B, .hex);
pub const GL_TEXTURE_LO_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x871C, .hex);
pub const GL_TEXTURE_DS_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x871D, .hex);
pub const GL_TEXTURE_DT_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x871E, .hex);
pub const GL_TEXTURE_MAG_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x871F, .hex);
pub const GL_NV_texture_shader2 = @as(c_int, 1);
pub const GL_DOT_PRODUCT_TEXTURE_3D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86EF, .hex);
pub const GL_NV_texture_shader3 = @as(c_int, 1);
pub const GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8850, .hex);
pub const GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8851, .hex);
pub const GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8852, .hex);
pub const GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8853, .hex);
pub const GL_OFFSET_HILO_TEXTURE_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8854, .hex);
pub const GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8855, .hex);
pub const GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8856, .hex);
pub const GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8857, .hex);
pub const GL_DEPENDENT_HILO_TEXTURE_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8858, .hex);
pub const GL_DEPENDENT_RGB_TEXTURE_3D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8859, .hex);
pub const GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x885A, .hex);
pub const GL_DOT_PRODUCT_PASS_THROUGH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x885B, .hex);
pub const GL_DOT_PRODUCT_TEXTURE_1D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x885C, .hex);
pub const GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x885D, .hex);
pub const GL_HILO8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x885E, .hex);
pub const GL_SIGNED_HILO8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x885F, .hex);
pub const GL_FORCE_BLUE_TO_ONE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8860, .hex);
pub const GL_NV_timeline_semaphore = @as(c_int, 1);
pub const GL_TIMELINE_SEMAPHORE_VALUE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9595, .hex);
pub const GL_SEMAPHORE_TYPE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95B3, .hex);
pub const GL_SEMAPHORE_TYPE_BINARY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95B4, .hex);
pub const GL_SEMAPHORE_TYPE_TIMELINE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95B5, .hex);
pub const GL_MAX_TIMELINE_SEMAPHORE_VALUE_DIFFERENCE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95B6, .hex);
pub const GL_NV_transform_feedback = @as(c_int, 1);
pub const GL_BACK_PRIMARY_COLOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C77, .hex);
pub const GL_BACK_SECONDARY_COLOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C78, .hex);
pub const GL_TEXTURE_COORD_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C79, .hex);
pub const GL_CLIP_DISTANCE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C7A, .hex);
pub const GL_VERTEX_ID_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C7B, .hex);
pub const GL_PRIMITIVE_ID_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C7C, .hex);
pub const GL_GENERIC_ATTRIB_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C7D, .hex);
pub const GL_TRANSFORM_FEEDBACK_ATTRIBS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C7E, .hex);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C7F, .hex);
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C80, .hex);
pub const GL_ACTIVE_VARYINGS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C81, .hex);
pub const GL_ACTIVE_VARYING_MAX_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C82, .hex);
pub const GL_TRANSFORM_FEEDBACK_VARYINGS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C83, .hex);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_START_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C84, .hex);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C85, .hex);
pub const GL_TRANSFORM_FEEDBACK_RECORD_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C86, .hex);
pub const GL_PRIMITIVES_GENERATED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C87, .hex);
pub const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C88, .hex);
pub const GL_RASTERIZER_DISCARD_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C89, .hex);
pub const GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8A, .hex);
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8B, .hex);
pub const GL_INTERLEAVED_ATTRIBS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8C, .hex);
pub const GL_SEPARATE_ATTRIBS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8D, .hex);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8E, .hex);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8F, .hex);
pub const GL_LAYER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DAA, .hex);
pub const GL_NEXT_BUFFER_NV = -@as(c_int, 2);
pub const GL_SKIP_COMPONENTS4_NV = -@as(c_int, 3);
pub const GL_SKIP_COMPONENTS3_NV = -@as(c_int, 4);
pub const GL_SKIP_COMPONENTS2_NV = -@as(c_int, 5);
pub const GL_SKIP_COMPONENTS1_NV = -@as(c_int, 6);
pub const GL_NV_transform_feedback2 = @as(c_int, 1);
pub const GL_TRANSFORM_FEEDBACK_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E22, .hex);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E23, .hex);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E24, .hex);
pub const GL_TRANSFORM_FEEDBACK_BINDING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E25, .hex);
pub const GL_NV_uniform_buffer_unified_memory = @as(c_int, 1);
pub const GL_UNIFORM_BUFFER_UNIFIED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x936E, .hex);
pub const GL_UNIFORM_BUFFER_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x936F, .hex);
pub const GL_UNIFORM_BUFFER_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9370, .hex);
pub const GL_NV_vdpau_interop = @as(c_int, 1);
pub const GL_SURFACE_STATE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86EB, .hex);
pub const GL_SURFACE_REGISTERED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86FD, .hex);
pub const GL_SURFACE_MAPPED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8700, .hex);
pub const GL_WRITE_DISCARD_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BE, .hex);
pub const GL_NV_vdpau_interop2 = @as(c_int, 1);
pub const GL_NV_vertex_array_range = @as(c_int, 1);
pub const GL_VERTEX_ARRAY_RANGE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851D, .hex);
pub const GL_VERTEX_ARRAY_RANGE_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851E, .hex);
pub const GL_VERTEX_ARRAY_RANGE_VALID_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851F, .hex);
pub const GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8520, .hex);
pub const GL_VERTEX_ARRAY_RANGE_POINTER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8521, .hex);
pub const GL_NV_vertex_array_range2 = @as(c_int, 1);
pub const GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8533, .hex);
pub const GL_NV_vertex_attrib_integer_64bit = @as(c_int, 1);
pub const GL_NV_vertex_buffer_unified_memory = @as(c_int, 1);
pub const GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F1E, .hex);
pub const GL_ELEMENT_ARRAY_UNIFIED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F1F, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F20, .hex);
pub const GL_VERTEX_ARRAY_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F21, .hex);
pub const GL_NORMAL_ARRAY_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F22, .hex);
pub const GL_COLOR_ARRAY_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F23, .hex);
pub const GL_INDEX_ARRAY_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F24, .hex);
pub const GL_TEXTURE_COORD_ARRAY_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F25, .hex);
pub const GL_EDGE_FLAG_ARRAY_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F26, .hex);
pub const GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F27, .hex);
pub const GL_FOG_COORD_ARRAY_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F28, .hex);
pub const GL_ELEMENT_ARRAY_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F29, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F2A, .hex);
pub const GL_VERTEX_ARRAY_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F2B, .hex);
pub const GL_NORMAL_ARRAY_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F2C, .hex);
pub const GL_COLOR_ARRAY_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F2D, .hex);
pub const GL_INDEX_ARRAY_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F2E, .hex);
pub const GL_TEXTURE_COORD_ARRAY_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F2F, .hex);
pub const GL_EDGE_FLAG_ARRAY_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F30, .hex);
pub const GL_SECONDARY_COLOR_ARRAY_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F31, .hex);
pub const GL_FOG_COORD_ARRAY_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F32, .hex);
pub const GL_ELEMENT_ARRAY_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F33, .hex);
pub const GL_DRAW_INDIRECT_UNIFIED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F40, .hex);
pub const GL_DRAW_INDIRECT_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F41, .hex);
pub const GL_DRAW_INDIRECT_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F42, .hex);
pub const GL_NV_vertex_program = @as(c_int, 1);
pub const GL_VERTEX_PROGRAM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8620, .hex);
pub const GL_VERTEX_STATE_PROGRAM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8621, .hex);
pub const GL_ATTRIB_ARRAY_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8623, .hex);
pub const GL_ATTRIB_ARRAY_STRIDE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8624, .hex);
pub const GL_ATTRIB_ARRAY_TYPE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8625, .hex);
pub const GL_CURRENT_ATTRIB_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8626, .hex);
pub const GL_PROGRAM_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8627, .hex);
pub const GL_PROGRAM_STRING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8628, .hex);
pub const GL_MODELVIEW_PROJECTION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8629, .hex);
pub const GL_IDENTITY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x862A, .hex);
pub const GL_INVERSE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x862B, .hex);
pub const GL_TRANSPOSE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x862C, .hex);
pub const GL_INVERSE_TRANSPOSE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x862D, .hex);
pub const GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x862E, .hex);
pub const GL_MAX_TRACK_MATRICES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x862F, .hex);
pub const GL_MATRIX0_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8630, .hex);
pub const GL_MATRIX1_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8631, .hex);
pub const GL_MATRIX2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8632, .hex);
pub const GL_MATRIX3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8633, .hex);
pub const GL_MATRIX4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8634, .hex);
pub const GL_MATRIX5_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8635, .hex);
pub const GL_MATRIX6_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8636, .hex);
pub const GL_MATRIX7_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8637, .hex);
pub const GL_CURRENT_MATRIX_STACK_DEPTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8640, .hex);
pub const GL_CURRENT_MATRIX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8641, .hex);
pub const GL_VERTEX_PROGRAM_POINT_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8642, .hex);
pub const GL_VERTEX_PROGRAM_TWO_SIDE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8643, .hex);
pub const GL_PROGRAM_PARAMETER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8644, .hex);
pub const GL_ATTRIB_ARRAY_POINTER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8645, .hex);
pub const GL_PROGRAM_TARGET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8646, .hex);
pub const GL_PROGRAM_RESIDENT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8647, .hex);
pub const GL_TRACK_MATRIX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8648, .hex);
pub const GL_TRACK_MATRIX_TRANSFORM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8649, .hex);
pub const GL_VERTEX_PROGRAM_BINDING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x864A, .hex);
pub const GL_PROGRAM_ERROR_POSITION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x864B, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY0_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8650, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY1_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8651, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8652, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8653, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8654, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY5_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8655, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY6_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8656, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY7_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8657, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8658, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY9_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8659, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY10_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x865A, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY11_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x865B, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY12_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x865C, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY13_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x865D, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY14_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x865E, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY15_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x865F, .hex);
pub const GL_MAP1_VERTEX_ATTRIB0_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8660, .hex);
pub const GL_MAP1_VERTEX_ATTRIB1_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8661, .hex);
pub const GL_MAP1_VERTEX_ATTRIB2_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8662, .hex);
pub const GL_MAP1_VERTEX_ATTRIB3_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8663, .hex);
pub const GL_MAP1_VERTEX_ATTRIB4_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8664, .hex);
pub const GL_MAP1_VERTEX_ATTRIB5_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8665, .hex);
pub const GL_MAP1_VERTEX_ATTRIB6_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8666, .hex);
pub const GL_MAP1_VERTEX_ATTRIB7_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8667, .hex);
pub const GL_MAP1_VERTEX_ATTRIB8_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8668, .hex);
pub const GL_MAP1_VERTEX_ATTRIB9_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8669, .hex);
pub const GL_MAP1_VERTEX_ATTRIB10_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x866A, .hex);
pub const GL_MAP1_VERTEX_ATTRIB11_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x866B, .hex);
pub const GL_MAP1_VERTEX_ATTRIB12_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x866C, .hex);
pub const GL_MAP1_VERTEX_ATTRIB13_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x866D, .hex);
pub const GL_MAP1_VERTEX_ATTRIB14_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x866E, .hex);
pub const GL_MAP1_VERTEX_ATTRIB15_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x866F, .hex);
pub const GL_MAP2_VERTEX_ATTRIB0_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8670, .hex);
pub const GL_MAP2_VERTEX_ATTRIB1_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8671, .hex);
pub const GL_MAP2_VERTEX_ATTRIB2_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8672, .hex);
pub const GL_MAP2_VERTEX_ATTRIB3_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8673, .hex);
pub const GL_MAP2_VERTEX_ATTRIB4_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8674, .hex);
pub const GL_MAP2_VERTEX_ATTRIB5_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8675, .hex);
pub const GL_MAP2_VERTEX_ATTRIB6_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8676, .hex);
pub const GL_MAP2_VERTEX_ATTRIB7_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8677, .hex);
pub const GL_MAP2_VERTEX_ATTRIB8_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8678, .hex);
pub const GL_MAP2_VERTEX_ATTRIB9_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8679, .hex);
pub const GL_MAP2_VERTEX_ATTRIB10_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x867A, .hex);
pub const GL_MAP2_VERTEX_ATTRIB11_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x867B, .hex);
pub const GL_MAP2_VERTEX_ATTRIB12_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x867C, .hex);
pub const GL_MAP2_VERTEX_ATTRIB13_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x867D, .hex);
pub const GL_MAP2_VERTEX_ATTRIB14_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x867E, .hex);
pub const GL_MAP2_VERTEX_ATTRIB15_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x867F, .hex);
pub const GL_NV_vertex_program1_1 = @as(c_int, 1);
pub const GL_NV_vertex_program2 = @as(c_int, 1);
pub const GL_NV_vertex_program2_option = @as(c_int, 1);
pub const GL_NV_vertex_program3 = @as(c_int, 1);
pub const GL_NV_vertex_program4 = @as(c_int, 1);
pub const GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FD, .hex);
pub const GL_NV_video_capture = @as(c_int, 1);
pub const GL_VIDEO_BUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9020, .hex);
pub const GL_VIDEO_BUFFER_BINDING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9021, .hex);
pub const GL_FIELD_UPPER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9022, .hex);
pub const GL_FIELD_LOWER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9023, .hex);
pub const GL_NUM_VIDEO_CAPTURE_STREAMS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9024, .hex);
pub const GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9025, .hex);
pub const GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9026, .hex);
pub const GL_LAST_VIDEO_CAPTURE_STATUS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9027, .hex);
pub const GL_VIDEO_BUFFER_PITCH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9028, .hex);
pub const GL_VIDEO_COLOR_CONVERSION_MATRIX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9029, .hex);
pub const GL_VIDEO_COLOR_CONVERSION_MAX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x902A, .hex);
pub const GL_VIDEO_COLOR_CONVERSION_MIN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x902B, .hex);
pub const GL_VIDEO_COLOR_CONVERSION_OFFSET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x902C, .hex);
pub const GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x902D, .hex);
pub const GL_PARTIAL_SUCCESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x902E, .hex);
pub const GL_SUCCESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x902F, .hex);
pub const GL_FAILURE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9030, .hex);
pub const GL_YCBYCR8_422_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9031, .hex);
pub const GL_YCBAYCR8A_4224_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9032, .hex);
pub const GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9033, .hex);
pub const GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9034, .hex);
pub const GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9035, .hex);
pub const GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9036, .hex);
pub const GL_Z4Y12Z4CB12Z4CR12_444_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9037, .hex);
pub const GL_VIDEO_CAPTURE_FRAME_WIDTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9038, .hex);
pub const GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9039, .hex);
pub const GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x903A, .hex);
pub const GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x903B, .hex);
pub const GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x903C, .hex);
pub const GL_NV_viewport_array2 = @as(c_int, 1);
pub const GL_NV_viewport_swizzle = @as(c_int, 1);
pub const GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9350, .hex);
pub const GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9351, .hex);
pub const GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9352, .hex);
pub const GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9353, .hex);
pub const GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9354, .hex);
pub const GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9355, .hex);
pub const GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9356, .hex);
pub const GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9357, .hex);
pub const GL_VIEWPORT_SWIZZLE_X_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9358, .hex);
pub const GL_VIEWPORT_SWIZZLE_Y_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9359, .hex);
pub const GL_VIEWPORT_SWIZZLE_Z_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x935A, .hex);
pub const GL_VIEWPORT_SWIZZLE_W_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x935B, .hex);
pub const GL_OML_interlace = @as(c_int, 1);
pub const GL_INTERLACE_OML = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8980, .hex);
pub const GL_INTERLACE_READ_OML = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8981, .hex);
pub const GL_OML_resample = @as(c_int, 1);
pub const GL_PACK_RESAMPLE_OML = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8984, .hex);
pub const GL_UNPACK_RESAMPLE_OML = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8985, .hex);
pub const GL_RESAMPLE_REPLICATE_OML = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8986, .hex);
pub const GL_RESAMPLE_ZERO_FILL_OML = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8987, .hex);
pub const GL_RESAMPLE_AVERAGE_OML = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8988, .hex);
pub const GL_RESAMPLE_DECIMATE_OML = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8989, .hex);
pub const GL_OML_subsample = @as(c_int, 1);
pub const GL_FORMAT_SUBSAMPLE_24_24_OML = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8982, .hex);
pub const GL_FORMAT_SUBSAMPLE_244_244_OML = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8983, .hex);
pub const GL_OVR_multiview = @as(c_int, 1);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9630, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9632, .hex);
pub const GL_MAX_VIEWS_OVR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9631, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9633, .hex);
pub const GL_OVR_multiview2 = @as(c_int, 1);
pub const GL_PGI_misc_hints = @as(c_int, 1);
pub const GL_PREFER_DOUBLEBUFFER_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A1F8, .hex);
pub const GL_CONSERVE_MEMORY_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A1FD, .hex);
pub const GL_RECLAIM_MEMORY_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A1FE, .hex);
pub const GL_NATIVE_GRAPHICS_HANDLE_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A202, .hex);
pub const GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A203, .hex);
pub const GL_NATIVE_GRAPHICS_END_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A204, .hex);
pub const GL_ALWAYS_FAST_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A20C, .hex);
pub const GL_ALWAYS_SOFT_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A20D, .hex);
pub const GL_ALLOW_DRAW_OBJ_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A20E, .hex);
pub const GL_ALLOW_DRAW_WIN_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A20F, .hex);
pub const GL_ALLOW_DRAW_FRG_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A210, .hex);
pub const GL_ALLOW_DRAW_MEM_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A211, .hex);
pub const GL_STRICT_DEPTHFUNC_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A216, .hex);
pub const GL_STRICT_LIGHTING_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A217, .hex);
pub const GL_STRICT_SCISSOR_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A218, .hex);
pub const GL_FULL_STIPPLE_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A219, .hex);
pub const GL_CLIP_NEAR_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A220, .hex);
pub const GL_CLIP_FAR_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A221, .hex);
pub const GL_WIDE_LINE_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A222, .hex);
pub const GL_BACK_NORMALS_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A223, .hex);
pub const GL_PGI_vertex_hints = @as(c_int, 1);
pub const GL_VERTEX_DATA_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A22A, .hex);
pub const GL_VERTEX_CONSISTENT_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A22B, .hex);
pub const GL_MATERIAL_SIDE_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A22C, .hex);
pub const GL_MAX_VERTEX_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A22D, .hex);
pub const GL_COLOR3_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex);
pub const GL_COLOR4_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex);
pub const GL_EDGEFLAG_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex);
pub const GL_INDEX_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex);
pub const GL_MAT_AMBIENT_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex);
pub const GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex);
pub const GL_MAT_DIFFUSE_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex);
pub const GL_MAT_EMISSION_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex);
pub const GL_MAT_COLOR_INDEXES_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex);
pub const GL_MAT_SHININESS_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex);
pub const GL_MAT_SPECULAR_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex);
pub const GL_NORMAL_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex);
pub const GL_TEXCOORD1_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex);
pub const GL_TEXCOORD2_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex);
pub const GL_TEXCOORD3_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex);
pub const GL_TEXCOORD4_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex);
pub const GL_VERTEX23_BIT_PGI = @as(c_int, 0x00000004);
pub const GL_VERTEX4_BIT_PGI = @as(c_int, 0x00000008);
pub const GL_REND_screen_coordinates = @as(c_int, 1);
pub const GL_SCREEN_COORDINATES_REND = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8490, .hex);
pub const GL_INVERTED_SCREEN_W_REND = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8491, .hex);
pub const GL_S3_s3tc = @as(c_int, 1);
pub const GL_RGB_S3TC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83A0, .hex);
pub const GL_RGB4_S3TC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83A1, .hex);
pub const GL_RGBA_S3TC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83A2, .hex);
pub const GL_RGBA4_S3TC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83A3, .hex);
pub const GL_RGBA_DXT5_S3TC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83A4, .hex);
pub const GL_RGBA4_DXT5_S3TC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83A5, .hex);
pub const GL_SGIS_detail_texture = @as(c_int, 1);
pub const GL_DETAIL_TEXTURE_2D_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8095, .hex);
pub const GL_DETAIL_TEXTURE_2D_BINDING_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8096, .hex);
pub const GL_LINEAR_DETAIL_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8097, .hex);
pub const GL_LINEAR_DETAIL_ALPHA_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8098, .hex);
pub const GL_LINEAR_DETAIL_COLOR_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8099, .hex);
pub const GL_DETAIL_TEXTURE_LEVEL_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809A, .hex);
pub const GL_DETAIL_TEXTURE_MODE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809B, .hex);
pub const GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809C, .hex);
pub const GL_SGIS_fog_function = @as(c_int, 1);
pub const GL_FOG_FUNC_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x812A, .hex);
pub const GL_FOG_FUNC_POINTS_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x812B, .hex);
pub const GL_MAX_FOG_FUNC_POINTS_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x812C, .hex);
pub const GL_SGIS_generate_mipmap = @as(c_int, 1);
pub const GL_GENERATE_MIPMAP_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8191, .hex);
pub const GL_GENERATE_MIPMAP_HINT_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8192, .hex);
pub const GL_SGIS_multisample = @as(c_int, 1);
pub const GL_MULTISAMPLE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809D, .hex);
pub const GL_SAMPLE_ALPHA_TO_MASK_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809E, .hex);
pub const GL_SAMPLE_ALPHA_TO_ONE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809F, .hex);
pub const GL_SAMPLE_MASK_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A0, .hex);
pub const GL_1PASS_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A1, .hex);
pub const GL_2PASS_0_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A2, .hex);
pub const GL_2PASS_1_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A3, .hex);
pub const GL_4PASS_0_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A4, .hex);
pub const GL_4PASS_1_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A5, .hex);
pub const GL_4PASS_2_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A6, .hex);
pub const GL_4PASS_3_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A7, .hex);
pub const GL_SAMPLE_BUFFERS_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A8, .hex);
pub const GL_SAMPLES_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A9, .hex);
pub const GL_SAMPLE_MASK_VALUE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AA, .hex);
pub const GL_SAMPLE_MASK_INVERT_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AB, .hex);
pub const GL_SAMPLE_PATTERN_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AC, .hex);
pub const GL_SGIS_pixel_texture = @as(c_int, 1);
pub const GL_PIXEL_TEXTURE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8353, .hex);
pub const GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8354, .hex);
pub const GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8355, .hex);
pub const GL_PIXEL_GROUP_COLOR_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8356, .hex);
pub const GL_SGIS_point_line_texgen = @as(c_int, 1);
pub const GL_EYE_DISTANCE_TO_POINT_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F0, .hex);
pub const GL_OBJECT_DISTANCE_TO_POINT_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F1, .hex);
pub const GL_EYE_DISTANCE_TO_LINE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F2, .hex);
pub const GL_OBJECT_DISTANCE_TO_LINE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F3, .hex);
pub const GL_EYE_POINT_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F4, .hex);
pub const GL_OBJECT_POINT_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F5, .hex);
pub const GL_EYE_LINE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F6, .hex);
pub const GL_OBJECT_LINE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F7, .hex);
pub const GL_SGIS_point_parameters = @as(c_int, 1);
pub const GL_POINT_SIZE_MIN_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8126, .hex);
pub const GL_POINT_SIZE_MAX_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8127, .hex);
pub const GL_POINT_FADE_THRESHOLD_SIZE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8128, .hex);
pub const GL_DISTANCE_ATTENUATION_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8129, .hex);
pub const GL_SGIS_sharpen_texture = @as(c_int, 1);
pub const GL_LINEAR_SHARPEN_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AD, .hex);
pub const GL_LINEAR_SHARPEN_ALPHA_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AE, .hex);
pub const GL_LINEAR_SHARPEN_COLOR_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AF, .hex);
pub const GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B0, .hex);
pub const GL_SGIS_texture4D = @as(c_int, 1);
pub const GL_PACK_SKIP_VOLUMES_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8130, .hex);
pub const GL_PACK_IMAGE_DEPTH_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8131, .hex);
pub const GL_UNPACK_SKIP_VOLUMES_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8132, .hex);
pub const GL_UNPACK_IMAGE_DEPTH_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8133, .hex);
pub const GL_TEXTURE_4D_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8134, .hex);
pub const GL_PROXY_TEXTURE_4D_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8135, .hex);
pub const GL_TEXTURE_4DSIZE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8136, .hex);
pub const GL_TEXTURE_WRAP_Q_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8137, .hex);
pub const GL_MAX_4D_TEXTURE_SIZE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8138, .hex);
pub const GL_TEXTURE_4D_BINDING_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x814F, .hex);
pub const GL_SGIS_texture_border_clamp = @as(c_int, 1);
pub const GL_CLAMP_TO_BORDER_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x812D, .hex);
pub const GL_SGIS_texture_color_mask = @as(c_int, 1);
pub const GL_TEXTURE_COLOR_WRITEMASK_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81EF, .hex);
pub const GL_SGIS_texture_edge_clamp = @as(c_int, 1);
pub const GL_CLAMP_TO_EDGE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x812F, .hex);
pub const GL_SGIS_texture_filter4 = @as(c_int, 1);
pub const GL_FILTER4_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8146, .hex);
pub const GL_TEXTURE_FILTER4_SIZE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8147, .hex);
pub const GL_SGIS_texture_lod = @as(c_int, 1);
pub const GL_TEXTURE_MIN_LOD_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x813A, .hex);
pub const GL_TEXTURE_MAX_LOD_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x813B, .hex);
pub const GL_TEXTURE_BASE_LEVEL_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x813C, .hex);
pub const GL_TEXTURE_MAX_LEVEL_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x813D, .hex);
pub const GL_SGIS_texture_select = @as(c_int, 1);
pub const GL_DUAL_ALPHA4_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8110, .hex);
pub const GL_DUAL_ALPHA8_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8111, .hex);
pub const GL_DUAL_ALPHA12_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8112, .hex);
pub const GL_DUAL_ALPHA16_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8113, .hex);
pub const GL_DUAL_LUMINANCE4_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8114, .hex);
pub const GL_DUAL_LUMINANCE8_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8115, .hex);
pub const GL_DUAL_LUMINANCE12_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8116, .hex);
pub const GL_DUAL_LUMINANCE16_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8117, .hex);
pub const GL_DUAL_INTENSITY4_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8118, .hex);
pub const GL_DUAL_INTENSITY8_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8119, .hex);
pub const GL_DUAL_INTENSITY12_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x811A, .hex);
pub const GL_DUAL_INTENSITY16_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x811B, .hex);
pub const GL_DUAL_LUMINANCE_ALPHA4_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x811C, .hex);
pub const GL_DUAL_LUMINANCE_ALPHA8_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x811D, .hex);
pub const GL_QUAD_ALPHA4_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x811E, .hex);
pub const GL_QUAD_ALPHA8_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x811F, .hex);
pub const GL_QUAD_LUMINANCE4_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8120, .hex);
pub const GL_QUAD_LUMINANCE8_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8121, .hex);
pub const GL_QUAD_INTENSITY4_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8122, .hex);
pub const GL_QUAD_INTENSITY8_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8123, .hex);
pub const GL_DUAL_TEXTURE_SELECT_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8124, .hex);
pub const GL_QUAD_TEXTURE_SELECT_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8125, .hex);
pub const GL_SGIX_async = @as(c_int, 1);
pub const GL_ASYNC_MARKER_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8329, .hex);
pub const GL_SGIX_async_histogram = @as(c_int, 1);
pub const GL_ASYNC_HISTOGRAM_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x832C, .hex);
pub const GL_MAX_ASYNC_HISTOGRAM_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x832D, .hex);
pub const GL_SGIX_async_pixel = @as(c_int, 1);
pub const GL_ASYNC_TEX_IMAGE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x835C, .hex);
pub const GL_ASYNC_DRAW_PIXELS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x835D, .hex);
pub const GL_ASYNC_READ_PIXELS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x835E, .hex);
pub const GL_MAX_ASYNC_TEX_IMAGE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x835F, .hex);
pub const GL_MAX_ASYNC_DRAW_PIXELS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8360, .hex);
pub const GL_MAX_ASYNC_READ_PIXELS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8361, .hex);
pub const GL_SGIX_blend_alpha_minmax = @as(c_int, 1);
pub const GL_ALPHA_MIN_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8320, .hex);
pub const GL_ALPHA_MAX_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8321, .hex);
pub const GL_SGIX_calligraphic_fragment = @as(c_int, 1);
pub const GL_CALLIGRAPHIC_FRAGMENT_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8183, .hex);
pub const GL_SGIX_clipmap = @as(c_int, 1);
pub const GL_LINEAR_CLIPMAP_LINEAR_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8170, .hex);
pub const GL_TEXTURE_CLIPMAP_CENTER_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8171, .hex);
pub const GL_TEXTURE_CLIPMAP_FRAME_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8172, .hex);
pub const GL_TEXTURE_CLIPMAP_OFFSET_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8173, .hex);
pub const GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8174, .hex);
pub const GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8175, .hex);
pub const GL_TEXTURE_CLIPMAP_DEPTH_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8176, .hex);
pub const GL_MAX_CLIPMAP_DEPTH_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8177, .hex);
pub const GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8178, .hex);
pub const GL_NEAREST_CLIPMAP_NEAREST_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x844D, .hex);
pub const GL_NEAREST_CLIPMAP_LINEAR_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x844E, .hex);
pub const GL_LINEAR_CLIPMAP_NEAREST_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x844F, .hex);
pub const GL_SGIX_convolution_accuracy = @as(c_int, 1);
pub const GL_CONVOLUTION_HINT_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8316, .hex);
pub const GL_SGIX_depth_pass_instrument = @as(c_int, 1);
pub const GL_SGIX_depth_texture = @as(c_int, 1);
pub const GL_DEPTH_COMPONENT16_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A5, .hex);
pub const GL_DEPTH_COMPONENT24_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A6, .hex);
pub const GL_DEPTH_COMPONENT32_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A7, .hex);
pub const GL_SGIX_flush_raster = @as(c_int, 1);
pub const GL_SGIX_fog_offset = @as(c_int, 1);
pub const GL_FOG_OFFSET_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8198, .hex);
pub const GL_FOG_OFFSET_VALUE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8199, .hex);
pub const GL_SGIX_fragment_lighting = @as(c_int, 1);
pub const GL_FRAGMENT_LIGHTING_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8400, .hex);
pub const GL_FRAGMENT_COLOR_MATERIAL_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8401, .hex);
pub const GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8402, .hex);
pub const GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8403, .hex);
pub const GL_MAX_FRAGMENT_LIGHTS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8404, .hex);
pub const GL_MAX_ACTIVE_LIGHTS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8405, .hex);
pub const GL_CURRENT_RASTER_NORMAL_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8406, .hex);
pub const GL_LIGHT_ENV_MODE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8407, .hex);
pub const GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8408, .hex);
pub const GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8409, .hex);
pub const GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x840A, .hex);
pub const GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x840B, .hex);
pub const GL_FRAGMENT_LIGHT0_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x840C, .hex);
pub const GL_FRAGMENT_LIGHT1_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x840D, .hex);
pub const GL_FRAGMENT_LIGHT2_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x840E, .hex);
pub const GL_FRAGMENT_LIGHT3_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x840F, .hex);
pub const GL_FRAGMENT_LIGHT4_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8410, .hex);
pub const GL_FRAGMENT_LIGHT5_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8411, .hex);
pub const GL_FRAGMENT_LIGHT6_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8412, .hex);
pub const GL_FRAGMENT_LIGHT7_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8413, .hex);
pub const GL_SGIX_framezoom = @as(c_int, 1);
pub const GL_FRAMEZOOM_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x818B, .hex);
pub const GL_FRAMEZOOM_FACTOR_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x818C, .hex);
pub const GL_MAX_FRAMEZOOM_FACTOR_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x818D, .hex);
pub const GL_SGIX_igloo_interface = @as(c_int, 1);
pub const GL_SGIX_instruments = @as(c_int, 1);
pub const GL_INSTRUMENT_BUFFER_POINTER_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8180, .hex);
pub const GL_INSTRUMENT_MEASUREMENTS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8181, .hex);
pub const GL_SGIX_interlace = @as(c_int, 1);
pub const GL_INTERLACE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8094, .hex);
pub const GL_SGIX_ir_instrument1 = @as(c_int, 1);
pub const GL_IR_INSTRUMENT1_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x817F, .hex);
pub const GL_SGIX_list_priority = @as(c_int, 1);
pub const GL_LIST_PRIORITY_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8182, .hex);
pub const GL_SGIX_pixel_texture = @as(c_int, 1);
pub const GL_PIXEL_TEX_GEN_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8139, .hex);
pub const GL_PIXEL_TEX_GEN_MODE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x832B, .hex);
pub const GL_SGIX_pixel_tiles = @as(c_int, 1);
pub const GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x813E, .hex);
pub const GL_PIXEL_TILE_CACHE_INCREMENT_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x813F, .hex);
pub const GL_PIXEL_TILE_WIDTH_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8140, .hex);
pub const GL_PIXEL_TILE_HEIGHT_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8141, .hex);
pub const GL_PIXEL_TILE_GRID_WIDTH_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8142, .hex);
pub const GL_PIXEL_TILE_GRID_HEIGHT_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8143, .hex);
pub const GL_PIXEL_TILE_GRID_DEPTH_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8144, .hex);
pub const GL_PIXEL_TILE_CACHE_SIZE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8145, .hex);
pub const GL_SGIX_polynomial_ffd = @as(c_int, 1);
pub const GL_TEXTURE_DEFORMATION_BIT_SGIX = @as(c_int, 0x00000001);
pub const GL_GEOMETRY_DEFORMATION_BIT_SGIX = @as(c_int, 0x00000002);
pub const GL_GEOMETRY_DEFORMATION_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8194, .hex);
pub const GL_TEXTURE_DEFORMATION_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8195, .hex);
pub const GL_DEFORMATIONS_MASK_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8196, .hex);
pub const GL_MAX_DEFORMATION_ORDER_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8197, .hex);
pub const GL_SGIX_reference_plane = @as(c_int, 1);
pub const GL_REFERENCE_PLANE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x817D, .hex);
pub const GL_REFERENCE_PLANE_EQUATION_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x817E, .hex);
pub const GL_SGIX_resample = @as(c_int, 1);
pub const GL_PACK_RESAMPLE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x842E, .hex);
pub const GL_UNPACK_RESAMPLE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x842F, .hex);
pub const GL_RESAMPLE_REPLICATE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8433, .hex);
pub const GL_RESAMPLE_ZERO_FILL_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8434, .hex);
pub const GL_RESAMPLE_DECIMATE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8430, .hex);
pub const GL_SGIX_scalebias_hint = @as(c_int, 1);
pub const GL_SCALEBIAS_HINT_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8322, .hex);
pub const GL_SGIX_shadow = @as(c_int, 1);
pub const GL_TEXTURE_COMPARE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x819A, .hex);
pub const GL_TEXTURE_COMPARE_OPERATOR_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x819B, .hex);
pub const GL_TEXTURE_LEQUAL_R_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x819C, .hex);
pub const GL_TEXTURE_GEQUAL_R_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x819D, .hex);
pub const GL_SGIX_shadow_ambient = @as(c_int, 1);
pub const GL_SHADOW_AMBIENT_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80BF, .hex);
pub const GL_SGIX_sprite = @as(c_int, 1);
pub const GL_SPRITE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8148, .hex);
pub const GL_SPRITE_MODE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8149, .hex);
pub const GL_SPRITE_AXIS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x814A, .hex);
pub const GL_SPRITE_TRANSLATION_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x814B, .hex);
pub const GL_SPRITE_AXIAL_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x814C, .hex);
pub const GL_SPRITE_OBJECT_ALIGNED_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x814D, .hex);
pub const GL_SPRITE_EYE_ALIGNED_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x814E, .hex);
pub const GL_SGIX_subsample = @as(c_int, 1);
pub const GL_PACK_SUBSAMPLE_RATE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85A0, .hex);
pub const GL_UNPACK_SUBSAMPLE_RATE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85A1, .hex);
pub const GL_PIXEL_SUBSAMPLE_4444_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85A2, .hex);
pub const GL_PIXEL_SUBSAMPLE_2424_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85A3, .hex);
pub const GL_PIXEL_SUBSAMPLE_4242_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85A4, .hex);
pub const GL_SGIX_tag_sample_buffer = @as(c_int, 1);
pub const GL_SGIX_texture_add_env = @as(c_int, 1);
pub const GL_TEXTURE_ENV_BIAS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80BE, .hex);
pub const GL_SGIX_texture_coordinate_clamp = @as(c_int, 1);
pub const GL_TEXTURE_MAX_CLAMP_S_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8369, .hex);
pub const GL_TEXTURE_MAX_CLAMP_T_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x836A, .hex);
pub const GL_TEXTURE_MAX_CLAMP_R_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x836B, .hex);
pub const GL_SGIX_texture_lod_bias = @as(c_int, 1);
pub const GL_TEXTURE_LOD_BIAS_S_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x818E, .hex);
pub const GL_TEXTURE_LOD_BIAS_T_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x818F, .hex);
pub const GL_TEXTURE_LOD_BIAS_R_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8190, .hex);
pub const GL_SGIX_texture_multi_buffer = @as(c_int, 1);
pub const GL_TEXTURE_MULTI_BUFFER_HINT_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x812E, .hex);
pub const GL_SGIX_texture_scale_bias = @as(c_int, 1);
pub const GL_POST_TEXTURE_FILTER_BIAS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8179, .hex);
pub const GL_POST_TEXTURE_FILTER_SCALE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x817A, .hex);
pub const GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x817B, .hex);
pub const GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x817C, .hex);
pub const GL_SGIX_vertex_preclip = @as(c_int, 1);
pub const GL_VERTEX_PRECLIP_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83EE, .hex);
pub const GL_VERTEX_PRECLIP_HINT_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83EF, .hex);
pub const GL_SGIX_ycrcb = @as(c_int, 1);
pub const GL_YCRCB_422_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81BB, .hex);
pub const GL_YCRCB_444_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81BC, .hex);
pub const GL_SGIX_ycrcb_subsample = @as(c_int, 1);
pub const GL_SGIX_ycrcba = @as(c_int, 1);
pub const GL_YCRCB_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8318, .hex);
pub const GL_YCRCBA_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8319, .hex);
pub const GL_SGI_color_matrix = @as(c_int, 1);
pub const GL_COLOR_MATRIX_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B1, .hex);
pub const GL_COLOR_MATRIX_STACK_DEPTH_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B2, .hex);
pub const GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B3, .hex);
pub const GL_POST_COLOR_MATRIX_RED_SCALE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B4, .hex);
pub const GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B5, .hex);
pub const GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B6, .hex);
pub const GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B7, .hex);
pub const GL_POST_COLOR_MATRIX_RED_BIAS_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B8, .hex);
pub const GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B9, .hex);
pub const GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80BA, .hex);
pub const GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80BB, .hex);
pub const GL_SGI_color_table = @as(c_int, 1);
pub const GL_COLOR_TABLE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D0, .hex);
pub const GL_POST_CONVOLUTION_COLOR_TABLE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D1, .hex);
pub const GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D2, .hex);
pub const GL_PROXY_COLOR_TABLE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D3, .hex);
pub const GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D4, .hex);
pub const GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D5, .hex);
pub const GL_COLOR_TABLE_SCALE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D6, .hex);
pub const GL_COLOR_TABLE_BIAS_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D7, .hex);
pub const GL_COLOR_TABLE_FORMAT_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D8, .hex);
pub const GL_COLOR_TABLE_WIDTH_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D9, .hex);
pub const GL_COLOR_TABLE_RED_SIZE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DA, .hex);
pub const GL_COLOR_TABLE_GREEN_SIZE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DB, .hex);
pub const GL_COLOR_TABLE_BLUE_SIZE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DC, .hex);
pub const GL_COLOR_TABLE_ALPHA_SIZE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DD, .hex);
pub const GL_COLOR_TABLE_LUMINANCE_SIZE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DE, .hex);
pub const GL_COLOR_TABLE_INTENSITY_SIZE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DF, .hex);
pub const GL_SGI_texture_color_table = @as(c_int, 1);
pub const GL_TEXTURE_COLOR_TABLE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80BC, .hex);
pub const GL_PROXY_TEXTURE_COLOR_TABLE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80BD, .hex);
pub const GL_SUNX_constant_data = @as(c_int, 1);
pub const GL_UNPACK_CONSTANT_DATA_SUNX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81D5, .hex);
pub const GL_TEXTURE_CONSTANT_DATA_SUNX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81D6, .hex);
pub const GL_SUN_convolution_border_modes = @as(c_int, 1);
pub const GL_WRAP_BORDER_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81D4, .hex);
pub const GL_SUN_global_alpha = @as(c_int, 1);
pub const GL_GLOBAL_ALPHA_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81D9, .hex);
pub const GL_GLOBAL_ALPHA_FACTOR_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81DA, .hex);
pub const GL_SUN_mesh_array = @as(c_int, 1);
pub const GL_QUAD_MESH_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8614, .hex);
pub const GL_TRIANGLE_MESH_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8615, .hex);
pub const GL_SUN_slice_accum = @as(c_int, 1);
pub const GL_SLICE_ACCUM_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85CC, .hex);
pub const GL_SUN_triangle_list = @as(c_int, 1);
pub const GL_RESTART_SUN = @as(c_int, 0x0001);
pub const GL_REPLACE_MIDDLE_SUN = @as(c_int, 0x0002);
pub const GL_REPLACE_OLDEST_SUN = @as(c_int, 0x0003);
pub const GL_TRIANGLE_LIST_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81D7, .hex);
pub const GL_REPLACEMENT_CODE_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81D8, .hex);
pub const GL_REPLACEMENT_CODE_ARRAY_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85C0, .hex);
pub const GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85C1, .hex);
pub const GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85C2, .hex);
pub const GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85C3, .hex);
pub const GL_R1UI_V3F_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85C4, .hex);
pub const GL_R1UI_C4UB_V3F_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85C5, .hex);
pub const GL_R1UI_C3F_V3F_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85C6, .hex);
pub const GL_R1UI_N3F_V3F_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85C7, .hex);
pub const GL_R1UI_C4F_N3F_V3F_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85C8, .hex);
pub const GL_R1UI_T2F_V3F_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85C9, .hex);
pub const GL_R1UI_T2F_N3F_V3F_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85CA, .hex);
pub const GL_R1UI_T2F_C4F_N3F_V3F_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85CB, .hex);
pub const GL_SUN_vertex = @as(c_int, 1);
pub const GL_WIN_phong_shading = @as(c_int, 1);
pub const GL_PHONG_WIN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80EA, .hex);
pub const GL_PHONG_HINT_WIN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80EB, .hex);
pub const GL_WIN_specular_fog = @as(c_int, 1);
pub const GL_FOG_SPECULAR_TEXTURE_WIN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80EC, .hex);
pub const GL_MESA_packed_depth_stencil = @as(c_int, 1);
pub const GL_DEPTH_STENCIL_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8750, .hex);
pub const GL_UNSIGNED_INT_24_8_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8751, .hex);
pub const GL_UNSIGNED_INT_8_24_REV_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8752, .hex);
pub const GL_UNSIGNED_SHORT_15_1_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8753, .hex);
pub const GL_UNSIGNED_SHORT_1_15_REV_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8754, .hex);
pub const GL_ATI_blend_equation_separate = @as(c_int, 1);
pub const GL_ALPHA_BLEND_EQUATION_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x883D, .hex);
pub const GL_OES_EGL_image = @as(c_int, 1);
pub const GLFWAPI = "";
pub const GLFW_VERSION_MAJOR = @as(c_int, 3);
pub const GLFW_VERSION_MINOR = @as(c_int, 4);
pub const GLFW_VERSION_REVISION = @as(c_int, 0);
pub const GLFW_TRUE = @as(c_int, 1);
pub const GLFW_FALSE = @as(c_int, 0);
pub const GLFW_RELEASE = @as(c_int, 0);
pub const GLFW_PRESS = @as(c_int, 1);
pub const GLFW_REPEAT = @as(c_int, 2);
pub const GLFW_HAT_CENTERED = @as(c_int, 0);
pub const GLFW_HAT_UP = @as(c_int, 1);
pub const GLFW_HAT_RIGHT = @as(c_int, 2);
pub const GLFW_HAT_DOWN = @as(c_int, 4);
pub const GLFW_HAT_LEFT = @as(c_int, 8);
pub const GLFW_HAT_RIGHT_UP = GLFW_HAT_RIGHT | GLFW_HAT_UP;
pub const GLFW_HAT_RIGHT_DOWN = GLFW_HAT_RIGHT | GLFW_HAT_DOWN;
pub const GLFW_HAT_LEFT_UP = GLFW_HAT_LEFT | GLFW_HAT_UP;
pub const GLFW_HAT_LEFT_DOWN = GLFW_HAT_LEFT | GLFW_HAT_DOWN;
pub const GLFW_KEY_UNKNOWN = -@as(c_int, 1);
pub const GLFW_KEY_SPACE = @as(c_int, 32);
pub const GLFW_KEY_APOSTROPHE = @as(c_int, 39);
pub const GLFW_KEY_COMMA = @as(c_int, 44);
pub const GLFW_KEY_MINUS = @as(c_int, 45);
pub const GLFW_KEY_PERIOD = @as(c_int, 46);
pub const GLFW_KEY_SLASH = @as(c_int, 47);
pub const GLFW_KEY_0 = @as(c_int, 48);
pub const GLFW_KEY_1 = @as(c_int, 49);
pub const GLFW_KEY_2 = @as(c_int, 50);
pub const GLFW_KEY_3 = @as(c_int, 51);
pub const GLFW_KEY_4 = @as(c_int, 52);
pub const GLFW_KEY_5 = @as(c_int, 53);
pub const GLFW_KEY_6 = @as(c_int, 54);
pub const GLFW_KEY_7 = @as(c_int, 55);
pub const GLFW_KEY_8 = @as(c_int, 56);
pub const GLFW_KEY_9 = @as(c_int, 57);
pub const GLFW_KEY_SEMICOLON = @as(c_int, 59);
pub const GLFW_KEY_EQUAL = @as(c_int, 61);
pub const GLFW_KEY_A = @as(c_int, 65);
pub const GLFW_KEY_B = @as(c_int, 66);
pub const GLFW_KEY_C = @as(c_int, 67);
pub const GLFW_KEY_D = @as(c_int, 68);
pub const GLFW_KEY_E = @as(c_int, 69);
pub const GLFW_KEY_F = @as(c_int, 70);
pub const GLFW_KEY_G = @as(c_int, 71);
pub const GLFW_KEY_H = @as(c_int, 72);
pub const GLFW_KEY_I = @as(c_int, 73);
pub const GLFW_KEY_J = @as(c_int, 74);
pub const GLFW_KEY_K = @as(c_int, 75);
pub const GLFW_KEY_L = @as(c_int, 76);
pub const GLFW_KEY_M = @as(c_int, 77);
pub const GLFW_KEY_N = @as(c_int, 78);
pub const GLFW_KEY_O = @as(c_int, 79);
pub const GLFW_KEY_P = @as(c_int, 80);
pub const GLFW_KEY_Q = @as(c_int, 81);
pub const GLFW_KEY_R = @as(c_int, 82);
pub const GLFW_KEY_S = @as(c_int, 83);
pub const GLFW_KEY_T = @as(c_int, 84);
pub const GLFW_KEY_U = @as(c_int, 85);
pub const GLFW_KEY_V = @as(c_int, 86);
pub const GLFW_KEY_W = @as(c_int, 87);
pub const GLFW_KEY_X = @as(c_int, 88);
pub const GLFW_KEY_Y = @as(c_int, 89);
pub const GLFW_KEY_Z = @as(c_int, 90);
pub const GLFW_KEY_LEFT_BRACKET = @as(c_int, 91);
pub const GLFW_KEY_BACKSLASH = @as(c_int, 92);
pub const GLFW_KEY_RIGHT_BRACKET = @as(c_int, 93);
pub const GLFW_KEY_GRAVE_ACCENT = @as(c_int, 96);
pub const GLFW_KEY_WORLD_1 = @as(c_int, 161);
pub const GLFW_KEY_WORLD_2 = @as(c_int, 162);
pub const GLFW_KEY_ESCAPE = @as(c_int, 256);
pub const GLFW_KEY_ENTER = @as(c_int, 257);
pub const GLFW_KEY_TAB = @as(c_int, 258);
pub const GLFW_KEY_BACKSPACE = @as(c_int, 259);
pub const GLFW_KEY_INSERT = @as(c_int, 260);
pub const GLFW_KEY_DELETE = @as(c_int, 261);
pub const GLFW_KEY_RIGHT = @as(c_int, 262);
pub const GLFW_KEY_LEFT = @as(c_int, 263);
pub const GLFW_KEY_DOWN = @as(c_int, 264);
pub const GLFW_KEY_UP = @as(c_int, 265);
pub const GLFW_KEY_PAGE_UP = @as(c_int, 266);
pub const GLFW_KEY_PAGE_DOWN = @as(c_int, 267);
pub const GLFW_KEY_HOME = @as(c_int, 268);
pub const GLFW_KEY_END = @as(c_int, 269);
pub const GLFW_KEY_CAPS_LOCK = @as(c_int, 280);
pub const GLFW_KEY_SCROLL_LOCK = @as(c_int, 281);
pub const GLFW_KEY_NUM_LOCK = @as(c_int, 282);
pub const GLFW_KEY_PRINT_SCREEN = @as(c_int, 283);
pub const GLFW_KEY_PAUSE = @as(c_int, 284);
pub const GLFW_KEY_F1 = @as(c_int, 290);
pub const GLFW_KEY_F2 = @as(c_int, 291);
pub const GLFW_KEY_F3 = @as(c_int, 292);
pub const GLFW_KEY_F4 = @as(c_int, 293);
pub const GLFW_KEY_F5 = @as(c_int, 294);
pub const GLFW_KEY_F6 = @as(c_int, 295);
pub const GLFW_KEY_F7 = @as(c_int, 296);
pub const GLFW_KEY_F8 = @as(c_int, 297);
pub const GLFW_KEY_F9 = @as(c_int, 298);
pub const GLFW_KEY_F10 = @as(c_int, 299);
pub const GLFW_KEY_F11 = @as(c_int, 300);
pub const GLFW_KEY_F12 = @as(c_int, 301);
pub const GLFW_KEY_F13 = @as(c_int, 302);
pub const GLFW_KEY_F14 = @as(c_int, 303);
pub const GLFW_KEY_F15 = @as(c_int, 304);
pub const GLFW_KEY_F16 = @as(c_int, 305);
pub const GLFW_KEY_F17 = @as(c_int, 306);
pub const GLFW_KEY_F18 = @as(c_int, 307);
pub const GLFW_KEY_F19 = @as(c_int, 308);
pub const GLFW_KEY_F20 = @as(c_int, 309);
pub const GLFW_KEY_F21 = @as(c_int, 310);
pub const GLFW_KEY_F22 = @as(c_int, 311);
pub const GLFW_KEY_F23 = @as(c_int, 312);
pub const GLFW_KEY_F24 = @as(c_int, 313);
pub const GLFW_KEY_F25 = @as(c_int, 314);
pub const GLFW_KEY_KP_0 = @as(c_int, 320);
pub const GLFW_KEY_KP_1 = @as(c_int, 321);
pub const GLFW_KEY_KP_2 = @as(c_int, 322);
pub const GLFW_KEY_KP_3 = @as(c_int, 323);
pub const GLFW_KEY_KP_4 = @as(c_int, 324);
pub const GLFW_KEY_KP_5 = @as(c_int, 325);
pub const GLFW_KEY_KP_6 = @as(c_int, 326);
pub const GLFW_KEY_KP_7 = @as(c_int, 327);
pub const GLFW_KEY_KP_8 = @as(c_int, 328);
pub const GLFW_KEY_KP_9 = @as(c_int, 329);
pub const GLFW_KEY_KP_DECIMAL = @as(c_int, 330);
pub const GLFW_KEY_KP_DIVIDE = @as(c_int, 331);
pub const GLFW_KEY_KP_MULTIPLY = @as(c_int, 332);
pub const GLFW_KEY_KP_SUBTRACT = @as(c_int, 333);
pub const GLFW_KEY_KP_ADD = @as(c_int, 334);
pub const GLFW_KEY_KP_ENTER = @as(c_int, 335);
pub const GLFW_KEY_KP_EQUAL = @as(c_int, 336);
pub const GLFW_KEY_LEFT_SHIFT = @as(c_int, 340);
pub const GLFW_KEY_LEFT_CONTROL = @as(c_int, 341);
pub const GLFW_KEY_LEFT_ALT = @as(c_int, 342);
pub const GLFW_KEY_LEFT_SUPER = @as(c_int, 343);
pub const GLFW_KEY_RIGHT_SHIFT = @as(c_int, 344);
pub const GLFW_KEY_RIGHT_CONTROL = @as(c_int, 345);
pub const GLFW_KEY_RIGHT_ALT = @as(c_int, 346);
pub const GLFW_KEY_RIGHT_SUPER = @as(c_int, 347);
pub const GLFW_KEY_MENU = @as(c_int, 348);
pub const GLFW_KEY_LAST = GLFW_KEY_MENU;
pub const GLFW_MOD_SHIFT = @as(c_int, 0x0001);
pub const GLFW_MOD_CONTROL = @as(c_int, 0x0002);
pub const GLFW_MOD_ALT = @as(c_int, 0x0004);
pub const GLFW_MOD_SUPER = @as(c_int, 0x0008);
pub const GLFW_MOD_CAPS_LOCK = @as(c_int, 0x0010);
pub const GLFW_MOD_NUM_LOCK = @as(c_int, 0x0020);
pub const GLFW_MOUSE_BUTTON_1 = @as(c_int, 0);
pub const GLFW_MOUSE_BUTTON_2 = @as(c_int, 1);
pub const GLFW_MOUSE_BUTTON_3 = @as(c_int, 2);
pub const GLFW_MOUSE_BUTTON_4 = @as(c_int, 3);
pub const GLFW_MOUSE_BUTTON_5 = @as(c_int, 4);
pub const GLFW_MOUSE_BUTTON_6 = @as(c_int, 5);
pub const GLFW_MOUSE_BUTTON_7 = @as(c_int, 6);
pub const GLFW_MOUSE_BUTTON_8 = @as(c_int, 7);
pub const GLFW_MOUSE_BUTTON_LAST = GLFW_MOUSE_BUTTON_8;
pub const GLFW_MOUSE_BUTTON_LEFT = GLFW_MOUSE_BUTTON_1;
pub const GLFW_MOUSE_BUTTON_RIGHT = GLFW_MOUSE_BUTTON_2;
pub const GLFW_MOUSE_BUTTON_MIDDLE = GLFW_MOUSE_BUTTON_3;
pub const GLFW_JOYSTICK_1 = @as(c_int, 0);
pub const GLFW_JOYSTICK_2 = @as(c_int, 1);
pub const GLFW_JOYSTICK_3 = @as(c_int, 2);
pub const GLFW_JOYSTICK_4 = @as(c_int, 3);
pub const GLFW_JOYSTICK_5 = @as(c_int, 4);
pub const GLFW_JOYSTICK_6 = @as(c_int, 5);
pub const GLFW_JOYSTICK_7 = @as(c_int, 6);
pub const GLFW_JOYSTICK_8 = @as(c_int, 7);
pub const GLFW_JOYSTICK_9 = @as(c_int, 8);
pub const GLFW_JOYSTICK_10 = @as(c_int, 9);
pub const GLFW_JOYSTICK_11 = @as(c_int, 10);
pub const GLFW_JOYSTICK_12 = @as(c_int, 11);
pub const GLFW_JOYSTICK_13 = @as(c_int, 12);
pub const GLFW_JOYSTICK_14 = @as(c_int, 13);
pub const GLFW_JOYSTICK_15 = @as(c_int, 14);
pub const GLFW_JOYSTICK_16 = @as(c_int, 15);
pub const GLFW_JOYSTICK_LAST = GLFW_JOYSTICK_16;
pub const GLFW_GAMEPAD_BUTTON_A = @as(c_int, 0);
pub const GLFW_GAMEPAD_BUTTON_B = @as(c_int, 1);
pub const GLFW_GAMEPAD_BUTTON_X = @as(c_int, 2);
pub const GLFW_GAMEPAD_BUTTON_Y = @as(c_int, 3);
pub const GLFW_GAMEPAD_BUTTON_LEFT_BUMPER = @as(c_int, 4);
pub const GLFW_GAMEPAD_BUTTON_RIGHT_BUMPER = @as(c_int, 5);
pub const GLFW_GAMEPAD_BUTTON_BACK = @as(c_int, 6);
pub const GLFW_GAMEPAD_BUTTON_START = @as(c_int, 7);
pub const GLFW_GAMEPAD_BUTTON_GUIDE = @as(c_int, 8);
pub const GLFW_GAMEPAD_BUTTON_LEFT_THUMB = @as(c_int, 9);
pub const GLFW_GAMEPAD_BUTTON_RIGHT_THUMB = @as(c_int, 10);
pub const GLFW_GAMEPAD_BUTTON_DPAD_UP = @as(c_int, 11);
pub const GLFW_GAMEPAD_BUTTON_DPAD_RIGHT = @as(c_int, 12);
pub const GLFW_GAMEPAD_BUTTON_DPAD_DOWN = @as(c_int, 13);
pub const GLFW_GAMEPAD_BUTTON_DPAD_LEFT = @as(c_int, 14);
pub const GLFW_GAMEPAD_BUTTON_LAST = GLFW_GAMEPAD_BUTTON_DPAD_LEFT;
pub const GLFW_GAMEPAD_BUTTON_CROSS = GLFW_GAMEPAD_BUTTON_A;
pub const GLFW_GAMEPAD_BUTTON_CIRCLE = GLFW_GAMEPAD_BUTTON_B;
pub const GLFW_GAMEPAD_BUTTON_SQUARE = GLFW_GAMEPAD_BUTTON_X;
pub const GLFW_GAMEPAD_BUTTON_TRIANGLE = GLFW_GAMEPAD_BUTTON_Y;
pub const GLFW_GAMEPAD_AXIS_LEFT_X = @as(c_int, 0);
pub const GLFW_GAMEPAD_AXIS_LEFT_Y = @as(c_int, 1);
pub const GLFW_GAMEPAD_AXIS_RIGHT_X = @as(c_int, 2);
pub const GLFW_GAMEPAD_AXIS_RIGHT_Y = @as(c_int, 3);
pub const GLFW_GAMEPAD_AXIS_LEFT_TRIGGER = @as(c_int, 4);
pub const GLFW_GAMEPAD_AXIS_RIGHT_TRIGGER = @as(c_int, 5);
pub const GLFW_GAMEPAD_AXIS_LAST = GLFW_GAMEPAD_AXIS_RIGHT_TRIGGER;
pub const GLFW_NO_ERROR = @as(c_int, 0);
pub const GLFW_NOT_INITIALIZED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010001, .hex);
pub const GLFW_NO_CURRENT_CONTEXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010002, .hex);
pub const GLFW_INVALID_ENUM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010003, .hex);
pub const GLFW_INVALID_VALUE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010004, .hex);
pub const GLFW_OUT_OF_MEMORY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010005, .hex);
pub const GLFW_API_UNAVAILABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010006, .hex);
pub const GLFW_VERSION_UNAVAILABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010007, .hex);
pub const GLFW_PLATFORM_ERROR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010008, .hex);
pub const GLFW_FORMAT_UNAVAILABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010009, .hex);
pub const GLFW_NO_WINDOW_CONTEXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0001000A, .hex);
pub const GLFW_CURSOR_UNAVAILABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0001000B, .hex);
pub const GLFW_FEATURE_UNAVAILABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0001000C, .hex);
pub const GLFW_FEATURE_UNIMPLEMENTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0001000D, .hex);
pub const GLFW_PLATFORM_UNAVAILABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0001000E, .hex);
pub const GLFW_FOCUSED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020001, .hex);
pub const GLFW_ICONIFIED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020002, .hex);
pub const GLFW_RESIZABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020003, .hex);
pub const GLFW_VISIBLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020004, .hex);
pub const GLFW_DECORATED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020005, .hex);
pub const GLFW_AUTO_ICONIFY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020006, .hex);
pub const GLFW_FLOATING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020007, .hex);
pub const GLFW_MAXIMIZED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020008, .hex);
pub const GLFW_CENTER_CURSOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020009, .hex);
pub const GLFW_TRANSPARENT_FRAMEBUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002000A, .hex);
pub const GLFW_HOVERED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002000B, .hex);
pub const GLFW_FOCUS_ON_SHOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002000C, .hex);
pub const GLFW_MOUSE_PASSTHROUGH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002000D, .hex);
pub const GLFW_POSITION_X = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002000E, .hex);
pub const GLFW_POSITION_Y = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002000F, .hex);
pub const GLFW_RED_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00021001, .hex);
pub const GLFW_GREEN_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00021002, .hex);
pub const GLFW_BLUE_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00021003, .hex);
pub const GLFW_ALPHA_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00021004, .hex);
pub const GLFW_DEPTH_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00021005, .hex);
pub const GLFW_STENCIL_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00021006, .hex);
pub const GLFW_ACCUM_RED_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00021007, .hex);
pub const GLFW_ACCUM_GREEN_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00021008, .hex);
pub const GLFW_ACCUM_BLUE_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00021009, .hex);
pub const GLFW_ACCUM_ALPHA_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002100A, .hex);
pub const GLFW_AUX_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002100B, .hex);
pub const GLFW_STEREO = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002100C, .hex);
pub const GLFW_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002100D, .hex);
pub const GLFW_SRGB_CAPABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002100E, .hex);
pub const GLFW_REFRESH_RATE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002100F, .hex);
pub const GLFW_DOUBLEBUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00021010, .hex);
pub const GLFW_CLIENT_API = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00022001, .hex);
pub const GLFW_CONTEXT_VERSION_MAJOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00022002, .hex);
pub const GLFW_CONTEXT_VERSION_MINOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00022003, .hex);
pub const GLFW_CONTEXT_REVISION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00022004, .hex);
pub const GLFW_CONTEXT_ROBUSTNESS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00022005, .hex);
pub const GLFW_OPENGL_FORWARD_COMPAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00022006, .hex);
pub const GLFW_CONTEXT_DEBUG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00022007, .hex);
pub const GLFW_OPENGL_DEBUG_CONTEXT = GLFW_CONTEXT_DEBUG;
pub const GLFW_OPENGL_PROFILE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00022008, .hex);
pub const GLFW_CONTEXT_RELEASE_BEHAVIOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00022009, .hex);
pub const GLFW_CONTEXT_NO_ERROR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002200A, .hex);
pub const GLFW_CONTEXT_CREATION_API = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002200B, .hex);
pub const GLFW_SCALE_TO_MONITOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002200C, .hex);
pub const GLFW_SCALE_FRAMEBUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002200D, .hex);
pub const GLFW_COCOA_RETINA_FRAMEBUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00023001, .hex);
pub const GLFW_COCOA_FRAME_NAME = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00023002, .hex);
pub const GLFW_COCOA_GRAPHICS_SWITCHING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00023003, .hex);
pub const GLFW_X11_CLASS_NAME = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00024001, .hex);
pub const GLFW_X11_INSTANCE_NAME = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00024002, .hex);
pub const GLFW_WIN32_KEYBOARD_MENU = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00025001, .hex);
pub const GLFW_WIN32_SHOWDEFAULT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00025002, .hex);
pub const GLFW_WAYLAND_APP_ID = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00026001, .hex);
pub const GLFW_NO_API = @as(c_int, 0);
pub const GLFW_OPENGL_API = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030001, .hex);
pub const GLFW_OPENGL_ES_API = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030002, .hex);
pub const GLFW_NO_ROBUSTNESS = @as(c_int, 0);
pub const GLFW_NO_RESET_NOTIFICATION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00031001, .hex);
pub const GLFW_LOSE_CONTEXT_ON_RESET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00031002, .hex);
pub const GLFW_OPENGL_ANY_PROFILE = @as(c_int, 0);
pub const GLFW_OPENGL_CORE_PROFILE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00032001, .hex);
pub const GLFW_OPENGL_COMPAT_PROFILE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00032002, .hex);
pub const GLFW_CURSOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00033001, .hex);
pub const GLFW_STICKY_KEYS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00033002, .hex);
pub const GLFW_STICKY_MOUSE_BUTTONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00033003, .hex);
pub const GLFW_LOCK_KEY_MODS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00033004, .hex);
pub const GLFW_RAW_MOUSE_MOTION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00033005, .hex);
pub const GLFW_CURSOR_NORMAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00034001, .hex);
pub const GLFW_CURSOR_HIDDEN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00034002, .hex);
pub const GLFW_CURSOR_DISABLED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00034003, .hex);
pub const GLFW_CURSOR_CAPTURED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00034004, .hex);
pub const GLFW_ANY_RELEASE_BEHAVIOR = @as(c_int, 0);
pub const GLFW_RELEASE_BEHAVIOR_FLUSH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00035001, .hex);
pub const GLFW_RELEASE_BEHAVIOR_NONE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00035002, .hex);
pub const GLFW_NATIVE_CONTEXT_API = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00036001, .hex);
pub const GLFW_EGL_CONTEXT_API = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00036002, .hex);
pub const GLFW_OSMESA_CONTEXT_API = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00036003, .hex);
pub const GLFW_ANGLE_PLATFORM_TYPE_NONE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00037001, .hex);
pub const GLFW_ANGLE_PLATFORM_TYPE_OPENGL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00037002, .hex);
pub const GLFW_ANGLE_PLATFORM_TYPE_OPENGLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00037003, .hex);
pub const GLFW_ANGLE_PLATFORM_TYPE_D3D9 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00037004, .hex);
pub const GLFW_ANGLE_PLATFORM_TYPE_D3D11 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00037005, .hex);
pub const GLFW_ANGLE_PLATFORM_TYPE_VULKAN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00037007, .hex);
pub const GLFW_ANGLE_PLATFORM_TYPE_METAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00037008, .hex);
pub const GLFW_WAYLAND_PREFER_LIBDECOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00038001, .hex);
pub const GLFW_WAYLAND_DISABLE_LIBDECOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00038002, .hex);
pub const GLFW_ANY_POSITION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex);
pub const GLFW_ARROW_CURSOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00036001, .hex);
pub const GLFW_IBEAM_CURSOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00036002, .hex);
pub const GLFW_CROSSHAIR_CURSOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00036003, .hex);
pub const GLFW_POINTING_HAND_CURSOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00036004, .hex);
pub const GLFW_RESIZE_EW_CURSOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00036005, .hex);
pub const GLFW_RESIZE_NS_CURSOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00036006, .hex);
pub const GLFW_RESIZE_NWSE_CURSOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00036007, .hex);
pub const GLFW_RESIZE_NESW_CURSOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00036008, .hex);
pub const GLFW_RESIZE_ALL_CURSOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00036009, .hex);
pub const GLFW_NOT_ALLOWED_CURSOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0003600A, .hex);
pub const GLFW_HRESIZE_CURSOR = GLFW_RESIZE_EW_CURSOR;
pub const GLFW_VRESIZE_CURSOR = GLFW_RESIZE_NS_CURSOR;
pub const GLFW_HAND_CURSOR = GLFW_POINTING_HAND_CURSOR;
pub const GLFW_CONNECTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040001, .hex);
pub const GLFW_DISCONNECTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040002, .hex);
pub const GLFW_JOYSTICK_HAT_BUTTONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00050001, .hex);
pub const GLFW_ANGLE_PLATFORM_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00050002, .hex);
pub const GLFW_PLATFORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00050003, .hex);
pub const GLFW_COCOA_CHDIR_RESOURCES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00051001, .hex);
pub const GLFW_COCOA_MENUBAR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00051002, .hex);
pub const GLFW_X11_XCB_VULKAN_SURFACE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00052001, .hex);
pub const GLFW_WAYLAND_LIBDECOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00053001, .hex);
pub const GLFW_ANY_PLATFORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00060000, .hex);
pub const GLFW_PLATFORM_WIN32 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00060001, .hex);
pub const GLFW_PLATFORM_COCOA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00060002, .hex);
pub const GLFW_PLATFORM_WAYLAND = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00060003, .hex);
pub const GLFW_PLATFORM_X11 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00060004, .hex);
pub const GLFW_PLATFORM_NULL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00060005, .hex);
pub const GLFW_DONT_CARE = -@as(c_int, 1);
pub const VkBuffer_T = struct_VkBuffer_T;
pub const VkImage_T = struct_VkImage_T;
pub const VkInstance_T = struct_VkInstance_T;
pub const VkPhysicalDevice_T = struct_VkPhysicalDevice_T;
pub const VkDevice_T = struct_VkDevice_T;
pub const VkQueue_T = struct_VkQueue_T;
pub const VkSemaphore_T = struct_VkSemaphore_T;
pub const VkCommandBuffer_T = struct_VkCommandBuffer_T;
pub const VkFence_T = struct_VkFence_T;
pub const VkDeviceMemory_T = struct_VkDeviceMemory_T;
pub const VkEvent_T = struct_VkEvent_T;
pub const VkQueryPool_T = struct_VkQueryPool_T;
pub const VkBufferView_T = struct_VkBufferView_T;
pub const VkImageView_T = struct_VkImageView_T;
pub const VkShaderModule_T = struct_VkShaderModule_T;
pub const VkPipelineCache_T = struct_VkPipelineCache_T;
pub const VkPipelineLayout_T = struct_VkPipelineLayout_T;
pub const VkPipeline_T = struct_VkPipeline_T;
pub const VkRenderPass_T = struct_VkRenderPass_T;
pub const VkDescriptorSetLayout_T = struct_VkDescriptorSetLayout_T;
pub const VkSampler_T = struct_VkSampler_T;
pub const VkDescriptorSet_T = struct_VkDescriptorSet_T;
pub const VkDescriptorPool_T = struct_VkDescriptorPool_T;
pub const VkFramebuffer_T = struct_VkFramebuffer_T;
pub const VkCommandPool_T = struct_VkCommandPool_T;
pub const VkSamplerYcbcrConversion_T = struct_VkSamplerYcbcrConversion_T;
pub const VkDescriptorUpdateTemplate_T = struct_VkDescriptorUpdateTemplate_T;
pub const VkPrivateDataSlot_T = struct_VkPrivateDataSlot_T;
pub const VkSurfaceKHR_T = struct_VkSurfaceKHR_T;
pub const VkSwapchainKHR_T = struct_VkSwapchainKHR_T;
pub const VkDisplayKHR_T = struct_VkDisplayKHR_T;
pub const VkDisplayModeKHR_T = struct_VkDisplayModeKHR_T;
pub const VkVideoSessionKHR_T = struct_VkVideoSessionKHR_T;
pub const VkVideoSessionParametersKHR_T = struct_VkVideoSessionParametersKHR_T;
pub const VkDeferredOperationKHR_T = struct_VkDeferredOperationKHR_T;
pub const VkPipelineBinaryKHR_T = struct_VkPipelineBinaryKHR_T;
pub const VkDebugReportCallbackEXT_T = struct_VkDebugReportCallbackEXT_T;
pub const VkCuModuleNVX_T = struct_VkCuModuleNVX_T;
pub const VkCuFunctionNVX_T = struct_VkCuFunctionNVX_T;
pub const VkDebugUtilsMessengerEXT_T = struct_VkDebugUtilsMessengerEXT_T;
pub const VkValidationCacheEXT_T = struct_VkValidationCacheEXT_T;
pub const VkAccelerationStructureNV_T = struct_VkAccelerationStructureNV_T;
pub const VkPerformanceConfigurationINTEL_T = struct_VkPerformanceConfigurationINTEL_T;
pub const VkIndirectCommandsLayoutNV_T = struct_VkIndirectCommandsLayoutNV_T;
pub const VkCudaModuleNV_T = struct_VkCudaModuleNV_T;
pub const VkCudaFunctionNV_T = struct_VkCudaFunctionNV_T;
pub const VkAccelerationStructureKHR_T = struct_VkAccelerationStructureKHR_T;
pub const VkMicromapEXT_T = struct_VkMicromapEXT_T;
pub const VkOpticalFlowSessionNV_T = struct_VkOpticalFlowSessionNV_T;
pub const VkShaderEXT_T = struct_VkShaderEXT_T;
pub const __GLsync = struct___GLsync;
pub const _cl_context = struct__cl_context;
pub const _cl_event = struct__cl_event;
