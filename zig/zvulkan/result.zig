//:______________________________________________________________________
//  zvulkan  |  Copyright (C) Ivan Mar (sOkam!)  |  GNU GPLv3 or later  :
//:______________________________________________________________________
//! @fileoverview Vulkan Result Management
//_________________________________________|
pub const result = @This();
// @deps vulkan
const c = @import("../lib/vulkan.zig");
const String = @import("./types.zig").String;

const T = c.VkResult;
pub const Result = result.T;

pub fn ok (R :result.T) !void {
  const code :result.Code= @enumFromInt(R);
  switch (code) {
    result.Code.ok                                          => {},
    result.Code.notReady                                    => return error.NotReady,
    result.Code.timeout                                     => return error.Timeout,
    result.Code.eventSet                                    => return error.EventSet,
    result.Code.eventReset                                  => return error.EventReset,
    result.Code.incomplete                                  => return error.Incomplete,
    result.Code.errorOutOfHostMemory                        => return error.ErrorOutOfHostMemory,
    result.Code.errorOutOfDeviceMemory                      => return error.ErrorOutOfDeviceMemory,
    result.Code.errorInitializationFailed                   => return error.ErrorInitializationFailed,
    result.Code.errorDeviceLost                             => return error.ErrorDeviceLost,
    result.Code.errorMemoryMapFailed                        => return error.ErrorMemoryMapFailed,
    result.Code.errorLayerNotPresent                        => return error.ErrorLayerNotPresent,
    result.Code.errorExtensionNotPresent                    => return error.ErrorExtensionNotPresent,
    result.Code.errorFeatureNotPresent                      => return error.ErrorFeatureNotPresent,
    result.Code.errorIncompatibleDriver                     => return error.ErrorIncompatibleDriver,
    result.Code.errorTooManyObjects                         => return error.ErrorTooManyObjects,
    result.Code.errorFormatNotSupported                     => return error.ErrorFormatNotSupported,
    result.Code.errorFragmentedPool                         => return error.ErrorFragmentedPool,
    result.Code.errorUnknown                                => return error.ErrorUnknown,
    result.Code.errorOutOfPoolMemory                        => return error.ErrorOutOfPoolMemory,
    result.Code.errorInvalidExternalHandle                  => return error.ErrorInvalidExternalHandle,
    result.Code.errorFragmentation                          => return error.ErrorFragmentation,
    result.Code.errorInvalidOpaqueCaptureAddress            => return error.ErrorInvalidOpaqueCaptureAddress,
    result.Code.pipelineCompileRequired                     => return error.PipelineCompileRequired,
    result.Code.errorSurfaceLost                            => return error.ErrorSurfaceLost,
    result.Code.errorNativeWindowInUse                      => return error.ErrorNativeWindowInUse,
    result.Code.suboptimal                                  => return error.Suboptimal,
    result.Code.errorOutOfDate                              => return error.ErrorOutOfDate,
    result.Code.errorIncompatibleDisplay                    => return error.ErrorIncompatibleDisplay,
    result.Code.errorValidationFailed                       => return error.ErrorValidationFailed,
    result.Code.errorInvalidShaderNV                        => return error.ErrorInvalidShaderNv,
    result.Code.errorImageUsageNotSupported                 => return error.ErrorImageUsageNotSupported,
    result.Code.errorVideoPictureLayoutNotSupported         => return error.ErrorVideoPictureLayoutNotSupported,
    result.Code.errorVideoProfileOperationNotSupported      => return error.ErrorVideoProfileOperationNotSupported,
    result.Code.errorVideoProfileFormatNotSupported         => return error.ErrorVideoProfileFormatNotSupported,
    result.Code.errorVideoProfileCodecNotSupported          => return error.ErrorVideoProfileCodecNotSupported,
    result.Code.errorVideoStdVersionNotSupported            => return error.ErrorVideoStdVersionNotSupported,
    result.Code.errorInvalidDrmFormatModifierPlaneLayout    => return error.ErrorInvalidDrmFormatModifierPlaneLayout,
    result.Code.errorNotPermitted                           => return error.ErrorNotPermitted,
    result.Code.errorFullScreenExclusiveModeLost            => return error.ErrorFullScreenExclusiveModeLost,
    result.Code.threadIdle                                  => return error.ThreadIdle,
    result.Code.threadDone                                  => return error.ThreadDone,
    result.Code.operationDeferred                           => return error.OperationDeferred,
    result.Code.operationNotDeferred                        => return error.OperationNotDeferred,
    result.Code.errorInvalidVideoStdParameters              => return error.ErrorInvalidVideoStdParameters,
    result.Code.errorCompressionExhausted                   => return error.ErrorCompressionExhausted,
    result.Code.incompatibleShaderBinary                    => return error.IncompatibleShaderBinary,
    result.Code.pipelineBinaryMissing                       => return error.PipelineBinaryMissing,
    result.Code.errorNotEnoughSpace                         => return error.ErrorNotEnoughSpace,
    else => return error.Unknown,
  }
}

pub const Code = enum(i32) {
  ok                                            = 0,
  notReady                                      = 1,
  timeout                                       = 2,
  eventSet                                      = 3,
  eventReset                                    = 4,
  incomplete                                    = 5,
  errorOutOfHostMemory                          = -1,
  errorOutOfDeviceMemory                        = -2,
  errorInitializationFailed                     = -3,
  errorDeviceLost                               = -4,
  errorMemoryMapFailed                          = -5,
  errorLayerNotPresent                          = -6,
  errorExtensionNotPresent                      = -7,
  errorFeatureNotPresent                        = -8,
  errorIncompatibleDriver                       = -9,
  errorTooManyObjects                           = -10,
  errorFormatNotSupported                       = -11,
  errorFragmentedPool                           = -12,
  errorUnknown                                  = -13,
  errorOutOfPoolMemory                          = -1000069000,
  errorInvalidExternalHandle                    = -1000072003,
  errorFragmentation                            = -1000161000,
  errorInvalidOpaqueCaptureAddress              = -1000257000,
  pipelineCompileRequired                       = 1000297000,
  errorSurfaceLost                              = -1000000000,
  errorNativeWindowInUse                        = -1000000001,
  suboptimal                                    = 1000001003,
  errorOutOfDate                                = -1000001004,
  errorIncompatibleDisplay                      = -1000003001,
  errorValidationFailed                         = -1000011001,
  errorInvalidShaderNV                          = -1000012000,
  errorImageUsageNotSupported                   = -1000023000,
  errorVideoPictureLayoutNotSupported           = -1000023001,
  errorVideoProfileOperationNotSupported        = -1000023002,
  errorVideoProfileFormatNotSupported           = -1000023003,
  errorVideoProfileCodecNotSupported            = -1000023004,
  errorVideoStdVersionNotSupported              = -1000023005,
  errorInvalidDrmFormatModifierPlaneLayout      = -1000158000,
  errorNotPermitted                             = -1000174001,
  errorFullScreenExclusiveModeLost              = -1000255000,
  threadIdle                                    = 1000268000,
  threadDone                                    = 1000268001,
  operationDeferred                             = 1000268002,
  operationNotDeferred                          = 1000268003,
  errorInvalidVideoStdParameters                = -1000299000,
  errorCompressionExhausted                     = -1000338000,
  incompatibleShaderBinary                      = 1000482000,
  pipelineBinaryMissing                         = 1000483000,
  errorNotEnoughSpace                           = -1000483000,
  _,
};
